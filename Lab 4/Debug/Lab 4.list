
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca20  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800cbe0  0800cbe0  0001cbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d26c  0800d26c  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800d26c  0800d26c  0001d26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d274  0800d274  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d278  0800d278  0001d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800d27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002354  20000288  0800d504  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025dc  0800d504  000225dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000224f0  00000000  00000000  000202fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d8b  00000000  00000000  000427eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  00047578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e9  00000000  00000000  00049318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030dbd  00000000  00000000  0004aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002577d  00000000  00000000  0007b7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122aeb  00000000  00000000  000a0f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008bd0  00000000  00000000  001c3a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001cc5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000288 	.word	0x20000288
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cbc8 	.word	0x0800cbc8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	0800cbc8 	.word	0x0800cbc8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <vApplicationGetIdleTaskMemory+0x30>)
 8000eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	200002a4 	.word	0x200002a4
 8000f04:	200002f8 	.word	0x200002f8

08000f08 <HAL_GPIO_EXTI_Callback>:
void StartTaskBtnInput(void const * argument);
void StartTaskTransmit(void const * argument);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == Button_Pin)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f18:	d102      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x18>
    {
        buttonPressed = 1;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x24>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
    }
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000844 	.word	0x20000844

08000f30 <computeStatistics>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define min(x, y) ((x) < (y) ? (x) : (y))
void computeStatistics(char* msg){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a2      	sub	sp, #136	; 0x88
 8000f34:	af10      	add	r7, sp, #64	; 0x40
 8000f36:	6078      	str	r0, [r7, #4]
	if(BSP_QSPI_Read((uint8_t*) temperatureSamples, flash_address_temperature, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <computeStatistics+0x25c>)
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	4b94      	ldr	r3, [pc, #592]	; (8001190 <computeStatistics+0x260>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b63      	cmp	r3, #99	; 0x63
 8000f42:	dc03      	bgt.n	8000f4c <computeStatistics+0x1c>
 8000f44:	4b92      	ldr	r3, [pc, #584]	; (8001190 <computeStatistics+0x260>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	e000      	b.n	8000f4e <computeStatistics+0x1e>
 8000f4c:	23c8      	movs	r3, #200	; 0xc8
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4890      	ldr	r0, [pc, #576]	; (8001194 <computeStatistics+0x264>)
 8000f52:	f001 f881 	bl	8002058 <BSP_QSPI_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <computeStatistics+0x30>
		Error_Handler();
 8000f5c:	f000 fdb8 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) pressureSamples, flash_address_pressure, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f60:	4b8d      	ldr	r3, [pc, #564]	; (8001198 <computeStatistics+0x268>)
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	4b8a      	ldr	r3, [pc, #552]	; (8001190 <computeStatistics+0x260>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b63      	cmp	r3, #99	; 0x63
 8000f6a:	dc03      	bgt.n	8000f74 <computeStatistics+0x44>
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <computeStatistics+0x260>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	e000      	b.n	8000f76 <computeStatistics+0x46>
 8000f74:	23c8      	movs	r3, #200	; 0xc8
 8000f76:	461a      	mov	r2, r3
 8000f78:	4888      	ldr	r0, [pc, #544]	; (800119c <computeStatistics+0x26c>)
 8000f7a:	f001 f86d 	bl	8002058 <BSP_QSPI_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <computeStatistics+0x58>
		Error_Handler();
 8000f84:	f000 fda4 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_x, flash_address_accelerometer_x, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f88:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <computeStatistics+0x270>)
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	4b80      	ldr	r3, [pc, #512]	; (8001190 <computeStatistics+0x260>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b63      	cmp	r3, #99	; 0x63
 8000f92:	dc03      	bgt.n	8000f9c <computeStatistics+0x6c>
 8000f94:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <computeStatistics+0x260>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	e000      	b.n	8000f9e <computeStatistics+0x6e>
 8000f9c:	23c8      	movs	r3, #200	; 0xc8
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4880      	ldr	r0, [pc, #512]	; (80011a4 <computeStatistics+0x274>)
 8000fa2:	f001 f859 	bl	8002058 <BSP_QSPI_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <computeStatistics+0x80>
		Error_Handler();
 8000fac:	f000 fd90 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_y, flash_address_accelerometer_y, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <computeStatistics+0x278>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <computeStatistics+0x260>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b63      	cmp	r3, #99	; 0x63
 8000fba:	dc03      	bgt.n	8000fc4 <computeStatistics+0x94>
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <computeStatistics+0x260>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	e000      	b.n	8000fc6 <computeStatistics+0x96>
 8000fc4:	23c8      	movs	r3, #200	; 0xc8
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4878      	ldr	r0, [pc, #480]	; (80011ac <computeStatistics+0x27c>)
 8000fca:	f001 f845 	bl	8002058 <BSP_QSPI_Read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <computeStatistics+0xa8>
		Error_Handler();
 8000fd4:	f000 fd7c 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_z, flash_address_accelerometer_z, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <computeStatistics+0x280>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <computeStatistics+0x260>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b63      	cmp	r3, #99	; 0x63
 8000fe2:	dc03      	bgt.n	8000fec <computeStatistics+0xbc>
 8000fe4:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <computeStatistics+0x260>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	e000      	b.n	8000fee <computeStatistics+0xbe>
 8000fec:	23c8      	movs	r3, #200	; 0xc8
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4870      	ldr	r0, [pc, #448]	; (80011b4 <computeStatistics+0x284>)
 8000ff2:	f001 f831 	bl	8002058 <BSP_QSPI_Read>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <computeStatistics+0xd0>
		Error_Handler();
 8000ffc:	f000 fd68 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_x, flash_address_magnetometer_x, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001000:	4b6d      	ldr	r3, [pc, #436]	; (80011b8 <computeStatistics+0x288>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b62      	ldr	r3, [pc, #392]	; (8001190 <computeStatistics+0x260>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b63      	cmp	r3, #99	; 0x63
 800100a:	dc03      	bgt.n	8001014 <computeStatistics+0xe4>
 800100c:	4b60      	ldr	r3, [pc, #384]	; (8001190 <computeStatistics+0x260>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	e000      	b.n	8001016 <computeStatistics+0xe6>
 8001014:	23c8      	movs	r3, #200	; 0xc8
 8001016:	461a      	mov	r2, r3
 8001018:	4868      	ldr	r0, [pc, #416]	; (80011bc <computeStatistics+0x28c>)
 800101a:	f001 f81d 	bl	8002058 <BSP_QSPI_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <computeStatistics+0xf8>
		Error_Handler();
 8001024:	f000 fd54 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_y, flash_address_magnetometer_y, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001028:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <computeStatistics+0x290>)
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <computeStatistics+0x260>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b63      	cmp	r3, #99	; 0x63
 8001032:	dc03      	bgt.n	800103c <computeStatistics+0x10c>
 8001034:	4b56      	ldr	r3, [pc, #344]	; (8001190 <computeStatistics+0x260>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	e000      	b.n	800103e <computeStatistics+0x10e>
 800103c:	23c8      	movs	r3, #200	; 0xc8
 800103e:	461a      	mov	r2, r3
 8001040:	4860      	ldr	r0, [pc, #384]	; (80011c4 <computeStatistics+0x294>)
 8001042:	f001 f809 	bl	8002058 <BSP_QSPI_Read>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <computeStatistics+0x120>
		Error_Handler();
 800104c:	f000 fd40 	bl	8001ad0 <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_z, flash_address_magnetometer_z, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <computeStatistics+0x298>)
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <computeStatistics+0x260>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b63      	cmp	r3, #99	; 0x63
 800105a:	dc03      	bgt.n	8001064 <computeStatistics+0x134>
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <computeStatistics+0x260>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	e000      	b.n	8001066 <computeStatistics+0x136>
 8001064:	23c8      	movs	r3, #200	; 0xc8
 8001066:	461a      	mov	r2, r3
 8001068:	4858      	ldr	r0, [pc, #352]	; (80011cc <computeStatistics+0x29c>)
 800106a:	f000 fff5 	bl	8002058 <BSP_QSPI_Read>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <computeStatistics+0x148>
		Error_Handler();
 8001074:	f000 fd2c 	bl	8001ad0 <Error_Handler>

	int avgTemp = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < min(samples, 100); i++) avgTemp += temperatureSamples[i];
 800107c:	2300      	movs	r3, #0
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
 8001080:	e00a      	b.n	8001098 <computeStatistics+0x168>
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <computeStatistics+0x264>)
 8001084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001086:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800108a:	461a      	mov	r2, r3
 800108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800108e:	4413      	add	r3, r2
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
 8001092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001094:	3301      	adds	r3, #1
 8001096:	643b      	str	r3, [r7, #64]	; 0x40
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <computeStatistics+0x260>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	bfa8      	it	ge
 80010a0:	2364      	movge	r3, #100	; 0x64
 80010a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbec      	blt.n	8001082 <computeStatistics+0x152>
	avgTemp /= min(samples, 100);
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <computeStatistics+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b64      	cmp	r3, #100	; 0x64
 80010ae:	bfa8      	it	ge
 80010b0:	2364      	movge	r3, #100	; 0x64
 80010b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44

	int avgPres = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < min(samples, 100); i++) avgPres += pressureSamples[i];
 80010be:	2300      	movs	r3, #0
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c2:	e00a      	b.n	80010da <computeStatistics+0x1aa>
 80010c4:	4a35      	ldr	r2, [pc, #212]	; (800119c <computeStatistics+0x26c>)
 80010c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80010cc:	461a      	mov	r2, r3
 80010ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d0:	4413      	add	r3, r2
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d6:	3301      	adds	r3, #1
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <computeStatistics+0x260>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	bfa8      	it	ge
 80010e2:	2364      	movge	r3, #100	; 0x64
 80010e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbec      	blt.n	80010c4 <computeStatistics+0x194>
	avgPres /= min(samples, 100);
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <computeStatistics+0x260>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	bfa8      	it	ge
 80010f2:	2364      	movge	r3, #100	; 0x64
 80010f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	int avgAccel_x = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < min(samples, 100); i++) avgAccel_x += acceleroSamples_x[i];
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
 8001104:	e00a      	b.n	800111c <computeStatistics+0x1ec>
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <computeStatistics+0x274>)
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800110e:	461a      	mov	r2, r3
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	4413      	add	r3, r2
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	3301      	adds	r3, #1
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <computeStatistics+0x260>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	bfa8      	it	ge
 8001124:	2364      	movge	r3, #100	; 0x64
 8001126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001128:	429a      	cmp	r2, r3
 800112a:	dbec      	blt.n	8001106 <computeStatistics+0x1d6>
	avgAccel_x /= min(samples, 100);
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <computeStatistics+0x260>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	bfa8      	it	ge
 8001134:	2364      	movge	r3, #100	; 0x64
 8001136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001138:	fb92 f3f3 	sdiv	r3, r2, r3
 800113c:	637b      	str	r3, [r7, #52]	; 0x34

	int avgAccel_y = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < min(samples, 100); i++) avgAccel_y += acceleroSamples_y[i];
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	e00a      	b.n	800115e <computeStatistics+0x22e>
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <computeStatistics+0x27c>)
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001150:	461a      	mov	r2, r3
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	4413      	add	r3, r2
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	3301      	adds	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <computeStatistics+0x260>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	bfa8      	it	ge
 8001166:	2364      	movge	r3, #100	; 0x64
 8001168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116a:	429a      	cmp	r2, r3
 800116c:	dbec      	blt.n	8001148 <computeStatistics+0x218>
	avgAccel_y /= min(samples, 100);
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <computeStatistics+0x260>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	bfa8      	it	ge
 8001176:	2364      	movge	r3, #100	; 0x64
 8001178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117a:	fb92 f3f3 	sdiv	r3, r2, r3
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c

	int avgAccel_z = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < min(samples, 100); i++) avgAccel_z += acceleroSamples_z[i];
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	e02d      	b.n	80011e6 <computeStatistics+0x2b6>
 800118a:	bf00      	nop
 800118c:	20000ea0 	.word	0x20000ea0
 8001190:	20000ea4 	.word	0x20000ea4
 8001194:	20000860 	.word	0x20000860
 8001198:	20000004 	.word	0x20000004
 800119c:	20000928 	.word	0x20000928
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200009f0 	.word	0x200009f0
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000ab8 	.word	0x20000ab8
 80011b0:	20000010 	.word	0x20000010
 80011b4:	20000b80 	.word	0x20000b80
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000c48 	.word	0x20000c48
 80011c0:	20000018 	.word	0x20000018
 80011c4:	20000d10 	.word	0x20000d10
 80011c8:	2000001c 	.word	0x2000001c
 80011cc:	20000dd8 	.word	0x20000dd8
 80011d0:	4a55      	ldr	r2, [pc, #340]	; (8001328 <computeStatistics+0x3f8>)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011d8:	461a      	mov	r2, r3
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	4413      	add	r3, r2
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	4b51      	ldr	r3, [pc, #324]	; (800132c <computeStatistics+0x3fc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	bfa8      	it	ge
 80011ee:	2364      	movge	r3, #100	; 0x64
 80011f0:	6a3a      	ldr	r2, [r7, #32]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbec      	blt.n	80011d0 <computeStatistics+0x2a0>
	avgAccel_z /= min(samples, 100);
 80011f6:	4b4d      	ldr	r3, [pc, #308]	; (800132c <computeStatistics+0x3fc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	bfa8      	it	ge
 80011fe:	2364      	movge	r3, #100	; 0x64
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	fb92 f3f3 	sdiv	r3, r2, r3
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

	int avgMagnet_x = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_x += magnetoSamples_x[i];
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	e00a      	b.n	8001228 <computeStatistics+0x2f8>
 8001212:	4a47      	ldr	r2, [pc, #284]	; (8001330 <computeStatistics+0x400>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800121a:	461a      	mov	r2, r3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	3301      	adds	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <computeStatistics+0x3fc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b64      	cmp	r3, #100	; 0x64
 800122e:	bfa8      	it	ge
 8001230:	2364      	movge	r3, #100	; 0x64
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbec      	blt.n	8001212 <computeStatistics+0x2e2>
	avgMagnet_x /= min(samples, 100);
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <computeStatistics+0x3fc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	bfa8      	it	ge
 8001240:	2364      	movge	r3, #100	; 0x64
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	fb92 f3f3 	sdiv	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

	int avgMagnet_y = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_y += magnetoSamples_y[i];
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e00a      	b.n	800126a <computeStatistics+0x33a>
 8001254:	4a37      	ldr	r2, [pc, #220]	; (8001334 <computeStatistics+0x404>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <computeStatistics+0x3fc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	bfa8      	it	ge
 8001272:	2364      	movge	r3, #100	; 0x64
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbec      	blt.n	8001254 <computeStatistics+0x324>
	avgMagnet_y /= min(samples, 100);
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <computeStatistics+0x3fc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	bfa8      	it	ge
 8001282:	2364      	movge	r3, #100	; 0x64
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	fb92 f3f3 	sdiv	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]

	int avgMagnet_z = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_z += magnetoSamples_z[i];
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	e00a      	b.n	80012ac <computeStatistics+0x37c>
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <computeStatistics+0x408>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <computeStatistics+0x3fc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	bfa8      	it	ge
 80012b4:	2364      	movge	r3, #100	; 0x64
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbec      	blt.n	8001296 <computeStatistics+0x366>
	avgMagnet_z /= min(samples, 100);
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <computeStatistics+0x3fc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	bfa8      	it	ge
 80012c4:	2364      	movge	r3, #100	; 0x64
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]

	sprintf(msg, "\r\nStatistics:\r\nSamples: %d\r\n\tTemperature:\r\n\t\tAverage: %d\r\n\t\tVariance: %d\r\n\r\n\tPressure:\r\n\t\tAverage: %d\r\n\t\tVariance: %d\r\n\r\n\tAccelerometer:\r\n\t\tAverage x: %d\r\n\t\tAverage y: %d\r\n\t\tAverage z: %d\r\n\t\tVariance x: %d\r\n\t\tVariance y: %d\r\n\t\tVariance z: %d\r\n\r\n\tMagnetormeter:\r\n\t\tAverage x: %d\r\n\t\tAverage y: %d\r\n\t\tAverage z: %d\r\n\t\tVariance x: %d\r\n\t\tVariance y: %d\r\n\t\tVariance z: %d\r\n\r\n", min(samples, 100), avgTemp, 0, avgPres, 0, avgAccel_x, avgAccel_y, avgAccel_z, 0, 0, 0, avgMagnet_x, avgMagnet_y, avgMagnet_z, 0, 0, 0);
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <computeStatistics+0x3fc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	bfa8      	it	ge
 80012d6:	2364      	movge	r3, #100	; 0x64
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	930e      	str	r3, [sp, #56]	; 0x38
 80012de:	2300      	movs	r3, #0
 80012e0:	930d      	str	r3, [sp, #52]	; 0x34
 80012e2:	2300      	movs	r3, #0
 80012e4:	930c      	str	r3, [sp, #48]	; 0x30
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	930a      	str	r3, [sp, #40]	; 0x28
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	9309      	str	r3, [sp, #36]	; 0x24
 80012f2:	2300      	movs	r3, #0
 80012f4:	9308      	str	r3, [sp, #32]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9307      	str	r3, [sp, #28]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9306      	str	r3, [sp, #24]
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	9305      	str	r3, [sp, #20]
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	9304      	str	r3, [sp, #16]
 8001306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001318:	4908      	ldr	r1, [pc, #32]	; (800133c <computeStatistics+0x40c>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f009 fbb8 	bl	800aa90 <siprintf>
}
 8001320:	bf00      	nop
 8001322:	3748      	adds	r7, #72	; 0x48
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000b80 	.word	0x20000b80
 800132c:	20000ea4 	.word	0x20000ea4
 8001330:	20000c48 	.word	0x20000c48
 8001334:	20000d10 	.word	0x20000d10
 8001338:	20000dd8 	.word	0x20000dd8
 800133c:	0800cbe0 	.word	0x0800cbe0

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f002 fa3d 	bl	80037c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f85b 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 f98b 	bl	8001668 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001352:	f000 f93d 	bl	80015d0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001356:	f000 f8a7 	bl	80014a8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800135a:	f000 f8e5 	bl	8001528 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
    BSP_QSPI_Init();
 800135e:	f000 fdfd 	bl	8001f5c <BSP_QSPI_Init>
    BSP_HSENSOR_Init();
 8001362:	f000 fd69 	bl	8001e38 <BSP_HSENSOR_Init>
    BSP_TSENSOR_Init();
 8001366:	f001 fa43 	bl	80027f0 <BSP_TSENSOR_Init>
    BSP_PSENSOR_Init();
 800136a:	f000 fdc9 	bl	8001f00 <BSP_PSENSOR_Init>
    BSP_ACCELERO_Init();
 800136e:	f000 fd0d 	bl	8001d8c <BSP_ACCELERO_Init>
    BSP_MAGNETO_Init();
 8001372:	f000 fd81 	bl	8001e78 <BSP_MAGNETO_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskReadSensor */
  osThreadDef(taskReadSensor, StartTaskReadSensor, osPriorityNormal, 0, 256);
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <main+0xac>)
 8001378:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskReadSensorHandle = osThreadCreate(osThread(taskReadSensor), NULL);
 800138a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f007 fb5a 	bl	8008a4a <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <main+0xb0>)
 800139a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskBtnInput */
  osThreadDef(taskBtnInput, StartTaskBtnInput, osPriorityNormal, 0, 256);
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <main+0xb4>)
 800139e:	f107 0420 	add.w	r4, r7, #32
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskBtnInputHandle = osThreadCreate(osThread(taskBtnInput), NULL);
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fb47 	bl	8008a4a <osThreadCreate>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <main+0xb8>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskTransmit */
  osThreadDef(taskTransmit, StartTaskTransmit, osPriorityNormal, 0, 256);
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <main+0xbc>)
 80013c4:	1d3c      	adds	r4, r7, #4
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskTransmitHandle = osThreadCreate(osThread(taskTransmit), NULL);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 fb36 	bl	8008a4a <osThreadCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <main+0xc0>)
 80013e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013e4:	f007 fb2a 	bl	8008a3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 80013e8:	e7fe      	b.n	80013e8 <main+0xa8>
 80013ea:	bf00      	nop
 80013ec:	0800cd64 	.word	0x0800cd64
 80013f0:	20000830 	.word	0x20000830
 80013f4:	0800cd90 	.word	0x0800cd90
 80013f8:	20000834 	.word	0x20000834
 80013fc:	0800cdbc 	.word	0x0800cdbc
 8001400:	20000838 	.word	0x20000838

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f009 fb9f 	bl	800ab56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001426:	2000      	movs	r0, #0
 8001428:	f004 fc7e 	bl	8005d28 <HAL_PWREx_ControlVoltageScaling>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001432:	f000 fb4d 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001436:	2310      	movs	r3, #16
 8001438:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800144a:	2301      	movs	r3, #1
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001452:	233c      	movs	r3, #60	; 0x3c
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fd02 	bl	8005e70 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001472:	f000 fb2d 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2105      	movs	r1, #5
 800148e:	4618      	mov	r0, r3
 8001490:	f005 f908 	bl	80066a4 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800149a:	f000 fb19 	bl	8001ad0 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3758      	adds	r7, #88	; 0x58
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_I2C2_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_I2C2_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_I2C2_Init+0x74>)
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <MX_I2C2_Init+0x7c>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_I2C2_Init+0x74>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	; (800151c <MX_I2C2_Init+0x74>)
 80014e4:	f002 fd3c 	bl	8003f60 <HAL_I2C_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ee:	f000 faef 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <MX_I2C2_Init+0x74>)
 80014f6:	f003 fae3 	bl	8004ac0 <HAL_I2CEx_ConfigAnalogFilter>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001500:	f000 fae6 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_I2C2_Init+0x74>)
 8001508:	f003 fb25 	bl	8004b56 <HAL_I2CEx_ConfigDigitalFilter>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fadd 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200006f8 	.word	0x200006f8
 8001520:	40005800 	.word	0x40005800
 8001524:	307075b1 	.word	0x307075b1

08001528 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_OCTOSPI1_Init+0xa4>)
 8001540:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001544:	2201      	movs	r2, #1
 8001546:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001556:	2220      	movs	r2, #32
 8001558:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800155c:	2201      	movs	r2, #1
 800155e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800156e:	2201      	movs	r2, #1
 8001570:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001586:	2208      	movs	r2, #8
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800158c:	f003 fb30 	bl	8004bf0 <HAL_OSPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 fa9b 	bl	8001ad0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80015a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015a6:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 80015b2:	f003 fe1b 	bl	80051ec <HAL_OSPIM_Config>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 80015bc:	f000 fa88 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000074c 	.word	0x2000074c
 80015cc:	a0001000 	.word	0xa0001000

080015d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <MX_USART1_UART_Init+0x94>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800161a:	f006 faff 	bl	8007c1c <HAL_UART_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001624:	f000 fa54 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800162c:	f007 f924 	bl	8008878 <HAL_UARTEx_SetTxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001636:	f000 fa4b 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800163e:	f007 f959 	bl	80088f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001648:	f000 fa42 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800164e:	f007 f8da 	bl	8008806 <HAL_UARTEx_DisableFifoMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001658:	f000 fa3a 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000079c 	.word	0x2000079c
 8001664:	40013800 	.word	0x40013800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <MX_GPIO_Init+0xd0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a27      	ldr	r2, [pc, #156]	; (8001738 <MX_GPIO_Init+0xd0>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2108      	movs	r1, #8
 80016e2:	4816      	ldr	r0, [pc, #88]	; (800173c <MX_GPIO_Init+0xd4>)
 80016e4:	f002 fc0c 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDError_Pin */
  GPIO_InitStruct.Pin = LEDError_Pin;
 80016e8:	2308      	movs	r3, #8
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDError_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <MX_GPIO_Init+0xd4>)
 8001700:	f002 f97a 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_GPIO_Init+0xd8>)
 800171c:	f002 f96c 	bl	80039f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2105      	movs	r1, #5
 8001724:	2028      	movs	r0, #40	; 0x28
 8001726:	f002 f93d 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172a:	2028      	movs	r0, #40	; 0x28
 800172c:	f002 f956 	bl	80039dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	48001000 	.word	0x48001000
 8001740:	48000800 	.word	0x48000800

08001744 <StartTaskReadSensor>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReadSensor */
void StartTaskReadSensor(void const * argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 800174c:	2064      	movs	r0, #100	; 0x64
 800174e:	f007 f9c8 	bl	8008ae2 <osDelay>

        if(samples == 0){
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <StartTaskReadSensor+0x19c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d113      	bne.n	8001782 <StartTaskReadSensor+0x3e>
        	if (BSP_QSPI_Erase_Block(flash_address_temperature) != QSPI_OK)
 800175a:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <StartTaskReadSensor+0x1a0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fd52 	bl	8002208 <BSP_QSPI_Erase_Block>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <StartTaskReadSensor+0x2a>
				Error_Handler();
 800176a:	f000 f9b1 	bl	8001ad0 <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_accelerometer_z) != QSPI_OK)
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <StartTaskReadSensor+0x1a4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fd48 	bl	8002208 <BSP_QSPI_Erase_Block>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <StartTaskReadSensor+0x3e>
				Error_Handler();
 800177e:	f000 f9a7 	bl	8001ad0 <Error_Handler>
        }

        if(currentSensor == 4) continue;
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <StartTaskReadSensor+0x1a8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	f000 80a8 	beq.w	80018dc <StartTaskReadSensor+0x198>

        temperature = BSP_TSENSOR_ReadTemp();
 800178c:	f001 f84c 	bl	8002828 <BSP_TSENSOR_ReadTemp>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <StartTaskReadSensor+0x1ac>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
        pressure = BSP_PSENSOR_ReadPressure();
 800179a:	f000 fbd1 	bl	8001f40 <BSP_PSENSOR_ReadPressure>
 800179e:	eef0 7a40 	vmov.f32	s15, s0
 80017a2:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <StartTaskReadSensor+0x1b0>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
        BSP_ACCELERO_AccGetXYZ(acceleroData);
 80017a8:	4853      	ldr	r0, [pc, #332]	; (80018f8 <StartTaskReadSensor+0x1b4>)
 80017aa:	f000 fb2d 	bl	8001e08 <BSP_ACCELERO_AccGetXYZ>
        BSP_MAGNETO_GetXYZ(magnetoData);
 80017ae:	4853      	ldr	r0, [pc, #332]	; (80018fc <StartTaskReadSensor+0x1b8>)
 80017b0:	f000 fb8e 	bl	8001ed0 <BSP_MAGNETO_GetXYZ>


        //=======Part 4==========

        // write
        uint32_t offset = samples * sizeof(int16_t);
 80017b4:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <StartTaskReadSensor+0x19c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]

        int16_t temperature_int = (int16_t) (temperature);
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <StartTaskReadSensor+0x1ac>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c6:	ee17 3a90 	vmov	r3, s15
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	817b      	strh	r3, [r7, #10]
        if (BSP_QSPI_Write((uint8_t*) &temperature_int, flash_address_temperature + offset, sizeof(int16_t)) != QSPI_OK)
 80017ce:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <StartTaskReadSensor+0x1a0>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	18d1      	adds	r1, r2, r3
 80017d6:	f107 030a 	add.w	r3, r7, #10
 80017da:	2202      	movs	r2, #2
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fc8d 	bl	80020fc <BSP_QSPI_Write>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <StartTaskReadSensor+0xa8>
            Error_Handler();
 80017e8:	f000 f972 	bl	8001ad0 <Error_Handler>

        int16_t pressure_int = (int16_t) (pressure);
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <StartTaskReadSensor+0x1b0>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	813b      	strh	r3, [r7, #8]
		if (BSP_QSPI_Write((uint8_t*) &pressure_int, flash_address_pressure + offset, sizeof(int16_t)) != QSPI_OK)
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <StartTaskReadSensor+0x1bc>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	18d1      	adds	r1, r2, r3
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	2202      	movs	r2, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fc75 	bl	80020fc <BSP_QSPI_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <StartTaskReadSensor+0xd8>
			Error_Handler();
 8001818:	f000 f95a 	bl	8001ad0 <Error_Handler>

		if (BSP_QSPI_Write((uint8_t*) &acceleroData[0], flash_address_accelerometer_x + offset, sizeof(int16_t)) != QSPI_OK)
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <StartTaskReadSensor+0x1c0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	2202      	movs	r2, #2
 8001826:	4619      	mov	r1, r3
 8001828:	4833      	ldr	r0, [pc, #204]	; (80018f8 <StartTaskReadSensor+0x1b4>)
 800182a:	f000 fc67 	bl	80020fc <BSP_QSPI_Write>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <StartTaskReadSensor+0xf4>
			Error_Handler();
 8001834:	f000 f94c 	bl	8001ad0 <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &acceleroData[1], flash_address_accelerometer_y + offset, sizeof(int16_t)) != QSPI_OK)
 8001838:	4b33      	ldr	r3, [pc, #204]	; (8001908 <StartTaskReadSensor+0x1c4>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	2202      	movs	r2, #2
 8001842:	4619      	mov	r1, r3
 8001844:	4831      	ldr	r0, [pc, #196]	; (800190c <StartTaskReadSensor+0x1c8>)
 8001846:	f000 fc59 	bl	80020fc <BSP_QSPI_Write>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <StartTaskReadSensor+0x110>
			Error_Handler();
 8001850:	f000 f93e 	bl	8001ad0 <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &acceleroData[2], flash_address_accelerometer_z + offset, sizeof(int16_t)) != QSPI_OK)
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <StartTaskReadSensor+0x1a4>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	2202      	movs	r2, #2
 800185e:	4619      	mov	r1, r3
 8001860:	482b      	ldr	r0, [pc, #172]	; (8001910 <StartTaskReadSensor+0x1cc>)
 8001862:	f000 fc4b 	bl	80020fc <BSP_QSPI_Write>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <StartTaskReadSensor+0x12c>
			Error_Handler();
 800186c:	f000 f930 	bl	8001ad0 <Error_Handler>

		if (BSP_QSPI_Write((uint8_t*) &magnetoData[0], flash_address_magnetometer_x + offset, sizeof(int16_t)) != QSPI_OK)
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <StartTaskReadSensor+0x1d0>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	2202      	movs	r2, #2
 800187a:	4619      	mov	r1, r3
 800187c:	481f      	ldr	r0, [pc, #124]	; (80018fc <StartTaskReadSensor+0x1b8>)
 800187e:	f000 fc3d 	bl	80020fc <BSP_QSPI_Write>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <StartTaskReadSensor+0x148>
			Error_Handler();
 8001888:	f000 f922 	bl	8001ad0 <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &magnetoData[1], flash_address_magnetometer_y + offset, sizeof(int16_t)) != QSPI_OK)
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <StartTaskReadSensor+0x1d4>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	2202      	movs	r2, #2
 8001896:	4619      	mov	r1, r3
 8001898:	4820      	ldr	r0, [pc, #128]	; (800191c <StartTaskReadSensor+0x1d8>)
 800189a:	f000 fc2f 	bl	80020fc <BSP_QSPI_Write>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <StartTaskReadSensor+0x164>
			Error_Handler();
 80018a4:	f000 f914 	bl	8001ad0 <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &magnetoData[2], flash_address_magnetometer_z + offset, sizeof(int16_t)) != QSPI_OK)
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <StartTaskReadSensor+0x1dc>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	2202      	movs	r2, #2
 80018b2:	4619      	mov	r1, r3
 80018b4:	481b      	ldr	r0, [pc, #108]	; (8001924 <StartTaskReadSensor+0x1e0>)
 80018b6:	f000 fc21 	bl	80020fc <BSP_QSPI_Write>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <StartTaskReadSensor+0x180>
			Error_Handler();
 80018c0:	f000 f906 	bl	8001ad0 <Error_Handler>


        if(samples < 499)
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <StartTaskReadSensor+0x19c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80018cc:	f73f af3e 	bgt.w	800174c <StartTaskReadSensor+0x8>
        	samples++;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <StartTaskReadSensor+0x19c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <StartTaskReadSensor+0x19c>)
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e737      	b.n	800174c <StartTaskReadSensor+0x8>
        if(currentSensor == 4) continue;
 80018dc:	bf00      	nop
    {
 80018de:	e735      	b.n	800174c <StartTaskReadSensor+0x8>
 80018e0:	20000ea4 	.word	0x20000ea4
 80018e4:	20000ea0 	.word	0x20000ea0
 80018e8:	20000010 	.word	0x20000010
 80018ec:	2000083c 	.word	0x2000083c
 80018f0:	20000848 	.word	0x20000848
 80018f4:	2000084c 	.word	0x2000084c
 80018f8:	20000850 	.word	0x20000850
 80018fc:	20000858 	.word	0x20000858
 8001900:	20000004 	.word	0x20000004
 8001904:	20000008 	.word	0x20000008
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000852 	.word	0x20000852
 8001910:	20000854 	.word	0x20000854
 8001914:	20000014 	.word	0x20000014
 8001918:	20000018 	.word	0x20000018
 800191c:	2000085a 	.word	0x2000085a
 8001920:	2000001c 	.word	0x2000001c
 8001924:	2000085c 	.word	0x2000085c

08001928 <StartTaskBtnInput>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskBtnInput */
void StartTaskBtnInput(void const * argument)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBtnInput */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 8001930:	2064      	movs	r0, #100	; 0x64
 8001932:	f007 f8d6 	bl	8008ae2 <osDelay>
        // task that determines when the button has been pressed,
        // and changes the mode of the application to output data
        // from the next sensor in the sequence;
        if (buttonPressed == 1)
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <StartTaskBtnInput+0x4c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d1f8      	bne.n	8001930 <StartTaskBtnInput+0x8>
        {
            currentSensor = (currentSensor + 1) % numSensors; // Increment the currentSensor variable and wrap around
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <StartTaskBtnInput+0x50>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <StartTaskBtnInput+0x54>)
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fb93 f1f2 	sdiv	r1, r3, r2
 800194c:	fb01 f202 	mul.w	r2, r1, r2
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <StartTaskBtnInput+0x50>)
 8001954:	6013      	str	r3, [r2, #0]
            buttonPressed = 0;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <StartTaskBtnInput+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

            if(currentSensor == 0){
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <StartTaskBtnInput+0x50>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e5      	bne.n	8001930 <StartTaskBtnInput+0x8>
				samples = 0;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <StartTaskBtnInput+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
				statsPrinted = 0;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <StartTaskBtnInput+0x5c>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
        osDelay(100);
 8001970:	e7de      	b.n	8001930 <StartTaskBtnInput+0x8>
 8001972:	bf00      	nop
 8001974:	20000844 	.word	0x20000844
 8001978:	2000083c 	.word	0x2000083c
 800197c:	20000000 	.word	0x20000000
 8001980:	20000ea4 	.word	0x20000ea4
 8001984:	20000840 	.word	0x20000840

08001988 <StartTaskTransmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskTransmit */
void StartTaskTransmit(void const * argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTransmit */
    /* Infinite loop */
    for (;;)
    {
        osDelay(500);
 8001990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001994:	f007 f8a5 	bl	8008ae2 <osDelay>
        //    ======Part 2==========
        // task that transmits this data to the terminal using the virtual com port UART;
        // and,
        char *msg = calloc(1, sizeof(char) * 1000);
 8001998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800199c:	2001      	movs	r0, #1
 800199e:	f008 fa85 	bl	8009eac <calloc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	60fb      	str	r3, [r7, #12]
        switch (currentSensor)
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <StartTaskTransmit+0xf4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d853      	bhi.n	8001a56 <StartTaskTransmit+0xce>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <StartTaskTransmit+0x2c>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c9 	.word	0x080019c9
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	080019f9 	.word	0x080019f9
 80019c0:	08001a1d 	.word	0x08001a1d
 80019c4:	08001a41 	.word	0x08001a41
        {
        case 0:
            sprintf(msg, "The Temperature is: %d\r\n", (int)temperature);
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <StartTaskTransmit+0xf8>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 2a90 	vmov	r2, s15
 80019d6:	492b      	ldr	r1, [pc, #172]	; (8001a84 <StartTaskTransmit+0xfc>)
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f009 f859 	bl	800aa90 <siprintf>
            break;
 80019de:	e040      	b.n	8001a62 <StartTaskTransmit+0xda>
        case 1:
            sprintf(msg, "The Pressure is: %d\r\n", (int)pressure);
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <StartTaskTransmit+0x100>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ea:	ee17 2a90 	vmov	r2, s15
 80019ee:	4927      	ldr	r1, [pc, #156]	; (8001a8c <StartTaskTransmit+0x104>)
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f009 f84d 	bl	800aa90 <siprintf>
            break;
 80019f6:	e034      	b.n	8001a62 <StartTaskTransmit+0xda>
        case 2:
            sprintf(msg, "The Accelerometer values are: X: %d, Y: %d, Z: %d\r\n", acceleroData[0], acceleroData[1], acceleroData[2]);
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <StartTaskTransmit+0x108>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <StartTaskTransmit+0x108>)
 8001a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <StartTaskTransmit+0x108>)
 8001a0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	4920      	ldr	r1, [pc, #128]	; (8001a94 <StartTaskTransmit+0x10c>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f009 f83b 	bl	800aa90 <siprintf>
            break;
 8001a1a:	e022      	b.n	8001a62 <StartTaskTransmit+0xda>
        case 3:
            sprintf(msg, "The Magnetometer values are: X: %d, Y: %d, Z: %d\r\n", magnetoData[0], magnetoData[1], magnetoData[2]);
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <StartTaskTransmit+0x110>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <StartTaskTransmit+0x110>)
 8001a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <StartTaskTransmit+0x110>)
 8001a2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	460b      	mov	r3, r1
 8001a36:	4919      	ldr	r1, [pc, #100]	; (8001a9c <StartTaskTransmit+0x114>)
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f009 f829 	bl	800aa90 <siprintf>
            break;
 8001a3e:	e010      	b.n	8001a62 <StartTaskTransmit+0xda>
        // ======== PART 4 BEGIN ========
        case 4:
        	if(!statsPrinted){
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <StartTaskTransmit+0x118>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10b      	bne.n	8001a60 <StartTaskTransmit+0xd8>
				computeStatistics(msg);
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff fa71 	bl	8000f30 <computeStatistics>
				statsPrinted = 1;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <StartTaskTransmit+0x118>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
        	}
        	break;
 8001a54:	e004      	b.n	8001a60 <StartTaskTransmit+0xd8>
		// ========= PART 4 END =========
        default:
            sprintf(msg, "Wrong sensor");
 8001a56:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <StartTaskTransmit+0x11c>)
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f009 f819 	bl	800aa90 <siprintf>
 8001a5e:	e000      	b.n	8001a62 <StartTaskTransmit+0xda>
        	break;
 8001a60:	bf00      	nop
        }

        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7fe fc1c 	bl	80002a0 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <StartTaskTransmit+0x120>)
 8001a74:	f006 f922 	bl	8007cbc <HAL_UART_Transmit>
    {
 8001a78:	e78a      	b.n	8001990 <StartTaskTransmit+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	2000083c 	.word	0x2000083c
 8001a80:	20000848 	.word	0x20000848
 8001a84:	0800cdd8 	.word	0x0800cdd8
 8001a88:	2000084c 	.word	0x2000084c
 8001a8c:	0800cdf4 	.word	0x0800cdf4
 8001a90:	20000850 	.word	0x20000850
 8001a94:	0800ce0c 	.word	0x0800ce0c
 8001a98:	20000858 	.word	0x20000858
 8001a9c:	0800ce40 	.word	0x0800ce40
 8001aa0:	20000840 	.word	0x20000840
 8001aa4:	0800ce74 	.word	0x0800ce74
 8001aa8:	2000079c 	.word	0x2000079c

08001aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001abe:	f001 fe99 	bl	80037f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40001000 	.word	0x40001000

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
        HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2108      	movs	r1, #8
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <Error_Handler+0x18>)
 8001ade:	f002 fa0f 	bl	8003f00 <HAL_GPIO_WritePin>
        __BKPT();
 8001ae2:	be00      	bkpt	0x0000
        HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 8001ae4:	e7f8      	b.n	8001ad8 <Error_Handler+0x8>
 8001ae6:	bf00      	nop
 8001ae8:	48001000 	.word	0x48001000

08001aec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b12:	2312      	movs	r3, #18
 8001b14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	481b      	ldr	r0, [pc, #108]	; (8001b98 <I2Cx_MspInit+0xac>)
 8001b2a:	f001 ff65 	bl	80039f8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4818      	ldr	r0, [pc, #96]	; (8001b98 <I2Cx_MspInit+0xac>)
 8001b36:	f001 ff5f 	bl	80039f8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <I2Cx_MspInit+0xa8>)
 8001b64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b68:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	2021      	movs	r0, #33	; 0x21
 8001b70:	f001 ff18 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b74:	2021      	movs	r0, #33	; 0x21
 8001b76:	f001 ff31 	bl	80039dc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	2022      	movs	r0, #34	; 0x22
 8001b80:	f001 ff10 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001b84:	2022      	movs	r0, #34	; 0x22
 8001b86:	f001 ff29 	bl	80039dc <HAL_NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000400 	.word	0x48000400

08001b9c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <I2Cx_Init+0x54>)
 8001ba8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <I2Cx_Init+0x58>)
 8001bae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff89 	bl	8001aec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f002 f9c0 	bl	8003f60 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f002 ff6c 	bl	8004ac0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005800 	.word	0x40005800
 8001bf4:	00702681 	.word	0x00702681

08001bf8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	72fb      	strb	r3, [r7, #11]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	813b      	strh	r3, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	88f8      	ldrh	r0, [r7, #6]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f002 fb74 	bl	800431c <HAL_I2C_Mem_Read>
 8001c34:	4603      	mov	r3, r0
 8001c36:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	4619      	mov	r1, r3
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f832 	bl	8001cac <I2Cx_Error>
  }
  return status;
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af04      	add	r7, sp, #16
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	4608      	mov	r0, r1
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	460b      	mov	r3, r1
 8001c66:	813b      	strh	r3, [r7, #8]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	b299      	uxth	r1, r3
 8001c74:	88f8      	ldrh	r0, [r7, #6]
 8001c76:	893a      	ldrh	r2, [r7, #8]
 8001c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4603      	mov	r3, r0
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f002 fa33 	bl	80040f4 <HAL_I2C_Mem_Write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f805 	bl	8001cac <I2Cx_Error>
  }
  return status;
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f002 f9ec 	bl	8004096 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff6c 	bl	8001b9c <I2Cx_Init>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <SENSOR_IO_Init+0x10>)
 8001cd2:	f7ff ff63 	bl	8001b9c <I2Cx_Init>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000ea8 	.word	0x20000ea8

08001ce0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	460b      	mov	r3, r1
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	79f9      	ldrb	r1, [r7, #7]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	1d7b      	adds	r3, r7, #5
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <SENSOR_IO_Write+0x30>)
 8001d04:	f7ff ffa5 	bl	8001c52 <I2Cx_WriteMultiple>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000ea8 	.word	0x20000ea8

08001d14 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	79f9      	ldrb	r1, [r7, #7]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 030f 	add.w	r3, r7, #15
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4804      	ldr	r0, [pc, #16]	; (8001d4c <SENSOR_IO_Read+0x38>)
 8001d3c:	f7ff ff5c 	bl	8001bf8 <I2Cx_ReadMultiple>

  return read_value;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000ea8 	.word	0x20000ea8

08001d50 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	603a      	str	r2, [r7, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	79f9      	ldrb	r1, [r7, #7]
 8001d6c:	88bb      	ldrh	r3, [r7, #4]
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	4804      	ldr	r0, [pc, #16]	; (8001d88 <SENSOR_IO_ReadMultiple+0x38>)
 8001d78:	f7ff ff3e 	bl	8001bf8 <I2Cx_ReadMultiple>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	b29b      	uxth	r3, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000ea8 	.word	0x20000ea8

08001d8c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001d96:	2300      	movs	r3, #0
 8001d98:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <BSP_ACCELERO_Init+0x74>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4798      	blx	r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b6a      	cmp	r3, #106	; 0x6a
 8001da4:	d002      	beq.n	8001dac <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e024      	b.n	8001df6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <BSP_ACCELERO_Init+0x78>)
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <BSP_ACCELERO_Init+0x74>)
 8001db0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001db2:	2330      	movs	r3, #48	; 0x30
 8001db4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001dbe:	2340      	movs	r3, #64	; 0x40
 8001dc0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001dca:	797a      	ldrb	r2, [r7, #5]
 8001dcc:	7abb      	ldrb	r3, [r7, #10]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001dd4:	7a3b      	ldrb	r3, [r7, #8]
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <BSP_ACCELERO_Init+0x78>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	89ba      	ldrh	r2, [r7, #12]
 8001df2:	4610      	mov	r0, r2
 8001df4:	4798      	blx	r3
  }  

  return ret;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000080 	.word	0x20000080
 8001e04:	20000efc 	.word	0x20000efc

08001e08 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000efc 	.word	0x20000efc

08001e38 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <BSP_HSENSOR_Init+0x38>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	20be      	movs	r0, #190	; 0xbe
 8001e44:	4798      	blx	r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	2bbc      	cmp	r3, #188	; 0xbc
 8001e4a:	d002      	beq.n	8001e52 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e009      	b.n	8001e66 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <BSP_HSENSOR_Init+0x3c>)
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <BSP_HSENSOR_Init+0x38>)
 8001e56:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <BSP_HSENSOR_Init+0x3c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	20be      	movs	r0, #190	; 0xbe
 8001e60:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000024 	.word	0x20000024
 8001e74:	20000f00 	.word	0x20000f00

08001e78 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <BSP_MAGNETO_Init+0x50>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4798      	blx	r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b3d      	cmp	r3, #61	; 0x3d
 8001e8c:	d002      	beq.n	8001e94 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	e013      	b.n	8001ebc <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <BSP_MAGNETO_Init+0x54>)
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <BSP_MAGNETO_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001e9a:	2358      	movs	r3, #88	; 0x58
 8001e9c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001eaa:	2340      	movs	r3, #64	; 0x40
 8001eac:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <BSP_MAGNETO_Init+0x54>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	463a      	mov	r2, r7
 8001eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eba:	4798      	blx	r3
  } 

  return ret;  
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000040 	.word	0x20000040
 8001ecc:	20000f04 	.word	0x20000f04

08001ed0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <BSP_MAGNETO_GetXYZ+0x2c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <BSP_MAGNETO_GetXYZ+0x2c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <BSP_MAGNETO_GetXYZ+0x2c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000f04 	.word	0x20000f04

08001f00 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <BSP_PSENSOR_Init+0x38>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	20ba      	movs	r0, #186	; 0xba
 8001f0c:	4798      	blx	r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2bb1      	cmp	r3, #177	; 0xb1
 8001f12:	d002      	beq.n	8001f1a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	e009      	b.n	8001f2e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <BSP_PSENSOR_Init+0x3c>)
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <BSP_PSENSOR_Init+0x38>)
 8001f1e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <BSP_PSENSOR_Init+0x3c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	20ba      	movs	r0, #186	; 0xba
 8001f28:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000074 	.word	0x20000074
 8001f3c:	20000f08 	.word	0x20000f08

08001f40 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <BSP_PSENSOR_ReadPressure+0x18>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	20ba      	movs	r0, #186	; 0xba
 8001f4c:	4798      	blx	r3
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000f08 	.word	0x20000f08

08001f5c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <BSP_QSPI_Init+0xf8>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8001f68:	4839      	ldr	r0, [pc, #228]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001f6a:	f002 feeb 	bl	8004d44 <HAL_OSPI_DeInit>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e067      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001f78:	f000 f990 	bl	800229c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f94:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fb8:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8001fec:	4818      	ldr	r0, [pc, #96]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001fee:	f002 fdff 	bl	8004bf0 <HAL_OSPI_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e025      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8001ffe:	f000 f98d 	bl	800231c <QSPI_ResetMemory>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002008:	2304      	movs	r3, #4
 800200a:	e01d      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800200c:	2101      	movs	r1, #1
 800200e:	4810      	ldr	r0, [pc, #64]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8002010:	f000 fa72 	bl	80024f8 <QSPI_QuadMode>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e014      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800201e:	2101      	movs	r1, #1
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8002022:	f000 fb15 	bl	8002650 <QSPI_HighPerfMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00b      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8002032:	2202      	movs	r2, #2
 8002034:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <BSP_QSPI_Init+0xf4>)
 8002038:	f002 fdda 	bl	8004bf0 <HAL_OSPI_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000f0c 	.word	0x20000f0c
 8002054:	a0001000 	.word	0xa0001000

08002058 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b098      	sub	sp, #96	; 0x60
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800206c:	23eb      	movs	r3, #235	; 0xeb
 800206e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8002070:	2301      	movs	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8002080:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002090:	23aa      	movs	r3, #170	; 0xaa
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8002094:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800209a:	2300      	movs	r3, #0
 800209c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80020a2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80020b0:	2304      	movs	r3, #4
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80020b8:	2300      	movs	r3, #0
 80020ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4619      	mov	r1, r3
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <BSP_QSPI_Read+0xa0>)
 80020c8:	f002 fe63 	bl	8004d92 <HAL_OSPI_Command>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00b      	b.n	80020ee <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	4806      	ldr	r0, [pc, #24]	; (80020f8 <BSP_QSPI_Read+0xa0>)
 80020de:	f002 ff4c 	bl	8004f7a <HAL_OSPI_Receive>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3760      	adds	r7, #96	; 0x60
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000f0c 	.word	0x20000f0c

080020fc <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09c      	sub	sp, #112	; 0x70
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002110:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	d901      	bls.n	800211e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8002132:	2338      	movs	r3, #56	; 0x38
 8002134:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002136:	2301      	movs	r3, #1
 8002138:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8002142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8002148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8002156:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800215a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800216c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8002174:	4823      	ldr	r0, [pc, #140]	; (8002204 <BSP_QSPI_Write+0x108>)
 8002176:	f000 f918 	bl	80023aa <QSPI_WriteEnable>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e03b      	b.n	80021fc <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4619      	mov	r1, r3
 800218e:	481d      	ldr	r0, [pc, #116]	; (8002204 <BSP_QSPI_Write+0x108>)
 8002190:	f002 fdff 	bl	8004d92 <HAL_OSPI_Command>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e02e      	b.n	80021fc <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <BSP_QSPI_Write+0x108>)
 80021a6:	f002 fe75 	bl	8004e94 <HAL_OSPI_Transmit>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e023      	b.n	80021fc <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80021b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80021b8:	4812      	ldr	r0, [pc, #72]	; (8002204 <BSP_QSPI_Write+0x108>)
 80021ba:	f000 f952 	bl	8002462 <QSPI_AutoPollingMemReady>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e019      	b.n	80021fc <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80021c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021cc:	4413      	add	r3, r2
 80021ce:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80021d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d203      	bcs.n	80021ec <BSP_QSPI_Write+0xf0>
 80021e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	e001      	b.n	80021f0 <BSP_QSPI_Write+0xf4>
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80021f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3b8      	bcc.n	800216c <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3770      	adds	r7, #112	; 0x70
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000f0c 	.word	0x20000f0c

08002208 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b096      	sub	sp, #88	; 0x58
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8002218:	23d8      	movs	r3, #216	; 0xd8
 800221a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800222c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800223c:	2300      	movs	r3, #0
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800224c:	2300      	movs	r3, #0
 800224e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8002250:	4811      	ldr	r0, [pc, #68]	; (8002298 <BSP_QSPI_Erase_Block+0x90>)
 8002252:	f000 f8aa 	bl	80023aa <QSPI_WriteEnable>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e017      	b.n	8002290 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <BSP_QSPI_Erase_Block+0x90>)
 800226c:	f002 fd91 	bl	8004d92 <HAL_OSPI_Command>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00a      	b.n	8002290 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800227a:	f640 51ac 	movw	r1, #3500	; 0xdac
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <BSP_QSPI_Erase_Block+0x90>)
 8002280:	f000 f8ef 	bl	8002462 <QSPI_AutoPollingMemReady>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3758      	adds	r7, #88	; 0x58
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000f0c 	.word	0x20000f0c

0800229c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6513      	str	r3, [r2, #80]	; 0x50
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <BSP_QSPI_MspInit+0x78>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80022ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80022ee:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80022fc:	230a      	movs	r3, #10
 80022fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4619      	mov	r1, r3
 8002306:	4804      	ldr	r0, [pc, #16]	; (8002318 <BSP_QSPI_MspInit+0x7c>)
 8002308:	f001 fb76 	bl	80039f8 <HAL_GPIO_Init>
}
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	48001000 	.word	0x48001000

0800231c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b096      	sub	sp, #88	; 0x58
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 800232c:	2366      	movs	r3, #102	; 0x66
 800232e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002330:	2301      	movs	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002350:	2300      	movs	r3, #0
 8002352:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f002 fd17 	bl	8004d92 <HAL_OSPI_Command>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e019      	b.n	80023a2 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800236e:	2399      	movs	r3, #153	; 0x99
 8002370:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f002 fd08 	bl	8004d92 <HAL_OSPI_Command>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e00a      	b.n	80023a2 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800238c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f866 	bl	8002462 <QSPI_AutoPollingMemReady>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3758      	adds	r7, #88	; 0x58
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b09c      	sub	sp, #112	; 0x70
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80023ba:	2306      	movs	r3, #6
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80023be:	2301      	movs	r3, #1
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80023c2:	2300      	movs	r3, #0
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80023de:	2300      	movs	r3, #0
 80023e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f002 fcd0 	bl	8004d92 <HAL_OSPI_Command>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e02e      	b.n	800245a <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80023fc:	2302      	movs	r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8002408:	2310      	movs	r3, #16
 800240a:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800240c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002410:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8002412:	2305      	movs	r3, #5
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8002416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800241c:	2301      	movs	r3, #1
 800241e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f002 fcaf 	bl	8004d92 <HAL_OSPI_Command>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e00d      	b.n	800245a <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f002 fe39 	bl	80050c0 <HAL_OSPI_AutoPolling>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3770      	adds	r7, #112	; 0x70
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b09c      	sub	sp, #112	; 0x70
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002474:	2305      	movs	r3, #5
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002478:	2301      	movs	r3, #1
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002484:	2300      	movs	r3, #0
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002488:	2300      	movs	r3, #0
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800248c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002490:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80024a2:	2300      	movs	r3, #0
 80024a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80024b2:	2310      	movs	r3, #16
 80024b4:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ba:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024bc:	f107 0320 	add.w	r3, r7, #32
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f002 fc63 	bl	8004d92 <HAL_OSPI_Command>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00c      	b.n	80024f0 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f002 fdee 	bl	80050c0 <HAL_OSPI_AutoPolling>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3770      	adds	r7, #112	; 0x70
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b098      	sub	sp, #96	; 0x60
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800250c:	2305      	movs	r3, #5
 800250e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002510:	2301      	movs	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800253a:	2300      	movs	r3, #0
 800253c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f002 fc22 	bl	8004d92 <HAL_OSPI_Command>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e077      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002558:	f107 030f 	add.w	r3, r7, #15
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f002 fd09 	bl	8004f7a <HAL_OSPI_Receive>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06a      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff19 	bl	80023aa <QSPI_WriteEnable>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e062      	b.n	8002648 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258e:	b2db      	uxtb	r3, r3
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e004      	b.n	800259e <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259a:	b2db      	uxtb	r3, r3
 800259c:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f002 fbf0 	bl	8004d92 <HAL_OSPI_Command>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e045      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025bc:	f107 030f 	add.w	r3, r7, #15
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f002 fc64 	bl	8004e94 <HAL_OSPI_Transmit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e038      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80025d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff41 	bl	8002462 <QSPI_AutoPollingMemReady>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02e      	b.n	8002648 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80025ea:	2305      	movs	r3, #5
 80025ec:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025ee:	f107 0310 	add.w	r3, r7, #16
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f002 fbca 	bl	8004d92 <HAL_OSPI_Command>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e01f      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002608:	f107 030f 	add.w	r3, r7, #15
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f002 fcb1 	bl	8004f7a <HAL_OSPI_Receive>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e012      	b.n	8002648 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <QSPI_QuadMode+0x13a>
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d007      	beq.n	8002642 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3760      	adds	r7, #96	; 0x60
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b098      	sub	sp, #96	; 0x60
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002664:	2305      	movs	r3, #5
 8002666:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002668:	2301      	movs	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002678:	2300      	movs	r3, #0
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800267c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002692:	2300      	movs	r3, #0
 8002694:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f002 fb76 	bl	8004d92 <HAL_OSPI_Command>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e09a      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 fc5d 	bl	8004f7a <HAL_OSPI_Receive>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e08d      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80026ca:	2315      	movs	r3, #21
 80026cc:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80026ce:	2302      	movs	r3, #2
 80026d0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f002 fb58 	bl	8004d92 <HAL_OSPI_Command>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e07c      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	3301      	adds	r3, #1
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f002 fc3e 	bl	8004f7a <HAL_OSPI_Receive>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e06e      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fe4e 	bl	80023aa <QSPI_WriteEnable>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e066      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800271e:	7bbb      	ldrb	r3, [r7, #14]
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73bb      	strb	r3, [r7, #14]
 8002728:	e004      	b.n	8002734 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8002738:	2303      	movs	r3, #3
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f002 fb23 	bl	8004d92 <HAL_OSPI_Command>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e047      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f002 fb97 	bl	8004e94 <HAL_OSPI_Transmit>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e03a      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002770:	f241 3188 	movw	r1, #5000	; 0x1388
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fe74 	bl	8002462 <QSPI_AutoPollingMemReady>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e030      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002784:	2315      	movs	r3, #21
 8002786:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f002 fafb 	bl	8004d92 <HAL_OSPI_Command>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e01f      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f002 fbe2 	bl	8004f7a <HAL_OSPI_Receive>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e012      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80027c0:	7b7b      	ldrb	r3, [r7, #13]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <QSPI_HighPerfMode+0x180>
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d007      	beq.n	80027e0 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3760      	adds	r7, #96	; 0x60
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <BSP_TSENSOR_Init+0x30>)
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <BSP_TSENSOR_Init+0x34>)
 80027fe:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002800:	f7ff fa64 	bl	8001ccc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <BSP_TSENSOR_Init+0x30>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	20be      	movs	r0, #190	; 0xbe
 800280e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002814:	79fb      	ldrb	r3, [r7, #7]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000f5c 	.word	0x20000f5c
 8002824:	20000030 	.word	0x20000030

08002828 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <BSP_TSENSOR_ReadTemp+0x18>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	20be      	movs	r0, #190	; 0xbe
 8002834:	4798      	blx	r3
 8002836:	eef0 7a40 	vmov.f32	s15, s0
}
 800283a:	eeb0 0a67 	vmov.f32	s0, s15
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000f5c 	.word	0x20000f5c

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_MspInit+0x4c>)
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_MspInit+0x4c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6613      	str	r3, [r2, #96]	; 0x60
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_MspInit+0x4c>)
 8002858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_MspInit+0x4c>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_MspInit+0x4c>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_MspInit+0x4c>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	210f      	movs	r1, #15
 800287e:	f06f 0001 	mvn.w	r0, #1
 8002882:	f001 f88f 	bl	80039a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ae      	sub	sp, #184	; 0xb8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	2294      	movs	r2, #148	; 0x94
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f008 f94e 	bl	800ab56 <memset>
  if(hi2c->Instance==I2C2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_I2C_MspInit+0xb0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d13b      	bne.n	800293c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 f9d7 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028dc:	f7ff f8f8 	bl	8001ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002900:	2312      	movs	r3, #18
 8002902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002912:	2304      	movs	r3, #4
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800291c:	4619      	mov	r1, r3
 800291e:	480b      	ldr	r0, [pc, #44]	; (800294c <HAL_I2C_MspInit+0xb8>)
 8002920:	f001 f86a 	bl	80039f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 800292a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	37b8      	adds	r7, #184	; 0xb8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40005800 	.word	0x40005800
 8002948:	40021000 	.word	0x40021000
 800294c:	48000400 	.word	0x48000400

08002950 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0b      	ldr	r2, [pc, #44]	; (800298c <HAL_I2C_MspDeInit+0x3c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10f      	bne.n	8002982 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_I2C_MspDeInit+0x40>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_I2C_MspDeInit+0x40>)
 8002968:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800296e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002972:	4808      	ldr	r0, [pc, #32]	; (8002994 <HAL_I2C_MspDeInit+0x44>)
 8002974:	f001 f9d2 	bl	8003d1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_I2C_MspDeInit+0x44>)
 800297e:	f001 f9cd 	bl	8003d1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40005800 	.word	0x40005800
 8002990:	40021000 	.word	0x40021000
 8002994:	48000400 	.word	0x48000400

08002998 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0b0      	sub	sp, #192	; 0xc0
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	2294      	movs	r2, #148	; 0x94
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f008 f8cc 	bl	800ab56 <memset>
  if(hospi->Instance==OCTOSPI1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_OSPI_MspInit+0xcc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d149      	bne.n	8002a5c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80029c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d4:	f107 0318 	add.w	r3, r7, #24
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 f953 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80029e4:	f7ff f874 	bl	8001ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 80029ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_OSPI_MspInit+0xd0>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002a30:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a54:	4619      	mov	r1, r3
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_OSPI_MspInit+0xd4>)
 8002a58:	f000 ffce 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	37c0      	adds	r7, #192	; 0xc0
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	a0001000 	.word	0xa0001000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48001000 	.word	0x48001000

08002a70 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_OSPI_MspDeInit+0x3c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d110      	bne.n	8002aa4 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_OSPI_MspDeInit+0x40>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_OSPI_MspDeInit+0x40>)
 8002a88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_OSPI_MspDeInit+0x40>)
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_OSPI_MspDeInit+0x40>)
 8002a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a98:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002a9a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_OSPI_MspDeInit+0x44>)
 8002aa0:	f001 f93c 	bl	8003d1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	a0001000 	.word	0xa0001000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	48001000 	.word	0x48001000

08002ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0b0      	sub	sp, #192	; 0xc0
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	2294      	movs	r2, #148	; 0x94
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f008 f83c 	bl	800ab56 <memset>
  if(huart->Instance==USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_UART_MspInit+0xf4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d15d      	bne.n	8002ba4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aec:	2300      	movs	r3, #0
 8002aee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f8c5 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b00:	f7fe ffe6 	bl	8001ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_UART_MspInit+0xf8>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b66:	2307      	movs	r3, #7
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b76:	f000 ff3f 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b92:	2307      	movs	r3, #7
 8002b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_UART_MspInit+0xfc>)
 8002ba0:	f000 ff2a 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	37c0      	adds	r7, #192	; 0xc0
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	48000400 	.word	0x48000400

08002bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_InitTick+0xe0>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	4a33      	ldr	r2, [pc, #204]	; (8002c98 <HAL_InitTick+0xe0>)
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_InitTick+0xe0>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bde:	f107 0210 	add.w	r2, r7, #16
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 ff59 	bl	8006aa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f003 ff26 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	6378      	str	r0, [r7, #52]	; 0x34
 8002bfe:	e004      	b.n	8002c0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c00:	f003 ff22 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8002c04:	4603      	mov	r3, r0
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_InitTick+0xe4>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	3b01      	subs	r3, #1
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c1a:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c3e:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c40:	f004 fd38 	bl	80076b4 <HAL_TIM_Base_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11b      	bne.n	8002c8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c52:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c54:	f004 fd90 	bl	8007778 <HAL_TIM_Base_Start_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d111      	bne.n	8002c8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c66:	2036      	movs	r0, #54	; 0x36
 8002c68:	f000 feb8 	bl	80039dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	d808      	bhi.n	8002c84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c72:	2200      	movs	r2, #0
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	2036      	movs	r0, #54	; 0x36
 8002c78:	f000 fe94 	bl	80039a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_InitTick+0xf0>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e002      	b.n	8002c8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3738      	adds	r7, #56	; 0x38
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	20000f60 	.word	0x20000f60
 8002ca4:	40001000 	.word	0x40001000
 8002ca8:	200000b4 	.word	0x200000b4

08002cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <NMI_Handler+0x4>

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler+0x4>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8002cdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ce0:	f001 f926 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM6_DAC_IRQHandler+0x10>)
 8002cee:	f004 fdb3 	bl	8007858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000f60 	.word	0x20000f60

08002cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_kill>:

int _kill(int pid, int sig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d16:	f007 ff81 	bl	800ac1c <__errno>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2216      	movs	r2, #22
 8002d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_exit>:

void _exit (int status)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffe7 	bl	8002d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d3e:	e7fe      	b.n	8002d3e <_exit+0x12>

08002d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e00a      	b.n	8002d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d52:	f3af 8000 	nop.w
 8002d56:	4601      	mov	r1, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	60ba      	str	r2, [r7, #8]
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dbf0      	blt.n	8002d52 <_read+0x12>
  }

  return len;
 8002d70:	687b      	ldr	r3, [r7, #4]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e009      	b.n	8002da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	dbf1      	blt.n	8002d8c <_write+0x12>
  }
  return len;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_close>:

int _close(int file)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dda:	605a      	str	r2, [r3, #4]
  return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_isatty>:

int _isatty(int file)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <_sbrk+0x5c>)
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <_sbrk+0x60>)
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <_sbrk+0x64>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <_sbrk+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e4c:	f007 fee6 	bl	800ac1c <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e009      	b.n	8002e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <_sbrk+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200a0000 	.word	0x200a0000
 8002e7c:	00000400 	.word	0x00000400
 8002e80:	20000fac 	.word	0x20000fac
 8002e84:	200025e0 	.word	0x200025e0

08002e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <SystemInit+0x20>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <SystemInit+0x20>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb0:	f7ff ffea 	bl	8002e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <LoopForever+0xe>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <LoopForever+0x16>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f007 fea5 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ede:	f7fe fa2f 	bl	8001340 <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ee4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8002ef0:	0800d27c 	.word	0x0800d27c
  ldr r2, =_sbss
 8002ef4:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002ef8:	200025dc 	.word	0x200025dc

08002efc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_IRQHandler>

08002efe <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe ff00 	bl	8001d14 <SENSOR_IO_Read>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	2120      	movs	r1, #32
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fec9 	bl	8001ce0 <SENSOR_IO_Write>
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002f64:	f7fe feb2 	bl	8001ccc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fed0 	bl	8001d14 <SENSOR_IO_Read>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	b2d8      	uxtb	r0, r3
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	2302      	movs	r3, #2
 8002f98:	21b0      	movs	r1, #176	; 0xb0
 8002f9a:	f7fe fed9 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002f9e:	7b3b      	ldrb	r3, [r7, #12]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002fa6:	7b7b      	ldrb	r3, [r7, #13]
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	b2d8      	uxtb	r0, r3
 8002fb2:	f107 020c 	add.w	r2, r7, #12
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	21b6      	movs	r1, #182	; 0xb6
 8002fba:	f7fe fec9 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fbe:	7b7b      	ldrb	r3, [r7, #13]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	b21a      	sxth	r2, r3
 8002fc4:	7b3b      	ldrb	r3, [r7, #12]
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	f107 020c 	add.w	r2, r7, #12
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	21ba      	movs	r1, #186	; 0xba
 8002fd8:	f7fe feba 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	b21a      	sxth	r2, r3
 8002fe2:	7b3b      	ldrb	r3, [r7, #12]
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	f107 020c 	add.w	r2, r7, #12
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	21a8      	movs	r1, #168	; 0xa8
 8002ff6:	f7fe feab 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ffa:	7b7b      	ldrb	r3, [r7, #13]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	7b3b      	ldrb	r3, [r7, #12]
 8003002:	b21b      	sxth	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003008:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800300c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800301e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003030:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003034:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003046:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800305a:	edd7 7a04 	vldr	s15, [r7, #16]
 800305e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003066:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800306a:	edd7 7a04 	vldr	s15, [r7, #16]
 800306e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80030b4 <HTS221_H_ReadHumidity+0x130>
 8003072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	dd01      	ble.n	8003080 <HTS221_H_ReadHumidity+0xfc>
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HTS221_H_ReadHumidity+0x134>)
 800307e:	e00a      	b.n	8003096 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003080:	edd7 7a04 	vldr	s15, [r7, #16]
 8003084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d502      	bpl.n	8003094 <HTS221_H_ReadHumidity+0x110>
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e000      	b.n	8003096 <HTS221_H_ReadHumidity+0x112>
 8003094:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003096:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003098:	edd7 7a04 	vldr	s15, [r7, #16]
 800309c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030a4:	eef0 7a66 	vmov.f32	s15, s13
}
 80030a8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	447a0000 	.word	0x447a0000
 80030b8:	447a0000 	.word	0x447a0000

080030bc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2120      	movs	r1, #32
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fe20 	bl	8001d14 <SENSOR_IO_Read>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030fe:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	2120      	movs	r1, #32
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fde9 	bl	8001ce0 <SENSOR_IO_Write>
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	b2d8      	uxtb	r0, r3
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	2302      	movs	r3, #2
 800312a:	21b2      	movs	r1, #178	; 0xb2
 800312c:	f7fe fe10 	bl	8001d50 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2135      	movs	r1, #53	; 0x35
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fdec 	bl	8001d14 <SENSOR_IO_Read>
 800313c:	4603      	mov	r3, r0
 800313e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21b      	sxth	r3, r3
 8003146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314a:	b21a      	sxth	r2, r3
 800314c:	7a3b      	ldrb	r3, [r7, #8]
 800314e:	b21b      	sxth	r3, r3
 8003150:	4313      	orrs	r3, r2
 8003152:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003154:	7ffb      	ldrb	r3, [r7, #31]
 8003156:	019b      	lsls	r3, r3, #6
 8003158:	b21b      	sxth	r3, r3
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	b21a      	sxth	r2, r3
 8003160:	7a7b      	ldrb	r3, [r7, #9]
 8003162:	b21b      	sxth	r3, r3
 8003164:	4313      	orrs	r3, r2
 8003166:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003168:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800316c:	10db      	asrs	r3, r3, #3
 800316e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003170:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003174:	10db      	asrs	r3, r3, #3
 8003176:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	b2d8      	uxtb	r0, r3
 800317c:	f107 0208 	add.w	r2, r7, #8
 8003180:	2304      	movs	r3, #4
 8003182:	21bc      	movs	r1, #188	; 0xbc
 8003184:	f7fe fde4 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21a      	sxth	r2, r3
 800318e:	7a3b      	ldrb	r3, [r7, #8]
 8003190:	b21b      	sxth	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	b21a      	sxth	r2, r3
 800319c:	7abb      	ldrb	r3, [r7, #10]
 800319e:	b21b      	sxth	r3, r3
 80031a0:	4313      	orrs	r3, r2
 80031a2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	b2d8      	uxtb	r0, r3
 80031a8:	f107 0208 	add.w	r2, r7, #8
 80031ac:	2302      	movs	r3, #2
 80031ae:	21aa      	movs	r1, #170	; 0xaa
 80031b0:	f7fe fdce 	bl	8001d50 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80031b4:	7a7b      	ldrb	r3, [r7, #9]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	7a3b      	ldrb	r3, [r7, #8]
 80031bc:	b21b      	sxth	r3, r3
 80031be:	4313      	orrs	r3, r2
 80031c0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80031c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80031c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80031ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003200:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003210:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	ee07 3a90 	vmov	s15, r3
}
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	463b      	mov	r3, r7
 800322c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003230:	783b      	ldrb	r3, [r7, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	2120      	movs	r1, #32
 8003236:	203c      	movs	r0, #60	; 0x3c
 8003238:	f7fe fd52 	bl	8001ce0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	461a      	mov	r2, r3
 8003240:	2121      	movs	r1, #33	; 0x21
 8003242:	203c      	movs	r0, #60	; 0x3c
 8003244:	f7fe fd4c 	bl	8001ce0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003248:	78bb      	ldrb	r3, [r7, #2]
 800324a:	461a      	mov	r2, r3
 800324c:	2122      	movs	r1, #34	; 0x22
 800324e:	203c      	movs	r0, #60	; 0x3c
 8003250:	f7fe fd46 	bl	8001ce0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	461a      	mov	r2, r3
 8003258:	2123      	movs	r1, #35	; 0x23
 800325a:	203c      	movs	r0, #60	; 0x3c
 800325c:	f7fe fd40 	bl	8001ce0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003260:	793b      	ldrb	r3, [r7, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	2124      	movs	r1, #36	; 0x24
 8003266:	203c      	movs	r0, #60	; 0x3c
 8003268:	f7fe fd3a 	bl	8001ce0 <SENSOR_IO_Write>
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800327e:	2122      	movs	r1, #34	; 0x22
 8003280:	203c      	movs	r0, #60	; 0x3c
 8003282:	f7fe fd47 	bl	8001d14 <SENSOR_IO_Read>
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f023 0303 	bic.w	r3, r3, #3
 8003290:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f043 0303 	orr.w	r3, r3, #3
 8003298:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	461a      	mov	r2, r3
 800329e:	2122      	movs	r1, #34	; 0x22
 80032a0:	203c      	movs	r0, #60	; 0x3c
 80032a2:	f7fe fd1d 	bl	8001ce0 <SENSOR_IO_Write>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80032b2:	f7fe fd0b 	bl	8001ccc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80032b6:	210f      	movs	r1, #15
 80032b8:	203c      	movs	r0, #60	; 0x3c
 80032ba:	f7fe fd2b 	bl	8001d14 <SENSOR_IO_Read>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80032d2:	2122      	movs	r1, #34	; 0x22
 80032d4:	203c      	movs	r0, #60	; 0x3c
 80032d6:	f7fe fd1d 	bl	8001d14 <SENSOR_IO_Read>
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	f023 0320 	bic.w	r3, r3, #32
 80032e4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	f043 0320 	orr.w	r3, r3, #32
 80032f2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	461a      	mov	r2, r3
 80032f8:	2122      	movs	r1, #34	; 0x22
 80032fa:	203c      	movs	r0, #60	; 0x3c
 80032fc:	f7fe fcf0 	bl	8001ce0 <SENSOR_IO_Write>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800331e:	2121      	movs	r1, #33	; 0x21
 8003320:	203c      	movs	r0, #60	; 0x3c
 8003322:	f7fe fcf7 	bl	8001d14 <SENSOR_IO_Read>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800332a:	f107 0208 	add.w	r2, r7, #8
 800332e:	2306      	movs	r3, #6
 8003330:	21a8      	movs	r1, #168	; 0xa8
 8003332:	203c      	movs	r0, #60	; 0x3c
 8003334:	f7fe fd0c 	bl	8001d50 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e01c      	b.n	8003378 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	3301      	adds	r3, #1
 8003344:	3320      	adds	r3, #32
 8003346:	443b      	add	r3, r7
 8003348:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800334c:	b29b      	uxth	r3, r3
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b29a      	uxth	r2, r3
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	3320      	adds	r3, #32
 8003358:	443b      	add	r3, r7
 800335a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4413      	add	r3, r2
 8003362:	b29a      	uxth	r2, r3
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	b212      	sxth	r2, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	3320      	adds	r3, #32
 800336c:	443b      	add	r3, r7
 800336e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003372:	7ffb      	ldrb	r3, [r7, #31]
 8003374:	3301      	adds	r3, #1
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	7ffb      	ldrb	r3, [r7, #31]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d9df      	bls.n	800333e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003384:	2b60      	cmp	r3, #96	; 0x60
 8003386:	d013      	beq.n	80033b0 <LIS3MDL_MagReadXYZ+0xa8>
 8003388:	2b60      	cmp	r3, #96	; 0x60
 800338a:	dc14      	bgt.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d00c      	beq.n	80033aa <LIS3MDL_MagReadXYZ+0xa2>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	dc10      	bgt.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <LIS3MDL_MagReadXYZ+0x96>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d003      	beq.n	80033a4 <LIS3MDL_MagReadXYZ+0x9c>
 800339c:	e00b      	b.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <LIS3MDL_MagReadXYZ+0xfc>)
 80033a0:	61bb      	str	r3, [r7, #24]
    break;
 80033a2:	e008      	b.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <LIS3MDL_MagReadXYZ+0x100>)
 80033a6:	61bb      	str	r3, [r7, #24]
    break;
 80033a8:	e005      	b.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <LIS3MDL_MagReadXYZ+0x104>)
 80033ac:	61bb      	str	r3, [r7, #24]
    break;
 80033ae:	e002      	b.n	80033b6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <LIS3MDL_MagReadXYZ+0x108>)
 80033b2:	61bb      	str	r3, [r7, #24]
    break;    
 80033b4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e01a      	b.n	80033f2 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80033bc:	7ffb      	ldrb	r3, [r7, #31]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	3320      	adds	r3, #32
 80033c2:	443b      	add	r3, r7
 80033c4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80033d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e4:	ee17 2a90 	vmov	r2, s15
 80033e8:	b212      	sxth	r2, r2
 80033ea:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	3301      	adds	r3, #1
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d9e1      	bls.n	80033bc <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	3e0f5c29 	.word	0x3e0f5c29
 8003408:	3e947ae1 	.word	0x3e947ae1
 800340c:	3edc28f6 	.word	0x3edc28f6
 8003410:	3f147ae1 	.word	0x3f147ae1

08003414 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f879 	bl	8003518 <LPS22HB_Init>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800343c:	f7fe fc46 	bl	8001ccc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	210f      	movs	r1, #15
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fc64 	bl	8001d14 <SENSOR_IO_Read>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	74fb      	strb	r3, [r7, #19]
 800346e:	e013      	b.n	8003498 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	3328      	adds	r3, #40	; 0x28
 8003478:	b2db      	uxtb	r3, r3
 800347a:	7cfc      	ldrb	r4, [r7, #19]
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7fe fc48 	bl	8001d14 <SENSOR_IO_Read>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	f104 0318 	add.w	r3, r4, #24
 800348c:	443b      	add	r3, r7
 800348e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	3301      	adds	r3, #1
 8003496:	74fb      	strb	r3, [r7, #19]
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d9e8      	bls.n	8003470 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	74fb      	strb	r3, [r7, #19]
 80034a2:	e00f      	b.n	80034c4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	3318      	adds	r3, #24
 80034a8:	443b      	add	r3, r7
 80034aa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034ae:	461a      	mov	r2, r3
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	3301      	adds	r3, #1
 80034c2:	74fb      	strb	r3, [r7, #19]
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d9ec      	bls.n	80034a4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034da:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2264      	movs	r2, #100	; 0x64
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da01      	bge.n	80034f0 <LPS22HB_P_ReadPressure+0x94>
 80034ec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80034f0:	131b      	asrs	r3, r3, #12
 80034f2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003514 <LPS22HB_P_ReadPressure+0xb8>
 8003502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003506:	eef0 7a66 	vmov.f32	s15, s13
}
 800350a:	eeb0 0a67 	vmov.f32	s0, s15
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	42c80000 	.word	0x42c80000

08003518 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	211a      	movs	r1, #26
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fbf3 	bl	8001d14 <SENSOR_IO_Read>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	211a      	movs	r1, #26
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fbc8 	bl	8001ce0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2110      	movs	r1, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fbdc 	bl	8001d14 <SENSOR_IO_Read>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800356e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	f023 0302 	bic.w	r3, r3, #2
 8003576:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	2110      	movs	r1, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fba9 	bl	8001ce0 <SENSOR_IO_Write>
}  
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80035a4:	2110      	movs	r1, #16
 80035a6:	20d4      	movs	r0, #212	; 0xd4
 80035a8:	f7fe fbb4 	bl	8001d14 <SENSOR_IO_Read>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80035bc:	7bba      	ldrb	r2, [r7, #14]
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80035c4:	7bbb      	ldrb	r3, [r7, #14]
 80035c6:	461a      	mov	r2, r3
 80035c8:	2110      	movs	r1, #16
 80035ca:	20d4      	movs	r0, #212	; 0xd4
 80035cc:	f7fe fb88 	bl	8001ce0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80035d0:	2112      	movs	r1, #18
 80035d2:	20d4      	movs	r0, #212	; 0xd4
 80035d4:	f7fe fb9e 	bl	8001d14 <SENSOR_IO_Read>
 80035d8:	4603      	mov	r3, r0
 80035da:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80035e4:	7bbb      	ldrb	r3, [r7, #14]
 80035e6:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80035ea:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80035ec:	7bba      	ldrb	r2, [r7, #14]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80035f4:	7bbb      	ldrb	r3, [r7, #14]
 80035f6:	461a      	mov	r2, r3
 80035f8:	2112      	movs	r1, #18
 80035fa:	20d4      	movs	r0, #212	; 0xd4
 80035fc:	f7fe fb70 	bl	8001ce0 <SENSOR_IO_Write>
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800360e:	2300      	movs	r3, #0
 8003610:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003612:	2110      	movs	r1, #16
 8003614:	20d4      	movs	r0, #212	; 0xd4
 8003616:	f7fe fb7d 	bl	8001d14 <SENSOR_IO_Read>
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	461a      	mov	r2, r3
 800362a:	2110      	movs	r1, #16
 800362c:	20d4      	movs	r0, #212	; 0xd4
 800362e:	f7fe fb57 	bl	8001ce0 <SENSOR_IO_Write>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800363a:	b580      	push	{r7, lr}
 800363c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800363e:	f7fe fb45 	bl	8001ccc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003642:	210f      	movs	r1, #15
 8003644:	20d4      	movs	r0, #212	; 0xd4
 8003646:	f7fe fb65 	bl	8001d14 <SENSOR_IO_Read>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}

08003650 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800365e:	2115      	movs	r1, #21
 8003660:	20d4      	movs	r0, #212	; 0xd4
 8003662:	f7fe fb57 	bl	8001d14 <SENSOR_IO_Read>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	f023 0310 	bic.w	r3, r3, #16
 8003670:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	f043 0310 	orr.w	r3, r3, #16
 800367e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	461a      	mov	r2, r3
 8003684:	2115      	movs	r1, #21
 8003686:	20d4      	movs	r0, #212	; 0xd4
 8003688:	f7fe fb2a 	bl	8001ce0 <SENSOR_IO_Write>
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80036aa:	2110      	movs	r1, #16
 80036ac:	20d4      	movs	r0, #212	; 0xd4
 80036ae:	f7fe fb31 	bl	8001d14 <SENSOR_IO_Read>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80036b6:	f107 0208 	add.w	r2, r7, #8
 80036ba:	2306      	movs	r3, #6
 80036bc:	2128      	movs	r1, #40	; 0x28
 80036be:	20d4      	movs	r0, #212	; 0xd4
 80036c0:	f7fe fb46 	bl	8001d50 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e01c      	b.n	8003704 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	3301      	adds	r3, #1
 80036d0:	3320      	adds	r3, #32
 80036d2:	443b      	add	r3, r7
 80036d4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	b29a      	uxth	r2, r3
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	3320      	adds	r3, #32
 80036e4:	443b      	add	r3, r7
 80036e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
 80036f2:	b212      	sxth	r2, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	3320      	adds	r3, #32
 80036f8:	443b      	add	r3, r7
 80036fa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	3301      	adds	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d9df      	bls.n	80036ca <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d829      	bhi.n	8003768 <LSM6DSL_AccReadXYZ+0xd4>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <LSM6DSL_AccReadXYZ+0x88>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003751 	.word	0x08003751
 8003720:	08003769 	.word	0x08003769
 8003724:	08003769 	.word	0x08003769
 8003728:	08003769 	.word	0x08003769
 800372c:	08003763 	.word	0x08003763
 8003730:	08003769 	.word	0x08003769
 8003734:	08003769 	.word	0x08003769
 8003738:	08003769 	.word	0x08003769
 800373c:	08003757 	.word	0x08003757
 8003740:	08003769 	.word	0x08003769
 8003744:	08003769 	.word	0x08003769
 8003748:	08003769 	.word	0x08003769
 800374c:	0800375d 	.word	0x0800375d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <LSM6DSL_AccReadXYZ+0x120>)
 8003752:	61bb      	str	r3, [r7, #24]
    break;
 8003754:	e008      	b.n	8003768 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <LSM6DSL_AccReadXYZ+0x124>)
 8003758:	61bb      	str	r3, [r7, #24]
    break;
 800375a:	e005      	b.n	8003768 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <LSM6DSL_AccReadXYZ+0x128>)
 800375e:	61bb      	str	r3, [r7, #24]
    break;
 8003760:	e002      	b.n	8003768 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <LSM6DSL_AccReadXYZ+0x12c>)
 8003764:	61bb      	str	r3, [r7, #24]
    break;    
 8003766:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e01a      	b.n	80037a4 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800376e:	7ffb      	ldrb	r3, [r7, #31]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	3320      	adds	r3, #32
 8003774:	443b      	add	r3, r7
 8003776:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003782:	edd7 7a06 	vldr	s15, [r7, #24]
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003796:	ee17 2a90 	vmov	r2, s15
 800379a:	b212      	sxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	3301      	adds	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d9e1      	bls.n	800376e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	3d79db23 	.word	0x3d79db23
 80037b8:	3df9db23 	.word	0x3df9db23
 80037bc:	3e79db23 	.word	0x3e79db23
 80037c0:	3ef9db23 	.word	0x3ef9db23

080037c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ce:	2003      	movs	r0, #3
 80037d0:	f000 f8dd 	bl	800398e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d4:	200f      	movs	r0, #15
 80037d6:	f7ff f9ef 	bl	8002bb8 <HAL_InitTick>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	71fb      	strb	r3, [r7, #7]
 80037e4:	e001      	b.n	80037ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037e6:	f7ff f82d 	bl	8002844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ea:	79fb      	ldrb	r3, [r7, #7]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x20>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_IncTick+0x24>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4413      	add	r3, r2
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_IncTick+0x24>)
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200000b8 	.word	0x200000b8
 8003818:	20000fb0 	.word	0x20000fb0

0800381c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return uwTick;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_GetTick+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000fb0 	.word	0x20000fb0

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff4c 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039b6:	f7ff ff61 	bl	800387c <__NVIC_GetPriorityGrouping>
 80039ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7ff ffb1 	bl	8003928 <NVIC_EncodePriority>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff80 	bl	80038d4 <__NVIC_SetPriority>
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff54 	bl	8003898 <__NVIC_EnableIRQ>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	e166      	b.n	8003cd6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8158 	beq.w	8003cd0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d005      	beq.n	8003a38 <HAL_GPIO_Init+0x40>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d130      	bne.n	8003a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2203      	movs	r2, #3
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6e:	2201      	movs	r2, #1
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0201 	and.w	r2, r3, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d017      	beq.n	8003ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d123      	bne.n	8003b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	6939      	ldr	r1, [r7, #16]
 8003b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80b2 	beq.w	8003cd0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_GPIO_Init+0x2fc>)
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <HAL_GPIO_Init+0x2fc>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6613      	str	r3, [r2, #96]	; 0x60
 8003b78:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <HAL_GPIO_Init+0x2fc>)
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b84:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <HAL_GPIO_Init+0x300>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bae:	d02b      	beq.n	8003c08 <HAL_GPIO_Init+0x210>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a52      	ldr	r2, [pc, #328]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d025      	beq.n	8003c04 <HAL_GPIO_Init+0x20c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a51      	ldr	r2, [pc, #324]	; (8003d00 <HAL_GPIO_Init+0x308>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01f      	beq.n	8003c00 <HAL_GPIO_Init+0x208>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_GPIO_Init+0x30c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d019      	beq.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4f      	ldr	r2, [pc, #316]	; (8003d08 <HAL_GPIO_Init+0x310>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_GPIO_Init+0x200>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a4e      	ldr	r2, [pc, #312]	; (8003d0c <HAL_GPIO_Init+0x314>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_GPIO_Init+0x1fc>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a4d      	ldr	r2, [pc, #308]	; (8003d10 <HAL_GPIO_Init+0x318>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a4c      	ldr	r2, [pc, #304]	; (8003d14 <HAL_GPIO_Init+0x31c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_GPIO_Init+0x1f4>
 8003be8:	2307      	movs	r3, #7
 8003bea:	e00e      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bec:	2308      	movs	r3, #8
 8003bee:	e00c      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bf0:	2306      	movs	r3, #6
 8003bf2:	e00a      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	e008      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e006      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e004      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e002      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_GPIO_Init+0x212>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	f002 0203 	and.w	r2, r2, #3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	4093      	lsls	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c1a:	4937      	ldr	r1, [pc, #220]	; (8003cf8 <HAL_GPIO_Init+0x300>)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c4c:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c76:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <HAL_GPIO_Init+0x320>)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f ae91 	bne.w	8003a08 <HAL_GPIO_Init+0x10>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	48000400 	.word	0x48000400
 8003d00:	48000800 	.word	0x48000800
 8003d04:	48000c00 	.word	0x48000c00
 8003d08:	48001000 	.word	0x48001000
 8003d0c:	48001400 	.word	0x48001400
 8003d10:	48001800 	.word	0x48001800
 8003d14:	48001c00 	.word	0x48001c00
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d2a:	e0c9      	b.n	8003ec0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80bc 	beq.w	8003eba <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d42:	4a66      	ldr	r2, [pc, #408]	; (8003edc <HAL_GPIO_DeInit+0x1c0>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d6a:	d02b      	beq.n	8003dc4 <HAL_GPIO_DeInit+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ee0 <HAL_GPIO_DeInit+0x1c4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d025      	beq.n	8003dc0 <HAL_GPIO_DeInit+0xa4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a5b      	ldr	r2, [pc, #364]	; (8003ee4 <HAL_GPIO_DeInit+0x1c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01f      	beq.n	8003dbc <HAL_GPIO_DeInit+0xa0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_GPIO_DeInit+0x1cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d019      	beq.n	8003db8 <HAL_GPIO_DeInit+0x9c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a59      	ldr	r2, [pc, #356]	; (8003eec <HAL_GPIO_DeInit+0x1d0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_GPIO_DeInit+0x98>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_GPIO_DeInit+0x1d4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00d      	beq.n	8003db0 <HAL_GPIO_DeInit+0x94>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <HAL_GPIO_DeInit+0x1d8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <HAL_GPIO_DeInit+0x90>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a56      	ldr	r2, [pc, #344]	; (8003ef8 <HAL_GPIO_DeInit+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_GPIO_DeInit+0x8c>
 8003da4:	2307      	movs	r3, #7
 8003da6:	e00e      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003da8:	2308      	movs	r3, #8
 8003daa:	e00c      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003dac:	2306      	movs	r3, #6
 8003dae:	e00a      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003db0:	2305      	movs	r3, #5
 8003db2:	e008      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003db4:	2304      	movs	r3, #4
 8003db6:	e006      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003db8:	2303      	movs	r3, #3
 8003dba:	e004      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e002      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_GPIO_DeInit+0xaa>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	f002 0203 	and.w	r2, r2, #3
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	4093      	lsls	r3, r2
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d132      	bne.n	8003e3c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003dd6:	4b49      	ldr	r3, [pc, #292]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	4947      	ldr	r1, [pc, #284]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003de4:	4b45      	ldr	r3, [pc, #276]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	4943      	ldr	r1, [pc, #268]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003df2:	4b42      	ldr	r3, [pc, #264]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	4940      	ldr	r1, [pc, #256]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	493c      	ldr	r1, [pc, #240]	; (8003efc <HAL_GPIO_DeInit+0x1e0>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <HAL_GPIO_DeInit+0x1c0>)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3302      	adds	r3, #2
 8003e26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	482b      	ldr	r0, [pc, #172]	; (8003edc <HAL_GPIO_DeInit+0x1c0>)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	400a      	ands	r2, r1
 8003e36:	3302      	adds	r3, #2
 8003e38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2103      	movs	r1, #3
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	08d2      	lsrs	r2, r2, #3
 8003e70:	4019      	ands	r1, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3208      	adds	r2, #8
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2103      	movs	r1, #3
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	2101      	movs	r1, #1
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2103      	movs	r1, #3
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f af2f 	bne.w	8003d2c <HAL_GPIO_DeInit+0x10>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	48000400 	.word	0x48000400
 8003ee4:	48000800 	.word	0x48000800
 8003ee8:	48000c00 	.word	0x48000c00
 8003eec:	48001000 	.word	0x48001000
 8003ef0:	48001400 	.word	0x48001400
 8003ef4:	48001800 	.word	0x48001800
 8003ef8:	48001c00 	.word	0x48001c00
 8003efc:	40010400 	.word	0x40010400

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc ffda 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fe fc84 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	e006      	b.n	8003fe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d108      	bne.n	8004002 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e007      	b.n	8004012 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e021      	b.n	80040ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fc45 	bl	8002950 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b20      	cmp	r3, #32
 8004118:	f040 80f9 	bne.w	800430e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_I2C_Mem_Write+0x34>
 8004122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800412e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0ed      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_I2C_Mem_Write+0x4e>
 800413e:	2302      	movs	r3, #2
 8004140:	e0e6      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800414a:	f7ff fb67 	bl	800381c <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2319      	movs	r3, #25
 8004156:	2201      	movs	r2, #1
 8004158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fac3 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0d1      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004194:	88f8      	ldrh	r0, [r7, #6]
 8004196:	893a      	ldrh	r2, [r7, #8]
 8004198:	8979      	ldrh	r1, [r7, #10]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	4603      	mov	r3, r0
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f9d3 	bl	8004550 <I2C_RequestMemoryWrite>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0a9      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2bff      	cmp	r3, #255	; 0xff
 80041c4:	d90e      	bls.n	80041e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fc3d 	bl	8004a5c <I2C_TransferConfig>
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fc2c 	bl	8004a5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fabc 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e07b      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d034      	beq.n	80042bc <HAL_I2C_Mem_Write+0x1c8>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d130      	bne.n	80042bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fa3f 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e04d      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2bff      	cmp	r3, #255	; 0xff
 800427c:	d90e      	bls.n	800429c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	b2da      	uxtb	r2, r3
 800428a:	8979      	ldrh	r1, [r7, #10]
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fbe1 	bl	8004a5c <I2C_TransferConfig>
 800429a:	e00f      	b.n	80042bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	8979      	ldrh	r1, [r7, #10]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fbd0 	bl	8004a5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d19e      	bne.n	8004204 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 faa2 	bl	8004814 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e01a      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2220      	movs	r2, #32
 80042e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_I2C_Mem_Write+0x224>)
 80042ee:	400b      	ands	r3, r1
 80042f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fe00e800 	.word	0xfe00e800

0800431c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	4608      	mov	r0, r1
 8004326:	4611      	mov	r1, r2
 8004328:	461a      	mov	r2, r3
 800432a:	4603      	mov	r3, r0
 800432c:	817b      	strh	r3, [r7, #10]
 800432e:	460b      	mov	r3, r1
 8004330:	813b      	strh	r3, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	f040 80fd 	bne.w	800453e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_I2C_Mem_Read+0x34>
 800434a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0f1      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_I2C_Mem_Read+0x4e>
 8004366:	2302      	movs	r3, #2
 8004368:	e0ea      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004372:	f7ff fa53 	bl	800381c <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f9af 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0d5      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2222      	movs	r2, #34	; 0x22
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2240      	movs	r2, #64	; 0x40
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043bc:	88f8      	ldrh	r0, [r7, #6]
 80043be:	893a      	ldrh	r2, [r7, #8]
 80043c0:	8979      	ldrh	r1, [r7, #10]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4603      	mov	r3, r0
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f913 	bl	80045f8 <I2C_RequestMemoryRead>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0ad      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2bff      	cmp	r3, #255	; 0xff
 80043ec:	d90e      	bls.n	800440c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	22ff      	movs	r2, #255	; 0xff
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	8979      	ldrh	r1, [r7, #10]
 80043fc:	4b52      	ldr	r3, [pc, #328]	; (8004548 <HAL_I2C_Mem_Read+0x22c>)
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fb29 	bl	8004a5c <I2C_TransferConfig>
 800440a:	e00f      	b.n	800442c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	b2da      	uxtb	r2, r3
 800441c:	8979      	ldrh	r1, [r7, #10]
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_I2C_Mem_Read+0x22c>)
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fb18 	bl	8004a5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2200      	movs	r2, #0
 8004434:	2104      	movs	r1, #4
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f956 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07c      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d034      	beq.n	80044ec <HAL_I2C_Mem_Read+0x1d0>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d130      	bne.n	80044ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f927 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04d      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2bff      	cmp	r3, #255	; 0xff
 80044ac:	d90e      	bls.n	80044cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	22ff      	movs	r2, #255	; 0xff
 80044b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	8979      	ldrh	r1, [r7, #10]
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fac9 	bl	8004a5c <I2C_TransferConfig>
 80044ca:	e00f      	b.n	80044ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	8979      	ldrh	r1, [r7, #10]
 80044de:	2300      	movs	r3, #0
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fab8 	bl	8004a5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d19a      	bne.n	800442c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f98a 	bl	8004814 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e01a      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2220      	movs	r2, #32
 8004510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_I2C_Mem_Read+0x230>)
 800451e:	400b      	ands	r3, r1
 8004520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	80002400 	.word	0x80002400
 800454c:	fe00e800 	.word	0xfe00e800

08004550 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	4608      	mov	r0, r1
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	817b      	strh	r3, [r7, #10]
 8004562:	460b      	mov	r3, r1
 8004564:	813b      	strh	r3, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <I2C_RequestMemoryWrite+0xa4>)
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa6f 	bl	8004a5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f8ff 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e02c      	b.n	80045ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28
 80045a2:	e015      	b.n	80045d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8e5 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e012      	b.n	80045ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c6:	893b      	ldrh	r3, [r7, #8]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f884 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	80002000 	.word	0x80002000

080045f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <I2C_RequestMemoryRead+0xa4>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2300      	movs	r3, #0
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa1c 	bl	8004a5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	69b9      	ldr	r1, [r7, #24]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f8ac 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e02c      	b.n	8004692 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
 8004648:	e015      	b.n	8004676 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800464a:	893b      	ldrh	r3, [r7, #8]
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	b29b      	uxth	r3, r3
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	69b9      	ldr	r1, [r7, #24]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f892 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e012      	b.n	8004692 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	; 0x40
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f831 	bl	80046e8 <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	80002000 	.word	0x80002000

080046a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d103      	bne.n	80046be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d007      	beq.n	80046dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	619a      	str	r2, [r3, #24]
  }
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f8:	e031      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d02d      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7ff f88b 	bl	800381c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d122      	bne.n	800475e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	429a      	cmp	r2, r3
 8004734:	d113      	bne.n	800475e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e00f      	b.n	800477e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	429a      	cmp	r2, r3
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	429a      	cmp	r2, r3
 800477a:	d0be      	beq.n	80046fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004792:	e033      	b.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f87f 	bl	800489c <I2C_IsErrorOccurred>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e031      	b.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d025      	beq.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7ff f834 	bl	800381c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11a      	bne.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d013      	beq.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e007      	b.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d1c4      	bne.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004820:	e02f      	b.n	8004882 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f838 	bl	800489c <I2C_IsErrorOccurred>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e02d      	b.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fff1 	bl	800381c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11a      	bne.n	8004882 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	d013      	beq.n	8004882 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e007      	b.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d1c8      	bne.n	8004822 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d068      	beq.n	800499a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d0:	e049      	b.n	8004966 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d045      	beq.n	8004966 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe ff9f 	bl	800381c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_IsErrorOccurred+0x54>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13a      	bne.n	8004966 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004902:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004912:	d121      	bne.n	8004958 <I2C_IsErrorOccurred+0xbc>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491a:	d01d      	beq.n	8004958 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b20      	cmp	r3, #32
 8004920:	d01a      	beq.n	8004958 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004930:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004932:	f7fe ff73 	bl	800381c <HAL_GetTick>
 8004936:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004938:	e00e      	b.n	8004958 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800493a:	f7fe ff6f 	bl	800381c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b19      	cmp	r3, #25
 8004946:	d907      	bls.n	8004958 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f043 0320 	orr.w	r3, r3, #32
 800494e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004956:	e006      	b.n	8004966 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d1e9      	bne.n	800493a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d003      	beq.n	800497c <I2C_IsErrorOccurred+0xe0>
 8004974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0aa      	beq.n	80048d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800497c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2220      	movs	r2, #32
 800498a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01c      	beq.n	8004a4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fe45 	bl	80046a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <I2C_IsErrorOccurred+0x1bc>)
 8004a22:	400b      	ands	r3, r1
 8004a24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	fe00e800 	.word	0xfe00e800

08004a5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a74:	7a7b      	ldrb	r3, [r7, #9]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	0d5b      	lsrs	r3, r3, #21
 8004a96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <I2C_TransferConfig+0x60>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	ea02 0103 	and.w	r1, r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	03ff63ff 	.word	0x03ff63ff

08004ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d138      	bne.n	8004b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e032      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d139      	bne.n	8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e033      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2224      	movs	r2, #36	; 0x24
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7fe fe0e 	bl	800381c <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
 8004c0c:	e092      	b.n	8004d34 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 808b 	bne.w	8004d34 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd feba 	bl	8002998 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004c24:	f241 3188 	movw	r1, #5000	; 0x1388
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fad0 	bl	80051ce <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <HAL_OSPI_Init+0x150>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68d1      	ldr	r1, [r2, #12]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6912      	ldr	r2, [r2, #16]
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0412      	lsls	r2, r2, #16
 8004c44:	4311      	orrs	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6952      	ldr	r2, [r2, #20]
 8004c4a:	3a01      	subs	r2, #1
 8004c4c:	0212      	lsls	r2, r2, #8
 8004c4e:	4311      	orrs	r1, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	69d2      	ldr	r2, [r2, #28]
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	0412      	lsls	r2, r2, #16
 8004c6e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2120      	movs	r1, #32
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fddc 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d146      	bne.n	8004d34 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	1e5a      	subs	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cdc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d107      	bne.n	8004d1c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0202 	orr.w	r2, r2, #2
 8004d1a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d24:	d103      	bne.n	8004d2e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
 8004d2c:	e002      	b.n	8004d34 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	f8e0f8f4 	.word	0xf8e0f8f4

08004d44 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
 8004d5a:	e015      	b.n	8004d88 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0202 	bic.w	r2, r2, #2
 8004d7a:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fd fe77 	bl	8002a70 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08a      	sub	sp, #40	; 0x28
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004d9e:	f7fe fd3d 	bl	800381c <HAL_GetTick>
 8004da2:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d104      	bne.n	8004dc0 <HAL_OSPI_Command+0x2e>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dbe:	d10d      	bne.n	8004ddc <HAL_OSPI_Command+0x4a>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b14      	cmp	r3, #20
 8004dc4:	d103      	bne.n	8004dce <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d006      	beq.n	8004ddc <HAL_OSPI_Command+0x4a>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b24      	cmp	r3, #36	; 0x24
 8004dd2:	d153      	bne.n	8004e7c <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d14f      	bne.n	8004e7c <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2200      	movs	r2, #0
 8004de4:	2120      	movs	r1, #32
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fd34 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d148      	bne.n	8004e88 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fd60 	bl	80058c4 <OSPI_ConfigCmd>
 8004e04:	4603      	mov	r3, r0
 8004e06:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004e08:	7ffb      	ldrb	r3, [r7, #31]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13c      	bne.n	8004e88 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10e      	bne.n	8004e34 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2102      	movs	r1, #2
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fd17 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004e32:	e029      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e42:	e021      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10b      	bne.n	8004e64 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	2b24      	cmp	r3, #36	; 0x24
 8004e52:	d103      	bne.n	8004e5c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e5a:	e015      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2214      	movs	r2, #20
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e62:	e011      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	2b14      	cmp	r3, #20
 8004e6a:	d103      	bne.n	8004e74 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e72:	e009      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004e7a:	e005      	b.n	8004e88 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2210      	movs	r2, #16
 8004e84:	649a      	str	r2, [r3, #72]	; 0x48
 8004e86:	e000      	b.n	8004e8a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8004e88:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ea0:	f7fe fcbc 	bl	800381c <HAL_GetTick>
 8004ea4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3350      	adds	r3, #80	; 0x50
 8004eac:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2208      	movs	r2, #8
 8004ebc:	649a      	str	r2, [r3, #72]	; 0x48
 8004ebe:	e057      	b.n	8004f70 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d14e      	bne.n	8004f66 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ef0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2104      	movs	r1, #4
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fca9 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d113      	bne.n	8004f34 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1df      	bne.n	8004ef2 <HAL_OSPI_Transmit+0x5e>
 8004f32:	e000      	b.n	8004f36 <HAL_OSPI_Transmit+0xa2>
          break;
 8004f34:	bf00      	nop

      if (status == HAL_OK)
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d119      	bne.n	8004f70 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2201      	movs	r2, #1
 8004f44:	2102      	movs	r1, #2
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fc84 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2202      	movs	r2, #2
 8004f62:	645a      	str	r2, [r3, #68]	; 0x44
 8004f64:	e004      	b.n	8004f70 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b08c      	sub	sp, #48	; 0x30
 8004f7e:	af02      	add	r7, sp, #8
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f86:	f7fe fc49 	bl	800381c <HAL_GetTick>
 8004f8a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3350      	adds	r3, #80	; 0x50
 8004f92:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	649a      	str	r2, [r3, #72]	; 0x48
 8004fb8:	e07c      	b.n	80050b4 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d172      	bne.n	80050a8 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff8:	d104      	bne.n	8005004 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	649a      	str	r2, [r3, #72]	; 0x48
 8005002:	e011      	b.n	8005028 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800500c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	649a      	str	r2, [r3, #72]	; 0x48
 800501c:	e004      	b.n	8005028 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2201      	movs	r2, #1
 8005030:	2106      	movs	r1, #6
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fc0e 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800503e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005042:	2b00      	cmp	r3, #0
 8005044:	d114      	bne.n	8005070 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	1e5a      	subs	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1dc      	bne.n	8005028 <HAL_OSPI_Receive+0xae>
 800506e:	e000      	b.n	8005072 <HAL_OSPI_Receive+0xf8>
          break;
 8005070:	bf00      	nop

      if (status == HAL_OK)
 8005072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11c      	bne.n	80050b4 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2201      	movs	r2, #1
 8005082:	2102      	movs	r1, #2
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fbe5 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8005090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10d      	bne.n	80050b4 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2202      	movs	r2, #2
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2202      	movs	r2, #2
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
 80050a6:	e005      	b.n	80050b4 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2210      	movs	r2, #16
 80050b2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80050b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80050cc:	f7fe fba6 	bl	800381c <HAL_GetTick>
 80050d0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80050e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d164      	bne.n	80051b6 <HAL_OSPI_AutoPolling+0xf6>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f4:	d15f      	bne.n	80051b6 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2120      	movs	r1, #32
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fba7 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800510a:	7ffb      	ldrb	r3, [r7, #31]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d158      	bne.n	80051c2 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	6852      	ldr	r2, [r2, #4]
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	6912      	ldr	r2, [r2, #16]
 8005130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6899      	ldr	r1, [r3, #8]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	430b      	orrs	r3, r1
 8005148:	431a      	orrs	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005152:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515c:	d104      	bne.n	8005168 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	649a      	str	r2, [r3, #72]	; 0x48
 8005166:	e011      	b.n	800518c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	649a      	str	r2, [r3, #72]	; 0x48
 8005180:	e004      	b.n	800518c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2201      	movs	r2, #1
 8005194:	2108      	movs	r1, #8
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fb5c 	bl	8005854 <OSPI_WaitFlagStateUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2208      	movs	r2, #8
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2202      	movs	r2, #2
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80051b4:	e005      	b.n	80051c2 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2210      	movs	r2, #16
 80051be:	649a      	str	r2, [r3, #72]	; 0x48
 80051c0:	e000      	b.n	80051c4 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 80051c2:	bf00      	nop
  }

  /* Return function status */
  return status;
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b092      	sub	sp, #72	; 0x48
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <HAL_OSPIM_Config+0x40>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d105      	bne.n	800521a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005218:	e004      	b.n	8005224 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800521a:	2301      	movs	r3, #1
 800521c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005224:	2300      	movs	r3, #0
 8005226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800522a:	e01f      	b.n	800526c <HAL_OSPIM_Config+0x80>
 800522c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005234:	3301      	adds	r3, #1
 8005236:	b2d8      	uxtb	r0, r3
 8005238:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800523c:	f107 0114 	add.w	r1, r7, #20
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	4619      	mov	r1, r3
 800524c:	f000 fc9c 	bl	8005b88 <OSPIM_GetConfig>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2208      	movs	r2, #8
 8005260:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005262:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005266:	3301      	adds	r3, #1
 8005268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800526c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005270:	2b01      	cmp	r3, #1
 8005272:	d9dd      	bls.n	8005230 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005274:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 82de 	bne.w	800583a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800527e:	4bc6      	ldr	r3, [pc, #792]	; (8005598 <HAL_OSPIM_Config+0x3ac>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800528a:	4bc3      	ldr	r3, [pc, #780]	; (8005598 <HAL_OSPIM_Config+0x3ac>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4ac2      	ldr	r2, [pc, #776]	; (8005598 <HAL_OSPIM_Config+0x3ac>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005296:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80052a2:	4bbe      	ldr	r3, [pc, #760]	; (800559c <HAL_OSPIM_Config+0x3b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80052ae:	4bbb      	ldr	r3, [pc, #748]	; (800559c <HAL_OSPIM_Config+0x3b0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4aba      	ldr	r2, [pc, #744]	; (800559c <HAL_OSPIM_Config+0x3b0>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80052ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80052c6:	49b6      	ldr	r1, [pc, #728]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 80052c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	3348      	adds	r3, #72	; 0x48
 80052d4:	443b      	add	r3, r7
 80052d6:	3b2c      	subs	r3, #44	; 0x2c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	48af      	ldr	r0, [pc, #700]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 80052e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	3348      	adds	r3, #72	; 0x48
 80052f0:	443b      	add	r3, r7
 80052f2:	3b2c      	subs	r3, #44	; 0x2c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4403      	add	r3, r0
 8005300:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	3348      	adds	r3, #72	; 0x48
 800530e:	443b      	add	r3, r7
 8005310:	3b34      	subs	r3, #52	; 0x34
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80a1 	beq.w	800545c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800531a:	49a1      	ldr	r1, [pc, #644]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800531c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	3348      	adds	r3, #72	; 0x48
 8005328:	443b      	add	r3, r7
 800532a:	3b34      	subs	r3, #52	; 0x34
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	489a      	ldr	r0, [pc, #616]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 8005338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3348      	adds	r3, #72	; 0x48
 8005344:	443b      	add	r3, r7
 8005346:	3b34      	subs	r3, #52	; 0x34
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	f021 0201 	bic.w	r2, r1, #1
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	3348      	adds	r3, #72	; 0x48
 8005362:	443b      	add	r3, r7
 8005364:	3b30      	subs	r3, #48	; 0x30
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01d      	beq.n	80053a8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800536c:	498c      	ldr	r1, [pc, #560]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800536e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	3348      	adds	r3, #72	; 0x48
 800537a:	443b      	add	r3, r7
 800537c:	3b30      	subs	r3, #48	; 0x30
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3b01      	subs	r3, #1
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	4885      	ldr	r0, [pc, #532]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800538a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	3348      	adds	r3, #72	; 0x48
 8005396:	443b      	add	r3, r7
 8005398:	3b30      	subs	r3, #48	; 0x30
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3b01      	subs	r3, #1
 800539e:	f021 0210 	bic.w	r2, r1, #16
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4403      	add	r3, r0
 80053a6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80053a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	3348      	adds	r3, #72	; 0x48
 80053b4:	443b      	add	r3, r7
 80053b6:	3b28      	subs	r3, #40	; 0x28
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80053be:	4978      	ldr	r1, [pc, #480]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 80053c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	3348      	adds	r3, #72	; 0x48
 80053cc:	443b      	add	r3, r7
 80053ce:	3b28      	subs	r3, #40	; 0x28
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	4870      	ldr	r0, [pc, #448]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 80053e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3348      	adds	r3, #72	; 0x48
 80053ec:	443b      	add	r3, r7
 80053ee:	3b28      	subs	r3, #40	; 0x28
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4403      	add	r3, r0
 8005400:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	443b      	add	r3, r7
 8005410:	3b24      	subs	r3, #36	; 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d021      	beq.n	800545c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005418:	4961      	ldr	r1, [pc, #388]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800541a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	3348      	adds	r3, #72	; 0x48
 8005426:	443b      	add	r3, r7
 8005428:	3b24      	subs	r3, #36	; 0x24
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	4859      	ldr	r0, [pc, #356]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800543a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	3348      	adds	r3, #72	; 0x48
 8005446:	443b      	add	r3, r7
 8005448:	3b24      	subs	r3, #36	; 0x24
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4403      	add	r3, r0
 800545a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	3348      	adds	r3, #72	; 0x48
 800546e:	443b      	add	r3, r7
 8005470:	3b34      	subs	r3, #52	; 0x34
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4299      	cmp	r1, r3
 8005476:	d038      	beq.n	80054ea <HAL_OSPIM_Config+0x2fe>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	3348      	adds	r3, #72	; 0x48
 800548a:	443b      	add	r3, r7
 800548c:	3b30      	subs	r3, #48	; 0x30
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4299      	cmp	r1, r3
 8005492:	d02a      	beq.n	80054ea <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3348      	adds	r3, #72	; 0x48
 80054a6:	443b      	add	r3, r7
 80054a8:	3b2c      	subs	r3, #44	; 0x2c
 80054aa:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80054ac:	4299      	cmp	r1, r3
 80054ae:	d01c      	beq.n	80054ea <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68d9      	ldr	r1, [r3, #12]
 80054b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	3348      	adds	r3, #72	; 0x48
 80054c2:	443b      	add	r3, r7
 80054c4:	3b28      	subs	r3, #40	; 0x28
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d00e      	beq.n	80054ea <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6919      	ldr	r1, [r3, #16]
 80054d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	3348      	adds	r3, #72	; 0x48
 80054de:	443b      	add	r3, r7
 80054e0:	3b24      	subs	r3, #36	; 0x24
 80054e2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80054e4:	4299      	cmp	r1, r3
 80054e6:	f040 80d3 	bne.w	8005690 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80054ea:	492d      	ldr	r1, [pc, #180]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 80054ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	3348      	adds	r3, #72	; 0x48
 80054fa:	443b      	add	r3, r7
 80054fc:	3b34      	subs	r3, #52	; 0x34
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3b01      	subs	r3, #1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	6859      	ldr	r1, [r3, #4]
 8005508:	4825      	ldr	r0, [pc, #148]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 800550a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	3348      	adds	r3, #72	; 0x48
 8005518:	443b      	add	r3, r7
 800551a:	3b34      	subs	r3, #52	; 0x34
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	f021 0201 	bic.w	r2, r1, #1
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4403      	add	r3, r0
 8005528:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800552a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	3348      	adds	r3, #72	; 0x48
 8005538:	443b      	add	r3, r7
 800553a:	3b30      	subs	r3, #48	; 0x30
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01f      	beq.n	8005582 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005542:	4917      	ldr	r1, [pc, #92]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 8005544:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	3348      	adds	r3, #72	; 0x48
 8005552:	443b      	add	r3, r7
 8005554:	3b30      	subs	r3, #48	; 0x30
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	6859      	ldr	r1, [r3, #4]
 8005560:	480f      	ldr	r0, [pc, #60]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 8005562:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	3348      	adds	r3, #72	; 0x48
 8005570:	443b      	add	r3, r7
 8005572:	3b30      	subs	r3, #48	; 0x30
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	f021 0210 	bic.w	r2, r1, #16
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4403      	add	r3, r0
 8005580:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005582:	4907      	ldr	r1, [pc, #28]	; (80055a0 <HAL_OSPIM_Config+0x3b4>)
 8005584:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	3348      	adds	r3, #72	; 0x48
 8005592:	443b      	add	r3, r7
 8005594:	3b2c      	subs	r3, #44	; 0x2c
 8005596:	e005      	b.n	80055a4 <HAL_OSPIM_Config+0x3b8>
 8005598:	a0001000 	.word	0xa0001000
 800559c:	a0001400 	.word	0xa0001400
 80055a0:	50061c00 	.word	0x50061c00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	48a6      	ldr	r0, [pc, #664]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80055b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	3348      	adds	r3, #72	; 0x48
 80055be:	443b      	add	r3, r7
 80055c0:	3b2c      	subs	r3, #44	; 0x2c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4403      	add	r3, r0
 80055ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80055d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	3348      	adds	r3, #72	; 0x48
 80055de:	443b      	add	r3, r7
 80055e0:	3b28      	subs	r3, #40	; 0x28
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d023      	beq.n	8005630 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80055e8:	4997      	ldr	r1, [pc, #604]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80055ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	3348      	adds	r3, #72	; 0x48
 80055f8:	443b      	add	r3, r7
 80055fa:	3b28      	subs	r3, #40	; 0x28
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3b01      	subs	r3, #1
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	488f      	ldr	r0, [pc, #572]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 800560c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	3348      	adds	r3, #72	; 0x48
 800561a:	443b      	add	r3, r7
 800561c:	3b28      	subs	r3, #40	; 0x28
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4403      	add	r3, r0
 800562e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005630:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	3348      	adds	r3, #72	; 0x48
 800563e:	443b      	add	r3, r7
 8005640:	3b24      	subs	r3, #36	; 0x24
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005648:	497f      	ldr	r1, [pc, #508]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 800564a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	3348      	adds	r3, #72	; 0x48
 8005658:	443b      	add	r3, r7
 800565a:	3b24      	subs	r3, #36	; 0x24
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	4877      	ldr	r0, [pc, #476]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 800566c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	3348      	adds	r3, #72	; 0x48
 800567a:	443b      	add	r3, r7
 800567c:	3b24      	subs	r3, #36	; 0x24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3b01      	subs	r3, #1
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4403      	add	r3, r0
 800568e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005690:	4a6d      	ldr	r2, [pc, #436]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	3b01      	subs	r3, #1
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a4:	025b      	lsls	r3, r3, #9
 80056a6:	431a      	orrs	r2, r3
 80056a8:	4967      	ldr	r1, [pc, #412]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	440b      	add	r3, r1
 80056b8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80056ba:	4a63      	ldr	r2, [pc, #396]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f023 0203 	bic.w	r2, r3, #3
 80056cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	495d      	ldr	r1, [pc, #372]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3b01      	subs	r3, #1
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d014      	beq.n	8005716 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80056ec:	4a56      	ldr	r2, [pc, #344]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	015b      	lsls	r3, r3, #5
 8005702:	431a      	orrs	r2, r3
 8005704:	4950      	ldr	r1, [pc, #320]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	f042 0210 	orr.w	r2, r2, #16
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d019      	beq.n	8005756 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005722:	4a49      	ldr	r2, [pc, #292]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	3b01      	subs	r3, #1
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573a:	049b      	lsls	r3, r3, #18
 800573c:	431a      	orrs	r2, r3
 800573e:	4942      	ldr	r1, [pc, #264]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	3b01      	subs	r3, #1
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e01c      	b.n	8005790 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800575e:	4a3a      	ldr	r2, [pc, #232]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	3b01      	subs	r3, #1
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	069b      	lsls	r3, r3, #26
 8005778:	431a      	orrs	r2, r3
 800577a:	4933      	ldr	r1, [pc, #204]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	3b01      	subs	r3, #1
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d019      	beq.n	80057d0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800579c:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b4:	049b      	lsls	r3, r3, #18
 80057b6:	431a      	orrs	r2, r3
 80057b8:	4923      	ldr	r1, [pc, #140]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	3b01      	subs	r3, #1
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e01c      	b.n	800580a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	3b01      	subs	r3, #1
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f0:	069b      	lsls	r3, r3, #26
 80057f2:	431a      	orrs	r2, r3
 80057f4:	4914      	ldr	r1, [pc, #80]	; (8005848 <HAL_OSPIM_Config+0x65c>)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800580a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_OSPIM_Config+0x660>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <HAL_OSPIM_Config+0x660>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005822:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_OSPIM_Config+0x664>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a07      	ldr	r2, [pc, #28]	; (8005850 <HAL_OSPIM_Config+0x664>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800583a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800583e:	4618      	mov	r0, r3
 8005840:	3748      	adds	r7, #72	; 0x48
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	50061c00 	.word	0x50061c00
 800584c:	a0001000 	.word	0xa0001000
 8005850:	a0001400 	.word	0xa0001400

08005854 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005864:	e01a      	b.n	800589c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d016      	beq.n	800589c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586e:	f7fd ffd5 	bl	800381c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005890:	f043 0201 	orr.w	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e00e      	b.n	80058ba <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bf14      	ite	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	2300      	moveq	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1d6      	bne.n	8005866 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	; 0x24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058e0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d114      	bne.n	8005932 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005910:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800591a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005924:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e013      	b.n	800595a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800593a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005944:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800594e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005958:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	431a      	orrs	r2, r3
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	4319      	orrs	r1, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	430b      	orrs	r3, r1
 8005990:	431a      	orrs	r2, r3
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 021f 	bic.w	r2, r3, #31
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	431a      	orrs	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3a01      	subs	r2, #1
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8099 	beq.w	8005b00 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d055      	beq.n	8005a82 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01e      	beq.n	8005a1c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b68      	ldr	r3, [pc, #416]	; (8005b84 <OSPI_ConfigCmd+0x2c0>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	68d1      	ldr	r1, [r2, #12]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	6952      	ldr	r2, [r2, #20]
 80059ee:	4311      	orrs	r1, r2
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	6912      	ldr	r2, [r2, #16]
 80059f4:	4311      	orrs	r1, r2
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	69d2      	ldr	r2, [r2, #28]
 80059fa:	4311      	orrs	r1, r2
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a00:	4311      	orrs	r1, r2
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	6a12      	ldr	r2, [r2, #32]
 8005a06:	4311      	orrs	r1, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a12:	430a      	orrs	r2, r1
 8005a14:	431a      	orrs	r2, r3
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e028      	b.n	8005a6e <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	68d1      	ldr	r1, [r2, #12]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	6952      	ldr	r2, [r2, #20]
 8005a30:	4311      	orrs	r1, r2
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	6912      	ldr	r2, [r2, #16]
 8005a36:	4311      	orrs	r1, r2
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	69d2      	ldr	r2, [r2, #28]
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a42:	4311      	orrs	r1, r2
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	6a12      	ldr	r2, [r2, #32]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a58:	d109      	bne.n	8005a6e <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d105      	bne.n	8005a6e <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	6992      	ldr	r2, [r2, #24]
 8005a7e:	649a      	str	r2, [r3, #72]	; 0x48
 8005a80:	e078      	b.n	8005b74 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005a92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	68d1      	ldr	r1, [r2, #12]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	6952      	ldr	r2, [r2, #20]
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	6912      	ldr	r2, [r2, #16]
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aaa:	4311      	orrs	r1, r2
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e01d      	b.n	8005af6 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68d9      	ldr	r1, [r3, #12]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4319      	orrs	r1, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae0:	d109      	bne.n	8005af6 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d105      	bne.n	8005af6 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e039      	b.n	8005b74 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d030      	beq.n	8005b6a <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005b18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	69d1      	ldr	r1, [r2, #28]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b24:	4311      	orrs	r1, r2
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	6a12      	ldr	r2, [r2, #32]
 8005b2a:	4311      	orrs	r1, r2
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b30:	4311      	orrs	r1, r2
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b36:	430a      	orrs	r2, r1
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e00e      	b.n	8005b5e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	4319      	orrs	r1, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	430b      	orrs	r3, r1
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	6992      	ldr	r2, [r2, #24]
 8005b66:	649a      	str	r2, [r3, #72]	; 0x48
 8005b68:	e004      	b.n	8005b74 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2208      	movs	r2, #8
 8005b72:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	; 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	f0ffc0c0 	.word	0xf0ffc0c0

08005b88 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <OSPIM_GetConfig+0x26>
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d802      	bhi.n	8005bae <OSPIM_GetConfig+0x26>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
 8005bb2:	e08e      	b.n	8005cd2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d101      	bne.n	8005bdc <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005bd8:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <OSPIM_GetConfig+0x158>)
 8005bda:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e074      	b.n	8005ccc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <OSPIM_GetConfig+0x15c>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4053      	eors	r3, r2
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4053      	eors	r3, r2
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4053      	eors	r3, r2
 8005c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d018      	beq.n	8005c8a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4053      	eors	r3, r2
 8005c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d111      	bne.n	8005c8a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	e005      	b.n	8005c8a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4053      	eors	r3, r2
 8005c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d111      	bne.n	8005cc6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	611a      	str	r2, [r3, #16]
 8005cb8:	e005      	b.n	8005cc6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d987      	bls.n	8005be2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	04040222 	.word	0x04040222
 8005ce4:	50061c00 	.word	0x50061c00

08005ce8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d102      	bne.n	8005d00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfe:	e00b      	b.n	8005d18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	d102      	bne.n	8005d16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d14:	e000      	b.n	8005d18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005d16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40007000 	.word	0x40007000

08005d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d141      	bne.n	8005dba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d36:	4b4b      	ldr	r3, [pc, #300]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d131      	bne.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	4a46      	ldr	r2, [pc, #280]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d54:	4b43      	ldr	r3, [pc, #268]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d5c:	4a41      	ldr	r2, [pc, #260]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005d64:	4b40      	ldr	r3, [pc, #256]	; (8005e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2232      	movs	r2, #50	; 0x32
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d7a:	e002      	b.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d82:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d102      	bne.n	8005d96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f2      	bne.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d96:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da2:	d158      	bne.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e057      	b.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005da8:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	4a2d      	ldr	r2, [pc, #180]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005db8:	e04d      	b.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc0:	d141      	bne.n	8005e46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dc2:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d131      	bne.n	8005e34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd0:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005de0:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2232      	movs	r2, #50	; 0x32
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	0c9b      	lsrs	r3, r3, #18
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e06:	e002      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e0e:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d102      	bne.n	8005e22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f2      	bne.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d112      	bne.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e011      	b.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e44:	e007      	b.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e4e:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40007000 	.word	0x40007000
 8005e68:	20000020 	.word	0x20000020
 8005e6c:	431bde83 	.word	0x431bde83

08005e70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f000 bc08 	b.w	8006694 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e84:	4b96      	ldr	r3, [pc, #600]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e8e:	4b94      	ldr	r3, [pc, #592]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80e4 	beq.w	800606e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4c>
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	f040 808b 	bne.w	8005fca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	f040 8087 	bne.w	8005fca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ebc:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x64>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e3df      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	4b81      	ldr	r3, [pc, #516]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <HAL_RCC_OscConfig+0x7e>
 8005ee4:	4b7e      	ldr	r3, [pc, #504]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eec:	e005      	b.n	8005efa <HAL_RCC_OscConfig+0x8a>
 8005eee:	4b7c      	ldr	r3, [pc, #496]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d223      	bcs.n	8005f46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fdfe 	bl	8006b04 <RCC_SetFlashLatencyFromMSIRange>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e3c0      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f12:	4b73      	ldr	r3, [pc, #460]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a72      	ldr	r2, [pc, #456]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b70      	ldr	r3, [pc, #448]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	496d      	ldr	r1, [pc, #436]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f30:	4b6b      	ldr	r3, [pc, #428]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	4968      	ldr	r1, [pc, #416]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	e025      	b.n	8005f92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f46:	4b66      	ldr	r3, [pc, #408]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a65      	ldr	r2, [pc, #404]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f4c:	f043 0308 	orr.w	r3, r3, #8
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b63      	ldr	r3, [pc, #396]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	4960      	ldr	r1, [pc, #384]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f64:	4b5e      	ldr	r3, [pc, #376]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	495b      	ldr	r1, [pc, #364]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fdbe 	bl	8006b04 <RCC_SetFlashLatencyFromMSIRange>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e380      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f92:	f000 fcc1 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 8005f96:	4602      	mov	r2, r0
 8005f98:	4b51      	ldr	r3, [pc, #324]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	4950      	ldr	r1, [pc, #320]	; (80060e4 <HAL_RCC_OscConfig+0x274>)
 8005fa4:	5ccb      	ldrb	r3, [r1, r3]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	4a4e      	ldr	r2, [pc, #312]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005fb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005fb2:	4b4e      	ldr	r3, [pc, #312]	; (80060ec <HAL_RCC_OscConfig+0x27c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fc fdfe 	bl	8002bb8 <HAL_InitTick>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d052      	beq.n	800606c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	e364      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d032      	beq.n	8006038 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fd2:	4b43      	ldr	r3, [pc, #268]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a42      	ldr	r2, [pc, #264]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fde:	f7fd fc1d 	bl	800381c <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fe6:	f7fd fc19 	bl	800381c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e34d      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ff8:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006004:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a35      	ldr	r2, [pc, #212]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 800600a:	f043 0308 	orr.w	r3, r3, #8
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4930      	ldr	r1, [pc, #192]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 800601e:	4313      	orrs	r3, r2
 8006020:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006022:	4b2f      	ldr	r3, [pc, #188]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	492b      	ldr	r1, [pc, #172]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006032:	4313      	orrs	r3, r2
 8006034:	604b      	str	r3, [r1, #4]
 8006036:	e01a      	b.n	800606e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006038:	4b29      	ldr	r3, [pc, #164]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006044:	f7fd fbea 	bl	800381c <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800604c:	f7fd fbe6 	bl	800381c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e31a      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <HAL_RCC_OscConfig+0x1dc>
 800606a:	e000      	b.n	800606e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800606c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d073      	beq.n	8006162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d005      	beq.n	800608c <HAL_RCC_OscConfig+0x21c>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d10e      	bne.n	80060a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d10b      	bne.n	80060a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608c:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d063      	beq.n	8006160 <HAL_RCC_OscConfig+0x2f0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d15f      	bne.n	8006160 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e2f7      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ac:	d106      	bne.n	80060bc <HAL_RCC_OscConfig+0x24c>
 80060ae:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	e025      	b.n	8006108 <HAL_RCC_OscConfig+0x298>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060c4:	d114      	bne.n	80060f0 <HAL_RCC_OscConfig+0x280>
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a05      	ldr	r2, [pc, #20]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a02      	ldr	r2, [pc, #8]	; (80060e0 <HAL_RCC_OscConfig+0x270>)
 80060d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e013      	b.n	8006108 <HAL_RCC_OscConfig+0x298>
 80060e0:	40021000 	.word	0x40021000
 80060e4:	0800ce8c 	.word	0x0800ce8c
 80060e8:	20000020 	.word	0x20000020
 80060ec:	200000b4 	.word	0x200000b4
 80060f0:	4ba0      	ldr	r3, [pc, #640]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a9f      	ldr	r2, [pc, #636]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80060f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b9d      	ldr	r3, [pc, #628]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a9c      	ldr	r2, [pc, #624]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d013      	beq.n	8006138 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fd fb84 	bl	800381c <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006118:	f7fd fb80 	bl	800381c <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b64      	cmp	r3, #100	; 0x64
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e2b4      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800612a:	4b92      	ldr	r3, [pc, #584]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x2a8>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fd fb70 	bl	800381c <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006140:	f7fd fb6c 	bl	800381c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e2a0      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006152:	4b88      	ldr	r3, [pc, #544]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0x2d0>
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d060      	beq.n	8006230 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b04      	cmp	r3, #4
 8006172:	d005      	beq.n	8006180 <HAL_RCC_OscConfig+0x310>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b0c      	cmp	r3, #12
 8006178:	d119      	bne.n	80061ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d116      	bne.n	80061ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006180:	4b7c      	ldr	r3, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_OscConfig+0x328>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e27d      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006198:	4b76      	ldr	r3, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	4973      	ldr	r1, [pc, #460]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ac:	e040      	b.n	8006230 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d023      	beq.n	80061fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b6:	4b6f      	ldr	r3, [pc, #444]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fd fb2b 	bl	800381c <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ca:	f7fd fb27 	bl	800381c <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e25b      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061dc:	4b65      	ldr	r3, [pc, #404]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e8:	4b62      	ldr	r3, [pc, #392]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	495f      	ldr	r1, [pc, #380]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
 80061fc:	e018      	b.n	8006230 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061fe:	4b5d      	ldr	r3, [pc, #372]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a5c      	ldr	r2, [pc, #368]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620a:	f7fd fb07 	bl	800381c <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006212:	f7fd fb03 	bl	800381c <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e237      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f0      	bne.n	8006212 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03c      	beq.n	80062b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01c      	beq.n	800627e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	4a4a      	ldr	r2, [pc, #296]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006254:	f7fd fae2 	bl	800381c <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800625c:	f7fd fade 	bl	800381c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e212      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ef      	beq.n	800625c <HAL_RCC_OscConfig+0x3ec>
 800627c:	e01b      	b.n	80062b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006284:	4a3b      	ldr	r2, [pc, #236]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628e:	f7fd fac5 	bl	800381c <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006296:	f7fd fac1 	bl	800381c <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e1f5      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062a8:	4b32      	ldr	r3, [pc, #200]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80062aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ef      	bne.n	8006296 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80a6 	beq.w	8006410 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80062ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10d      	bne.n	80062f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d4:	4b27      	ldr	r3, [pc, #156]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80062d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062de:	6593      	str	r3, [r2, #88]	; 0x58
 80062e0:	4b24      	ldr	r3, [pc, #144]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ec:	2301      	movs	r3, #1
 80062ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <HAL_RCC_OscConfig+0x508>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d118      	bne.n	800632e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <HAL_RCC_OscConfig+0x508>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_RCC_OscConfig+0x508>)
 8006302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006308:	f7fd fa88 	bl	800381c <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006310:	f7fd fa84 	bl	800381c <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e1b8      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <HAL_RCC_OscConfig+0x508>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d108      	bne.n	8006348 <HAL_RCC_OscConfig+0x4d8>
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	4a0d      	ldr	r2, [pc, #52]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006346:	e029      	b.n	800639c <HAL_RCC_OscConfig+0x52c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d115      	bne.n	800637c <HAL_RCC_OscConfig+0x50c>
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	4a07      	ldr	r2, [pc, #28]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006358:	f043 0304 	orr.w	r3, r3, #4
 800635c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	4a03      	ldr	r2, [pc, #12]	; (8006374 <HAL_RCC_OscConfig+0x504>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006370:	e014      	b.n	800639c <HAL_RCC_OscConfig+0x52c>
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	40007000 	.word	0x40007000
 800637c:	4b9d      	ldr	r3, [pc, #628]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	4a9c      	ldr	r2, [pc, #624]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800638c:	4b99      	ldr	r3, [pc, #612]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	4a98      	ldr	r2, [pc, #608]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006394:	f023 0304 	bic.w	r3, r3, #4
 8006398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d016      	beq.n	80063d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fd fa3a 	bl	800381c <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fd fa36 	bl	800381c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e168      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c2:	4b8c      	ldr	r3, [pc, #560]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0ed      	beq.n	80063ac <HAL_RCC_OscConfig+0x53c>
 80063d0:	e015      	b.n	80063fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d2:	f7fd fa23 	bl	800381c <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063d8:	e00a      	b.n	80063f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fd fa1f 	bl	800381c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e151      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063f0:	4b80      	ldr	r3, [pc, #512]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1ed      	bne.n	80063da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063fe:	7ffb      	ldrb	r3, [r7, #31]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d105      	bne.n	8006410 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006404:	4b7b      	ldr	r3, [pc, #492]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	4a7a      	ldr	r2, [pc, #488]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800640a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800640e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d03c      	beq.n	8006496 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01c      	beq.n	800645e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006424:	4b73      	ldr	r3, [pc, #460]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800642a:	4a72      	ldr	r2, [pc, #456]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fd f9f2 	bl	800381c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800643c:	f7fd f9ee 	bl	800381c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e122      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800644e:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0ef      	beq.n	800643c <HAL_RCC_OscConfig+0x5cc>
 800645c:	e01b      	b.n	8006496 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800645e:	4b65      	ldr	r3, [pc, #404]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006464:	4a63      	ldr	r2, [pc, #396]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646e:	f7fd f9d5 	bl	800381c <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006476:	f7fd f9d1 	bl	800381c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e105      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006488:	4b5a      	ldr	r3, [pc, #360]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800648a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ef      	bne.n	8006476 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 80f9 	beq.w	8006692 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	f040 80cf 	bne.w	8006648 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064aa:	4b52      	ldr	r3, [pc, #328]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 0203 	and.w	r2, r3, #3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d12c      	bne.n	8006518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	3b01      	subs	r3, #1
 80064ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d123      	bne.n	8006518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064dc:	429a      	cmp	r2, r3
 80064de:	d11b      	bne.n	8006518 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d113      	bne.n	8006518 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	3b01      	subs	r3, #1
 80064fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d109      	bne.n	8006518 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	3b01      	subs	r3, #1
 8006512:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d071      	beq.n	80065fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b0c      	cmp	r3, #12
 800651c:	d068      	beq.n	80065f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800651e:	4b35      	ldr	r3, [pc, #212]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800652a:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e0ac      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800653a:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2d      	ldr	r2, [pc, #180]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006544:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006546:	f7fd f969 	bl	800381c <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654e:	f7fd f965 	bl	800381c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e099      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006560:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f0      	bne.n	800654e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800656c:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	4b21      	ldr	r3, [pc, #132]	; (80065f8 <HAL_RCC_OscConfig+0x788>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800657c:	3a01      	subs	r2, #1
 800657e:	0112      	lsls	r2, r2, #4
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006586:	0212      	lsls	r2, r2, #8
 8006588:	4311      	orrs	r1, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800658e:	0852      	lsrs	r2, r2, #1
 8006590:	3a01      	subs	r2, #1
 8006592:	0552      	lsls	r2, r2, #21
 8006594:	4311      	orrs	r1, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800659a:	0852      	lsrs	r2, r2, #1
 800659c:	3a01      	subs	r2, #1
 800659e:	0652      	lsls	r2, r2, #25
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065a6:	06d2      	lsls	r2, r2, #27
 80065a8:	430a      	orrs	r2, r1
 80065aa:	4912      	ldr	r1, [pc, #72]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a0f      	ldr	r2, [pc, #60]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4a0c      	ldr	r2, [pc, #48]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065c8:	f7fd f928 	bl	800381c <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fd f924 	bl	800381c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e058      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e2:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <HAL_RCC_OscConfig+0x784>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065ee:	e050      	b.n	8006692 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e04f      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
 80065f4:	40021000 	.word	0x40021000
 80065f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d144      	bne.n	8006692 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006608:	4b24      	ldr	r3, [pc, #144]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a23      	ldr	r2, [pc, #140]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a20      	ldr	r2, [pc, #128]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006620:	f7fd f8fc 	bl	800381c <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fd f8f8 	bl	800381c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e02c      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800663a:	4b18      	ldr	r3, [pc, #96]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCC_OscConfig+0x7b8>
 8006646:	e024      	b.n	8006692 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d01f      	beq.n	800668e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665a:	f7fd f8df 	bl	800381c <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006662:	f7fd f8db 	bl	800381c <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e00f      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	4905      	ldr	r1, [pc, #20]	; (800669c <HAL_RCC_OscConfig+0x82c>)
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_RCC_OscConfig+0x830>)
 8006688:	4013      	ands	r3, r2
 800668a:	60cb      	str	r3, [r1, #12]
 800668c:	e001      	b.n	8006692 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40021000 	.word	0x40021000
 80066a0:	feeefffc 	.word	0xfeeefffc

080066a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e11d      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066bc:	4b90      	ldr	r3, [pc, #576]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d910      	bls.n	80066ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ca:	4b8d      	ldr	r3, [pc, #564]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 020f 	bic.w	r2, r3, #15
 80066d2:	498b      	ldr	r1, [pc, #556]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b89      	ldr	r3, [pc, #548]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e105      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	4b81      	ldr	r3, [pc, #516]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006704:	429a      	cmp	r2, r3
 8006706:	d908      	bls.n	800671a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b7e      	ldr	r3, [pc, #504]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	497b      	ldr	r1, [pc, #492]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d079      	beq.n	800681a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d11e      	bne.n	800676c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672e:	4b75      	ldr	r3, [pc, #468]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0dc      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800673e:	f000 fa3b 	bl	8006bb8 <RCC_GetSysClockFreqFromPLLSource>
 8006742:	4603      	mov	r3, r0
 8006744:	4a70      	ldr	r2, [pc, #448]	; (8006908 <HAL_RCC_ClockConfig+0x264>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d946      	bls.n	80067d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800674a:	4b6e      	ldr	r3, [pc, #440]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d140      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006756:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800675e:	4a69      	ldr	r2, [pc, #420]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e035      	b.n	80067d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d107      	bne.n	8006784 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006774:	4b63      	ldr	r3, [pc, #396]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d115      	bne.n	80067ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0b9      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800678c:	4b5d      	ldr	r3, [pc, #372]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0ad      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679c:	4b59      	ldr	r3, [pc, #356]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0a5      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80067ac:	f000 f8b4 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80067b0:	4603      	mov	r3, r0
 80067b2:	4a55      	ldr	r2, [pc, #340]	; (8006908 <HAL_RCC_ClockConfig+0x264>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d90f      	bls.n	80067d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80067b8:	4b52      	ldr	r3, [pc, #328]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067c4:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067cc:	4a4d      	ldr	r2, [pc, #308]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80067d4:	2380      	movs	r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067d8:	4b4a      	ldr	r3, [pc, #296]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f023 0203 	bic.w	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4947      	ldr	r1, [pc, #284]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ea:	f7fd f817 	bl	800381c <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f0:	e00a      	b.n	8006808 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f2:	f7fd f813 	bl	800381c <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006800:	4293      	cmp	r3, r2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e077      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006808:	4b3e      	ldr	r3, [pc, #248]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 020c 	and.w	r2, r3, #12
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	429a      	cmp	r2, r3
 8006818:	d1eb      	bne.n	80067f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b80      	cmp	r3, #128	; 0x80
 800681e:	d105      	bne.n	800682c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006820:	4b38      	ldr	r3, [pc, #224]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a37      	ldr	r2, [pc, #220]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d010      	beq.n	800685a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	4b31      	ldr	r3, [pc, #196]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006844:	429a      	cmp	r2, r3
 8006846:	d208      	bcs.n	800685a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006848:	4b2e      	ldr	r3, [pc, #184]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	492b      	ldr	r1, [pc, #172]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006856:	4313      	orrs	r3, r2
 8006858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800685a:	4b29      	ldr	r3, [pc, #164]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d210      	bcs.n	800688a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006868:	4b25      	ldr	r3, [pc, #148]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f023 020f 	bic.w	r2, r3, #15
 8006870:	4923      	ldr	r1, [pc, #140]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006878:	4b21      	ldr	r3, [pc, #132]	; (8006900 <HAL_RCC_ClockConfig+0x25c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d001      	beq.n	800688a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e036      	b.n	80068f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006896:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	4918      	ldr	r1, [pc, #96]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4910      	ldr	r1, [pc, #64]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068c8:	f000 f826 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80068cc:	4602      	mov	r2, r0
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <HAL_RCC_ClockConfig+0x260>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	490c      	ldr	r1, [pc, #48]	; (800690c <HAL_RCC_ClockConfig+0x268>)
 80068da:	5ccb      	ldrb	r3, [r1, r3]
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <HAL_RCC_ClockConfig+0x26c>)
 80068e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <HAL_RCC_ClockConfig+0x270>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fc f963 	bl	8002bb8 <HAL_InitTick>
 80068f2:	4603      	mov	r3, r0
 80068f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40022000 	.word	0x40022000
 8006904:	40021000 	.word	0x40021000
 8006908:	04c4b400 	.word	0x04c4b400
 800690c:	0800ce8c 	.word	0x0800ce8c
 8006910:	20000020 	.word	0x20000020
 8006914:	200000b4 	.word	0x200000b4

08006918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	; 0x24
 800691c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	2300      	movs	r3, #0
 8006924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006930:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x34>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b0c      	cmp	r3, #12
 8006944:	d121      	bne.n	800698a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d11e      	bne.n	800698a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800694c:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d107      	bne.n	8006968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006958:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800695a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e005      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006968:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006974:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10d      	bne.n	80069a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006988:	e00a      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d102      	bne.n	8006996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e004      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b08      	cmp	r3, #8
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800699c:	4b23      	ldr	r3, [pc, #140]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800699e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d134      	bne.n	8006a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069a6:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d003      	beq.n	80069be <HAL_RCC_GetSysClockFreq+0xa6>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d003      	beq.n	80069c4 <HAL_RCC_GetSysClockFreq+0xac>
 80069bc:	e005      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80069c0:	617b      	str	r3, [r7, #20]
      break;
 80069c2:	e005      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80069c4:	4b19      	ldr	r3, [pc, #100]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80069c6:	617b      	str	r3, [r7, #20]
      break;
 80069c8:	e002      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	617b      	str	r3, [r7, #20]
      break;
 80069ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	3301      	adds	r3, #1
 80069dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	fb03 f202 	mul.w	r2, r3, r2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	0e5b      	lsrs	r3, r3, #25
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	3301      	adds	r3, #1
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a10:	69bb      	ldr	r3, [r7, #24]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
 8006a24:	0800cea4 	.word	0x0800cea4
 8006a28:	00f42400 	.word	0x00f42400
 8006a2c:	007a1200 	.word	0x007a1200

08006a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000020 	.word	0x20000020

08006a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a4c:	f7ff fff0 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	4904      	ldr	r1, [pc, #16]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a5e:	5ccb      	ldrb	r3, [r1, r3]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800ce9c 	.word	0x0800ce9c

08006a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a78:	f7ff ffda 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0adb      	lsrs	r3, r3, #11
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4904      	ldr	r1, [pc, #16]	; (8006a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	0800ce9c 	.word	0x0800ce9c

08006aa0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220f      	movs	r2, #15
 8006aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0203 	and.w	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RCC_GetClockConfig+0x60>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40022000 	.word	0x40022000

08006b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b1c:	f7ff f8e4 	bl	8005ce8 <HAL_PWREx_GetVoltageRange>
 8006b20:	6178      	str	r0, [r7, #20]
 8006b22:	e014      	b.n	8006b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b24:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b28:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b30:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b3c:	f7ff f8d4 	bl	8005ce8 <HAL_PWREx_GetVoltageRange>
 8006b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d10b      	bne.n	8006b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d913      	bls.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2ba0      	cmp	r3, #160	; 0xa0
 8006b60:	d902      	bls.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b62:	2302      	movs	r3, #2
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	e00d      	b.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b68:	2301      	movs	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	e00a      	b.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b7f      	cmp	r3, #127	; 0x7f
 8006b72:	d902      	bls.n	8006b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006b74:	2302      	movs	r3, #2
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	e004      	b.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b70      	cmp	r3, #112	; 0x70
 8006b7e:	d101      	bne.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b80:	2301      	movs	r3, #1
 8006b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f023 020f 	bic.w	r2, r3, #15
 8006b8c:	4909      	ldr	r1, [pc, #36]	; (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d001      	beq.n	8006ba6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40022000 	.word	0x40022000

08006bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bbe:	4b2d      	ldr	r3, [pc, #180]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d00b      	beq.n	8006be6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d825      	bhi.n	8006c20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d008      	beq.n	8006bec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d11f      	bne.n	8006c20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006be2:	613b      	str	r3, [r7, #16]
    break;
 8006be4:	e01f      	b.n	8006c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006be6:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006be8:	613b      	str	r3, [r7, #16]
    break;
 8006bea:	e01c      	b.n	8006c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bec:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e005      	b.n	8006c14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1c:	613b      	str	r3, [r7, #16]
    break;
 8006c1e:	e002      	b.n	8006c26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
    break;
 8006c24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	3301      	adds	r3, #1
 8006c32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	fb03 f202 	mul.w	r2, r3, r2
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	0e5b      	lsrs	r3, r3, #25
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	3301      	adds	r3, #1
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006c66:	683b      	ldr	r3, [r7, #0]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	40021000 	.word	0x40021000
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	007a1200 	.word	0x007a1200
 8006c80:	0800cea4 	.word	0x0800cea4

08006c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c90:	2300      	movs	r3, #0
 8006c92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d040      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d02a      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d825      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006cac:	2b60      	cmp	r3, #96	; 0x60
 8006cae:	d026      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cb0:	2b60      	cmp	r3, #96	; 0x60
 8006cb2:	d821      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d006      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d81d      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006cc4:	e018      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cc6:	4b89      	ldr	r3, [pc, #548]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	4a88      	ldr	r2, [pc, #544]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cd2:	e015      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fb02 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ce4:	e00c      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3320      	adds	r3, #32
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fbed 	bl	80074cc <RCCEx_PLLSAI2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	74fb      	strb	r3, [r7, #19]
      break;
 8006cfc:	e000      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d06:	4b79      	ldr	r3, [pc, #484]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d14:	4975      	ldr	r1, [pc, #468]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006d1c:	e001      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	7cfb      	ldrb	r3, [r7, #19]
 8006d20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d047      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d36:	d030      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3c:	d82a      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d42:	d02a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d48:	d824      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d54:	d81e      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5e:	d010      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006d60:	e018      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d62:	4b62      	ldr	r3, [pc, #392]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4a61      	ldr	r2, [pc, #388]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d6e:	e015      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3304      	adds	r3, #4
 8006d74:	2100      	movs	r1, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fab4 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d80:	e00c      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3320      	adds	r3, #32
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fb9f 	bl	80074cc <RCCEx_PLLSAI2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	74fb      	strb	r3, [r7, #19]
      break;
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9c:	7cfb      	ldrb	r3, [r7, #19]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10b      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006da2:	4b52      	ldr	r3, [pc, #328]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	494e      	ldr	r1, [pc, #312]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7cfb      	ldrb	r3, [r7, #19]
 8006dbc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 809f 	beq.w	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dd0:	4b46      	ldr	r3, [pc, #280]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00d      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	4b41      	ldr	r3, [pc, #260]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dea:	4a40      	ldr	r2, [pc, #256]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df0:	6593      	str	r3, [r2, #88]	; 0x58
 8006df2:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e02:	4b3b      	ldr	r3, [pc, #236]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3a      	ldr	r2, [pc, #232]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e0e:	f7fc fd05 	bl	800381c <HAL_GetTick>
 8006e12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e14:	e009      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e16:	f7fc fd01 	bl	800381c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d902      	bls.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	74fb      	strb	r3, [r7, #19]
        break;
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e2a:	4b31      	ldr	r3, [pc, #196]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0ef      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006e36:	7cfb      	ldrb	r3, [r7, #19]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d15b      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e3c:	4b2b      	ldr	r3, [pc, #172]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01f      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d019      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e66:	4b21      	ldr	r3, [pc, #132]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e76:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e86:	4a19      	ldr	r2, [pc, #100]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d016      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fc fcc0 	bl	800381c <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e9e:	e00b      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea0:	f7fc fcbc 	bl	800381c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d902      	bls.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	74fb      	strb	r3, [r7, #19]
            break;
 8006eb6:	e006      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0ec      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006ec6:	7cfb      	ldrb	r3, [r7, #19]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10c      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ecc:	4b07      	ldr	r3, [pc, #28]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006edc:	4903      	ldr	r1, [pc, #12]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee6:	7cfb      	ldrb	r3, [r7, #19]
 8006ee8:	74bb      	strb	r3, [r7, #18]
 8006eea:	e005      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	7cfb      	ldrb	r3, [r7, #19]
 8006ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef8:	7c7b      	ldrb	r3, [r7, #17]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efe:	4ba0      	ldr	r3, [pc, #640]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	4a9f      	ldr	r2, [pc, #636]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f16:	4b9a      	ldr	r3, [pc, #616]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	f023 0203 	bic.w	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	4996      	ldr	r1, [pc, #600]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f38:	4b91      	ldr	r3, [pc, #580]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	f023 020c 	bic.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	498e      	ldr	r1, [pc, #568]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f5a:	4b89      	ldr	r3, [pc, #548]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f68:	4985      	ldr	r1, [pc, #532]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f7c:	4b80      	ldr	r3, [pc, #512]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8a:	497d      	ldr	r1, [pc, #500]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f9e:	4b78      	ldr	r3, [pc, #480]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fac:	4974      	ldr	r1, [pc, #464]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fc0:	4b6f      	ldr	r3, [pc, #444]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fce:	496c      	ldr	r1, [pc, #432]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fe2:	4b67      	ldr	r3, [pc, #412]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff0:	4963      	ldr	r1, [pc, #396]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007004:	4b5e      	ldr	r3, [pc, #376]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007012:	495b      	ldr	r1, [pc, #364]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007026:	4b56      	ldr	r3, [pc, #344]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	4952      	ldr	r1, [pc, #328]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007048:	4b4d      	ldr	r3, [pc, #308]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	494a      	ldr	r1, [pc, #296]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800706a:	4b45      	ldr	r3, [pc, #276]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	4941      	ldr	r1, [pc, #260]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800708c:	4b3c      	ldr	r3, [pc, #240]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800708e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007092:	f023 0203 	bic.w	r2, r3, #3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	4939      	ldr	r1, [pc, #228]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d028      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ae:	4b34      	ldr	r3, [pc, #208]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070bc:	4930      	ldr	r1, [pc, #192]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070cc:	d106      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070ce:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070d8:	60d3      	str	r3, [r2, #12]
 80070da:	e011      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070e4:	d10c      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2101      	movs	r1, #1
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f8f9 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d04d      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007114:	d108      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800711c:	4a18      	ldr	r2, [pc, #96]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800711e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007122:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007126:	e012      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800712a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800712e:	4a14      	ldr	r2, [pc, #80]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007134:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007138:	4b11      	ldr	r3, [pc, #68]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	490e      	ldr	r1, [pc, #56]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007156:	d106      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800715e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007162:	60d3      	str	r3, [r2, #12]
 8007164:	e020      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007170:	4b03      	ldr	r3, [pc, #12]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4a02      	ldr	r2, [pc, #8]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717a:	60d3      	str	r3, [r2, #12]
 800717c:	e014      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800717e:	bf00      	nop
 8007180:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800718c:	d10c      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	2101      	movs	r1, #1
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f8a5 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800719e:	7cfb      	ldrb	r3, [r7, #19]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d028      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071b4:	4b4a      	ldr	r3, [pc, #296]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c2:	4947      	ldr	r1, [pc, #284]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d4:	4b42      	ldr	r3, [pc, #264]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a41      	ldr	r2, [pc, #260]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071de:	60d3      	str	r3, [r2, #12]
 80071e0:	e011      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ea:	d10c      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	2101      	movs	r1, #1
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f876 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 80071f8:	4603      	mov	r3, r0
 80071fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071fc:	7cfb      	ldrb	r3, [r7, #19]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007202:	7cfb      	ldrb	r3, [r7, #19]
 8007204:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01e      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007212:	4b33      	ldr	r3, [pc, #204]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007222:	492f      	ldr	r1, [pc, #188]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007234:	d10c      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f000 f851 	bl	80072e4 <RCCEx_PLLSAI1_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007246:	7cfb      	ldrb	r3, [r7, #19]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800725e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007262:	f023 0204 	bic.w	r2, r3, #4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726c:	491c      	ldr	r1, [pc, #112]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007280:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007286:	f023 0218 	bic.w	r2, r3, #24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007290:	4913      	ldr	r1, [pc, #76]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d017      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b4:	490a      	ldr	r1, [pc, #40]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072c6:	d105      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40021000 	.word	0x40021000

080072e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072f2:	4b72      	ldr	r3, [pc, #456]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00e      	beq.n	800731c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072fe:	4b6f      	ldr	r3, [pc, #444]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0203 	and.w	r2, r3, #3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d103      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
       ||
 8007312:	2b00      	cmp	r3, #0
 8007314:	d142      	bne.n	800739c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	73fb      	strb	r3, [r7, #15]
 800731a:	e03f      	b.n	800739c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d018      	beq.n	8007356 <RCCEx_PLLSAI1_Config+0x72>
 8007324:	2b03      	cmp	r3, #3
 8007326:	d825      	bhi.n	8007374 <RCCEx_PLLSAI1_Config+0x90>
 8007328:	2b01      	cmp	r3, #1
 800732a:	d002      	beq.n	8007332 <RCCEx_PLLSAI1_Config+0x4e>
 800732c:	2b02      	cmp	r3, #2
 800732e:	d009      	beq.n	8007344 <RCCEx_PLLSAI1_Config+0x60>
 8007330:	e020      	b.n	8007374 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007332:	4b62      	ldr	r3, [pc, #392]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11d      	bne.n	800737a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007342:	e01a      	b.n	800737a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007344:	4b5d      	ldr	r3, [pc, #372]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734c:	2b00      	cmp	r3, #0
 800734e:	d116      	bne.n	800737e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007354:	e013      	b.n	800737e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007356:	4b59      	ldr	r3, [pc, #356]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10f      	bne.n	8007382 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007362:	4b56      	ldr	r3, [pc, #344]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007372:	e006      	b.n	8007382 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e004      	b.n	8007384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800737a:	bf00      	nop
 800737c:	e002      	b.n	8007384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800737e:	bf00      	nop
 8007380:	e000      	b.n	8007384 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007382:	bf00      	nop
    }

    if(status == HAL_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800738a:	4b4c      	ldr	r3, [pc, #304]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f023 0203 	bic.w	r2, r3, #3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4949      	ldr	r1, [pc, #292]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007398:	4313      	orrs	r3, r2
 800739a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f040 8086 	bne.w	80074b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073a4:	4b45      	ldr	r3, [pc, #276]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a44      	ldr	r2, [pc, #272]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80073aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b0:	f7fc fa34 	bl	800381c <HAL_GetTick>
 80073b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073b6:	e009      	b.n	80073cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073b8:	f7fc fa30 	bl	800381c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d902      	bls.n	80073cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	73fb      	strb	r3, [r7, #15]
        break;
 80073ca:	e005      	b.n	80073d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ef      	bne.n	80073b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d168      	bne.n	80074b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d113      	bne.n	800740c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073e4:	4b35      	ldr	r3, [pc, #212]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	4b35      	ldr	r3, [pc, #212]	; (80074c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6892      	ldr	r2, [r2, #8]
 80073f0:	0211      	lsls	r1, r2, #8
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68d2      	ldr	r2, [r2, #12]
 80073f6:	06d2      	lsls	r2, r2, #27
 80073f8:	4311      	orrs	r1, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6852      	ldr	r2, [r2, #4]
 80073fe:	3a01      	subs	r2, #1
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	430a      	orrs	r2, r1
 8007404:	492d      	ldr	r1, [pc, #180]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]
 800740a:	e02d      	b.n	8007468 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d115      	bne.n	800743e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007412:	4b2a      	ldr	r3, [pc, #168]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007418:	4013      	ands	r3, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6892      	ldr	r2, [r2, #8]
 800741e:	0211      	lsls	r1, r2, #8
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6912      	ldr	r2, [r2, #16]
 8007424:	0852      	lsrs	r2, r2, #1
 8007426:	3a01      	subs	r2, #1
 8007428:	0552      	lsls	r2, r2, #21
 800742a:	4311      	orrs	r1, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6852      	ldr	r2, [r2, #4]
 8007430:	3a01      	subs	r2, #1
 8007432:	0112      	lsls	r2, r2, #4
 8007434:	430a      	orrs	r2, r1
 8007436:	4921      	ldr	r1, [pc, #132]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	610b      	str	r3, [r1, #16]
 800743c:	e014      	b.n	8007468 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800743e:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6892      	ldr	r2, [r2, #8]
 800744a:	0211      	lsls	r1, r2, #8
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6952      	ldr	r2, [r2, #20]
 8007450:	0852      	lsrs	r2, r2, #1
 8007452:	3a01      	subs	r2, #1
 8007454:	0652      	lsls	r2, r2, #25
 8007456:	4311      	orrs	r1, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6852      	ldr	r2, [r2, #4]
 800745c:	3a01      	subs	r2, #1
 800745e:	0112      	lsls	r2, r2, #4
 8007460:	430a      	orrs	r2, r1
 8007462:	4916      	ldr	r1, [pc, #88]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007464:	4313      	orrs	r3, r2
 8007466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007468:	4b14      	ldr	r3, [pc, #80]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a13      	ldr	r2, [pc, #76]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800746e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007474:	f7fc f9d2 	bl	800381c <HAL_GetTick>
 8007478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800747a:	e009      	b.n	8007490 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800747c:	f7fc f9ce 	bl	800381c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d902      	bls.n	8007490 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	73fb      	strb	r3, [r7, #15]
          break;
 800748e:	e005      	b.n	800749c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0ef      	beq.n	800747c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	4904      	ldr	r1, [pc, #16]	; (80074bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40021000 	.word	0x40021000
 80074c0:	07ff800f 	.word	0x07ff800f
 80074c4:	ff9f800f 	.word	0xff9f800f
 80074c8:	f9ff800f 	.word	0xf9ff800f

080074cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074da:	4b72      	ldr	r3, [pc, #456]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80074e6:	4b6f      	ldr	r3, [pc, #444]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0203 	and.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d103      	bne.n	80074fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
       ||
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d142      	bne.n	8007584 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e03f      	b.n	8007584 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d018      	beq.n	800753e <RCCEx_PLLSAI2_Config+0x72>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d825      	bhi.n	800755c <RCCEx_PLLSAI2_Config+0x90>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d002      	beq.n	800751a <RCCEx_PLLSAI2_Config+0x4e>
 8007514:	2b02      	cmp	r3, #2
 8007516:	d009      	beq.n	800752c <RCCEx_PLLSAI2_Config+0x60>
 8007518:	e020      	b.n	800755c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800751a:	4b62      	ldr	r3, [pc, #392]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11d      	bne.n	8007562 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752a:	e01a      	b.n	8007562 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800752c:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d116      	bne.n	8007566 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800753c:	e013      	b.n	8007566 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800754a:	4b56      	ldr	r3, [pc, #344]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800755a:	e006      	b.n	800756a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      break;
 8007560:	e004      	b.n	800756c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800756a:	bf00      	nop
    }

    if(status == HAL_OK)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d108      	bne.n	8007584 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007572:	4b4c      	ldr	r3, [pc, #304]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f023 0203 	bic.w	r2, r3, #3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4949      	ldr	r1, [pc, #292]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007580:	4313      	orrs	r3, r2
 8007582:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8086 	bne.w	8007698 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800758c:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a44      	ldr	r2, [pc, #272]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007598:	f7fc f940 	bl	800381c <HAL_GetTick>
 800759c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800759e:	e009      	b.n	80075b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075a0:	f7fc f93c 	bl	800381c <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d902      	bls.n	80075b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	73fb      	strb	r3, [r7, #15]
        break;
 80075b2:	e005      	b.n	80075c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80075b4:	4b3b      	ldr	r3, [pc, #236]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1ef      	bne.n	80075a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d168      	bne.n	8007698 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d113      	bne.n	80075f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075cc:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ce:	695a      	ldr	r2, [r3, #20]
 80075d0:	4b35      	ldr	r3, [pc, #212]	; (80076a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6892      	ldr	r2, [r2, #8]
 80075d8:	0211      	lsls	r1, r2, #8
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68d2      	ldr	r2, [r2, #12]
 80075de:	06d2      	lsls	r2, r2, #27
 80075e0:	4311      	orrs	r1, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6852      	ldr	r2, [r2, #4]
 80075e6:	3a01      	subs	r2, #1
 80075e8:	0112      	lsls	r2, r2, #4
 80075ea:	430a      	orrs	r2, r1
 80075ec:	492d      	ldr	r1, [pc, #180]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	614b      	str	r3, [r1, #20]
 80075f2:	e02d      	b.n	8007650 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d115      	bne.n	8007626 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075fa:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6892      	ldr	r2, [r2, #8]
 8007606:	0211      	lsls	r1, r2, #8
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6912      	ldr	r2, [r2, #16]
 800760c:	0852      	lsrs	r2, r2, #1
 800760e:	3a01      	subs	r2, #1
 8007610:	0552      	lsls	r2, r2, #21
 8007612:	4311      	orrs	r1, r2
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6852      	ldr	r2, [r2, #4]
 8007618:	3a01      	subs	r2, #1
 800761a:	0112      	lsls	r2, r2, #4
 800761c:	430a      	orrs	r2, r1
 800761e:	4921      	ldr	r1, [pc, #132]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007620:	4313      	orrs	r3, r2
 8007622:	614b      	str	r3, [r1, #20]
 8007624:	e014      	b.n	8007650 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007626:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800762c:	4013      	ands	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	0211      	lsls	r1, r2, #8
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6952      	ldr	r2, [r2, #20]
 8007638:	0852      	lsrs	r2, r2, #1
 800763a:	3a01      	subs	r2, #1
 800763c:	0652      	lsls	r2, r2, #25
 800763e:	4311      	orrs	r1, r2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6852      	ldr	r2, [r2, #4]
 8007644:	3a01      	subs	r2, #1
 8007646:	0112      	lsls	r2, r2, #4
 8007648:	430a      	orrs	r2, r1
 800764a:	4916      	ldr	r1, [pc, #88]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800764c:	4313      	orrs	r3, r2
 800764e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765c:	f7fc f8de 	bl	800381c <HAL_GetTick>
 8007660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007662:	e009      	b.n	8007678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007664:	f7fc f8da 	bl	800381c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d902      	bls.n	8007678 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	73fb      	strb	r3, [r7, #15]
          break;
 8007676:	e005      	b.n	8007684 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ef      	beq.n	8007664 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	4904      	ldr	r1, [pc, #16]	; (80076a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007694:	4313      	orrs	r3, r2
 8007696:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000
 80076a8:	07ff800f 	.word	0x07ff800f
 80076ac:	ff9f800f 	.word	0xff9f800f
 80076b0:	f9ff800f 	.word	0xf9ff800f

080076b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e049      	b.n	800775a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f841 	bl	8007762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f000 f9da 	bl	8007aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
	...

08007778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d001      	beq.n	8007790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e04f      	b.n	8007830 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a23      	ldr	r2, [pc, #140]	; (800783c <HAL_TIM_Base_Start_IT+0xc4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ba:	d018      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <HAL_TIM_Base_Start_IT+0xc8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1e      	ldr	r2, [pc, #120]	; (8007844 <HAL_TIM_Base_Start_IT+0xcc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <HAL_TIM_Base_Start_IT+0xd0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1b      	ldr	r2, [pc, #108]	; (800784c <HAL_TIM_Base_Start_IT+0xd4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0x76>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a19      	ldr	r2, [pc, #100]	; (8007850 <HAL_TIM_Base_Start_IT+0xd8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d115      	bne.n	800781a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <HAL_TIM_Base_Start_IT+0xdc>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d015      	beq.n	800782c <HAL_TIM_Base_Start_IT+0xb4>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007806:	d011      	beq.n	800782c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007818:	e008      	b.n	800782c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e000      	b.n	800782e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	00010007 	.word	0x00010007

08007858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8e4 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8d6 	bl	8007a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8e7 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d020      	beq.n	8007908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01b      	beq.n	8007908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0204 	mvn.w	r2, #4
 80078d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f8be 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 80078f4:	e005      	b.n	8007902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f8b0 	bl	8007a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8c1 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d020      	beq.n	8007954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01b      	beq.n	8007954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0208 	mvn.w	r2, #8
 8007924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f898 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 8007940:	e005      	b.n	800794e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f88a 	bl	8007a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f89b 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	d020      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0210 	mvn.w	r2, #16
 8007970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2208      	movs	r2, #8
 8007976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f872 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f864 	bl	8007a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f875 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0201 	mvn.w	r2, #1
 80079bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa f874 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f906 	bl	8007bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00c      	beq.n	8007a0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8fe 	bl	8007c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00c      	beq.n	8007a30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f834 	bl	8007a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00c      	beq.n	8007a54 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0220 	mvn.w	r2, #32
 8007a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8c6 	bl	8007be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a40      	ldr	r2, [pc, #256]	; (8007bc0 <TIM_Base_SetConfig+0x114>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d00f      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a3d      	ldr	r2, [pc, #244]	; (8007bc4 <TIM_Base_SetConfig+0x118>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a3c      	ldr	r2, [pc, #240]	; (8007bc8 <TIM_Base_SetConfig+0x11c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a3b      	ldr	r2, [pc, #236]	; (8007bcc <TIM_Base_SetConfig+0x120>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a3a      	ldr	r2, [pc, #232]	; (8007bd0 <TIM_Base_SetConfig+0x124>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d108      	bne.n	8007afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2f      	ldr	r2, [pc, #188]	; (8007bc0 <TIM_Base_SetConfig+0x114>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01f      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0c:	d01b      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2c      	ldr	r2, [pc, #176]	; (8007bc4 <TIM_Base_SetConfig+0x118>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d017      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2b      	ldr	r2, [pc, #172]	; (8007bc8 <TIM_Base_SetConfig+0x11c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2a      	ldr	r2, [pc, #168]	; (8007bcc <TIM_Base_SetConfig+0x120>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00f      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a29      	ldr	r2, [pc, #164]	; (8007bd0 <TIM_Base_SetConfig+0x124>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00b      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <TIM_Base_SetConfig+0x128>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <TIM_Base_SetConfig+0x130>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a10      	ldr	r2, [pc, #64]	; (8007bc0 <TIM_Base_SetConfig+0x114>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a12      	ldr	r2, [pc, #72]	; (8007bd0 <TIM_Base_SetConfig+0x124>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a11      	ldr	r2, [pc, #68]	; (8007bd4 <TIM_Base_SetConfig+0x128>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a10      	ldr	r2, [pc, #64]	; (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a0f      	ldr	r2, [pc, #60]	; (8007bdc <TIM_Base_SetConfig+0x130>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40013400 	.word	0x40013400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800

08007be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e042      	b.n	8007cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fa ff39 	bl	8002ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2224      	movs	r2, #36	; 0x24
 8007c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fbb4 	bl	80083d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f8b5 	bl	8007ddc <UART_SetConfig>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e01b      	b.n	8007cb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc33 	bl	8008518 <UART_CheckIdleState>
 8007cb2:	4603      	mov	r3, r0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	; 0x28
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d17c      	bne.n	8007dd0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_UART_Transmit+0x26>
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e075      	b.n	8007dd2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2221      	movs	r2, #33	; 0x21
 8007cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cf6:	f7fb fd91 	bl	800381c <HAL_GetTick>
 8007cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d14:	d108      	bne.n	8007d28 <HAL_UART_Transmit+0x6c>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	61bb      	str	r3, [r7, #24]
 8007d26:	e003      	b.n	8007d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d30:	e031      	b.n	8007d96 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fc95 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e03e      	b.n	8007dd2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	881a      	ldrh	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d66:	b292      	uxth	r2, r2
 8007d68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	e008      	b.n	8007d84 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	781a      	ldrb	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	b292      	uxth	r2, r2
 8007d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	3301      	adds	r3, #1
 8007d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1c7      	bne.n	8007d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2140      	movs	r1, #64	; 0x40
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fc5d 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e000      	b.n	8007dd2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
  }
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de0:	b08c      	sub	sp, #48	; 0x30
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4baa      	ldr	r3, [pc, #680]	; (80080b4 <UART_SetConfig+0x2d8>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a9f      	ldr	r2, [pc, #636]	; (80080b8 <UART_SetConfig+0x2dc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d004      	beq.n	8007e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e44:	4313      	orrs	r3, r2
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	f023 010f 	bic.w	r1, r3, #15
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a90      	ldr	r2, [pc, #576]	; (80080bc <UART_SetConfig+0x2e0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d125      	bne.n	8007ecc <UART_SetConfig+0xf0>
 8007e80:	4b8f      	ldr	r3, [pc, #572]	; (80080c0 <UART_SetConfig+0x2e4>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d81a      	bhi.n	8007ec4 <UART_SetConfig+0xe8>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0xb8>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eaa:	e116      	b.n	80080da <UART_SetConfig+0x2fe>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb2:	e112      	b.n	80080da <UART_SetConfig+0x2fe>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eba:	e10e      	b.n	80080da <UART_SetConfig+0x2fe>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec2:	e10a      	b.n	80080da <UART_SetConfig+0x2fe>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eca:	e106      	b.n	80080da <UART_SetConfig+0x2fe>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a7c      	ldr	r2, [pc, #496]	; (80080c4 <UART_SetConfig+0x2e8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d138      	bne.n	8007f48 <UART_SetConfig+0x16c>
 8007ed6:	4b7a      	ldr	r3, [pc, #488]	; (80080c0 <UART_SetConfig+0x2e4>)
 8007ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007edc:	f003 030c 	and.w	r3, r3, #12
 8007ee0:	2b0c      	cmp	r3, #12
 8007ee2:	d82d      	bhi.n	8007f40 <UART_SetConfig+0x164>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0x110>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f26:	e0d8      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2e:	e0d4      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e0d0      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e0cc      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f46:	e0c8      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5e      	ldr	r2, [pc, #376]	; (80080c8 <UART_SetConfig+0x2ec>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d125      	bne.n	8007f9e <UART_SetConfig+0x1c2>
 8007f52:	4b5b      	ldr	r3, [pc, #364]	; (80080c0 <UART_SetConfig+0x2e4>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f5c:	2b30      	cmp	r3, #48	; 0x30
 8007f5e:	d016      	beq.n	8007f8e <UART_SetConfig+0x1b2>
 8007f60:	2b30      	cmp	r3, #48	; 0x30
 8007f62:	d818      	bhi.n	8007f96 <UART_SetConfig+0x1ba>
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d00a      	beq.n	8007f7e <UART_SetConfig+0x1a2>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d814      	bhi.n	8007f96 <UART_SetConfig+0x1ba>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <UART_SetConfig+0x19a>
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d008      	beq.n	8007f86 <UART_SetConfig+0x1aa>
 8007f74:	e00f      	b.n	8007f96 <UART_SetConfig+0x1ba>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7c:	e0ad      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f84:	e0a9      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f86:	2304      	movs	r3, #4
 8007f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f8c:	e0a5      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f94:	e0a1      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f96:	2310      	movs	r3, #16
 8007f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9c:	e09d      	b.n	80080da <UART_SetConfig+0x2fe>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a4a      	ldr	r2, [pc, #296]	; (80080cc <UART_SetConfig+0x2f0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d125      	bne.n	8007ff4 <UART_SetConfig+0x218>
 8007fa8:	4b45      	ldr	r3, [pc, #276]	; (80080c0 <UART_SetConfig+0x2e4>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb4:	d016      	beq.n	8007fe4 <UART_SetConfig+0x208>
 8007fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb8:	d818      	bhi.n	8007fec <UART_SetConfig+0x210>
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d00a      	beq.n	8007fd4 <UART_SetConfig+0x1f8>
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d814      	bhi.n	8007fec <UART_SetConfig+0x210>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <UART_SetConfig+0x1f0>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d008      	beq.n	8007fdc <UART_SetConfig+0x200>
 8007fca:	e00f      	b.n	8007fec <UART_SetConfig+0x210>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e082      	b.n	80080da <UART_SetConfig+0x2fe>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fda:	e07e      	b.n	80080da <UART_SetConfig+0x2fe>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe2:	e07a      	b.n	80080da <UART_SetConfig+0x2fe>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fea:	e076      	b.n	80080da <UART_SetConfig+0x2fe>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff2:	e072      	b.n	80080da <UART_SetConfig+0x2fe>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a35      	ldr	r2, [pc, #212]	; (80080d0 <UART_SetConfig+0x2f4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d12a      	bne.n	8008054 <UART_SetConfig+0x278>
 8007ffe:	4b30      	ldr	r3, [pc, #192]	; (80080c0 <UART_SetConfig+0x2e4>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800800c:	d01a      	beq.n	8008044 <UART_SetConfig+0x268>
 800800e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008012:	d81b      	bhi.n	800804c <UART_SetConfig+0x270>
 8008014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008018:	d00c      	beq.n	8008034 <UART_SetConfig+0x258>
 800801a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801e:	d815      	bhi.n	800804c <UART_SetConfig+0x270>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <UART_SetConfig+0x250>
 8008024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008028:	d008      	beq.n	800803c <UART_SetConfig+0x260>
 800802a:	e00f      	b.n	800804c <UART_SetConfig+0x270>
 800802c:	2300      	movs	r3, #0
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008032:	e052      	b.n	80080da <UART_SetConfig+0x2fe>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803a:	e04e      	b.n	80080da <UART_SetConfig+0x2fe>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008042:	e04a      	b.n	80080da <UART_SetConfig+0x2fe>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804a:	e046      	b.n	80080da <UART_SetConfig+0x2fe>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008052:	e042      	b.n	80080da <UART_SetConfig+0x2fe>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <UART_SetConfig+0x2dc>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d13a      	bne.n	80080d4 <UART_SetConfig+0x2f8>
 800805e:	4b18      	ldr	r3, [pc, #96]	; (80080c0 <UART_SetConfig+0x2e4>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800806c:	d01a      	beq.n	80080a4 <UART_SetConfig+0x2c8>
 800806e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008072:	d81b      	bhi.n	80080ac <UART_SetConfig+0x2d0>
 8008074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008078:	d00c      	beq.n	8008094 <UART_SetConfig+0x2b8>
 800807a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807e:	d815      	bhi.n	80080ac <UART_SetConfig+0x2d0>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <UART_SetConfig+0x2b0>
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008088:	d008      	beq.n	800809c <UART_SetConfig+0x2c0>
 800808a:	e00f      	b.n	80080ac <UART_SetConfig+0x2d0>
 800808c:	2300      	movs	r3, #0
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008092:	e022      	b.n	80080da <UART_SetConfig+0x2fe>
 8008094:	2302      	movs	r3, #2
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800809a:	e01e      	b.n	80080da <UART_SetConfig+0x2fe>
 800809c:	2304      	movs	r3, #4
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a2:	e01a      	b.n	80080da <UART_SetConfig+0x2fe>
 80080a4:	2308      	movs	r3, #8
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080aa:	e016      	b.n	80080da <UART_SetConfig+0x2fe>
 80080ac:	2310      	movs	r3, #16
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b2:	e012      	b.n	80080da <UART_SetConfig+0x2fe>
 80080b4:	cfff69f3 	.word	0xcfff69f3
 80080b8:	40008000 	.word	0x40008000
 80080bc:	40013800 	.word	0x40013800
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40004400 	.word	0x40004400
 80080c8:	40004800 	.word	0x40004800
 80080cc:	40004c00 	.word	0x40004c00
 80080d0:	40005000 	.word	0x40005000
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4aae      	ldr	r2, [pc, #696]	; (8008398 <UART_SetConfig+0x5bc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	f040 8097 	bne.w	8008214 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d823      	bhi.n	8008136 <UART_SetConfig+0x35a>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0x318>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008137 	.word	0x08008137
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008137 	.word	0x08008137
 8008104:	08008127 	.word	0x08008127
 8008108:	08008137 	.word	0x08008137
 800810c:	08008137 	.word	0x08008137
 8008110:	08008137 	.word	0x08008137
 8008114:	0800812f 	.word	0x0800812f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fe fc96 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 800811c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800811e:	e010      	b.n	8008142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008120:	4b9e      	ldr	r3, [pc, #632]	; (800839c <UART_SetConfig+0x5c0>)
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008124:	e00d      	b.n	8008142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008126:	f7fe fbf7 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008134:	e005      	b.n	8008142 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8130 	beq.w	80083aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	4a94      	ldr	r2, [pc, #592]	; (80083a0 <UART_SetConfig+0x5c4>)
 8008150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008154:	461a      	mov	r2, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	fbb3 f3f2 	udiv	r3, r3, r2
 800815c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	429a      	cmp	r2, r3
 800816c:	d305      	bcc.n	800817a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	429a      	cmp	r2, r3
 8008178:	d903      	bls.n	8008182 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008180:	e113      	b.n	80083aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	2200      	movs	r2, #0
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	60fa      	str	r2, [r7, #12]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	4a84      	ldr	r2, [pc, #528]	; (80083a0 <UART_SetConfig+0x5c4>)
 8008190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008194:	b29b      	uxth	r3, r3
 8008196:	2200      	movs	r2, #0
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081a4:	f7f8 fd18 	bl	8000bd8 <__aeabi_uldivmod>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	020b      	lsls	r3, r1, #8
 80081ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081be:	0202      	lsls	r2, r0, #8
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	6849      	ldr	r1, [r1, #4]
 80081c4:	0849      	lsrs	r1, r1, #1
 80081c6:	2000      	movs	r0, #0
 80081c8:	460c      	mov	r4, r1
 80081ca:	4605      	mov	r5, r0
 80081cc:	eb12 0804 	adds.w	r8, r2, r4
 80081d0:	eb43 0905 	adc.w	r9, r3, r5
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	469a      	mov	sl, r3
 80081dc:	4693      	mov	fp, r2
 80081de:	4652      	mov	r2, sl
 80081e0:	465b      	mov	r3, fp
 80081e2:	4640      	mov	r0, r8
 80081e4:	4649      	mov	r1, r9
 80081e6:	f7f8 fcf7 	bl	8000bd8 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4613      	mov	r3, r2
 80081f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f8:	d308      	bcc.n	800820c <UART_SetConfig+0x430>
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008200:	d204      	bcs.n	800820c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a3a      	ldr	r2, [r7, #32]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e0ce      	b.n	80083aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008212:	e0ca      	b.n	80083aa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800821c:	d166      	bne.n	80082ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800821e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008222:	2b08      	cmp	r3, #8
 8008224:	d827      	bhi.n	8008276 <UART_SetConfig+0x49a>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <UART_SetConfig+0x450>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008251 	.word	0x08008251
 8008230:	08008259 	.word	0x08008259
 8008234:	08008261 	.word	0x08008261
 8008238:	08008277 	.word	0x08008277
 800823c:	08008267 	.word	0x08008267
 8008240:	08008277 	.word	0x08008277
 8008244:	08008277 	.word	0x08008277
 8008248:	08008277 	.word	0x08008277
 800824c:	0800826f 	.word	0x0800826f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008250:	f7fe fbfa 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8008254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008256:	e014      	b.n	8008282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008258:	f7fe fc0c 	bl	8006a74 <HAL_RCC_GetPCLK2Freq>
 800825c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800825e:	e010      	b.n	8008282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008260:	4b4e      	ldr	r3, [pc, #312]	; (800839c <UART_SetConfig+0x5c0>)
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008264:	e00d      	b.n	8008282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008266:	f7fe fb57 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800826c:	e009      	b.n	8008282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008274:	e005      	b.n	8008282 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8090 	beq.w	80083aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	4a44      	ldr	r2, [pc, #272]	; (80083a0 <UART_SetConfig+0x5c4>)
 8008290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008294:	461a      	mov	r2, r3
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	fbb3 f3f2 	udiv	r3, r3, r2
 800829c:	005a      	lsls	r2, r3, #1
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	441a      	add	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d916      	bls.n	80082e4 <UART_SetConfig+0x508>
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082bc:	d212      	bcs.n	80082e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f023 030f 	bic.w	r3, r3, #15
 80082c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	8bfb      	ldrh	r3, [r7, #30]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	8bfa      	ldrh	r2, [r7, #30]
 80082e0:	60da      	str	r2, [r3, #12]
 80082e2:	e062      	b.n	80083aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082ea:	e05e      	b.n	80083aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d828      	bhi.n	8008346 <UART_SetConfig+0x56a>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <UART_SetConfig+0x520>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	08008347 	.word	0x08008347
 800830c:	08008337 	.word	0x08008337
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
 800831c:	0800833f 	.word	0x0800833f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008320:	f7fe fb92 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8008324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008326:	e014      	b.n	8008352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008328:	f7fe fba4 	bl	8006a74 <HAL_RCC_GetPCLK2Freq>
 800832c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800832e:	e010      	b.n	8008352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <UART_SetConfig+0x5c0>)
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008334:	e00d      	b.n	8008352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008336:	f7fe faef 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 800833a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800833c:	e009      	b.n	8008352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008344:	e005      	b.n	8008352 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008350:	bf00      	nop
    }

    if (pclk != 0U)
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d028      	beq.n	80083aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <UART_SetConfig+0x5c4>)
 800835e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008362:	461a      	mov	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	fbb3 f2f2 	udiv	r2, r3, r2
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	441a      	add	r2, r3
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2b0f      	cmp	r3, #15
 8008380:	d910      	bls.n	80083a4 <UART_SetConfig+0x5c8>
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d20c      	bcs.n	80083a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	b29a      	uxth	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	60da      	str	r2, [r3, #12]
 8008394:	e009      	b.n	80083aa <UART_SetConfig+0x5ce>
 8008396:	bf00      	nop
 8008398:	40008000 	.word	0x40008000
 800839c:	00f42400 	.word	0x00f42400
 80083a0:	0800ced4 	.word	0x0800ced4
      }
      else
      {
        ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2200      	movs	r2, #0
 80083be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2200      	movs	r2, #0
 80083c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80083c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3730      	adds	r7, #48	; 0x30
 80083ce:	46bd      	mov	sp, r7
 80083d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080083d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01a      	beq.n	80084ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d2:	d10a      	bne.n	80084ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b098      	sub	sp, #96	; 0x60
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008528:	f7fb f978 	bl	800381c <HAL_GetTick>
 800852c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d12f      	bne.n	800859c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f88e 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d022      	beq.n	800859c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856a:	653b      	str	r3, [r7, #80]	; 0x50
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
 8008576:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800857a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e6      	bne.n	8008556 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e063      	b.n	8008664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d149      	bne.n	800863e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b2:	2200      	movs	r2, #0
 80085b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f857 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d03c      	beq.n	800863e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
 80085e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	60fb      	str	r3, [r7, #12]
   return(result);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	64bb      	str	r3, [r7, #72]	; 0x48
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008616:	61fa      	str	r2, [r7, #28]
 8008618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	69b9      	ldr	r1, [r7, #24]
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	617b      	str	r3, [r7, #20]
   return(result);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e012      	b.n	8008664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3758      	adds	r7, #88	; 0x58
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867c:	e049      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d045      	beq.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7fb f8c9 	bl	800381c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <UART_WaitOnFlagUntilTimeout+0x30>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e048      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d031      	beq.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d110      	bne.n	80086de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2208      	movs	r2, #8
 80086c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f838 	bl	800873a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2208      	movs	r2, #8
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e029      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ec:	d111      	bne.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f81e 	bl	800873a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e00f      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4013      	ands	r3, r2
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	bf0c      	ite	eq
 8008722:	2301      	moveq	r3, #1
 8008724:	2300      	movne	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	429a      	cmp	r2, r3
 800872e:	d0a6      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800873a:	b480      	push	{r7}
 800873c:	b095      	sub	sp, #84	; 0x54
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008760:	643b      	str	r3, [r7, #64]	; 0x40
 8008762:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	61fb      	str	r3, [r7, #28]
   return(result);
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008798:	62fa      	str	r2, [r7, #44]	; 0x2c
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e3      	bne.n	8008774 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d118      	bne.n	80087e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	647b      	str	r3, [r7, #68]	; 0x44
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6979      	ldr	r1, [r7, #20]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	613b      	str	r3, [r7, #16]
   return(result);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e6      	bne.n	80087b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087fa:	bf00      	nop
 80087fc:	3754      	adds	r7, #84	; 0x54
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <HAL_UARTEx_DisableFifoMode+0x16>
 8008818:	2302      	movs	r3, #2
 800881a:	e027      	b.n	800886c <HAL_UARTEx_DisableFifoMode+0x66>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2224      	movs	r2, #36	; 0x24
 8008828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0201 	bic.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800884a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800888c:	2302      	movs	r3, #2
 800888e:	e02d      	b.n	80088ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2224      	movs	r2, #36	; 0x24
 800889c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0201 	bic.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f84f 	bl	8008970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e02d      	b.n	8008968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	; 0x24
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f811 	bl	8008970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897c:	2b00      	cmp	r3, #0
 800897e:	d108      	bne.n	8008992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008990:	e031      	b.n	80089f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008992:	2308      	movs	r3, #8
 8008994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008996:	2308      	movs	r3, #8
 8008998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	0e5b      	lsrs	r3, r3, #25
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	0f5b      	lsrs	r3, r3, #29
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	7b3a      	ldrb	r2, [r7, #12]
 80089be:	4911      	ldr	r1, [pc, #68]	; (8008a04 <UARTEx_SetNbDataToProcess+0x94>)
 80089c0:	5c8a      	ldrb	r2, [r1, r2]
 80089c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089c6:	7b3a      	ldrb	r2, [r7, #12]
 80089c8:	490f      	ldr	r1, [pc, #60]	; (8008a08 <UARTEx_SetNbDataToProcess+0x98>)
 80089ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	7b7a      	ldrb	r2, [r7, #13]
 80089dc:	4909      	ldr	r1, [pc, #36]	; (8008a04 <UARTEx_SetNbDataToProcess+0x94>)
 80089de:	5c8a      	ldrb	r2, [r1, r2]
 80089e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089e4:	7b7a      	ldrb	r2, [r7, #13]
 80089e6:	4908      	ldr	r1, [pc, #32]	; (8008a08 <UARTEx_SetNbDataToProcess+0x98>)
 80089e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	0800ceec 	.word	0x0800ceec
 8008a08:	0800cef4 	.word	0x0800cef4

08008a0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a1e:	2b84      	cmp	r3, #132	; 0x84
 8008a20:	d005      	beq.n	8008a2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3303      	adds	r3, #3
 8008a2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a40:	f000 fade 	bl	8009000 <vTaskStartScheduler>
  
  return osOK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4c:	b089      	sub	sp, #36	; 0x24
 8008a4e:	af04      	add	r7, sp, #16
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d020      	beq.n	8008a9e <osThreadCreate+0x54>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01c      	beq.n	8008a9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685c      	ldr	r4, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691e      	ldr	r6, [r3, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ffc8 	bl	8008a0c <makeFreeRtosPriority>
 8008a7c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a86:	9202      	str	r2, [sp, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	9100      	str	r1, [sp, #0]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	4632      	mov	r2, r6
 8008a90:	4629      	mov	r1, r5
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 f8ed 	bl	8008c72 <xTaskCreateStatic>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	e01c      	b.n	8008ad8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685c      	ldr	r4, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008aaa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff ffaa 	bl	8008a0c <makeFreeRtosPriority>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	f107 030c 	add.w	r3, r7, #12
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	9200      	str	r2, [sp, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f92f 	bl	8008d2c <xTaskCreate>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d001      	beq.n	8008ad8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ae2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <osDelay+0x16>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	e000      	b.n	8008afa <osDelay+0x18>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fa4c 	bl	8008f98 <vTaskDelay>
  
  return osOK;
 8008b00:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f103 0208 	add.w	r2, r3, #8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f103 0208 	add.w	r2, r3, #8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d103      	bne.n	8008bcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e00c      	b.n	8008be6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e002      	b.n	8008bda <vListInsert+0x2e>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d2f6      	bcs.n	8008bd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6892      	ldr	r2, [r2, #8]
 8008c34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6852      	ldr	r2, [r2, #4]
 8008c3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d103      	bne.n	8008c52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b08e      	sub	sp, #56	; 0x38
 8008c76:	af04      	add	r7, sp, #16
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	61fb      	str	r3, [r7, #28]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cb8:	2354      	movs	r3, #84	; 0x54
 8008cba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b54      	cmp	r3, #84	; 0x54
 8008cc0:	d00a      	beq.n	8008cd8 <xTaskCreateStatic+0x66>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	61bb      	str	r3, [r7, #24]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01e      	beq.n	8008d1e <xTaskCreateStatic+0xac>
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01b      	beq.n	8008d1e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9303      	str	r3, [sp, #12]
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	f107 0314 	add.w	r3, r7, #20
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f850 	bl	8008db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d18:	f000 f8d4 	bl	8008ec4 <prvAddNewTaskToReadyList>
 8008d1c:	e001      	b.n	8008d22 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d22:	697b      	ldr	r3, [r7, #20]
	}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3728      	adds	r7, #40	; 0x28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	; 0x30
 8008d30:	af04      	add	r7, sp, #16
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fec9 	bl	8009ad8 <pvPortMalloc>
 8008d46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00e      	beq.n	8008d6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d4e:	2054      	movs	r0, #84	; 0x54
 8008d50:	f000 fec2 	bl	8009ad8 <pvPortMalloc>
 8008d54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
 8008d62:	e005      	b.n	8008d70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f000 ff83 	bl	8009c70 <vPortFree>
 8008d6a:	e001      	b.n	8008d70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d017      	beq.n	8008da6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d7e:	88fa      	ldrh	r2, [r7, #6]
 8008d80:	2300      	movs	r3, #0
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f80e 	bl	8008db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d9a:	69f8      	ldr	r0, [r7, #28]
 8008d9c:	f000 f892 	bl	8008ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008da0:	2301      	movs	r3, #1
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	e002      	b.n	8008dac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008da6:	f04f 33ff 	mov.w	r3, #4294967295
 8008daa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dac:	69bb      	ldr	r3, [r7, #24]
	}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b088      	sub	sp, #32
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f023 0307 	bic.w	r3, r3, #7
 8008ddc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <prvInitialiseNewTask+0x48>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	617b      	str	r3, [r7, #20]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01f      	beq.n	8008e44 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e012      	b.n	8008e30 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	4413      	add	r3, r2
 8008e10:	7819      	ldrb	r1, [r3, #0]
 8008e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	4413      	add	r3, r2
 8008e18:	3334      	adds	r3, #52	; 0x34
 8008e1a:	460a      	mov	r2, r1
 8008e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	4413      	add	r3, r2
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d006      	beq.n	8008e38 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	d9e9      	bls.n	8008e0a <prvInitialiseNewTask+0x54>
 8008e36:	e000      	b.n	8008e3a <prvInitialiseNewTask+0x84>
			{
				break;
 8008e38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e42:	e003      	b.n	8008e4c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b06      	cmp	r3, #6
 8008e50:	d901      	bls.n	8008e56 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e52:	2306      	movs	r3, #6
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e60:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	2200      	movs	r2, #0
 8008e66:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fe6c 	bl	8008b4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	3318      	adds	r3, #24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff fe67 	bl	8008b4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	f1c3 0207 	rsb	r2, r3, #7
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2200      	movs	r2, #0
 8008e96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	69b8      	ldr	r0, [r7, #24]
 8008ea6:	f000 fc05 	bl	80096b4 <pxPortInitialiseStack>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ebc:	bf00      	nop
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ecc:	f000 fd22 	bl	8009914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ed0:	4b2a      	ldr	r3, [pc, #168]	; (8008f7c <prvAddNewTaskToReadyList+0xb8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	4a29      	ldr	r2, [pc, #164]	; (8008f7c <prvAddNewTaskToReadyList+0xb8>)
 8008ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eda:	4b29      	ldr	r3, [pc, #164]	; (8008f80 <prvAddNewTaskToReadyList+0xbc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ee2:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <prvAddNewTaskToReadyList+0xbc>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ee8:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <prvAddNewTaskToReadyList+0xb8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d110      	bne.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ef0:	f000 fabc 	bl	800946c <prvInitialiseTaskLists>
 8008ef4:	e00d      	b.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ef6:	4b23      	ldr	r3, [pc, #140]	; (8008f84 <prvAddNewTaskToReadyList+0xc0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <prvAddNewTaskToReadyList+0xbc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d802      	bhi.n	8008f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <prvAddNewTaskToReadyList+0xbc>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f12:	4b1d      	ldr	r3, [pc, #116]	; (8008f88 <prvAddNewTaskToReadyList+0xc4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <prvAddNewTaskToReadyList+0xc4>)
 8008f1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	2201      	movs	r2, #1
 8008f22:	409a      	lsls	r2, r3
 8008f24:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <prvAddNewTaskToReadyList+0xc8>)
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4a15      	ldr	r2, [pc, #84]	; (8008f90 <prvAddNewTaskToReadyList+0xcc>)
 8008f3c:	441a      	add	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7ff fe0d 	bl	8008b64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f4a:	f000 fd13 	bl	8009974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <prvAddNewTaskToReadyList+0xc0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00e      	beq.n	8008f74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f56:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <prvAddNewTaskToReadyList+0xbc>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d207      	bcs.n	8008f74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <prvAddNewTaskToReadyList+0xd0>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200010b4 	.word	0x200010b4
 8008f80:	20000fb4 	.word	0x20000fb4
 8008f84:	200010c0 	.word	0x200010c0
 8008f88:	200010d0 	.word	0x200010d0
 8008f8c:	200010bc 	.word	0x200010bc
 8008f90:	20000fb8 	.word	0x20000fb8
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d017      	beq.n	8008fda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008faa:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <vTaskDelay+0x60>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <vTaskDelay+0x30>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60bb      	str	r3, [r7, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fc8:	f000 f87a 	bl	80090c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fb0a 	bl	80095e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fd4:	f000 f882 	bl	80090dc <xTaskResumeAll>
 8008fd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <vTaskDelay+0x64>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	200010dc 	.word	0x200010dc
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	; 0x28
 8009004:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800900e:	463a      	mov	r2, r7
 8009010:	1d39      	adds	r1, r7, #4
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f7f7 ff5c 	bl	8000ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	9202      	str	r2, [sp, #8]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	2300      	movs	r3, #0
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	2300      	movs	r3, #0
 800902c:	460a      	mov	r2, r1
 800902e:	491e      	ldr	r1, [pc, #120]	; (80090a8 <vTaskStartScheduler+0xa8>)
 8009030:	481e      	ldr	r0, [pc, #120]	; (80090ac <vTaskStartScheduler+0xac>)
 8009032:	f7ff fe1e 	bl	8008c72 <xTaskCreateStatic>
 8009036:	4603      	mov	r3, r0
 8009038:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <vTaskStartScheduler+0xb0>)
 800903a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800903c:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <vTaskStartScheduler+0xb0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	e001      	b.n	800904e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d116      	bne.n	8009082 <vTaskStartScheduler+0x82>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009068:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <vTaskStartScheduler+0xb4>)
 800906a:	f04f 32ff 	mov.w	r2, #4294967295
 800906e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <vTaskStartScheduler+0xb8>)
 8009072:	2201      	movs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009076:	4b11      	ldr	r3, [pc, #68]	; (80090bc <vTaskStartScheduler+0xbc>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800907c:	f000 fba8 	bl	80097d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009080:	e00e      	b.n	80090a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009088:	d10a      	bne.n	80090a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vTaskStartScheduler+0x9e>
}
 80090a0:	bf00      	nop
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	0800ce84 	.word	0x0800ce84
 80090ac:	0800943d 	.word	0x0800943d
 80090b0:	200010d8 	.word	0x200010d8
 80090b4:	200010d4 	.word	0x200010d4
 80090b8:	200010c0 	.word	0x200010c0
 80090bc:	200010b8 	.word	0x200010b8

080090c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <vTaskSuspendAll+0x18>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	4a03      	ldr	r2, [pc, #12]	; (80090d8 <vTaskSuspendAll+0x18>)
 80090cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090ce:	bf00      	nop
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	200010dc 	.word	0x200010dc

080090dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090ea:	4b41      	ldr	r3, [pc, #260]	; (80091f0 <xTaskResumeAll+0x114>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <xTaskResumeAll+0x2c>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	603b      	str	r3, [r7, #0]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009108:	f000 fc04 	bl	8009914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800910c:	4b38      	ldr	r3, [pc, #224]	; (80091f0 <xTaskResumeAll+0x114>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	4a37      	ldr	r2, [pc, #220]	; (80091f0 <xTaskResumeAll+0x114>)
 8009114:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009116:	4b36      	ldr	r3, [pc, #216]	; (80091f0 <xTaskResumeAll+0x114>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d161      	bne.n	80091e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800911e:	4b35      	ldr	r3, [pc, #212]	; (80091f4 <xTaskResumeAll+0x118>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d05d      	beq.n	80091e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009126:	e02e      	b.n	8009186 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009128:	4b33      	ldr	r3, [pc, #204]	; (80091f8 <xTaskResumeAll+0x11c>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3318      	adds	r3, #24
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fd72 	bl	8008c1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fd6d 	bl	8008c1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	2201      	movs	r2, #1
 800914a:	409a      	lsls	r2, r3
 800914c:	4b2b      	ldr	r3, [pc, #172]	; (80091fc <xTaskResumeAll+0x120>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4313      	orrs	r3, r2
 8009152:	4a2a      	ldr	r2, [pc, #168]	; (80091fc <xTaskResumeAll+0x120>)
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4a27      	ldr	r2, [pc, #156]	; (8009200 <xTaskResumeAll+0x124>)
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7ff fcf9 	bl	8008b64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	4b23      	ldr	r3, [pc, #140]	; (8009204 <xTaskResumeAll+0x128>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	429a      	cmp	r2, r3
 800917e:	d302      	bcc.n	8009186 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <xTaskResumeAll+0x12c>)
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009186:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <xTaskResumeAll+0x11c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1cc      	bne.n	8009128 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009194:	f000 fa08 	bl	80095a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009198:	4b1c      	ldr	r3, [pc, #112]	; (800920c <xTaskResumeAll+0x130>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d010      	beq.n	80091c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091a4:	f000 f836 	bl	8009214 <xTaskIncrementTick>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091ae:	4b16      	ldr	r3, [pc, #88]	; (8009208 <xTaskResumeAll+0x12c>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1f1      	bne.n	80091a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80091c0:	4b12      	ldr	r3, [pc, #72]	; (800920c <xTaskResumeAll+0x130>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <xTaskResumeAll+0x12c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskResumeAll+0x134>)
 80091d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091e2:	f000 fbc7 	bl	8009974 <vPortExitCritical>

	return xAlreadyYielded;
 80091e6:	68bb      	ldr	r3, [r7, #8]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	200010dc 	.word	0x200010dc
 80091f4:	200010b4 	.word	0x200010b4
 80091f8:	20001074 	.word	0x20001074
 80091fc:	200010bc 	.word	0x200010bc
 8009200:	20000fb8 	.word	0x20000fb8
 8009204:	20000fb4 	.word	0x20000fb4
 8009208:	200010c8 	.word	0x200010c8
 800920c:	200010c4 	.word	0x200010c4
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921e:	4b4e      	ldr	r3, [pc, #312]	; (8009358 <xTaskIncrementTick+0x144>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f040 808e 	bne.w	8009344 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009228:	4b4c      	ldr	r3, [pc, #304]	; (800935c <xTaskIncrementTick+0x148>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009230:	4a4a      	ldr	r2, [pc, #296]	; (800935c <xTaskIncrementTick+0x148>)
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d120      	bne.n	800927e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800923c:	4b48      	ldr	r3, [pc, #288]	; (8009360 <xTaskIncrementTick+0x14c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <xTaskIncrementTick+0x48>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	603b      	str	r3, [r7, #0]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xTaskIncrementTick+0x46>
 800925c:	4b40      	ldr	r3, [pc, #256]	; (8009360 <xTaskIncrementTick+0x14c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	4b40      	ldr	r3, [pc, #256]	; (8009364 <xTaskIncrementTick+0x150>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a3e      	ldr	r2, [pc, #248]	; (8009360 <xTaskIncrementTick+0x14c>)
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	4a3e      	ldr	r2, [pc, #248]	; (8009364 <xTaskIncrementTick+0x150>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	4b3d      	ldr	r3, [pc, #244]	; (8009368 <xTaskIncrementTick+0x154>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	4a3c      	ldr	r2, [pc, #240]	; (8009368 <xTaskIncrementTick+0x154>)
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	f000 f995 	bl	80095a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800927e:	4b3b      	ldr	r3, [pc, #236]	; (800936c <xTaskIncrementTick+0x158>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	429a      	cmp	r2, r3
 8009286:	d348      	bcc.n	800931a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009288:	4b35      	ldr	r3, [pc, #212]	; (8009360 <xTaskIncrementTick+0x14c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009292:	4b36      	ldr	r3, [pc, #216]	; (800936c <xTaskIncrementTick+0x158>)
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	601a      	str	r2, [r3, #0]
					break;
 800929a:	e03e      	b.n	800931a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929c:	4b30      	ldr	r3, [pc, #192]	; (8009360 <xTaskIncrementTick+0x14c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d203      	bcs.n	80092bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092b4:	4a2d      	ldr	r2, [pc, #180]	; (800936c <xTaskIncrementTick+0x158>)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092ba:	e02e      	b.n	800931a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3304      	adds	r3, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fcac 	bl	8008c1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3318      	adds	r3, #24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fca3 	bl	8008c1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	2201      	movs	r2, #1
 80092de:	409a      	lsls	r2, r3
 80092e0:	4b23      	ldr	r3, [pc, #140]	; (8009370 <xTaskIncrementTick+0x15c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	4a22      	ldr	r2, [pc, #136]	; (8009370 <xTaskIncrementTick+0x15c>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4a1f      	ldr	r2, [pc, #124]	; (8009374 <xTaskIncrementTick+0x160>)
 80092f8:	441a      	add	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f7ff fc2f 	bl	8008b64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930a:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <xTaskIncrementTick+0x164>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	429a      	cmp	r2, r3
 8009312:	d3b9      	bcc.n	8009288 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009318:	e7b6      	b.n	8009288 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800931a:	4b17      	ldr	r3, [pc, #92]	; (8009378 <xTaskIncrementTick+0x164>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4914      	ldr	r1, [pc, #80]	; (8009374 <xTaskIncrementTick+0x160>)
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d901      	bls.n	8009336 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009332:	2301      	movs	r3, #1
 8009334:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <xTaskIncrementTick+0x168>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e004      	b.n	800934e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <xTaskIncrementTick+0x16c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a0d      	ldr	r2, [pc, #52]	; (8009380 <xTaskIncrementTick+0x16c>)
 800934c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800934e:	697b      	ldr	r3, [r7, #20]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200010dc 	.word	0x200010dc
 800935c:	200010b8 	.word	0x200010b8
 8009360:	2000106c 	.word	0x2000106c
 8009364:	20001070 	.word	0x20001070
 8009368:	200010cc 	.word	0x200010cc
 800936c:	200010d4 	.word	0x200010d4
 8009370:	200010bc 	.word	0x200010bc
 8009374:	20000fb8 	.word	0x20000fb8
 8009378:	20000fb4 	.word	0x20000fb4
 800937c:	200010c8 	.word	0x200010c8
 8009380:	200010c4 	.word	0x200010c4

08009384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800938a:	4b27      	ldr	r3, [pc, #156]	; (8009428 <vTaskSwitchContext+0xa4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <vTaskSwitchContext+0xa8>)
 8009394:	2201      	movs	r2, #1
 8009396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009398:	e03f      	b.n	800941a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <vTaskSwitchContext+0xa8>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a0:	4b23      	ldr	r3, [pc, #140]	; (8009430 <vTaskSwitchContext+0xac>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	fab3 f383 	clz	r3, r3
 80093ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	f1c3 031f 	rsb	r3, r3, #31
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	491f      	ldr	r1, [pc, #124]	; (8009434 <vTaskSwitchContext+0xb0>)
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	607b      	str	r3, [r7, #4]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <vTaskSwitchContext+0x5a>
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4a12      	ldr	r2, [pc, #72]	; (8009434 <vTaskSwitchContext+0xb0>)
 80093ec:	4413      	add	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	3308      	adds	r3, #8
 8009402:	429a      	cmp	r2, r3
 8009404:	d104      	bne.n	8009410 <vTaskSwitchContext+0x8c>
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	605a      	str	r2, [r3, #4]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	4a08      	ldr	r2, [pc, #32]	; (8009438 <vTaskSwitchContext+0xb4>)
 8009418:	6013      	str	r3, [r2, #0]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	200010dc 	.word	0x200010dc
 800942c:	200010c8 	.word	0x200010c8
 8009430:	200010bc 	.word	0x200010bc
 8009434:	20000fb8 	.word	0x20000fb8
 8009438:	20000fb4 	.word	0x20000fb4

0800943c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009444:	f000 f852 	bl	80094ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <prvIdleTask+0x28>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d9f9      	bls.n	8009444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <prvIdleTask+0x2c>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009460:	e7f0      	b.n	8009444 <prvIdleTask+0x8>
 8009462:	bf00      	nop
 8009464:	20000fb8 	.word	0x20000fb8
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009472:	2300      	movs	r3, #0
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	e00c      	b.n	8009492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a12      	ldr	r2, [pc, #72]	; (80094cc <prvInitialiseTaskLists+0x60>)
 8009484:	4413      	add	r3, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fb3f 	bl	8008b0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3301      	adds	r3, #1
 8009490:	607b      	str	r3, [r7, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b06      	cmp	r3, #6
 8009496:	d9ef      	bls.n	8009478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009498:	480d      	ldr	r0, [pc, #52]	; (80094d0 <prvInitialiseTaskLists+0x64>)
 800949a:	f7ff fb36 	bl	8008b0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800949e:	480d      	ldr	r0, [pc, #52]	; (80094d4 <prvInitialiseTaskLists+0x68>)
 80094a0:	f7ff fb33 	bl	8008b0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094a4:	480c      	ldr	r0, [pc, #48]	; (80094d8 <prvInitialiseTaskLists+0x6c>)
 80094a6:	f7ff fb30 	bl	8008b0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094aa:	480c      	ldr	r0, [pc, #48]	; (80094dc <prvInitialiseTaskLists+0x70>)
 80094ac:	f7ff fb2d 	bl	8008b0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094b0:	480b      	ldr	r0, [pc, #44]	; (80094e0 <prvInitialiseTaskLists+0x74>)
 80094b2:	f7ff fb2a 	bl	8008b0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <prvInitialiseTaskLists+0x78>)
 80094b8:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <prvInitialiseTaskLists+0x64>)
 80094ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <prvInitialiseTaskLists+0x7c>)
 80094be:	4a05      	ldr	r2, [pc, #20]	; (80094d4 <prvInitialiseTaskLists+0x68>)
 80094c0:	601a      	str	r2, [r3, #0]
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000fb8 	.word	0x20000fb8
 80094d0:	20001044 	.word	0x20001044
 80094d4:	20001058 	.word	0x20001058
 80094d8:	20001074 	.word	0x20001074
 80094dc:	20001088 	.word	0x20001088
 80094e0:	200010a0 	.word	0x200010a0
 80094e4:	2000106c 	.word	0x2000106c
 80094e8:	20001070 	.word	0x20001070

080094ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094f2:	e019      	b.n	8009528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094f4:	f000 fa0e 	bl	8009914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f8:	4b10      	ldr	r3, [pc, #64]	; (800953c <prvCheckTasksWaitingTermination+0x50>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff fb8a 	bl	8008c1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <prvCheckTasksWaitingTermination+0x54>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3b01      	subs	r3, #1
 8009510:	4a0b      	ldr	r2, [pc, #44]	; (8009540 <prvCheckTasksWaitingTermination+0x54>)
 8009512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009514:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <prvCheckTasksWaitingTermination+0x58>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <prvCheckTasksWaitingTermination+0x58>)
 800951c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800951e:	f000 fa29 	bl	8009974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f810 	bl	8009548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009528:	4b06      	ldr	r3, [pc, #24]	; (8009544 <prvCheckTasksWaitingTermination+0x58>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e1      	bne.n	80094f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20001088 	.word	0x20001088
 8009540:	200010b4 	.word	0x200010b4
 8009544:	2000109c 	.word	0x2000109c

08009548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009556:	2b00      	cmp	r3, #0
 8009558:	d108      	bne.n	800956c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fb86 	bl	8009c70 <vPortFree>
				vPortFree( pxTCB );
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb83 	bl	8009c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800956a:	e018      	b.n	800959e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009572:	2b01      	cmp	r3, #1
 8009574:	d103      	bne.n	800957e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fb7a 	bl	8009c70 <vPortFree>
	}
 800957c:	e00f      	b.n	800959e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009584:	2b02      	cmp	r3, #2
 8009586:	d00a      	beq.n	800959e <prvDeleteTCB+0x56>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <prvDeleteTCB+0x54>
	}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <prvResetNextTaskUnblockTime+0x38>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <prvResetNextTaskUnblockTime+0x3c>)
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295
 80095be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095c0:	e008      	b.n	80095d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <prvResetNextTaskUnblockTime+0x38>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	4a04      	ldr	r2, [pc, #16]	; (80095e4 <prvResetNextTaskUnblockTime+0x3c>)
 80095d2:	6013      	str	r3, [r2, #0]
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	2000106c 	.word	0x2000106c
 80095e4:	200010d4 	.word	0x200010d4

080095e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095f2:	4b29      	ldr	r3, [pc, #164]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f8:	4b28      	ldr	r3, [pc, #160]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fb0d 	bl	8008c1e <uxListRemove>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800960a:	4b24      	ldr	r3, [pc, #144]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	2201      	movs	r2, #1
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	43da      	mvns	r2, r3
 8009618:	4b21      	ldr	r3, [pc, #132]	; (80096a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4013      	ands	r3, r2
 800961e:	4a20      	ldr	r2, [pc, #128]	; (80096a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009620:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d10a      	bne.n	8009640 <prvAddCurrentTaskToDelayedList+0x58>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009630:	4b1a      	ldr	r3, [pc, #104]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	481a      	ldr	r0, [pc, #104]	; (80096a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800963a:	f7ff fa93 	bl	8008b64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800963e:	e026      	b.n	800968e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009648:	4b14      	ldr	r3, [pc, #80]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	429a      	cmp	r2, r3
 8009656:	d209      	bcs.n	800966c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009658:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7ff faa1 	bl	8008bac <vListInsert>
}
 800966a:	e010      	b.n	800968e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966c:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b0a      	ldr	r3, [pc, #40]	; (800969c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7ff fa97 	bl	8008bac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	429a      	cmp	r2, r3
 8009686:	d202      	bcs.n	800968e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6013      	str	r3, [r2, #0]
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200010b8 	.word	0x200010b8
 800969c:	20000fb4 	.word	0x20000fb4
 80096a0:	200010bc 	.word	0x200010bc
 80096a4:	200010a0 	.word	0x200010a0
 80096a8:	20001070 	.word	0x20001070
 80096ac:	2000106c 	.word	0x2000106c
 80096b0:	200010d4 	.word	0x200010d4

080096b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3b04      	subs	r3, #4
 80096c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b04      	subs	r3, #4
 80096d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f023 0201 	bic.w	r2, r3, #1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b04      	subs	r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096e4:	4a0c      	ldr	r2, [pc, #48]	; (8009718 <pxPortInitialiseStack+0x64>)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3b14      	subs	r3, #20
 80096ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3b04      	subs	r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f06f 0202 	mvn.w	r2, #2
 8009702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3b20      	subs	r3, #32
 8009708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800970a:	68fb      	ldr	r3, [r7, #12]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	0800971d 	.word	0x0800971d

0800971c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009726:	4b12      	ldr	r3, [pc, #72]	; (8009770 <prvTaskExitError+0x54>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d00a      	beq.n	8009746 <prvTaskExitError+0x2a>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <prvTaskExitError+0x28>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60bb      	str	r3, [r7, #8]
}
 8009758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800975a:	bf00      	nop
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0fc      	beq.n	800975c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	200000bc 	.word	0x200000bc
	...

08009780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pxCurrentTCBConst2>)
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	6808      	ldr	r0, [r1, #0]
 8009786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	f380 8809 	msr	PSP, r0
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8811 	msr	BASEPRI, r0
 800979a:	4770      	bx	lr
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst2>:
 80097a0:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097a8:	4808      	ldr	r0, [pc, #32]	; (80097cc <prvPortStartFirstTask+0x24>)
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f380 8808 	msr	MSP, r0
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8814 	msr	CONTROL, r0
 80097ba:	b662      	cpsie	i
 80097bc:	b661      	cpsie	f
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	df00      	svc	0
 80097c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ca:	bf00      	nop
 80097cc:	e000ed08 	.word	0xe000ed08

080097d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097d6:	4b46      	ldr	r3, [pc, #280]	; (80098f0 <xPortStartScheduler+0x120>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a46      	ldr	r2, [pc, #280]	; (80098f4 <xPortStartScheduler+0x124>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d10a      	bne.n	80097f6 <xPortStartScheduler+0x26>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	613b      	str	r3, [r7, #16]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097f6:	4b3e      	ldr	r3, [pc, #248]	; (80098f0 <xPortStartScheduler+0x120>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a3f      	ldr	r2, [pc, #252]	; (80098f8 <xPortStartScheduler+0x128>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10a      	bne.n	8009816 <xPortStartScheduler+0x46>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009816:	4b39      	ldr	r3, [pc, #228]	; (80098fc <xPortStartScheduler+0x12c>)
 8009818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	22ff      	movs	r2, #255	; 0xff
 8009826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009838:	b2da      	uxtb	r2, r3
 800983a:	4b31      	ldr	r3, [pc, #196]	; (8009900 <xPortStartScheduler+0x130>)
 800983c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800983e:	4b31      	ldr	r3, [pc, #196]	; (8009904 <xPortStartScheduler+0x134>)
 8009840:	2207      	movs	r2, #7
 8009842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009844:	e009      	b.n	800985a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009846:	4b2f      	ldr	r3, [pc, #188]	; (8009904 <xPortStartScheduler+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3b01      	subs	r3, #1
 800984c:	4a2d      	ldr	r2, [pc, #180]	; (8009904 <xPortStartScheduler+0x134>)
 800984e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b2db      	uxtb	r3, r3
 8009858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d0ef      	beq.n	8009846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009866:	4b27      	ldr	r3, [pc, #156]	; (8009904 <xPortStartScheduler+0x134>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1c3 0307 	rsb	r3, r3, #7
 800986e:	2b04      	cmp	r3, #4
 8009870:	d00a      	beq.n	8009888 <xPortStartScheduler+0xb8>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60bb      	str	r3, [r7, #8]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <xPortStartScheduler+0x134>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	4a1d      	ldr	r2, [pc, #116]	; (8009904 <xPortStartScheduler+0x134>)
 8009890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <xPortStartScheduler+0x134>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800989a:	4a1a      	ldr	r2, [pc, #104]	; (8009904 <xPortStartScheduler+0x134>)
 800989c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098a6:	4b18      	ldr	r3, [pc, #96]	; (8009908 <xPortStartScheduler+0x138>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a17      	ldr	r2, [pc, #92]	; (8009908 <xPortStartScheduler+0x138>)
 80098ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <xPortStartScheduler+0x138>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a14      	ldr	r2, [pc, #80]	; (8009908 <xPortStartScheduler+0x138>)
 80098b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098be:	f000 f8dd 	bl	8009a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098c2:	4b12      	ldr	r3, [pc, #72]	; (800990c <xPortStartScheduler+0x13c>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098c8:	f000 f8fc 	bl	8009ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098cc:	4b10      	ldr	r3, [pc, #64]	; (8009910 <xPortStartScheduler+0x140>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a0f      	ldr	r2, [pc, #60]	; (8009910 <xPortStartScheduler+0x140>)
 80098d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098d8:	f7ff ff66 	bl	80097a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098dc:	f7ff fd52 	bl	8009384 <vTaskSwitchContext>
	prvTaskExitError();
 80098e0:	f7ff ff1c 	bl	800971c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	e000ed00 	.word	0xe000ed00
 80098f4:	410fc271 	.word	0x410fc271
 80098f8:	410fc270 	.word	0x410fc270
 80098fc:	e000e400 	.word	0xe000e400
 8009900:	200010e0 	.word	0x200010e0
 8009904:	200010e4 	.word	0x200010e4
 8009908:	e000ed20 	.word	0xe000ed20
 800990c:	200000bc 	.word	0x200000bc
 8009910:	e000ef34 	.word	0xe000ef34

08009914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	607b      	str	r3, [r7, #4]
}
 800992c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <vPortEnterCritical+0x58>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	4a0d      	ldr	r2, [pc, #52]	; (800996c <vPortEnterCritical+0x58>)
 8009936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <vPortEnterCritical+0x58>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10f      	bne.n	8009960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009940:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <vPortEnterCritical+0x5c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <vPortEnterCritical+0x4c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	603b      	str	r3, [r7, #0]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <vPortEnterCritical+0x4a>
	}
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	200000bc 	.word	0x200000bc
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <vPortExitCritical+0x50>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <vPortExitCritical+0x24>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	607b      	str	r3, [r7, #4]
}
 8009994:	bf00      	nop
 8009996:	e7fe      	b.n	8009996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <vPortExitCritical+0x50>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3b01      	subs	r3, #1
 800999e:	4a09      	ldr	r2, [pc, #36]	; (80099c4 <vPortExitCritical+0x50>)
 80099a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099a2:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <vPortExitCritical+0x50>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <vPortExitCritical+0x42>
 80099aa:	2300      	movs	r3, #0
 80099ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	200000bc 	.word	0x200000bc
	...

080099d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099d0:	f3ef 8009 	mrs	r0, PSP
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <pxCurrentTCBConst>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	f01e 0f10 	tst.w	lr, #16
 80099e0:	bf08      	it	eq
 80099e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	6010      	str	r0, [r2, #0]
 80099ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099f4:	f380 8811 	msr	BASEPRI, r0
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f7ff fcc0 	bl	8009384 <vTaskSwitchContext>
 8009a04:	f04f 0000 	mov.w	r0, #0
 8009a08:	f380 8811 	msr	BASEPRI, r0
 8009a0c:	bc09      	pop	{r0, r3}
 8009a0e:	6819      	ldr	r1, [r3, #0]
 8009a10:	6808      	ldr	r0, [r1, #0]
 8009a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a16:	f01e 0f10 	tst.w	lr, #16
 8009a1a:	bf08      	it	eq
 8009a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a20:	f380 8809 	msr	PSP, r0
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	f3af 8000 	nop.w

08009a30 <pxCurrentTCBConst>:
 8009a30:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop

08009a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a52:	f7ff fbdf 	bl	8009214 <xTaskIncrementTick>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <SysTick_Handler+0x40>)
 8009a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	2300      	movs	r3, #0
 8009a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f383 8811 	msr	BASEPRI, r3
}
 8009a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <vPortSetupTimerInterrupt+0x34>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <vPortSetupTimerInterrupt+0x38>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <vPortSetupTimerInterrupt+0x3c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <vPortSetupTimerInterrupt+0x40>)
 8009a92:	fba2 2303 	umull	r2, r3, r2, r3
 8009a96:	099b      	lsrs	r3, r3, #6
 8009a98:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <vPortSetupTimerInterrupt+0x44>)
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a9e:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <vPortSetupTimerInterrupt+0x34>)
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	e000e010 	.word	0xe000e010
 8009ab4:	e000e018 	.word	0xe000e018
 8009ab8:	20000020 	.word	0x20000020
 8009abc:	10624dd3 	.word	0x10624dd3
 8009ac0:	e000e014 	.word	0xe000e014

08009ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ad4 <vPortEnableVFP+0x10>
 8009ac8:	6801      	ldr	r1, [r0, #0]
 8009aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ace:	6001      	str	r1, [r0, #0]
 8009ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ad2:	bf00      	nop
 8009ad4:	e000ed88 	.word	0xe000ed88

08009ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08a      	sub	sp, #40	; 0x28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ae4:	f7ff faec 	bl	80090c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ae8:	4b5b      	ldr	r3, [pc, #364]	; (8009c58 <pvPortMalloc+0x180>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009af0:	f000 f920 	bl	8009d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009af4:	4b59      	ldr	r3, [pc, #356]	; (8009c5c <pvPortMalloc+0x184>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8093 	bne.w	8009c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01d      	beq.n	8009b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b08:	2208      	movs	r2, #8
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d014      	beq.n	8009b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	3308      	adds	r3, #8
 8009b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <pvPortMalloc+0x6c>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	617b      	str	r3, [r7, #20]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d06e      	beq.n	8009c28 <pvPortMalloc+0x150>
 8009b4a:	4b45      	ldr	r3, [pc, #276]	; (8009c60 <pvPortMalloc+0x188>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d869      	bhi.n	8009c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b54:	4b43      	ldr	r3, [pc, #268]	; (8009c64 <pvPortMalloc+0x18c>)
 8009b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b58:	4b42      	ldr	r3, [pc, #264]	; (8009c64 <pvPortMalloc+0x18c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b5e:	e004      	b.n	8009b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d903      	bls.n	8009b7c <pvPortMalloc+0xa4>
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f1      	bne.n	8009b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b7c:	4b36      	ldr	r3, [pc, #216]	; (8009c58 <pvPortMalloc+0x180>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d050      	beq.n	8009c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2208      	movs	r2, #8
 8009b8c:	4413      	add	r3, r2
 8009b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d91f      	bls.n	8009be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	613b      	str	r3, [r7, #16]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009be2:	69b8      	ldr	r0, [r7, #24]
 8009be4:	f000 f908 	bl	8009df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <pvPortMalloc+0x188>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	4a1b      	ldr	r2, [pc, #108]	; (8009c60 <pvPortMalloc+0x188>)
 8009bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bf6:	4b1a      	ldr	r3, [pc, #104]	; (8009c60 <pvPortMalloc+0x188>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <pvPortMalloc+0x190>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d203      	bcs.n	8009c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c02:	4b17      	ldr	r3, [pc, #92]	; (8009c60 <pvPortMalloc+0x188>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <pvPortMalloc+0x190>)
 8009c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <pvPortMalloc+0x184>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <pvPortMalloc+0x194>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3301      	adds	r3, #1
 8009c24:	4a11      	ldr	r2, [pc, #68]	; (8009c6c <pvPortMalloc+0x194>)
 8009c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c28:	f7ff fa58 	bl	80090dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <pvPortMalloc+0x174>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	60fb      	str	r3, [r7, #12]
}
 8009c48:	bf00      	nop
 8009c4a:	e7fe      	b.n	8009c4a <pvPortMalloc+0x172>
	return pvReturn;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3728      	adds	r7, #40	; 0x28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20002478 	.word	0x20002478
 8009c5c:	2000248c 	.word	0x2000248c
 8009c60:	2000247c 	.word	0x2000247c
 8009c64:	20002470 	.word	0x20002470
 8009c68:	20002480 	.word	0x20002480
 8009c6c:	20002484 	.word	0x20002484

08009c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d04d      	beq.n	8009d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c82:	2308      	movs	r3, #8
 8009c84:	425b      	negs	r3, r3
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4413      	add	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <vPortFree+0xb8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <vPortFree+0x44>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	60fb      	str	r3, [r7, #12]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <vPortFree+0x62>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	60bb      	str	r3, [r7, #8]
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <vPortFree+0xb8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01e      	beq.n	8009d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d11a      	bne.n	8009d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <vPortFree+0xb8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	43db      	mvns	r3, r3
 8009cf2:	401a      	ands	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cf8:	f7ff f9e2 	bl	80090c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <vPortFree+0xbc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4413      	add	r3, r2
 8009d06:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <vPortFree+0xbc>)
 8009d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f000 f874 	bl	8009df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <vPortFree+0xc0>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	4a06      	ldr	r2, [pc, #24]	; (8009d30 <vPortFree+0xc0>)
 8009d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d1a:	f7ff f9df 	bl	80090dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d1e:	bf00      	nop
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2000248c 	.word	0x2000248c
 8009d2c:	2000247c 	.word	0x2000247c
 8009d30:	20002488 	.word	0x20002488

08009d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d40:	4b27      	ldr	r3, [pc, #156]	; (8009de0 <prvHeapInit+0xac>)
 8009d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00c      	beq.n	8009d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3307      	adds	r3, #7
 8009d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0307 	bic.w	r3, r3, #7
 8009d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	4a1f      	ldr	r2, [pc, #124]	; (8009de0 <prvHeapInit+0xac>)
 8009d64:	4413      	add	r3, r2
 8009d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d6c:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <prvHeapInit+0xb0>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d72:	4b1c      	ldr	r3, [pc, #112]	; (8009de4 <prvHeapInit+0xb0>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d80:	2208      	movs	r2, #8
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0307 	bic.w	r3, r3, #7
 8009d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <prvHeapInit+0xb4>)
 8009d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <prvHeapInit+0xb4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <prvHeapInit+0xb4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009db4:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <prvHeapInit+0xb4>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	4a0a      	ldr	r2, [pc, #40]	; (8009dec <prvHeapInit+0xb8>)
 8009dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <prvHeapInit+0xbc>)
 8009dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dcc:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <prvHeapInit+0xc0>)
 8009dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	200010e8 	.word	0x200010e8
 8009de4:	20002470 	.word	0x20002470
 8009de8:	20002478 	.word	0x20002478
 8009dec:	20002480 	.word	0x20002480
 8009df0:	2000247c 	.word	0x2000247c
 8009df4:	2000248c 	.word	0x2000248c

08009df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e00:	4b28      	ldr	r3, [pc, #160]	; (8009ea4 <prvInsertBlockIntoFreeList+0xac>)
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	e002      	b.n	8009e0c <prvInsertBlockIntoFreeList+0x14>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d8f7      	bhi.n	8009e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	4413      	add	r3, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d108      	bne.n	8009e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	441a      	add	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d118      	bne.n	8009e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b15      	ldr	r3, [pc, #84]	; (8009ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d00d      	beq.n	8009e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	441a      	add	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e008      	b.n	8009e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e76:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	e003      	b.n	8009e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d002      	beq.n	8009e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20002470 	.word	0x20002470
 8009ea8:	20002478 	.word	0x20002478

08009eac <calloc>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <calloc+0xc>)
 8009eae:	460a      	mov	r2, r1
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	f000 b802 	b.w	8009ebc <_calloc_r>
 8009eb8:	20000118 	.word	0x20000118

08009ebc <_calloc_r>:
 8009ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ebe:	fba1 2402 	umull	r2, r4, r1, r2
 8009ec2:	b94c      	cbnz	r4, 8009ed8 <_calloc_r+0x1c>
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	9201      	str	r2, [sp, #4]
 8009ec8:	f000 f82e 	bl	8009f28 <_malloc_r>
 8009ecc:	9a01      	ldr	r2, [sp, #4]
 8009ece:	4605      	mov	r5, r0
 8009ed0:	b930      	cbnz	r0, 8009ee0 <_calloc_r+0x24>
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	b003      	add	sp, #12
 8009ed6:	bd30      	pop	{r4, r5, pc}
 8009ed8:	220c      	movs	r2, #12
 8009eda:	6002      	str	r2, [r0, #0]
 8009edc:	2500      	movs	r5, #0
 8009ede:	e7f8      	b.n	8009ed2 <_calloc_r+0x16>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	f000 fe38 	bl	800ab56 <memset>
 8009ee6:	e7f4      	b.n	8009ed2 <_calloc_r+0x16>

08009ee8 <sbrk_aligned>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4e0e      	ldr	r6, [pc, #56]	; (8009f24 <sbrk_aligned+0x3c>)
 8009eec:	460c      	mov	r4, r1
 8009eee:	6831      	ldr	r1, [r6, #0]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	b911      	cbnz	r1, 8009efa <sbrk_aligned+0x12>
 8009ef4:	f000 fe70 	bl	800abd8 <_sbrk_r>
 8009ef8:	6030      	str	r0, [r6, #0]
 8009efa:	4621      	mov	r1, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 fe6b 	bl	800abd8 <_sbrk_r>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d00a      	beq.n	8009f1c <sbrk_aligned+0x34>
 8009f06:	1cc4      	adds	r4, r0, #3
 8009f08:	f024 0403 	bic.w	r4, r4, #3
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d007      	beq.n	8009f20 <sbrk_aligned+0x38>
 8009f10:	1a21      	subs	r1, r4, r0
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 fe60 	bl	800abd8 <_sbrk_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d101      	bne.n	8009f20 <sbrk_aligned+0x38>
 8009f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f20:	4620      	mov	r0, r4
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	20002494 	.word	0x20002494

08009f28 <_malloc_r>:
 8009f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	1ccd      	adds	r5, r1, #3
 8009f2e:	f025 0503 	bic.w	r5, r5, #3
 8009f32:	3508      	adds	r5, #8
 8009f34:	2d0c      	cmp	r5, #12
 8009f36:	bf38      	it	cc
 8009f38:	250c      	movcc	r5, #12
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	db01      	blt.n	8009f44 <_malloc_r+0x1c>
 8009f40:	42a9      	cmp	r1, r5
 8009f42:	d905      	bls.n	8009f50 <_malloc_r+0x28>
 8009f44:	230c      	movs	r3, #12
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	2600      	movs	r6, #0
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a024 <_malloc_r+0xfc>
 8009f54:	f000 f868 	bl	800a028 <__malloc_lock>
 8009f58:	f8d8 3000 	ldr.w	r3, [r8]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	bb5c      	cbnz	r4, 8009fb8 <_malloc_r+0x90>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	f7ff ffc0 	bl	8009ee8 <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	d155      	bne.n	800a01a <_malloc_r+0xf2>
 8009f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8009f72:	4626      	mov	r6, r4
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	d145      	bne.n	800a004 <_malloc_r+0xdc>
 8009f78:	2c00      	cmp	r4, #0
 8009f7a:	d048      	beq.n	800a00e <_malloc_r+0xe6>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4638      	mov	r0, r7
 8009f82:	eb04 0903 	add.w	r9, r4, r3
 8009f86:	f000 fe27 	bl	800abd8 <_sbrk_r>
 8009f8a:	4581      	cmp	r9, r0
 8009f8c:	d13f      	bne.n	800a00e <_malloc_r+0xe6>
 8009f8e:	6821      	ldr	r1, [r4, #0]
 8009f90:	1a6d      	subs	r5, r5, r1
 8009f92:	4629      	mov	r1, r5
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff ffa7 	bl	8009ee8 <sbrk_aligned>
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d037      	beq.n	800a00e <_malloc_r+0xe6>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	442b      	add	r3, r5
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d038      	beq.n	800a01e <_malloc_r+0xf6>
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	42a2      	cmp	r2, r4
 8009fb0:	d12b      	bne.n	800a00a <_malloc_r+0xe2>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	e00f      	b.n	8009fd8 <_malloc_r+0xb0>
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	1b52      	subs	r2, r2, r5
 8009fbc:	d41f      	bmi.n	8009ffe <_malloc_r+0xd6>
 8009fbe:	2a0b      	cmp	r2, #11
 8009fc0:	d917      	bls.n	8009ff2 <_malloc_r+0xca>
 8009fc2:	1961      	adds	r1, r4, r5
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	6025      	str	r5, [r4, #0]
 8009fc8:	bf18      	it	ne
 8009fca:	6059      	strne	r1, [r3, #4]
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	bf08      	it	eq
 8009fd0:	f8c8 1000 	streq.w	r1, [r8]
 8009fd4:	5162      	str	r2, [r4, r5]
 8009fd6:	604b      	str	r3, [r1, #4]
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f104 060b 	add.w	r6, r4, #11
 8009fde:	f000 f829 	bl	800a034 <__malloc_unlock>
 8009fe2:	f026 0607 	bic.w	r6, r6, #7
 8009fe6:	1d23      	adds	r3, r4, #4
 8009fe8:	1af2      	subs	r2, r6, r3
 8009fea:	d0ae      	beq.n	8009f4a <_malloc_r+0x22>
 8009fec:	1b9b      	subs	r3, r3, r6
 8009fee:	50a3      	str	r3, [r4, r2]
 8009ff0:	e7ab      	b.n	8009f4a <_malloc_r+0x22>
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	6862      	ldr	r2, [r4, #4]
 8009ff6:	d1dd      	bne.n	8009fb4 <_malloc_r+0x8c>
 8009ff8:	f8c8 2000 	str.w	r2, [r8]
 8009ffc:	e7ec      	b.n	8009fd8 <_malloc_r+0xb0>
 8009ffe:	4623      	mov	r3, r4
 800a000:	6864      	ldr	r4, [r4, #4]
 800a002:	e7ac      	b.n	8009f5e <_malloc_r+0x36>
 800a004:	4634      	mov	r4, r6
 800a006:	6876      	ldr	r6, [r6, #4]
 800a008:	e7b4      	b.n	8009f74 <_malloc_r+0x4c>
 800a00a:	4613      	mov	r3, r2
 800a00c:	e7cc      	b.n	8009fa8 <_malloc_r+0x80>
 800a00e:	230c      	movs	r3, #12
 800a010:	603b      	str	r3, [r7, #0]
 800a012:	4638      	mov	r0, r7
 800a014:	f000 f80e 	bl	800a034 <__malloc_unlock>
 800a018:	e797      	b.n	8009f4a <_malloc_r+0x22>
 800a01a:	6025      	str	r5, [r4, #0]
 800a01c:	e7dc      	b.n	8009fd8 <_malloc_r+0xb0>
 800a01e:	605b      	str	r3, [r3, #4]
 800a020:	deff      	udf	#255	; 0xff
 800a022:	bf00      	nop
 800a024:	20002490 	.word	0x20002490

0800a028 <__malloc_lock>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__malloc_lock+0x8>)
 800a02a:	f000 be22 	b.w	800ac72 <__retarget_lock_acquire_recursive>
 800a02e:	bf00      	nop
 800a030:	200025d8 	.word	0x200025d8

0800a034 <__malloc_unlock>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__malloc_unlock+0x8>)
 800a036:	f000 be1d 	b.w	800ac74 <__retarget_lock_release_recursive>
 800a03a:	bf00      	nop
 800a03c:	200025d8 	.word	0x200025d8

0800a040 <__cvt>:
 800a040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	ec55 4b10 	vmov	r4, r5, d0
 800a048:	2d00      	cmp	r5, #0
 800a04a:	460e      	mov	r6, r1
 800a04c:	4619      	mov	r1, r3
 800a04e:	462b      	mov	r3, r5
 800a050:	bfbb      	ittet	lt
 800a052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a056:	461d      	movlt	r5, r3
 800a058:	2300      	movge	r3, #0
 800a05a:	232d      	movlt	r3, #45	; 0x2d
 800a05c:	700b      	strb	r3, [r1, #0]
 800a05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a060:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a064:	4691      	mov	r9, r2
 800a066:	f023 0820 	bic.w	r8, r3, #32
 800a06a:	bfbc      	itt	lt
 800a06c:	4622      	movlt	r2, r4
 800a06e:	4614      	movlt	r4, r2
 800a070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a074:	d005      	beq.n	800a082 <__cvt+0x42>
 800a076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a07a:	d100      	bne.n	800a07e <__cvt+0x3e>
 800a07c:	3601      	adds	r6, #1
 800a07e:	2102      	movs	r1, #2
 800a080:	e000      	b.n	800a084 <__cvt+0x44>
 800a082:	2103      	movs	r1, #3
 800a084:	ab03      	add	r3, sp, #12
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	ab02      	add	r3, sp, #8
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	ec45 4b10 	vmov	d0, r4, r5
 800a090:	4653      	mov	r3, sl
 800a092:	4632      	mov	r2, r6
 800a094:	f000 fe88 	bl	800ada8 <_dtoa_r>
 800a098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a09c:	4607      	mov	r7, r0
 800a09e:	d102      	bne.n	800a0a6 <__cvt+0x66>
 800a0a0:	f019 0f01 	tst.w	r9, #1
 800a0a4:	d022      	beq.n	800a0ec <__cvt+0xac>
 800a0a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0aa:	eb07 0906 	add.w	r9, r7, r6
 800a0ae:	d110      	bne.n	800a0d2 <__cvt+0x92>
 800a0b0:	783b      	ldrb	r3, [r7, #0]
 800a0b2:	2b30      	cmp	r3, #48	; 0x30
 800a0b4:	d10a      	bne.n	800a0cc <__cvt+0x8c>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7f6 fd1b 	bl	8000af8 <__aeabi_dcmpeq>
 800a0c2:	b918      	cbnz	r0, 800a0cc <__cvt+0x8c>
 800a0c4:	f1c6 0601 	rsb	r6, r6, #1
 800a0c8:	f8ca 6000 	str.w	r6, [sl]
 800a0cc:	f8da 3000 	ldr.w	r3, [sl]
 800a0d0:	4499      	add	r9, r3
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fd0d 	bl	8000af8 <__aeabi_dcmpeq>
 800a0de:	b108      	cbz	r0, 800a0e4 <__cvt+0xa4>
 800a0e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0e4:	2230      	movs	r2, #48	; 0x30
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	454b      	cmp	r3, r9
 800a0ea:	d307      	bcc.n	800a0fc <__cvt+0xbc>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f0:	1bdb      	subs	r3, r3, r7
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	b004      	add	sp, #16
 800a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fc:	1c59      	adds	r1, r3, #1
 800a0fe:	9103      	str	r1, [sp, #12]
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	e7f0      	b.n	800a0e6 <__cvt+0xa6>

0800a104 <__exponent>:
 800a104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a106:	4603      	mov	r3, r0
 800a108:	2900      	cmp	r1, #0
 800a10a:	bfb8      	it	lt
 800a10c:	4249      	neglt	r1, r1
 800a10e:	f803 2b02 	strb.w	r2, [r3], #2
 800a112:	bfb4      	ite	lt
 800a114:	222d      	movlt	r2, #45	; 0x2d
 800a116:	222b      	movge	r2, #43	; 0x2b
 800a118:	2909      	cmp	r1, #9
 800a11a:	7042      	strb	r2, [r0, #1]
 800a11c:	dd2a      	ble.n	800a174 <__exponent+0x70>
 800a11e:	f10d 0207 	add.w	r2, sp, #7
 800a122:	4617      	mov	r7, r2
 800a124:	260a      	movs	r6, #10
 800a126:	4694      	mov	ip, r2
 800a128:	fb91 f5f6 	sdiv	r5, r1, r6
 800a12c:	fb06 1415 	mls	r4, r6, r5, r1
 800a130:	3430      	adds	r4, #48	; 0x30
 800a132:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a136:	460c      	mov	r4, r1
 800a138:	2c63      	cmp	r4, #99	; 0x63
 800a13a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a13e:	4629      	mov	r1, r5
 800a140:	dcf1      	bgt.n	800a126 <__exponent+0x22>
 800a142:	3130      	adds	r1, #48	; 0x30
 800a144:	f1ac 0402 	sub.w	r4, ip, #2
 800a148:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a14c:	1c41      	adds	r1, r0, #1
 800a14e:	4622      	mov	r2, r4
 800a150:	42ba      	cmp	r2, r7
 800a152:	d30a      	bcc.n	800a16a <__exponent+0x66>
 800a154:	f10d 0209 	add.w	r2, sp, #9
 800a158:	eba2 020c 	sub.w	r2, r2, ip
 800a15c:	42bc      	cmp	r4, r7
 800a15e:	bf88      	it	hi
 800a160:	2200      	movhi	r2, #0
 800a162:	4413      	add	r3, r2
 800a164:	1a18      	subs	r0, r3, r0
 800a166:	b003      	add	sp, #12
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a16e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a172:	e7ed      	b.n	800a150 <__exponent+0x4c>
 800a174:	2330      	movs	r3, #48	; 0x30
 800a176:	3130      	adds	r1, #48	; 0x30
 800a178:	7083      	strb	r3, [r0, #2]
 800a17a:	70c1      	strb	r1, [r0, #3]
 800a17c:	1d03      	adds	r3, r0, #4
 800a17e:	e7f1      	b.n	800a164 <__exponent+0x60>

0800a180 <_printf_float>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	ed2d 8b02 	vpush	{d8}
 800a188:	b08d      	sub	sp, #52	; 0x34
 800a18a:	460c      	mov	r4, r1
 800a18c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a190:	4616      	mov	r6, r2
 800a192:	461f      	mov	r7, r3
 800a194:	4605      	mov	r5, r0
 800a196:	f000 fce7 	bl	800ab68 <_localeconv_r>
 800a19a:	f8d0 a000 	ldr.w	sl, [r0]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f7f6 f87e 	bl	80002a0 <strlen>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1b4:	3307      	adds	r3, #7
 800a1b6:	f023 0307 	bic.w	r3, r3, #7
 800a1ba:	f103 0208 	add.w	r2, r3, #8
 800a1be:	f8c8 2000 	str.w	r2, [r8]
 800a1c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1d0:	ee08 0a10 	vmov	s16, r0
 800a1d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a1d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1dc:	4b9e      	ldr	r3, [pc, #632]	; (800a458 <_printf_float+0x2d8>)
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e2:	f7f6 fcbb 	bl	8000b5c <__aeabi_dcmpun>
 800a1e6:	bb88      	cbnz	r0, 800a24c <_printf_float+0xcc>
 800a1e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ec:	4b9a      	ldr	r3, [pc, #616]	; (800a458 <_printf_float+0x2d8>)
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f2:	f7f6 fc95 	bl	8000b20 <__aeabi_dcmple>
 800a1f6:	bb48      	cbnz	r0, 800a24c <_printf_float+0xcc>
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4649      	mov	r1, r9
 800a200:	f7f6 fc84 	bl	8000b0c <__aeabi_dcmplt>
 800a204:	b110      	cbz	r0, 800a20c <_printf_float+0x8c>
 800a206:	232d      	movs	r3, #45	; 0x2d
 800a208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a20c:	4a93      	ldr	r2, [pc, #588]	; (800a45c <_printf_float+0x2dc>)
 800a20e:	4b94      	ldr	r3, [pc, #592]	; (800a460 <_printf_float+0x2e0>)
 800a210:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a214:	bf94      	ite	ls
 800a216:	4690      	movls	r8, r2
 800a218:	4698      	movhi	r8, r3
 800a21a:	2303      	movs	r3, #3
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	f023 0304 	bic.w	r3, r3, #4
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	f04f 0900 	mov.w	r9, #0
 800a22a:	9700      	str	r7, [sp, #0]
 800a22c:	4633      	mov	r3, r6
 800a22e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a230:	4621      	mov	r1, r4
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f9da 	bl	800a5ec <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	f040 8090 	bne.w	800a35e <_printf_float+0x1de>
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295
 800a242:	b00d      	add	sp, #52	; 0x34
 800a244:	ecbd 8b02 	vpop	{d8}
 800a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	4642      	mov	r2, r8
 800a24e:	464b      	mov	r3, r9
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	f7f6 fc82 	bl	8000b5c <__aeabi_dcmpun>
 800a258:	b140      	cbz	r0, 800a26c <_printf_float+0xec>
 800a25a:	464b      	mov	r3, r9
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfbc      	itt	lt
 800a260:	232d      	movlt	r3, #45	; 0x2d
 800a262:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a266:	4a7f      	ldr	r2, [pc, #508]	; (800a464 <_printf_float+0x2e4>)
 800a268:	4b7f      	ldr	r3, [pc, #508]	; (800a468 <_printf_float+0x2e8>)
 800a26a:	e7d1      	b.n	800a210 <_printf_float+0x90>
 800a26c:	6863      	ldr	r3, [r4, #4]
 800a26e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a272:	9206      	str	r2, [sp, #24]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	d13f      	bne.n	800a2f8 <_printf_float+0x178>
 800a278:	2306      	movs	r3, #6
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	6861      	ldr	r1, [r4, #4]
 800a280:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a284:	2300      	movs	r3, #0
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	ab0a      	add	r3, sp, #40	; 0x28
 800a28a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a28e:	ab09      	add	r3, sp, #36	; 0x24
 800a290:	ec49 8b10 	vmov	d0, r8, r9
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	6022      	str	r2, [r4, #0]
 800a298:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a29c:	4628      	mov	r0, r5
 800a29e:	f7ff fecf 	bl	800a040 <__cvt>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a6:	2b47      	cmp	r3, #71	; 0x47
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	d108      	bne.n	800a2be <_printf_float+0x13e>
 800a2ac:	1cc8      	adds	r0, r1, #3
 800a2ae:	db02      	blt.n	800a2b6 <_printf_float+0x136>
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	4299      	cmp	r1, r3
 800a2b4:	dd41      	ble.n	800a33a <_printf_float+0x1ba>
 800a2b6:	f1ab 0302 	sub.w	r3, fp, #2
 800a2ba:	fa5f fb83 	uxtb.w	fp, r3
 800a2be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2c2:	d820      	bhi.n	800a306 <_printf_float+0x186>
 800a2c4:	3901      	subs	r1, #1
 800a2c6:	465a      	mov	r2, fp
 800a2c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2cc:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ce:	f7ff ff19 	bl	800a104 <__exponent>
 800a2d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d4:	1813      	adds	r3, r2, r0
 800a2d6:	2a01      	cmp	r2, #1
 800a2d8:	4681      	mov	r9, r0
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	dc02      	bgt.n	800a2e4 <_printf_float+0x164>
 800a2de:	6822      	ldr	r2, [r4, #0]
 800a2e0:	07d2      	lsls	r2, r2, #31
 800a2e2:	d501      	bpl.n	800a2e8 <_printf_float+0x168>
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d09c      	beq.n	800a22a <_printf_float+0xaa>
 800a2f0:	232d      	movs	r3, #45	; 0x2d
 800a2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f6:	e798      	b.n	800a22a <_printf_float+0xaa>
 800a2f8:	9a06      	ldr	r2, [sp, #24]
 800a2fa:	2a47      	cmp	r2, #71	; 0x47
 800a2fc:	d1be      	bne.n	800a27c <_printf_float+0xfc>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1bc      	bne.n	800a27c <_printf_float+0xfc>
 800a302:	2301      	movs	r3, #1
 800a304:	e7b9      	b.n	800a27a <_printf_float+0xfa>
 800a306:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a30a:	d118      	bne.n	800a33e <_printf_float+0x1be>
 800a30c:	2900      	cmp	r1, #0
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	dd0b      	ble.n	800a32a <_printf_float+0x1aa>
 800a312:	6121      	str	r1, [r4, #16]
 800a314:	b913      	cbnz	r3, 800a31c <_printf_float+0x19c>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	07d0      	lsls	r0, r2, #31
 800a31a:	d502      	bpl.n	800a322 <_printf_float+0x1a2>
 800a31c:	3301      	adds	r3, #1
 800a31e:	440b      	add	r3, r1
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	65a1      	str	r1, [r4, #88]	; 0x58
 800a324:	f04f 0900 	mov.w	r9, #0
 800a328:	e7de      	b.n	800a2e8 <_printf_float+0x168>
 800a32a:	b913      	cbnz	r3, 800a332 <_printf_float+0x1b2>
 800a32c:	6822      	ldr	r2, [r4, #0]
 800a32e:	07d2      	lsls	r2, r2, #31
 800a330:	d501      	bpl.n	800a336 <_printf_float+0x1b6>
 800a332:	3302      	adds	r3, #2
 800a334:	e7f4      	b.n	800a320 <_printf_float+0x1a0>
 800a336:	2301      	movs	r3, #1
 800a338:	e7f2      	b.n	800a320 <_printf_float+0x1a0>
 800a33a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a340:	4299      	cmp	r1, r3
 800a342:	db05      	blt.n	800a350 <_printf_float+0x1d0>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	6121      	str	r1, [r4, #16]
 800a348:	07d8      	lsls	r0, r3, #31
 800a34a:	d5ea      	bpl.n	800a322 <_printf_float+0x1a2>
 800a34c:	1c4b      	adds	r3, r1, #1
 800a34e:	e7e7      	b.n	800a320 <_printf_float+0x1a0>
 800a350:	2900      	cmp	r1, #0
 800a352:	bfd4      	ite	le
 800a354:	f1c1 0202 	rsble	r2, r1, #2
 800a358:	2201      	movgt	r2, #1
 800a35a:	4413      	add	r3, r2
 800a35c:	e7e0      	b.n	800a320 <_printf_float+0x1a0>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	055a      	lsls	r2, r3, #21
 800a362:	d407      	bmi.n	800a374 <_printf_float+0x1f4>
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	4642      	mov	r2, r8
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	d12c      	bne.n	800a3cc <_printf_float+0x24c>
 800a372:	e764      	b.n	800a23e <_printf_float+0xbe>
 800a374:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a378:	f240 80e0 	bls.w	800a53c <_printf_float+0x3bc>
 800a37c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a380:	2200      	movs	r2, #0
 800a382:	2300      	movs	r3, #0
 800a384:	f7f6 fbb8 	bl	8000af8 <__aeabi_dcmpeq>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d034      	beq.n	800a3f6 <_printf_float+0x276>
 800a38c:	4a37      	ldr	r2, [pc, #220]	; (800a46c <_printf_float+0x2ec>)
 800a38e:	2301      	movs	r3, #1
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	f43f af51 	beq.w	800a23e <_printf_float+0xbe>
 800a39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	db02      	blt.n	800a3aa <_printf_float+0x22a>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	07d8      	lsls	r0, r3, #31
 800a3a8:	d510      	bpl.n	800a3cc <_printf_float+0x24c>
 800a3aa:	ee18 3a10 	vmov	r3, s16
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	47b8      	blx	r7
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	f43f af41 	beq.w	800a23e <_printf_float+0xbe>
 800a3bc:	f04f 0800 	mov.w	r8, #0
 800a3c0:	f104 091a 	add.w	r9, r4, #26
 800a3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	4543      	cmp	r3, r8
 800a3ca:	dc09      	bgt.n	800a3e0 <_printf_float+0x260>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	079b      	lsls	r3, r3, #30
 800a3d0:	f100 8107 	bmi.w	800a5e2 <_printf_float+0x462>
 800a3d4:	68e0      	ldr	r0, [r4, #12]
 800a3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d8:	4298      	cmp	r0, r3
 800a3da:	bfb8      	it	lt
 800a3dc:	4618      	movlt	r0, r3
 800a3de:	e730      	b.n	800a242 <_printf_float+0xc2>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	464a      	mov	r2, r9
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f43f af27 	beq.w	800a23e <_printf_float+0xbe>
 800a3f0:	f108 0801 	add.w	r8, r8, #1
 800a3f4:	e7e6      	b.n	800a3c4 <_printf_float+0x244>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc39      	bgt.n	800a470 <_printf_float+0x2f0>
 800a3fc:	4a1b      	ldr	r2, [pc, #108]	; (800a46c <_printf_float+0x2ec>)
 800a3fe:	2301      	movs	r3, #1
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	f43f af19 	beq.w	800a23e <_printf_float+0xbe>
 800a40c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a410:	4313      	orrs	r3, r2
 800a412:	d102      	bne.n	800a41a <_printf_float+0x29a>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	07d9      	lsls	r1, r3, #31
 800a418:	d5d8      	bpl.n	800a3cc <_printf_float+0x24c>
 800a41a:	ee18 3a10 	vmov	r3, s16
 800a41e:	4652      	mov	r2, sl
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	47b8      	blx	r7
 800a426:	3001      	adds	r0, #1
 800a428:	f43f af09 	beq.w	800a23e <_printf_float+0xbe>
 800a42c:	f04f 0900 	mov.w	r9, #0
 800a430:	f104 0a1a 	add.w	sl, r4, #26
 800a434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a436:	425b      	negs	r3, r3
 800a438:	454b      	cmp	r3, r9
 800a43a:	dc01      	bgt.n	800a440 <_printf_float+0x2c0>
 800a43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43e:	e792      	b.n	800a366 <_printf_float+0x1e6>
 800a440:	2301      	movs	r3, #1
 800a442:	4652      	mov	r2, sl
 800a444:	4631      	mov	r1, r6
 800a446:	4628      	mov	r0, r5
 800a448:	47b8      	blx	r7
 800a44a:	3001      	adds	r0, #1
 800a44c:	f43f aef7 	beq.w	800a23e <_printf_float+0xbe>
 800a450:	f109 0901 	add.w	r9, r9, #1
 800a454:	e7ee      	b.n	800a434 <_printf_float+0x2b4>
 800a456:	bf00      	nop
 800a458:	7fefffff 	.word	0x7fefffff
 800a45c:	0800cefc 	.word	0x0800cefc
 800a460:	0800cf00 	.word	0x0800cf00
 800a464:	0800cf04 	.word	0x0800cf04
 800a468:	0800cf08 	.word	0x0800cf08
 800a46c:	0800cf0c 	.word	0x0800cf0c
 800a470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a474:	429a      	cmp	r2, r3
 800a476:	bfa8      	it	ge
 800a478:	461a      	movge	r2, r3
 800a47a:	2a00      	cmp	r2, #0
 800a47c:	4691      	mov	r9, r2
 800a47e:	dc37      	bgt.n	800a4f0 <_printf_float+0x370>
 800a480:	f04f 0b00 	mov.w	fp, #0
 800a484:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a488:	f104 021a 	add.w	r2, r4, #26
 800a48c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	eba3 0309 	sub.w	r3, r3, r9
 800a494:	455b      	cmp	r3, fp
 800a496:	dc33      	bgt.n	800a500 <_printf_float+0x380>
 800a498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a49c:	429a      	cmp	r2, r3
 800a49e:	db3b      	blt.n	800a518 <_printf_float+0x398>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	07da      	lsls	r2, r3, #31
 800a4a4:	d438      	bmi.n	800a518 <_printf_float+0x398>
 800a4a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4aa:	eba2 0903 	sub.w	r9, r2, r3
 800a4ae:	9b05      	ldr	r3, [sp, #20]
 800a4b0:	1ad2      	subs	r2, r2, r3
 800a4b2:	4591      	cmp	r9, r2
 800a4b4:	bfa8      	it	ge
 800a4b6:	4691      	movge	r9, r2
 800a4b8:	f1b9 0f00 	cmp.w	r9, #0
 800a4bc:	dc35      	bgt.n	800a52a <_printf_float+0x3aa>
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4c6:	f104 0a1a 	add.w	sl, r4, #26
 800a4ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ce:	1a9b      	subs	r3, r3, r2
 800a4d0:	eba3 0309 	sub.w	r3, r3, r9
 800a4d4:	4543      	cmp	r3, r8
 800a4d6:	f77f af79 	ble.w	800a3cc <_printf_float+0x24c>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4652      	mov	r2, sl
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b8      	blx	r7
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	f43f aeaa 	beq.w	800a23e <_printf_float+0xbe>
 800a4ea:	f108 0801 	add.w	r8, r8, #1
 800a4ee:	e7ec      	b.n	800a4ca <_printf_float+0x34a>
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d1c0      	bne.n	800a480 <_printf_float+0x300>
 800a4fe:	e69e      	b.n	800a23e <_printf_float+0xbe>
 800a500:	2301      	movs	r3, #1
 800a502:	4631      	mov	r1, r6
 800a504:	4628      	mov	r0, r5
 800a506:	9205      	str	r2, [sp, #20]
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	f43f ae97 	beq.w	800a23e <_printf_float+0xbe>
 800a510:	9a05      	ldr	r2, [sp, #20]
 800a512:	f10b 0b01 	add.w	fp, fp, #1
 800a516:	e7b9      	b.n	800a48c <_printf_float+0x30c>
 800a518:	ee18 3a10 	vmov	r3, s16
 800a51c:	4652      	mov	r2, sl
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	47b8      	blx	r7
 800a524:	3001      	adds	r0, #1
 800a526:	d1be      	bne.n	800a4a6 <_printf_float+0x326>
 800a528:	e689      	b.n	800a23e <_printf_float+0xbe>
 800a52a:	9a05      	ldr	r2, [sp, #20]
 800a52c:	464b      	mov	r3, r9
 800a52e:	4442      	add	r2, r8
 800a530:	4631      	mov	r1, r6
 800a532:	4628      	mov	r0, r5
 800a534:	47b8      	blx	r7
 800a536:	3001      	adds	r0, #1
 800a538:	d1c1      	bne.n	800a4be <_printf_float+0x33e>
 800a53a:	e680      	b.n	800a23e <_printf_float+0xbe>
 800a53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a53e:	2a01      	cmp	r2, #1
 800a540:	dc01      	bgt.n	800a546 <_printf_float+0x3c6>
 800a542:	07db      	lsls	r3, r3, #31
 800a544:	d53a      	bpl.n	800a5bc <_printf_float+0x43c>
 800a546:	2301      	movs	r3, #1
 800a548:	4642      	mov	r2, r8
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	f43f ae74 	beq.w	800a23e <_printf_float+0xbe>
 800a556:	ee18 3a10 	vmov	r3, s16
 800a55a:	4652      	mov	r2, sl
 800a55c:	4631      	mov	r1, r6
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f ae6b 	beq.w	800a23e <_printf_float+0xbe>
 800a568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a574:	f7f6 fac0 	bl	8000af8 <__aeabi_dcmpeq>
 800a578:	b9d8      	cbnz	r0, 800a5b2 <_printf_float+0x432>
 800a57a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a57e:	f108 0201 	add.w	r2, r8, #1
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	d10e      	bne.n	800a5aa <_printf_float+0x42a>
 800a58c:	e657      	b.n	800a23e <_printf_float+0xbe>
 800a58e:	2301      	movs	r3, #1
 800a590:	4652      	mov	r2, sl
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	47b8      	blx	r7
 800a598:	3001      	adds	r0, #1
 800a59a:	f43f ae50 	beq.w	800a23e <_printf_float+0xbe>
 800a59e:	f108 0801 	add.w	r8, r8, #1
 800a5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	4543      	cmp	r3, r8
 800a5a8:	dcf1      	bgt.n	800a58e <_printf_float+0x40e>
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5b0:	e6da      	b.n	800a368 <_printf_float+0x1e8>
 800a5b2:	f04f 0800 	mov.w	r8, #0
 800a5b6:	f104 0a1a 	add.w	sl, r4, #26
 800a5ba:	e7f2      	b.n	800a5a2 <_printf_float+0x422>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	4642      	mov	r2, r8
 800a5c0:	e7df      	b.n	800a582 <_printf_float+0x402>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	464a      	mov	r2, r9
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f43f ae36 	beq.w	800a23e <_printf_float+0xbe>
 800a5d2:	f108 0801 	add.w	r8, r8, #1
 800a5d6:	68e3      	ldr	r3, [r4, #12]
 800a5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5da:	1a5b      	subs	r3, r3, r1
 800a5dc:	4543      	cmp	r3, r8
 800a5de:	dcf0      	bgt.n	800a5c2 <_printf_float+0x442>
 800a5e0:	e6f8      	b.n	800a3d4 <_printf_float+0x254>
 800a5e2:	f04f 0800 	mov.w	r8, #0
 800a5e6:	f104 0919 	add.w	r9, r4, #25
 800a5ea:	e7f4      	b.n	800a5d6 <_printf_float+0x456>

0800a5ec <_printf_common>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	4699      	mov	r9, r3
 800a5f4:	688a      	ldr	r2, [r1, #8]
 800a5f6:	690b      	ldr	r3, [r1, #16]
 800a5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	bfb8      	it	lt
 800a600:	4613      	movlt	r3, r2
 800a602:	6033      	str	r3, [r6, #0]
 800a604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a608:	4607      	mov	r7, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	b10a      	cbz	r2, 800a612 <_printf_common+0x26>
 800a60e:	3301      	adds	r3, #1
 800a610:	6033      	str	r3, [r6, #0]
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	0699      	lsls	r1, r3, #26
 800a616:	bf42      	ittt	mi
 800a618:	6833      	ldrmi	r3, [r6, #0]
 800a61a:	3302      	addmi	r3, #2
 800a61c:	6033      	strmi	r3, [r6, #0]
 800a61e:	6825      	ldr	r5, [r4, #0]
 800a620:	f015 0506 	ands.w	r5, r5, #6
 800a624:	d106      	bne.n	800a634 <_printf_common+0x48>
 800a626:	f104 0a19 	add.w	sl, r4, #25
 800a62a:	68e3      	ldr	r3, [r4, #12]
 800a62c:	6832      	ldr	r2, [r6, #0]
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	42ab      	cmp	r3, r5
 800a632:	dc26      	bgt.n	800a682 <_printf_common+0x96>
 800a634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a638:	1e13      	subs	r3, r2, #0
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	bf18      	it	ne
 800a63e:	2301      	movne	r3, #1
 800a640:	0692      	lsls	r2, r2, #26
 800a642:	d42b      	bmi.n	800a69c <_printf_common+0xb0>
 800a644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a648:	4649      	mov	r1, r9
 800a64a:	4638      	mov	r0, r7
 800a64c:	47c0      	blx	r8
 800a64e:	3001      	adds	r0, #1
 800a650:	d01e      	beq.n	800a690 <_printf_common+0xa4>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	f003 0306 	and.w	r3, r3, #6
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	bf02      	ittt	eq
 800a65e:	68e5      	ldreq	r5, [r4, #12]
 800a660:	6833      	ldreq	r3, [r6, #0]
 800a662:	1aed      	subeq	r5, r5, r3
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	bf0c      	ite	eq
 800a668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a66c:	2500      	movne	r5, #0
 800a66e:	4293      	cmp	r3, r2
 800a670:	bfc4      	itt	gt
 800a672:	1a9b      	subgt	r3, r3, r2
 800a674:	18ed      	addgt	r5, r5, r3
 800a676:	2600      	movs	r6, #0
 800a678:	341a      	adds	r4, #26
 800a67a:	42b5      	cmp	r5, r6
 800a67c:	d11a      	bne.n	800a6b4 <_printf_common+0xc8>
 800a67e:	2000      	movs	r0, #0
 800a680:	e008      	b.n	800a694 <_printf_common+0xa8>
 800a682:	2301      	movs	r3, #1
 800a684:	4652      	mov	r2, sl
 800a686:	4649      	mov	r1, r9
 800a688:	4638      	mov	r0, r7
 800a68a:	47c0      	blx	r8
 800a68c:	3001      	adds	r0, #1
 800a68e:	d103      	bne.n	800a698 <_printf_common+0xac>
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a698:	3501      	adds	r5, #1
 800a69a:	e7c6      	b.n	800a62a <_printf_common+0x3e>
 800a69c:	18e1      	adds	r1, r4, r3
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	2030      	movs	r0, #48	; 0x30
 800a6a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6a6:	4422      	add	r2, r4
 800a6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6b0:	3302      	adds	r3, #2
 800a6b2:	e7c7      	b.n	800a644 <_printf_common+0x58>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	47c0      	blx	r8
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d0e6      	beq.n	800a690 <_printf_common+0xa4>
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	e7d9      	b.n	800a67a <_printf_common+0x8e>
	...

0800a6c8 <_printf_i>:
 800a6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	7e0f      	ldrb	r7, [r1, #24]
 800a6ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6d0:	2f78      	cmp	r7, #120	; 0x78
 800a6d2:	4691      	mov	r9, r2
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	469a      	mov	sl, r3
 800a6da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6de:	d807      	bhi.n	800a6f0 <_printf_i+0x28>
 800a6e0:	2f62      	cmp	r7, #98	; 0x62
 800a6e2:	d80a      	bhi.n	800a6fa <_printf_i+0x32>
 800a6e4:	2f00      	cmp	r7, #0
 800a6e6:	f000 80d4 	beq.w	800a892 <_printf_i+0x1ca>
 800a6ea:	2f58      	cmp	r7, #88	; 0x58
 800a6ec:	f000 80c0 	beq.w	800a870 <_printf_i+0x1a8>
 800a6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6f8:	e03a      	b.n	800a770 <_printf_i+0xa8>
 800a6fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6fe:	2b15      	cmp	r3, #21
 800a700:	d8f6      	bhi.n	800a6f0 <_printf_i+0x28>
 800a702:	a101      	add	r1, pc, #4	; (adr r1, 800a708 <_printf_i+0x40>)
 800a704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a708:	0800a761 	.word	0x0800a761
 800a70c:	0800a775 	.word	0x0800a775
 800a710:	0800a6f1 	.word	0x0800a6f1
 800a714:	0800a6f1 	.word	0x0800a6f1
 800a718:	0800a6f1 	.word	0x0800a6f1
 800a71c:	0800a6f1 	.word	0x0800a6f1
 800a720:	0800a775 	.word	0x0800a775
 800a724:	0800a6f1 	.word	0x0800a6f1
 800a728:	0800a6f1 	.word	0x0800a6f1
 800a72c:	0800a6f1 	.word	0x0800a6f1
 800a730:	0800a6f1 	.word	0x0800a6f1
 800a734:	0800a879 	.word	0x0800a879
 800a738:	0800a7a1 	.word	0x0800a7a1
 800a73c:	0800a833 	.word	0x0800a833
 800a740:	0800a6f1 	.word	0x0800a6f1
 800a744:	0800a6f1 	.word	0x0800a6f1
 800a748:	0800a89b 	.word	0x0800a89b
 800a74c:	0800a6f1 	.word	0x0800a6f1
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a6f1 	.word	0x0800a6f1
 800a758:	0800a6f1 	.word	0x0800a6f1
 800a75c:	0800a83b 	.word	0x0800a83b
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	1d1a      	adds	r2, r3, #4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	602a      	str	r2, [r5, #0]
 800a768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a76c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a770:	2301      	movs	r3, #1
 800a772:	e09f      	b.n	800a8b4 <_printf_i+0x1ec>
 800a774:	6820      	ldr	r0, [r4, #0]
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	0607      	lsls	r7, r0, #24
 800a77a:	f103 0104 	add.w	r1, r3, #4
 800a77e:	6029      	str	r1, [r5, #0]
 800a780:	d501      	bpl.n	800a786 <_printf_i+0xbe>
 800a782:	681e      	ldr	r6, [r3, #0]
 800a784:	e003      	b.n	800a78e <_printf_i+0xc6>
 800a786:	0646      	lsls	r6, r0, #25
 800a788:	d5fb      	bpl.n	800a782 <_printf_i+0xba>
 800a78a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a78e:	2e00      	cmp	r6, #0
 800a790:	da03      	bge.n	800a79a <_printf_i+0xd2>
 800a792:	232d      	movs	r3, #45	; 0x2d
 800a794:	4276      	negs	r6, r6
 800a796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a79a:	485a      	ldr	r0, [pc, #360]	; (800a904 <_printf_i+0x23c>)
 800a79c:	230a      	movs	r3, #10
 800a79e:	e012      	b.n	800a7c6 <_printf_i+0xfe>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	6820      	ldr	r0, [r4, #0]
 800a7a4:	1d19      	adds	r1, r3, #4
 800a7a6:	6029      	str	r1, [r5, #0]
 800a7a8:	0605      	lsls	r5, r0, #24
 800a7aa:	d501      	bpl.n	800a7b0 <_printf_i+0xe8>
 800a7ac:	681e      	ldr	r6, [r3, #0]
 800a7ae:	e002      	b.n	800a7b6 <_printf_i+0xee>
 800a7b0:	0641      	lsls	r1, r0, #25
 800a7b2:	d5fb      	bpl.n	800a7ac <_printf_i+0xe4>
 800a7b4:	881e      	ldrh	r6, [r3, #0]
 800a7b6:	4853      	ldr	r0, [pc, #332]	; (800a904 <_printf_i+0x23c>)
 800a7b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a7ba:	bf0c      	ite	eq
 800a7bc:	2308      	moveq	r3, #8
 800a7be:	230a      	movne	r3, #10
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7c6:	6865      	ldr	r5, [r4, #4]
 800a7c8:	60a5      	str	r5, [r4, #8]
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	bfa2      	ittt	ge
 800a7ce:	6821      	ldrge	r1, [r4, #0]
 800a7d0:	f021 0104 	bicge.w	r1, r1, #4
 800a7d4:	6021      	strge	r1, [r4, #0]
 800a7d6:	b90e      	cbnz	r6, 800a7dc <_printf_i+0x114>
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	d04b      	beq.n	800a874 <_printf_i+0x1ac>
 800a7dc:	4615      	mov	r5, r2
 800a7de:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7e2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7e6:	5dc7      	ldrb	r7, [r0, r7]
 800a7e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7ec:	4637      	mov	r7, r6
 800a7ee:	42bb      	cmp	r3, r7
 800a7f0:	460e      	mov	r6, r1
 800a7f2:	d9f4      	bls.n	800a7de <_printf_i+0x116>
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d10b      	bne.n	800a810 <_printf_i+0x148>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	07de      	lsls	r6, r3, #31
 800a7fc:	d508      	bpl.n	800a810 <_printf_i+0x148>
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	6861      	ldr	r1, [r4, #4]
 800a802:	4299      	cmp	r1, r3
 800a804:	bfde      	ittt	le
 800a806:	2330      	movle	r3, #48	; 0x30
 800a808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a80c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a810:	1b52      	subs	r2, r2, r5
 800a812:	6122      	str	r2, [r4, #16]
 800a814:	f8cd a000 	str.w	sl, [sp]
 800a818:	464b      	mov	r3, r9
 800a81a:	aa03      	add	r2, sp, #12
 800a81c:	4621      	mov	r1, r4
 800a81e:	4640      	mov	r0, r8
 800a820:	f7ff fee4 	bl	800a5ec <_printf_common>
 800a824:	3001      	adds	r0, #1
 800a826:	d14a      	bne.n	800a8be <_printf_i+0x1f6>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	b004      	add	sp, #16
 800a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	f043 0320 	orr.w	r3, r3, #32
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	4833      	ldr	r0, [pc, #204]	; (800a908 <_printf_i+0x240>)
 800a83c:	2778      	movs	r7, #120	; 0x78
 800a83e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	061f      	lsls	r7, r3, #24
 800a848:	f851 6b04 	ldr.w	r6, [r1], #4
 800a84c:	d402      	bmi.n	800a854 <_printf_i+0x18c>
 800a84e:	065f      	lsls	r7, r3, #25
 800a850:	bf48      	it	mi
 800a852:	b2b6      	uxthmi	r6, r6
 800a854:	07df      	lsls	r7, r3, #31
 800a856:	bf48      	it	mi
 800a858:	f043 0320 	orrmi.w	r3, r3, #32
 800a85c:	6029      	str	r1, [r5, #0]
 800a85e:	bf48      	it	mi
 800a860:	6023      	strmi	r3, [r4, #0]
 800a862:	b91e      	cbnz	r6, 800a86c <_printf_i+0x1a4>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	f023 0320 	bic.w	r3, r3, #32
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	2310      	movs	r3, #16
 800a86e:	e7a7      	b.n	800a7c0 <_printf_i+0xf8>
 800a870:	4824      	ldr	r0, [pc, #144]	; (800a904 <_printf_i+0x23c>)
 800a872:	e7e4      	b.n	800a83e <_printf_i+0x176>
 800a874:	4615      	mov	r5, r2
 800a876:	e7bd      	b.n	800a7f4 <_printf_i+0x12c>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	6826      	ldr	r6, [r4, #0]
 800a87c:	6961      	ldr	r1, [r4, #20]
 800a87e:	1d18      	adds	r0, r3, #4
 800a880:	6028      	str	r0, [r5, #0]
 800a882:	0635      	lsls	r5, r6, #24
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	d501      	bpl.n	800a88c <_printf_i+0x1c4>
 800a888:	6019      	str	r1, [r3, #0]
 800a88a:	e002      	b.n	800a892 <_printf_i+0x1ca>
 800a88c:	0670      	lsls	r0, r6, #25
 800a88e:	d5fb      	bpl.n	800a888 <_printf_i+0x1c0>
 800a890:	8019      	strh	r1, [r3, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	4615      	mov	r5, r2
 800a898:	e7bc      	b.n	800a814 <_printf_i+0x14c>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	1d1a      	adds	r2, r3, #4
 800a89e:	602a      	str	r2, [r5, #0]
 800a8a0:	681d      	ldr	r5, [r3, #0]
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f7f5 fcaa 	bl	8000200 <memchr>
 800a8ac:	b108      	cbz	r0, 800a8b2 <_printf_i+0x1ea>
 800a8ae:	1b40      	subs	r0, r0, r5
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	6863      	ldr	r3, [r4, #4]
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8bc:	e7aa      	b.n	800a814 <_printf_i+0x14c>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d0ad      	beq.n	800a828 <_printf_i+0x160>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	079b      	lsls	r3, r3, #30
 800a8d0:	d413      	bmi.n	800a8fa <_printf_i+0x232>
 800a8d2:	68e0      	ldr	r0, [r4, #12]
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	4298      	cmp	r0, r3
 800a8d8:	bfb8      	it	lt
 800a8da:	4618      	movlt	r0, r3
 800a8dc:	e7a6      	b.n	800a82c <_printf_i+0x164>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d09d      	beq.n	800a828 <_printf_i+0x160>
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	9903      	ldr	r1, [sp, #12]
 800a8f2:	1a5b      	subs	r3, r3, r1
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	dcf2      	bgt.n	800a8de <_printf_i+0x216>
 800a8f8:	e7eb      	b.n	800a8d2 <_printf_i+0x20a>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	f104 0619 	add.w	r6, r4, #25
 800a900:	e7f5      	b.n	800a8ee <_printf_i+0x226>
 800a902:	bf00      	nop
 800a904:	0800cf0e 	.word	0x0800cf0e
 800a908:	0800cf1f 	.word	0x0800cf1f

0800a90c <std>:
 800a90c:	2300      	movs	r3, #0
 800a90e:	b510      	push	{r4, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	e9c0 3300 	strd	r3, r3, [r0]
 800a916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a91a:	6083      	str	r3, [r0, #8]
 800a91c:	8181      	strh	r1, [r0, #12]
 800a91e:	6643      	str	r3, [r0, #100]	; 0x64
 800a920:	81c2      	strh	r2, [r0, #14]
 800a922:	6183      	str	r3, [r0, #24]
 800a924:	4619      	mov	r1, r3
 800a926:	2208      	movs	r2, #8
 800a928:	305c      	adds	r0, #92	; 0x5c
 800a92a:	f000 f914 	bl	800ab56 <memset>
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <std+0x58>)
 800a930:	6263      	str	r3, [r4, #36]	; 0x24
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <std+0x5c>)
 800a934:	62a3      	str	r3, [r4, #40]	; 0x28
 800a936:	4b0d      	ldr	r3, [pc, #52]	; (800a96c <std+0x60>)
 800a938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <std+0x64>)
 800a93c:	6323      	str	r3, [r4, #48]	; 0x30
 800a93e:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <std+0x68>)
 800a940:	6224      	str	r4, [r4, #32]
 800a942:	429c      	cmp	r4, r3
 800a944:	d006      	beq.n	800a954 <std+0x48>
 800a946:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a94a:	4294      	cmp	r4, r2
 800a94c:	d002      	beq.n	800a954 <std+0x48>
 800a94e:	33d0      	adds	r3, #208	; 0xd0
 800a950:	429c      	cmp	r4, r3
 800a952:	d105      	bne.n	800a960 <std+0x54>
 800a954:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a95c:	f000 b988 	b.w	800ac70 <__retarget_lock_init_recursive>
 800a960:	bd10      	pop	{r4, pc}
 800a962:	bf00      	nop
 800a964:	0800aad1 	.word	0x0800aad1
 800a968:	0800aaf3 	.word	0x0800aaf3
 800a96c:	0800ab2b 	.word	0x0800ab2b
 800a970:	0800ab4f 	.word	0x0800ab4f
 800a974:	20002498 	.word	0x20002498

0800a978 <stdio_exit_handler>:
 800a978:	4a02      	ldr	r2, [pc, #8]	; (800a984 <stdio_exit_handler+0xc>)
 800a97a:	4903      	ldr	r1, [pc, #12]	; (800a988 <stdio_exit_handler+0x10>)
 800a97c:	4803      	ldr	r0, [pc, #12]	; (800a98c <stdio_exit_handler+0x14>)
 800a97e:	f000 b869 	b.w	800aa54 <_fwalk_sglue>
 800a982:	bf00      	nop
 800a984:	200000c0 	.word	0x200000c0
 800a988:	0800c4e9 	.word	0x0800c4e9
 800a98c:	200000cc 	.word	0x200000cc

0800a990 <cleanup_stdio>:
 800a990:	6841      	ldr	r1, [r0, #4]
 800a992:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <cleanup_stdio+0x34>)
 800a994:	4299      	cmp	r1, r3
 800a996:	b510      	push	{r4, lr}
 800a998:	4604      	mov	r4, r0
 800a99a:	d001      	beq.n	800a9a0 <cleanup_stdio+0x10>
 800a99c:	f001 fda4 	bl	800c4e8 <_fflush_r>
 800a9a0:	68a1      	ldr	r1, [r4, #8]
 800a9a2:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <cleanup_stdio+0x38>)
 800a9a4:	4299      	cmp	r1, r3
 800a9a6:	d002      	beq.n	800a9ae <cleanup_stdio+0x1e>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f001 fd9d 	bl	800c4e8 <_fflush_r>
 800a9ae:	68e1      	ldr	r1, [r4, #12]
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <cleanup_stdio+0x3c>)
 800a9b2:	4299      	cmp	r1, r3
 800a9b4:	d004      	beq.n	800a9c0 <cleanup_stdio+0x30>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9bc:	f001 bd94 	b.w	800c4e8 <_fflush_r>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20002498 	.word	0x20002498
 800a9c8:	20002500 	.word	0x20002500
 800a9cc:	20002568 	.word	0x20002568

0800a9d0 <global_stdio_init.part.0>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <global_stdio_init.part.0+0x30>)
 800a9d4:	4c0b      	ldr	r4, [pc, #44]	; (800aa04 <global_stdio_init.part.0+0x34>)
 800a9d6:	4a0c      	ldr	r2, [pc, #48]	; (800aa08 <global_stdio_init.part.0+0x38>)
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	4620      	mov	r0, r4
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2104      	movs	r1, #4
 800a9e0:	f7ff ff94 	bl	800a90c <std>
 800a9e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	2109      	movs	r1, #9
 800a9ec:	f7ff ff8e 	bl	800a90c <std>
 800a9f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9fa:	2112      	movs	r1, #18
 800a9fc:	f7ff bf86 	b.w	800a90c <std>
 800aa00:	200025d0 	.word	0x200025d0
 800aa04:	20002498 	.word	0x20002498
 800aa08:	0800a979 	.word	0x0800a979

0800aa0c <__sfp_lock_acquire>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__sfp_lock_acquire+0x8>)
 800aa0e:	f000 b930 	b.w	800ac72 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	200025d9 	.word	0x200025d9

0800aa18 <__sfp_lock_release>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__sfp_lock_release+0x8>)
 800aa1a:	f000 b92b 	b.w	800ac74 <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200025d9 	.word	0x200025d9

0800aa24 <__sinit>:
 800aa24:	b510      	push	{r4, lr}
 800aa26:	4604      	mov	r4, r0
 800aa28:	f7ff fff0 	bl	800aa0c <__sfp_lock_acquire>
 800aa2c:	6a23      	ldr	r3, [r4, #32]
 800aa2e:	b11b      	cbz	r3, 800aa38 <__sinit+0x14>
 800aa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa34:	f7ff bff0 	b.w	800aa18 <__sfp_lock_release>
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <__sinit+0x28>)
 800aa3a:	6223      	str	r3, [r4, #32]
 800aa3c:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <__sinit+0x2c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1f5      	bne.n	800aa30 <__sinit+0xc>
 800aa44:	f7ff ffc4 	bl	800a9d0 <global_stdio_init.part.0>
 800aa48:	e7f2      	b.n	800aa30 <__sinit+0xc>
 800aa4a:	bf00      	nop
 800aa4c:	0800a991 	.word	0x0800a991
 800aa50:	200025d0 	.word	0x200025d0

0800aa54 <_fwalk_sglue>:
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	4607      	mov	r7, r0
 800aa5a:	4688      	mov	r8, r1
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	2600      	movs	r6, #0
 800aa60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa64:	f1b9 0901 	subs.w	r9, r9, #1
 800aa68:	d505      	bpl.n	800aa76 <_fwalk_sglue+0x22>
 800aa6a:	6824      	ldr	r4, [r4, #0]
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d1f7      	bne.n	800aa60 <_fwalk_sglue+0xc>
 800aa70:	4630      	mov	r0, r6
 800aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d907      	bls.n	800aa8c <_fwalk_sglue+0x38>
 800aa7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa80:	3301      	adds	r3, #1
 800aa82:	d003      	beq.n	800aa8c <_fwalk_sglue+0x38>
 800aa84:	4629      	mov	r1, r5
 800aa86:	4638      	mov	r0, r7
 800aa88:	47c0      	blx	r8
 800aa8a:	4306      	orrs	r6, r0
 800aa8c:	3568      	adds	r5, #104	; 0x68
 800aa8e:	e7e9      	b.n	800aa64 <_fwalk_sglue+0x10>

0800aa90 <siprintf>:
 800aa90:	b40e      	push	{r1, r2, r3}
 800aa92:	b500      	push	{lr}
 800aa94:	b09c      	sub	sp, #112	; 0x70
 800aa96:	ab1d      	add	r3, sp, #116	; 0x74
 800aa98:	9002      	str	r0, [sp, #8]
 800aa9a:	9006      	str	r0, [sp, #24]
 800aa9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaa0:	4809      	ldr	r0, [pc, #36]	; (800aac8 <siprintf+0x38>)
 800aaa2:	9107      	str	r1, [sp, #28]
 800aaa4:	9104      	str	r1, [sp, #16]
 800aaa6:	4909      	ldr	r1, [pc, #36]	; (800aacc <siprintf+0x3c>)
 800aaa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaac:	9105      	str	r1, [sp, #20]
 800aaae:	6800      	ldr	r0, [r0, #0]
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	a902      	add	r1, sp, #8
 800aab4:	f001 fb94 	bl	800c1e0 <_svfiprintf_r>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	b01c      	add	sp, #112	; 0x70
 800aac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac4:	b003      	add	sp, #12
 800aac6:	4770      	bx	lr
 800aac8:	20000118 	.word	0x20000118
 800aacc:	ffff0208 	.word	0xffff0208

0800aad0 <__sread>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	f000 f86c 	bl	800abb4 <_read_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	bfab      	itete	ge
 800aae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aae2:	89a3      	ldrhlt	r3, [r4, #12]
 800aae4:	181b      	addge	r3, r3, r0
 800aae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaea:	bfac      	ite	ge
 800aaec:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaee:	81a3      	strhlt	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__swrite>:
 800aaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	05db      	lsls	r3, r3, #23
 800aafc:	4605      	mov	r5, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4616      	mov	r6, r2
 800ab02:	d505      	bpl.n	800ab10 <__swrite+0x1e>
 800ab04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab08:	2302      	movs	r3, #2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f000 f840 	bl	800ab90 <_lseek_r>
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab1a:	81a3      	strh	r3, [r4, #12]
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	4628      	mov	r0, r5
 800ab22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab26:	f000 b867 	b.w	800abf8 <_write_r>

0800ab2a <__sseek>:
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab32:	f000 f82d 	bl	800ab90 <_lseek_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	bf15      	itete	ne
 800ab3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab46:	81a3      	strheq	r3, [r4, #12]
 800ab48:	bf18      	it	ne
 800ab4a:	81a3      	strhne	r3, [r4, #12]
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__sclose>:
 800ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab52:	f000 b80d 	b.w	800ab70 <_close_r>

0800ab56 <memset>:
 800ab56:	4402      	add	r2, r0
 800ab58:	4603      	mov	r3, r0
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d100      	bne.n	800ab60 <memset+0xa>
 800ab5e:	4770      	bx	lr
 800ab60:	f803 1b01 	strb.w	r1, [r3], #1
 800ab64:	e7f9      	b.n	800ab5a <memset+0x4>
	...

0800ab68 <_localeconv_r>:
 800ab68:	4800      	ldr	r0, [pc, #0]	; (800ab6c <_localeconv_r+0x4>)
 800ab6a:	4770      	bx	lr
 800ab6c:	2000020c 	.word	0x2000020c

0800ab70 <_close_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d06      	ldr	r5, [pc, #24]	; (800ab8c <_close_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	f7f8 f919 	bl	8002db2 <_close>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_close_r+0x1a>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_close_r+0x1a>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	200025d4 	.word	0x200025d4

0800ab90 <_lseek_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	; (800abb0 <_lseek_r+0x20>)
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	602a      	str	r2, [r5, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f7f8 f92e 	bl	8002e00 <_lseek>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_lseek_r+0x1e>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_lseek_r+0x1e>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	200025d4 	.word	0x200025d4

0800abb4 <_read_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_read_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f8 f8bc 	bl	8002d40 <_read>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_read_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_read_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	200025d4 	.word	0x200025d4

0800abd8 <_sbrk_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_sbrk_r+0x1c>)
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f8 f91a 	bl	8002e1c <_sbrk>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_sbrk_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_sbrk_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	200025d4 	.word	0x200025d4

0800abf8 <_write_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	; (800ac18 <_write_r+0x20>)
 800abfc:	4604      	mov	r4, r0
 800abfe:	4608      	mov	r0, r1
 800ac00:	4611      	mov	r1, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	602a      	str	r2, [r5, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f7f8 f8b7 	bl	8002d7a <_write>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_write_r+0x1e>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_write_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	200025d4 	.word	0x200025d4

0800ac1c <__errno>:
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <__errno+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000118 	.word	0x20000118

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4d0d      	ldr	r5, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1b64      	subs	r4, r4, r5
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2600      	movs	r6, #0
 800ac34:	42a6      	cmp	r6, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4d0b      	ldr	r5, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f001 ffc4 	bl	800cbc8 <_init>
 800ac40:	1b64      	subs	r4, r4, r5
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2600      	movs	r6, #0
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac50:	4798      	blx	r3
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5a:	4798      	blx	r3
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	0800d274 	.word	0x0800d274
 800ac64:	0800d274 	.word	0x0800d274
 800ac68:	0800d274 	.word	0x0800d274
 800ac6c:	0800d278 	.word	0x0800d278

0800ac70 <__retarget_lock_init_recursive>:
 800ac70:	4770      	bx	lr

0800ac72 <__retarget_lock_acquire_recursive>:
 800ac72:	4770      	bx	lr

0800ac74 <__retarget_lock_release_recursive>:
 800ac74:	4770      	bx	lr

0800ac76 <memcpy>:
 800ac76:	440a      	add	r2, r1
 800ac78:	4291      	cmp	r1, r2
 800ac7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac7e:	d100      	bne.n	800ac82 <memcpy+0xc>
 800ac80:	4770      	bx	lr
 800ac82:	b510      	push	{r4, lr}
 800ac84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac8c:	4291      	cmp	r1, r2
 800ac8e:	d1f9      	bne.n	800ac84 <memcpy+0xe>
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <quorem>:
 800ac92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac96:	6903      	ldr	r3, [r0, #16]
 800ac98:	690c      	ldr	r4, [r1, #16]
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	db7e      	blt.n	800ad9e <quorem+0x10c>
 800aca0:	3c01      	subs	r4, #1
 800aca2:	f101 0814 	add.w	r8, r1, #20
 800aca6:	f100 0514 	add.w	r5, r0, #20
 800acaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acb8:	3301      	adds	r3, #1
 800acba:	429a      	cmp	r2, r3
 800acbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800acc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800acc8:	d331      	bcc.n	800ad2e <quorem+0x9c>
 800acca:	f04f 0e00 	mov.w	lr, #0
 800acce:	4640      	mov	r0, r8
 800acd0:	46ac      	mov	ip, r5
 800acd2:	46f2      	mov	sl, lr
 800acd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800acd8:	b293      	uxth	r3, r2
 800acda:	fb06 e303 	mla	r3, r6, r3, lr
 800acde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ace2:	0c1a      	lsrs	r2, r3, #16
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	ebaa 0303 	sub.w	r3, sl, r3
 800acea:	f8dc a000 	ldr.w	sl, [ip]
 800acee:	fa13 f38a 	uxtah	r3, r3, sl
 800acf2:	fb06 220e 	mla	r2, r6, lr, r2
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acfe:	b292      	uxth	r2, r2
 800ad00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad08:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad0c:	4581      	cmp	r9, r0
 800ad0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad12:	f84c 3b04 	str.w	r3, [ip], #4
 800ad16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad1a:	d2db      	bcs.n	800acd4 <quorem+0x42>
 800ad1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad20:	b92b      	cbnz	r3, 800ad2e <quorem+0x9c>
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	3b04      	subs	r3, #4
 800ad26:	429d      	cmp	r5, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	d32c      	bcc.n	800ad86 <quorem+0xf4>
 800ad2c:	613c      	str	r4, [r7, #16]
 800ad2e:	4638      	mov	r0, r7
 800ad30:	f001 f8fc 	bl	800bf2c <__mcmp>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	db22      	blt.n	800ad7e <quorem+0xec>
 800ad38:	3601      	adds	r6, #1
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad42:	f8d1 c000 	ldr.w	ip, [r1]
 800ad46:	b293      	uxth	r3, r2
 800ad48:	1ac3      	subs	r3, r0, r3
 800ad4a:	0c12      	lsrs	r2, r2, #16
 800ad4c:	fa13 f38c 	uxtah	r3, r3, ip
 800ad50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ad54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad5e:	45c1      	cmp	r9, r8
 800ad60:	f841 3b04 	str.w	r3, [r1], #4
 800ad64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad68:	d2e9      	bcs.n	800ad3e <quorem+0xac>
 800ad6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad72:	b922      	cbnz	r2, 800ad7e <quorem+0xec>
 800ad74:	3b04      	subs	r3, #4
 800ad76:	429d      	cmp	r5, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	d30a      	bcc.n	800ad92 <quorem+0x100>
 800ad7c:	613c      	str	r4, [r7, #16]
 800ad7e:	4630      	mov	r0, r6
 800ad80:	b003      	add	sp, #12
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	3b04      	subs	r3, #4
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	d1ce      	bne.n	800ad2c <quorem+0x9a>
 800ad8e:	3c01      	subs	r4, #1
 800ad90:	e7c9      	b.n	800ad26 <quorem+0x94>
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	3b04      	subs	r3, #4
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d1f0      	bne.n	800ad7c <quorem+0xea>
 800ad9a:	3c01      	subs	r4, #1
 800ad9c:	e7eb      	b.n	800ad76 <quorem+0xe4>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	e7ee      	b.n	800ad80 <quorem+0xee>
 800ada2:	0000      	movs	r0, r0
 800ada4:	0000      	movs	r0, r0
	...

0800ada8 <_dtoa_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	ed2d 8b04 	vpush	{d8-d9}
 800adb0:	69c5      	ldr	r5, [r0, #28]
 800adb2:	b093      	sub	sp, #76	; 0x4c
 800adb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800adb8:	ec57 6b10 	vmov	r6, r7, d0
 800adbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800adc0:	9107      	str	r1, [sp, #28]
 800adc2:	4604      	mov	r4, r0
 800adc4:	920a      	str	r2, [sp, #40]	; 0x28
 800adc6:	930d      	str	r3, [sp, #52]	; 0x34
 800adc8:	b975      	cbnz	r5, 800ade8 <_dtoa_r+0x40>
 800adca:	2010      	movs	r0, #16
 800adcc:	f000 fe2a 	bl	800ba24 <malloc>
 800add0:	4602      	mov	r2, r0
 800add2:	61e0      	str	r0, [r4, #28]
 800add4:	b920      	cbnz	r0, 800ade0 <_dtoa_r+0x38>
 800add6:	4bae      	ldr	r3, [pc, #696]	; (800b090 <_dtoa_r+0x2e8>)
 800add8:	21ef      	movs	r1, #239	; 0xef
 800adda:	48ae      	ldr	r0, [pc, #696]	; (800b094 <_dtoa_r+0x2ec>)
 800addc:	f001 fbc6 	bl	800c56c <__assert_func>
 800ade0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ade4:	6005      	str	r5, [r0, #0]
 800ade6:	60c5      	str	r5, [r0, #12]
 800ade8:	69e3      	ldr	r3, [r4, #28]
 800adea:	6819      	ldr	r1, [r3, #0]
 800adec:	b151      	cbz	r1, 800ae04 <_dtoa_r+0x5c>
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	604a      	str	r2, [r1, #4]
 800adf2:	2301      	movs	r3, #1
 800adf4:	4093      	lsls	r3, r2
 800adf6:	608b      	str	r3, [r1, #8]
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 fe5b 	bl	800bab4 <_Bfree>
 800adfe:	69e3      	ldr	r3, [r4, #28]
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	1e3b      	subs	r3, r7, #0
 800ae06:	bfbb      	ittet	lt
 800ae08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae0c:	9303      	strlt	r3, [sp, #12]
 800ae0e:	2300      	movge	r3, #0
 800ae10:	2201      	movlt	r2, #1
 800ae12:	bfac      	ite	ge
 800ae14:	f8c8 3000 	strge.w	r3, [r8]
 800ae18:	f8c8 2000 	strlt.w	r2, [r8]
 800ae1c:	4b9e      	ldr	r3, [pc, #632]	; (800b098 <_dtoa_r+0x2f0>)
 800ae1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae22:	ea33 0308 	bics.w	r3, r3, r8
 800ae26:	d11b      	bne.n	800ae60 <_dtoa_r+0xb8>
 800ae28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ae34:	4333      	orrs	r3, r6
 800ae36:	f000 8593 	beq.w	800b960 <_dtoa_r+0xbb8>
 800ae3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae3c:	b963      	cbnz	r3, 800ae58 <_dtoa_r+0xb0>
 800ae3e:	4b97      	ldr	r3, [pc, #604]	; (800b09c <_dtoa_r+0x2f4>)
 800ae40:	e027      	b.n	800ae92 <_dtoa_r+0xea>
 800ae42:	4b97      	ldr	r3, [pc, #604]	; (800b0a0 <_dtoa_r+0x2f8>)
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	3308      	adds	r3, #8
 800ae48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	9800      	ldr	r0, [sp, #0]
 800ae4e:	b013      	add	sp, #76	; 0x4c
 800ae50:	ecbd 8b04 	vpop	{d8-d9}
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	4b90      	ldr	r3, [pc, #576]	; (800b09c <_dtoa_r+0x2f4>)
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	3303      	adds	r3, #3
 800ae5e:	e7f3      	b.n	800ae48 <_dtoa_r+0xa0>
 800ae60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	ec51 0b17 	vmov	r0, r1, d7
 800ae6a:	eeb0 8a47 	vmov.f32	s16, s14
 800ae6e:	eef0 8a67 	vmov.f32	s17, s15
 800ae72:	2300      	movs	r3, #0
 800ae74:	f7f5 fe40 	bl	8000af8 <__aeabi_dcmpeq>
 800ae78:	4681      	mov	r9, r0
 800ae7a:	b160      	cbz	r0, 800ae96 <_dtoa_r+0xee>
 800ae7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae7e:	2301      	movs	r3, #1
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 8568 	beq.w	800b95a <_dtoa_r+0xbb2>
 800ae8a:	4b86      	ldr	r3, [pc, #536]	; (800b0a4 <_dtoa_r+0x2fc>)
 800ae8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	e7da      	b.n	800ae4c <_dtoa_r+0xa4>
 800ae96:	aa10      	add	r2, sp, #64	; 0x40
 800ae98:	a911      	add	r1, sp, #68	; 0x44
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	eeb0 0a48 	vmov.f32	s0, s16
 800aea0:	eef0 0a68 	vmov.f32	s1, s17
 800aea4:	f001 f8e8 	bl	800c078 <__d2b>
 800aea8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aeac:	4682      	mov	sl, r0
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	d07f      	beq.n	800afb2 <_dtoa_r+0x20a>
 800aeb2:	ee18 3a90 	vmov	r3, s17
 800aeb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aebe:	ec51 0b18 	vmov	r0, r1, d8
 800aec2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aeca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aece:	4619      	mov	r1, r3
 800aed0:	2200      	movs	r2, #0
 800aed2:	4b75      	ldr	r3, [pc, #468]	; (800b0a8 <_dtoa_r+0x300>)
 800aed4:	f7f5 f9f0 	bl	80002b8 <__aeabi_dsub>
 800aed8:	a367      	add	r3, pc, #412	; (adr r3, 800b078 <_dtoa_r+0x2d0>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fba3 	bl	8000628 <__aeabi_dmul>
 800aee2:	a367      	add	r3, pc, #412	; (adr r3, 800b080 <_dtoa_r+0x2d8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 f9e8 	bl	80002bc <__adddf3>
 800aeec:	4606      	mov	r6, r0
 800aeee:	4628      	mov	r0, r5
 800aef0:	460f      	mov	r7, r1
 800aef2:	f7f5 fb2f 	bl	8000554 <__aeabi_i2d>
 800aef6:	a364      	add	r3, pc, #400	; (adr r3, 800b088 <_dtoa_r+0x2e0>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f7f5 fb94 	bl	8000628 <__aeabi_dmul>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4630      	mov	r0, r6
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 f9d8 	bl	80002bc <__adddf3>
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	f7f5 fe3a 	bl	8000b88 <__aeabi_d2iz>
 800af14:	2200      	movs	r2, #0
 800af16:	4683      	mov	fp, r0
 800af18:	2300      	movs	r3, #0
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 fdf5 	bl	8000b0c <__aeabi_dcmplt>
 800af22:	b148      	cbz	r0, 800af38 <_dtoa_r+0x190>
 800af24:	4658      	mov	r0, fp
 800af26:	f7f5 fb15 	bl	8000554 <__aeabi_i2d>
 800af2a:	4632      	mov	r2, r6
 800af2c:	463b      	mov	r3, r7
 800af2e:	f7f5 fde3 	bl	8000af8 <__aeabi_dcmpeq>
 800af32:	b908      	cbnz	r0, 800af38 <_dtoa_r+0x190>
 800af34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af38:	f1bb 0f16 	cmp.w	fp, #22
 800af3c:	d857      	bhi.n	800afee <_dtoa_r+0x246>
 800af3e:	4b5b      	ldr	r3, [pc, #364]	; (800b0ac <_dtoa_r+0x304>)
 800af40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	ec51 0b18 	vmov	r0, r1, d8
 800af4c:	f7f5 fdde 	bl	8000b0c <__aeabi_dcmplt>
 800af50:	2800      	cmp	r0, #0
 800af52:	d04e      	beq.n	800aff2 <_dtoa_r+0x24a>
 800af54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af58:	2300      	movs	r3, #0
 800af5a:	930c      	str	r3, [sp, #48]	; 0x30
 800af5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af5e:	1b5b      	subs	r3, r3, r5
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	bf45      	ittet	mi
 800af64:	f1c3 0301 	rsbmi	r3, r3, #1
 800af68:	9305      	strmi	r3, [sp, #20]
 800af6a:	2300      	movpl	r3, #0
 800af6c:	2300      	movmi	r3, #0
 800af6e:	9206      	str	r2, [sp, #24]
 800af70:	bf54      	ite	pl
 800af72:	9305      	strpl	r3, [sp, #20]
 800af74:	9306      	strmi	r3, [sp, #24]
 800af76:	f1bb 0f00 	cmp.w	fp, #0
 800af7a:	db3c      	blt.n	800aff6 <_dtoa_r+0x24e>
 800af7c:	9b06      	ldr	r3, [sp, #24]
 800af7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af82:	445b      	add	r3, fp
 800af84:	9306      	str	r3, [sp, #24]
 800af86:	2300      	movs	r3, #0
 800af88:	9308      	str	r3, [sp, #32]
 800af8a:	9b07      	ldr	r3, [sp, #28]
 800af8c:	2b09      	cmp	r3, #9
 800af8e:	d868      	bhi.n	800b062 <_dtoa_r+0x2ba>
 800af90:	2b05      	cmp	r3, #5
 800af92:	bfc4      	itt	gt
 800af94:	3b04      	subgt	r3, #4
 800af96:	9307      	strgt	r3, [sp, #28]
 800af98:	9b07      	ldr	r3, [sp, #28]
 800af9a:	f1a3 0302 	sub.w	r3, r3, #2
 800af9e:	bfcc      	ite	gt
 800afa0:	2500      	movgt	r5, #0
 800afa2:	2501      	movle	r5, #1
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	f200 8085 	bhi.w	800b0b4 <_dtoa_r+0x30c>
 800afaa:	e8df f003 	tbb	[pc, r3]
 800afae:	3b2e      	.short	0x3b2e
 800afb0:	5839      	.short	0x5839
 800afb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afb6:	441d      	add	r5, r3
 800afb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	bfc1      	itttt	gt
 800afc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afc4:	fa08 f803 	lslgt.w	r8, r8, r3
 800afc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800afcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800afd0:	bfd6      	itet	le
 800afd2:	f1c3 0320 	rsble	r3, r3, #32
 800afd6:	ea48 0003 	orrgt.w	r0, r8, r3
 800afda:	fa06 f003 	lslle.w	r0, r6, r3
 800afde:	f7f5 faa9 	bl	8000534 <__aeabi_ui2d>
 800afe2:	2201      	movs	r2, #1
 800afe4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800afe8:	3d01      	subs	r5, #1
 800afea:	920e      	str	r2, [sp, #56]	; 0x38
 800afec:	e76f      	b.n	800aece <_dtoa_r+0x126>
 800afee:	2301      	movs	r3, #1
 800aff0:	e7b3      	b.n	800af5a <_dtoa_r+0x1b2>
 800aff2:	900c      	str	r0, [sp, #48]	; 0x30
 800aff4:	e7b2      	b.n	800af5c <_dtoa_r+0x1b4>
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	eba3 030b 	sub.w	r3, r3, fp
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	f1cb 0300 	rsb	r3, fp, #0
 800b002:	9308      	str	r3, [sp, #32]
 800b004:	2300      	movs	r3, #0
 800b006:	930b      	str	r3, [sp, #44]	; 0x2c
 800b008:	e7bf      	b.n	800af8a <_dtoa_r+0x1e2>
 800b00a:	2300      	movs	r3, #0
 800b00c:	9309      	str	r3, [sp, #36]	; 0x24
 800b00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b010:	2b00      	cmp	r3, #0
 800b012:	dc52      	bgt.n	800b0ba <_dtoa_r+0x312>
 800b014:	2301      	movs	r3, #1
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	461a      	mov	r2, r3
 800b01c:	920a      	str	r2, [sp, #40]	; 0x28
 800b01e:	e00b      	b.n	800b038 <_dtoa_r+0x290>
 800b020:	2301      	movs	r3, #1
 800b022:	e7f3      	b.n	800b00c <_dtoa_r+0x264>
 800b024:	2300      	movs	r3, #0
 800b026:	9309      	str	r3, [sp, #36]	; 0x24
 800b028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02a:	445b      	add	r3, fp
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	3301      	adds	r3, #1
 800b030:	2b01      	cmp	r3, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	bfb8      	it	lt
 800b036:	2301      	movlt	r3, #1
 800b038:	69e0      	ldr	r0, [r4, #28]
 800b03a:	2100      	movs	r1, #0
 800b03c:	2204      	movs	r2, #4
 800b03e:	f102 0614 	add.w	r6, r2, #20
 800b042:	429e      	cmp	r6, r3
 800b044:	d93d      	bls.n	800b0c2 <_dtoa_r+0x31a>
 800b046:	6041      	str	r1, [r0, #4]
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fcf3 	bl	800ba34 <_Balloc>
 800b04e:	9000      	str	r0, [sp, #0]
 800b050:	2800      	cmp	r0, #0
 800b052:	d139      	bne.n	800b0c8 <_dtoa_r+0x320>
 800b054:	4b16      	ldr	r3, [pc, #88]	; (800b0b0 <_dtoa_r+0x308>)
 800b056:	4602      	mov	r2, r0
 800b058:	f240 11af 	movw	r1, #431	; 0x1af
 800b05c:	e6bd      	b.n	800adda <_dtoa_r+0x32>
 800b05e:	2301      	movs	r3, #1
 800b060:	e7e1      	b.n	800b026 <_dtoa_r+0x27e>
 800b062:	2501      	movs	r5, #1
 800b064:	2300      	movs	r3, #0
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	9509      	str	r5, [sp, #36]	; 0x24
 800b06a:	f04f 33ff 	mov.w	r3, #4294967295
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	2200      	movs	r2, #0
 800b074:	2312      	movs	r3, #18
 800b076:	e7d1      	b.n	800b01c <_dtoa_r+0x274>
 800b078:	636f4361 	.word	0x636f4361
 800b07c:	3fd287a7 	.word	0x3fd287a7
 800b080:	8b60c8b3 	.word	0x8b60c8b3
 800b084:	3fc68a28 	.word	0x3fc68a28
 800b088:	509f79fb 	.word	0x509f79fb
 800b08c:	3fd34413 	.word	0x3fd34413
 800b090:	0800cf3d 	.word	0x0800cf3d
 800b094:	0800cf54 	.word	0x0800cf54
 800b098:	7ff00000 	.word	0x7ff00000
 800b09c:	0800cf39 	.word	0x0800cf39
 800b0a0:	0800cf30 	.word	0x0800cf30
 800b0a4:	0800cf0d 	.word	0x0800cf0d
 800b0a8:	3ff80000 	.word	0x3ff80000
 800b0ac:	0800d040 	.word	0x0800d040
 800b0b0:	0800cfac 	.word	0x0800cfac
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b8:	e7d7      	b.n	800b06a <_dtoa_r+0x2c2>
 800b0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	e7ba      	b.n	800b038 <_dtoa_r+0x290>
 800b0c2:	3101      	adds	r1, #1
 800b0c4:	0052      	lsls	r2, r2, #1
 800b0c6:	e7ba      	b.n	800b03e <_dtoa_r+0x296>
 800b0c8:	69e3      	ldr	r3, [r4, #28]
 800b0ca:	9a00      	ldr	r2, [sp, #0]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	2b0e      	cmp	r3, #14
 800b0d2:	f200 80a8 	bhi.w	800b226 <_dtoa_r+0x47e>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	f000 80a5 	beq.w	800b226 <_dtoa_r+0x47e>
 800b0dc:	f1bb 0f00 	cmp.w	fp, #0
 800b0e0:	dd38      	ble.n	800b154 <_dtoa_r+0x3ac>
 800b0e2:	4bc0      	ldr	r3, [pc, #768]	; (800b3e4 <_dtoa_r+0x63c>)
 800b0e4:	f00b 020f 	and.w	r2, fp, #15
 800b0e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b0f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b0f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b0f8:	d019      	beq.n	800b12e <_dtoa_r+0x386>
 800b0fa:	4bbb      	ldr	r3, [pc, #748]	; (800b3e8 <_dtoa_r+0x640>)
 800b0fc:	ec51 0b18 	vmov	r0, r1, d8
 800b100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b104:	f7f5 fbba 	bl	800087c <__aeabi_ddiv>
 800b108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b10c:	f008 080f 	and.w	r8, r8, #15
 800b110:	2503      	movs	r5, #3
 800b112:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b3e8 <_dtoa_r+0x640>
 800b116:	f1b8 0f00 	cmp.w	r8, #0
 800b11a:	d10a      	bne.n	800b132 <_dtoa_r+0x38a>
 800b11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b120:	4632      	mov	r2, r6
 800b122:	463b      	mov	r3, r7
 800b124:	f7f5 fbaa 	bl	800087c <__aeabi_ddiv>
 800b128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b12c:	e02b      	b.n	800b186 <_dtoa_r+0x3de>
 800b12e:	2502      	movs	r5, #2
 800b130:	e7ef      	b.n	800b112 <_dtoa_r+0x36a>
 800b132:	f018 0f01 	tst.w	r8, #1
 800b136:	d008      	beq.n	800b14a <_dtoa_r+0x3a2>
 800b138:	4630      	mov	r0, r6
 800b13a:	4639      	mov	r1, r7
 800b13c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b140:	f7f5 fa72 	bl	8000628 <__aeabi_dmul>
 800b144:	3501      	adds	r5, #1
 800b146:	4606      	mov	r6, r0
 800b148:	460f      	mov	r7, r1
 800b14a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b14e:	f109 0908 	add.w	r9, r9, #8
 800b152:	e7e0      	b.n	800b116 <_dtoa_r+0x36e>
 800b154:	f000 809f 	beq.w	800b296 <_dtoa_r+0x4ee>
 800b158:	f1cb 0600 	rsb	r6, fp, #0
 800b15c:	4ba1      	ldr	r3, [pc, #644]	; (800b3e4 <_dtoa_r+0x63c>)
 800b15e:	4fa2      	ldr	r7, [pc, #648]	; (800b3e8 <_dtoa_r+0x640>)
 800b160:	f006 020f 	and.w	r2, r6, #15
 800b164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	ec51 0b18 	vmov	r0, r1, d8
 800b170:	f7f5 fa5a 	bl	8000628 <__aeabi_dmul>
 800b174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b178:	1136      	asrs	r6, r6, #4
 800b17a:	2300      	movs	r3, #0
 800b17c:	2502      	movs	r5, #2
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d17e      	bne.n	800b280 <_dtoa_r+0x4d8>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1d0      	bne.n	800b128 <_dtoa_r+0x380>
 800b186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b188:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 8084 	beq.w	800b29a <_dtoa_r+0x4f2>
 800b192:	4b96      	ldr	r3, [pc, #600]	; (800b3ec <_dtoa_r+0x644>)
 800b194:	2200      	movs	r2, #0
 800b196:	4640      	mov	r0, r8
 800b198:	4649      	mov	r1, r9
 800b19a:	f7f5 fcb7 	bl	8000b0c <__aeabi_dcmplt>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d07b      	beq.n	800b29a <_dtoa_r+0x4f2>
 800b1a2:	9b04      	ldr	r3, [sp, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d078      	beq.n	800b29a <_dtoa_r+0x4f2>
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dd39      	ble.n	800b222 <_dtoa_r+0x47a>
 800b1ae:	4b90      	ldr	r3, [pc, #576]	; (800b3f0 <_dtoa_r+0x648>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 fa37 	bl	8000628 <__aeabi_dmul>
 800b1ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1be:	9e01      	ldr	r6, [sp, #4]
 800b1c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7f5 f9c2 	bl	8000554 <__aeabi_i2d>
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	f7f5 fa28 	bl	8000628 <__aeabi_dmul>
 800b1d8:	4b86      	ldr	r3, [pc, #536]	; (800b3f4 <_dtoa_r+0x64c>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7f5 f86e 	bl	80002bc <__adddf3>
 800b1e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	d158      	bne.n	800b2a0 <_dtoa_r+0x4f8>
 800b1ee:	4b82      	ldr	r3, [pc, #520]	; (800b3f8 <_dtoa_r+0x650>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f5 f85f 	bl	80002b8 <__aeabi_dsub>
 800b1fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1fe:	4680      	mov	r8, r0
 800b200:	4689      	mov	r9, r1
 800b202:	f7f5 fca1 	bl	8000b48 <__aeabi_dcmpgt>
 800b206:	2800      	cmp	r0, #0
 800b208:	f040 8296 	bne.w	800b738 <_dtoa_r+0x990>
 800b20c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b210:	4640      	mov	r0, r8
 800b212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 fc78 	bl	8000b0c <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f040 8289 	bne.w	800b734 <_dtoa_r+0x98c>
 800b222:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f2c0 814e 	blt.w	800b4ca <_dtoa_r+0x722>
 800b22e:	f1bb 0f0e 	cmp.w	fp, #14
 800b232:	f300 814a 	bgt.w	800b4ca <_dtoa_r+0x722>
 800b236:	4b6b      	ldr	r3, [pc, #428]	; (800b3e4 <_dtoa_r+0x63c>)
 800b238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b23c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	f280 80dc 	bge.w	800b400 <_dtoa_r+0x658>
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f300 80d8 	bgt.w	800b400 <_dtoa_r+0x658>
 800b250:	f040 826f 	bne.w	800b732 <_dtoa_r+0x98a>
 800b254:	4b68      	ldr	r3, [pc, #416]	; (800b3f8 <_dtoa_r+0x650>)
 800b256:	2200      	movs	r2, #0
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f5 f9e4 	bl	8000628 <__aeabi_dmul>
 800b260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b264:	f7f5 fc66 	bl	8000b34 <__aeabi_dcmpge>
 800b268:	9e04      	ldr	r6, [sp, #16]
 800b26a:	4637      	mov	r7, r6
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f040 8245 	bne.w	800b6fc <_dtoa_r+0x954>
 800b272:	9d00      	ldr	r5, [sp, #0]
 800b274:	2331      	movs	r3, #49	; 0x31
 800b276:	f805 3b01 	strb.w	r3, [r5], #1
 800b27a:	f10b 0b01 	add.w	fp, fp, #1
 800b27e:	e241      	b.n	800b704 <_dtoa_r+0x95c>
 800b280:	07f2      	lsls	r2, r6, #31
 800b282:	d505      	bpl.n	800b290 <_dtoa_r+0x4e8>
 800b284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b288:	f7f5 f9ce 	bl	8000628 <__aeabi_dmul>
 800b28c:	3501      	adds	r5, #1
 800b28e:	2301      	movs	r3, #1
 800b290:	1076      	asrs	r6, r6, #1
 800b292:	3708      	adds	r7, #8
 800b294:	e773      	b.n	800b17e <_dtoa_r+0x3d6>
 800b296:	2502      	movs	r5, #2
 800b298:	e775      	b.n	800b186 <_dtoa_r+0x3de>
 800b29a:	9e04      	ldr	r6, [sp, #16]
 800b29c:	465f      	mov	r7, fp
 800b29e:	e792      	b.n	800b1c6 <_dtoa_r+0x41e>
 800b2a0:	9900      	ldr	r1, [sp, #0]
 800b2a2:	4b50      	ldr	r3, [pc, #320]	; (800b3e4 <_dtoa_r+0x63c>)
 800b2a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2a8:	4431      	add	r1, r6
 800b2aa:	9102      	str	r1, [sp, #8]
 800b2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ae:	eeb0 9a47 	vmov.f32	s18, s14
 800b2b2:	eef0 9a67 	vmov.f32	s19, s15
 800b2b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d044      	beq.n	800b34c <_dtoa_r+0x5a4>
 800b2c2:	494e      	ldr	r1, [pc, #312]	; (800b3fc <_dtoa_r+0x654>)
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f5 fad9 	bl	800087c <__aeabi_ddiv>
 800b2ca:	ec53 2b19 	vmov	r2, r3, d9
 800b2ce:	f7f4 fff3 	bl	80002b8 <__aeabi_dsub>
 800b2d2:	9d00      	ldr	r5, [sp, #0]
 800b2d4:	ec41 0b19 	vmov	d9, r0, r1
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f7f5 fc54 	bl	8000b88 <__aeabi_d2iz>
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	f7f5 f937 	bl	8000554 <__aeabi_i2d>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f4 ffe3 	bl	80002b8 <__aeabi_dsub>
 800b2f2:	3630      	adds	r6, #48	; 0x30
 800b2f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b2f8:	ec53 2b19 	vmov	r2, r3, d9
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	4689      	mov	r9, r1
 800b300:	f7f5 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800b304:	2800      	cmp	r0, #0
 800b306:	d164      	bne.n	800b3d2 <_dtoa_r+0x62a>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	4937      	ldr	r1, [pc, #220]	; (800b3ec <_dtoa_r+0x644>)
 800b30e:	2000      	movs	r0, #0
 800b310:	f7f4 ffd2 	bl	80002b8 <__aeabi_dsub>
 800b314:	ec53 2b19 	vmov	r2, r3, d9
 800b318:	f7f5 fbf8 	bl	8000b0c <__aeabi_dcmplt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f040 80b6 	bne.w	800b48e <_dtoa_r+0x6e6>
 800b322:	9b02      	ldr	r3, [sp, #8]
 800b324:	429d      	cmp	r5, r3
 800b326:	f43f af7c 	beq.w	800b222 <_dtoa_r+0x47a>
 800b32a:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <_dtoa_r+0x648>)
 800b32c:	ec51 0b19 	vmov	r0, r1, d9
 800b330:	2200      	movs	r2, #0
 800b332:	f7f5 f979 	bl	8000628 <__aeabi_dmul>
 800b336:	4b2e      	ldr	r3, [pc, #184]	; (800b3f0 <_dtoa_r+0x648>)
 800b338:	ec41 0b19 	vmov	d9, r0, r1
 800b33c:	2200      	movs	r2, #0
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	f7f5 f971 	bl	8000628 <__aeabi_dmul>
 800b346:	4680      	mov	r8, r0
 800b348:	4689      	mov	r9, r1
 800b34a:	e7c5      	b.n	800b2d8 <_dtoa_r+0x530>
 800b34c:	ec51 0b17 	vmov	r0, r1, d7
 800b350:	f7f5 f96a 	bl	8000628 <__aeabi_dmul>
 800b354:	9b02      	ldr	r3, [sp, #8]
 800b356:	9d00      	ldr	r5, [sp, #0]
 800b358:	930f      	str	r3, [sp, #60]	; 0x3c
 800b35a:	ec41 0b19 	vmov	d9, r0, r1
 800b35e:	4649      	mov	r1, r9
 800b360:	4640      	mov	r0, r8
 800b362:	f7f5 fc11 	bl	8000b88 <__aeabi_d2iz>
 800b366:	4606      	mov	r6, r0
 800b368:	f7f5 f8f4 	bl	8000554 <__aeabi_i2d>
 800b36c:	3630      	adds	r6, #48	; 0x30
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f4 ff9f 	bl	80002b8 <__aeabi_dsub>
 800b37a:	f805 6b01 	strb.w	r6, [r5], #1
 800b37e:	9b02      	ldr	r3, [sp, #8]
 800b380:	429d      	cmp	r5, r3
 800b382:	4680      	mov	r8, r0
 800b384:	4689      	mov	r9, r1
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	d124      	bne.n	800b3d6 <_dtoa_r+0x62e>
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <_dtoa_r+0x654>)
 800b38e:	ec51 0b19 	vmov	r0, r1, d9
 800b392:	f7f4 ff93 	bl	80002bc <__adddf3>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4640      	mov	r0, r8
 800b39c:	4649      	mov	r1, r9
 800b39e:	f7f5 fbd3 	bl	8000b48 <__aeabi_dcmpgt>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d173      	bne.n	800b48e <_dtoa_r+0x6e6>
 800b3a6:	ec53 2b19 	vmov	r2, r3, d9
 800b3aa:	4914      	ldr	r1, [pc, #80]	; (800b3fc <_dtoa_r+0x654>)
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	f7f4 ff83 	bl	80002b8 <__aeabi_dsub>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7f5 fba7 	bl	8000b0c <__aeabi_dcmplt>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f af2f 	beq.w	800b222 <_dtoa_r+0x47a>
 800b3c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3c6:	1e6b      	subs	r3, r5, #1
 800b3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3ce:	2b30      	cmp	r3, #48	; 0x30
 800b3d0:	d0f8      	beq.n	800b3c4 <_dtoa_r+0x61c>
 800b3d2:	46bb      	mov	fp, r7
 800b3d4:	e04a      	b.n	800b46c <_dtoa_r+0x6c4>
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <_dtoa_r+0x648>)
 800b3d8:	f7f5 f926 	bl	8000628 <__aeabi_dmul>
 800b3dc:	4680      	mov	r8, r0
 800b3de:	4689      	mov	r9, r1
 800b3e0:	e7bd      	b.n	800b35e <_dtoa_r+0x5b6>
 800b3e2:	bf00      	nop
 800b3e4:	0800d040 	.word	0x0800d040
 800b3e8:	0800d018 	.word	0x0800d018
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	40240000 	.word	0x40240000
 800b3f4:	401c0000 	.word	0x401c0000
 800b3f8:	40140000 	.word	0x40140000
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b404:	9d00      	ldr	r5, [sp, #0]
 800b406:	4642      	mov	r2, r8
 800b408:	464b      	mov	r3, r9
 800b40a:	4630      	mov	r0, r6
 800b40c:	4639      	mov	r1, r7
 800b40e:	f7f5 fa35 	bl	800087c <__aeabi_ddiv>
 800b412:	f7f5 fbb9 	bl	8000b88 <__aeabi_d2iz>
 800b416:	9001      	str	r0, [sp, #4]
 800b418:	f7f5 f89c 	bl	8000554 <__aeabi_i2d>
 800b41c:	4642      	mov	r2, r8
 800b41e:	464b      	mov	r3, r9
 800b420:	f7f5 f902 	bl	8000628 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4630      	mov	r0, r6
 800b42a:	4639      	mov	r1, r7
 800b42c:	f7f4 ff44 	bl	80002b8 <__aeabi_dsub>
 800b430:	9e01      	ldr	r6, [sp, #4]
 800b432:	9f04      	ldr	r7, [sp, #16]
 800b434:	3630      	adds	r6, #48	; 0x30
 800b436:	f805 6b01 	strb.w	r6, [r5], #1
 800b43a:	9e00      	ldr	r6, [sp, #0]
 800b43c:	1bae      	subs	r6, r5, r6
 800b43e:	42b7      	cmp	r7, r6
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	d134      	bne.n	800b4b0 <_dtoa_r+0x708>
 800b446:	f7f4 ff39 	bl	80002bc <__adddf3>
 800b44a:	4642      	mov	r2, r8
 800b44c:	464b      	mov	r3, r9
 800b44e:	4606      	mov	r6, r0
 800b450:	460f      	mov	r7, r1
 800b452:	f7f5 fb79 	bl	8000b48 <__aeabi_dcmpgt>
 800b456:	b9c8      	cbnz	r0, 800b48c <_dtoa_r+0x6e4>
 800b458:	4642      	mov	r2, r8
 800b45a:	464b      	mov	r3, r9
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 fb4a 	bl	8000af8 <__aeabi_dcmpeq>
 800b464:	b110      	cbz	r0, 800b46c <_dtoa_r+0x6c4>
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	07db      	lsls	r3, r3, #31
 800b46a:	d40f      	bmi.n	800b48c <_dtoa_r+0x6e4>
 800b46c:	4651      	mov	r1, sl
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fb20 	bl	800bab4 <_Bfree>
 800b474:	2300      	movs	r3, #0
 800b476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b478:	702b      	strb	r3, [r5, #0]
 800b47a:	f10b 0301 	add.w	r3, fp, #1
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b482:	2b00      	cmp	r3, #0
 800b484:	f43f ace2 	beq.w	800ae4c <_dtoa_r+0xa4>
 800b488:	601d      	str	r5, [r3, #0]
 800b48a:	e4df      	b.n	800ae4c <_dtoa_r+0xa4>
 800b48c:	465f      	mov	r7, fp
 800b48e:	462b      	mov	r3, r5
 800b490:	461d      	mov	r5, r3
 800b492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b496:	2a39      	cmp	r2, #57	; 0x39
 800b498:	d106      	bne.n	800b4a8 <_dtoa_r+0x700>
 800b49a:	9a00      	ldr	r2, [sp, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d1f7      	bne.n	800b490 <_dtoa_r+0x6e8>
 800b4a0:	9900      	ldr	r1, [sp, #0]
 800b4a2:	2230      	movs	r2, #48	; 0x30
 800b4a4:	3701      	adds	r7, #1
 800b4a6:	700a      	strb	r2, [r1, #0]
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	3201      	adds	r2, #1
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	e790      	b.n	800b3d2 <_dtoa_r+0x62a>
 800b4b0:	4ba3      	ldr	r3, [pc, #652]	; (800b740 <_dtoa_r+0x998>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f5 f8b8 	bl	8000628 <__aeabi_dmul>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	f7f5 fb1a 	bl	8000af8 <__aeabi_dcmpeq>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d09e      	beq.n	800b406 <_dtoa_r+0x65e>
 800b4c8:	e7d0      	b.n	800b46c <_dtoa_r+0x6c4>
 800b4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4cc:	2a00      	cmp	r2, #0
 800b4ce:	f000 80ca 	beq.w	800b666 <_dtoa_r+0x8be>
 800b4d2:	9a07      	ldr	r2, [sp, #28]
 800b4d4:	2a01      	cmp	r2, #1
 800b4d6:	f300 80ad 	bgt.w	800b634 <_dtoa_r+0x88c>
 800b4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	f000 80a5 	beq.w	800b62c <_dtoa_r+0x884>
 800b4e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4e6:	9e08      	ldr	r6, [sp, #32]
 800b4e8:	9d05      	ldr	r5, [sp, #20]
 800b4ea:	9a05      	ldr	r2, [sp, #20]
 800b4ec:	441a      	add	r2, r3
 800b4ee:	9205      	str	r2, [sp, #20]
 800b4f0:	9a06      	ldr	r2, [sp, #24]
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	441a      	add	r2, r3
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	9206      	str	r2, [sp, #24]
 800b4fa:	f000 fb91 	bl	800bc20 <__i2b>
 800b4fe:	4607      	mov	r7, r0
 800b500:	b165      	cbz	r5, 800b51c <_dtoa_r+0x774>
 800b502:	9b06      	ldr	r3, [sp, #24]
 800b504:	2b00      	cmp	r3, #0
 800b506:	dd09      	ble.n	800b51c <_dtoa_r+0x774>
 800b508:	42ab      	cmp	r3, r5
 800b50a:	9a05      	ldr	r2, [sp, #20]
 800b50c:	bfa8      	it	ge
 800b50e:	462b      	movge	r3, r5
 800b510:	1ad2      	subs	r2, r2, r3
 800b512:	9205      	str	r2, [sp, #20]
 800b514:	9a06      	ldr	r2, [sp, #24]
 800b516:	1aed      	subs	r5, r5, r3
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	9306      	str	r3, [sp, #24]
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	b1f3      	cbz	r3, 800b55e <_dtoa_r+0x7b6>
 800b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 80a3 	beq.w	800b66e <_dtoa_r+0x8c6>
 800b528:	2e00      	cmp	r6, #0
 800b52a:	dd10      	ble.n	800b54e <_dtoa_r+0x7a6>
 800b52c:	4639      	mov	r1, r7
 800b52e:	4632      	mov	r2, r6
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fc35 	bl	800bda0 <__pow5mult>
 800b536:	4652      	mov	r2, sl
 800b538:	4601      	mov	r1, r0
 800b53a:	4607      	mov	r7, r0
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fb85 	bl	800bc4c <__multiply>
 800b542:	4651      	mov	r1, sl
 800b544:	4680      	mov	r8, r0
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fab4 	bl	800bab4 <_Bfree>
 800b54c:	46c2      	mov	sl, r8
 800b54e:	9b08      	ldr	r3, [sp, #32]
 800b550:	1b9a      	subs	r2, r3, r6
 800b552:	d004      	beq.n	800b55e <_dtoa_r+0x7b6>
 800b554:	4651      	mov	r1, sl
 800b556:	4620      	mov	r0, r4
 800b558:	f000 fc22 	bl	800bda0 <__pow5mult>
 800b55c:	4682      	mov	sl, r0
 800b55e:	2101      	movs	r1, #1
 800b560:	4620      	mov	r0, r4
 800b562:	f000 fb5d 	bl	800bc20 <__i2b>
 800b566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	4606      	mov	r6, r0
 800b56c:	f340 8081 	ble.w	800b672 <_dtoa_r+0x8ca>
 800b570:	461a      	mov	r2, r3
 800b572:	4601      	mov	r1, r0
 800b574:	4620      	mov	r0, r4
 800b576:	f000 fc13 	bl	800bda0 <__pow5mult>
 800b57a:	9b07      	ldr	r3, [sp, #28]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	4606      	mov	r6, r0
 800b580:	dd7a      	ble.n	800b678 <_dtoa_r+0x8d0>
 800b582:	f04f 0800 	mov.w	r8, #0
 800b586:	6933      	ldr	r3, [r6, #16]
 800b588:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b58c:	6918      	ldr	r0, [r3, #16]
 800b58e:	f000 faf9 	bl	800bb84 <__hi0bits>
 800b592:	f1c0 0020 	rsb	r0, r0, #32
 800b596:	9b06      	ldr	r3, [sp, #24]
 800b598:	4418      	add	r0, r3
 800b59a:	f010 001f 	ands.w	r0, r0, #31
 800b59e:	f000 8094 	beq.w	800b6ca <_dtoa_r+0x922>
 800b5a2:	f1c0 0320 	rsb	r3, r0, #32
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	f340 8085 	ble.w	800b6b6 <_dtoa_r+0x90e>
 800b5ac:	9b05      	ldr	r3, [sp, #20]
 800b5ae:	f1c0 001c 	rsb	r0, r0, #28
 800b5b2:	4403      	add	r3, r0
 800b5b4:	9305      	str	r3, [sp, #20]
 800b5b6:	9b06      	ldr	r3, [sp, #24]
 800b5b8:	4403      	add	r3, r0
 800b5ba:	4405      	add	r5, r0
 800b5bc:	9306      	str	r3, [sp, #24]
 800b5be:	9b05      	ldr	r3, [sp, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dd05      	ble.n	800b5d0 <_dtoa_r+0x828>
 800b5c4:	4651      	mov	r1, sl
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 fc43 	bl	800be54 <__lshift>
 800b5ce:	4682      	mov	sl, r0
 800b5d0:	9b06      	ldr	r3, [sp, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dd05      	ble.n	800b5e2 <_dtoa_r+0x83a>
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 fc3a 	bl	800be54 <__lshift>
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d072      	beq.n	800b6ce <_dtoa_r+0x926>
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	f000 fc9e 	bl	800bf2c <__mcmp>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	da6c      	bge.n	800b6ce <_dtoa_r+0x926>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4651      	mov	r1, sl
 800b5f8:	220a      	movs	r2, #10
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fa7c 	bl	800baf8 <__multadd>
 800b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b602:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b606:	4682      	mov	sl, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 81b0 	beq.w	800b96e <_dtoa_r+0xbc6>
 800b60e:	2300      	movs	r3, #0
 800b610:	4639      	mov	r1, r7
 800b612:	220a      	movs	r2, #10
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fa6f 	bl	800baf8 <__multadd>
 800b61a:	9b01      	ldr	r3, [sp, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	4607      	mov	r7, r0
 800b620:	f300 8096 	bgt.w	800b750 <_dtoa_r+0x9a8>
 800b624:	9b07      	ldr	r3, [sp, #28]
 800b626:	2b02      	cmp	r3, #2
 800b628:	dc59      	bgt.n	800b6de <_dtoa_r+0x936>
 800b62a:	e091      	b.n	800b750 <_dtoa_r+0x9a8>
 800b62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b632:	e758      	b.n	800b4e6 <_dtoa_r+0x73e>
 800b634:	9b04      	ldr	r3, [sp, #16]
 800b636:	1e5e      	subs	r6, r3, #1
 800b638:	9b08      	ldr	r3, [sp, #32]
 800b63a:	42b3      	cmp	r3, r6
 800b63c:	bfbf      	itttt	lt
 800b63e:	9b08      	ldrlt	r3, [sp, #32]
 800b640:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b642:	9608      	strlt	r6, [sp, #32]
 800b644:	1af3      	sublt	r3, r6, r3
 800b646:	bfb4      	ite	lt
 800b648:	18d2      	addlt	r2, r2, r3
 800b64a:	1b9e      	subge	r6, r3, r6
 800b64c:	9b04      	ldr	r3, [sp, #16]
 800b64e:	bfbc      	itt	lt
 800b650:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b652:	2600      	movlt	r6, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	bfb7      	itett	lt
 800b658:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b65c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b660:	1a9d      	sublt	r5, r3, r2
 800b662:	2300      	movlt	r3, #0
 800b664:	e741      	b.n	800b4ea <_dtoa_r+0x742>
 800b666:	9e08      	ldr	r6, [sp, #32]
 800b668:	9d05      	ldr	r5, [sp, #20]
 800b66a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b66c:	e748      	b.n	800b500 <_dtoa_r+0x758>
 800b66e:	9a08      	ldr	r2, [sp, #32]
 800b670:	e770      	b.n	800b554 <_dtoa_r+0x7ac>
 800b672:	9b07      	ldr	r3, [sp, #28]
 800b674:	2b01      	cmp	r3, #1
 800b676:	dc19      	bgt.n	800b6ac <_dtoa_r+0x904>
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	b9bb      	cbnz	r3, 800b6ac <_dtoa_r+0x904>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b682:	b99b      	cbnz	r3, 800b6ac <_dtoa_r+0x904>
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b68a:	0d1b      	lsrs	r3, r3, #20
 800b68c:	051b      	lsls	r3, r3, #20
 800b68e:	b183      	cbz	r3, 800b6b2 <_dtoa_r+0x90a>
 800b690:	9b05      	ldr	r3, [sp, #20]
 800b692:	3301      	adds	r3, #1
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	9b06      	ldr	r3, [sp, #24]
 800b698:	3301      	adds	r3, #1
 800b69a:	9306      	str	r3, [sp, #24]
 800b69c:	f04f 0801 	mov.w	r8, #1
 800b6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f47f af6f 	bne.w	800b586 <_dtoa_r+0x7de>
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	e774      	b.n	800b596 <_dtoa_r+0x7ee>
 800b6ac:	f04f 0800 	mov.w	r8, #0
 800b6b0:	e7f6      	b.n	800b6a0 <_dtoa_r+0x8f8>
 800b6b2:	4698      	mov	r8, r3
 800b6b4:	e7f4      	b.n	800b6a0 <_dtoa_r+0x8f8>
 800b6b6:	d082      	beq.n	800b5be <_dtoa_r+0x816>
 800b6b8:	9a05      	ldr	r2, [sp, #20]
 800b6ba:	331c      	adds	r3, #28
 800b6bc:	441a      	add	r2, r3
 800b6be:	9205      	str	r2, [sp, #20]
 800b6c0:	9a06      	ldr	r2, [sp, #24]
 800b6c2:	441a      	add	r2, r3
 800b6c4:	441d      	add	r5, r3
 800b6c6:	9206      	str	r2, [sp, #24]
 800b6c8:	e779      	b.n	800b5be <_dtoa_r+0x816>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	e7f4      	b.n	800b6b8 <_dtoa_r+0x910>
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dc37      	bgt.n	800b744 <_dtoa_r+0x99c>
 800b6d4:	9b07      	ldr	r3, [sp, #28]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dd34      	ble.n	800b744 <_dtoa_r+0x99c>
 800b6da:	9b04      	ldr	r3, [sp, #16]
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	b963      	cbnz	r3, 800b6fc <_dtoa_r+0x954>
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fa06 	bl	800baf8 <__multadd>
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	f000 fc1b 	bl	800bf2c <__mcmp>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f73f adbb 	bgt.w	800b272 <_dtoa_r+0x4ca>
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6fe:	9d00      	ldr	r5, [sp, #0]
 800b700:	ea6f 0b03 	mvn.w	fp, r3
 800b704:	f04f 0800 	mov.w	r8, #0
 800b708:	4631      	mov	r1, r6
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f9d2 	bl	800bab4 <_Bfree>
 800b710:	2f00      	cmp	r7, #0
 800b712:	f43f aeab 	beq.w	800b46c <_dtoa_r+0x6c4>
 800b716:	f1b8 0f00 	cmp.w	r8, #0
 800b71a:	d005      	beq.n	800b728 <_dtoa_r+0x980>
 800b71c:	45b8      	cmp	r8, r7
 800b71e:	d003      	beq.n	800b728 <_dtoa_r+0x980>
 800b720:	4641      	mov	r1, r8
 800b722:	4620      	mov	r0, r4
 800b724:	f000 f9c6 	bl	800bab4 <_Bfree>
 800b728:	4639      	mov	r1, r7
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 f9c2 	bl	800bab4 <_Bfree>
 800b730:	e69c      	b.n	800b46c <_dtoa_r+0x6c4>
 800b732:	2600      	movs	r6, #0
 800b734:	4637      	mov	r7, r6
 800b736:	e7e1      	b.n	800b6fc <_dtoa_r+0x954>
 800b738:	46bb      	mov	fp, r7
 800b73a:	4637      	mov	r7, r6
 800b73c:	e599      	b.n	800b272 <_dtoa_r+0x4ca>
 800b73e:	bf00      	nop
 800b740:	40240000 	.word	0x40240000
 800b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80c8 	beq.w	800b8dc <_dtoa_r+0xb34>
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	2d00      	cmp	r5, #0
 800b752:	dd05      	ble.n	800b760 <_dtoa_r+0x9b8>
 800b754:	4639      	mov	r1, r7
 800b756:	462a      	mov	r2, r5
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fb7b 	bl	800be54 <__lshift>
 800b75e:	4607      	mov	r7, r0
 800b760:	f1b8 0f00 	cmp.w	r8, #0
 800b764:	d05b      	beq.n	800b81e <_dtoa_r+0xa76>
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 f963 	bl	800ba34 <_Balloc>
 800b76e:	4605      	mov	r5, r0
 800b770:	b928      	cbnz	r0, 800b77e <_dtoa_r+0x9d6>
 800b772:	4b83      	ldr	r3, [pc, #524]	; (800b980 <_dtoa_r+0xbd8>)
 800b774:	4602      	mov	r2, r0
 800b776:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b77a:	f7ff bb2e 	b.w	800adda <_dtoa_r+0x32>
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	3202      	adds	r2, #2
 800b782:	0092      	lsls	r2, r2, #2
 800b784:	f107 010c 	add.w	r1, r7, #12
 800b788:	300c      	adds	r0, #12
 800b78a:	f7ff fa74 	bl	800ac76 <memcpy>
 800b78e:	2201      	movs	r2, #1
 800b790:	4629      	mov	r1, r5
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fb5e 	bl	800be54 <__lshift>
 800b798:	9b00      	ldr	r3, [sp, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	9308      	str	r3, [sp, #32]
 800b7a6:	9b02      	ldr	r3, [sp, #8]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	46b8      	mov	r8, r7
 800b7ae:	9306      	str	r3, [sp, #24]
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	f7ff fa69 	bl	800ac92 <quorem>
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	9002      	str	r0, [sp, #8]
 800b7c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	f000 fbaf 	bl	800bf2c <__mcmp>
 800b7ce:	463a      	mov	r2, r7
 800b7d0:	9005      	str	r0, [sp, #20]
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fbc5 	bl	800bf64 <__mdiff>
 800b7da:	68c2      	ldr	r2, [r0, #12]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	bb02      	cbnz	r2, 800b822 <_dtoa_r+0xa7a>
 800b7e0:	4601      	mov	r1, r0
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	f000 fba2 	bl	800bf2c <__mcmp>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b7f0:	f000 f960 	bl	800bab4 <_Bfree>
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f8:	9d04      	ldr	r5, [sp, #16]
 800b7fa:	ea43 0102 	orr.w	r1, r3, r2
 800b7fe:	9b06      	ldr	r3, [sp, #24]
 800b800:	4319      	orrs	r1, r3
 800b802:	d110      	bne.n	800b826 <_dtoa_r+0xa7e>
 800b804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b808:	d029      	beq.n	800b85e <_dtoa_r+0xab6>
 800b80a:	9b05      	ldr	r3, [sp, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dd02      	ble.n	800b816 <_dtoa_r+0xa6e>
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	f883 9000 	strb.w	r9, [r3]
 800b81c:	e774      	b.n	800b708 <_dtoa_r+0x960>
 800b81e:	4638      	mov	r0, r7
 800b820:	e7ba      	b.n	800b798 <_dtoa_r+0x9f0>
 800b822:	2201      	movs	r2, #1
 800b824:	e7e1      	b.n	800b7ea <_dtoa_r+0xa42>
 800b826:	9b05      	ldr	r3, [sp, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	db04      	blt.n	800b836 <_dtoa_r+0xa8e>
 800b82c:	9907      	ldr	r1, [sp, #28]
 800b82e:	430b      	orrs	r3, r1
 800b830:	9906      	ldr	r1, [sp, #24]
 800b832:	430b      	orrs	r3, r1
 800b834:	d120      	bne.n	800b878 <_dtoa_r+0xad0>
 800b836:	2a00      	cmp	r2, #0
 800b838:	dded      	ble.n	800b816 <_dtoa_r+0xa6e>
 800b83a:	4651      	mov	r1, sl
 800b83c:	2201      	movs	r2, #1
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 fb08 	bl	800be54 <__lshift>
 800b844:	4631      	mov	r1, r6
 800b846:	4682      	mov	sl, r0
 800b848:	f000 fb70 	bl	800bf2c <__mcmp>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	dc03      	bgt.n	800b858 <_dtoa_r+0xab0>
 800b850:	d1e1      	bne.n	800b816 <_dtoa_r+0xa6e>
 800b852:	f019 0f01 	tst.w	r9, #1
 800b856:	d0de      	beq.n	800b816 <_dtoa_r+0xa6e>
 800b858:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b85c:	d1d8      	bne.n	800b810 <_dtoa_r+0xa68>
 800b85e:	9a01      	ldr	r2, [sp, #4]
 800b860:	2339      	movs	r3, #57	; 0x39
 800b862:	7013      	strb	r3, [r2, #0]
 800b864:	462b      	mov	r3, r5
 800b866:	461d      	mov	r5, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b86e:	2a39      	cmp	r2, #57	; 0x39
 800b870:	d06c      	beq.n	800b94c <_dtoa_r+0xba4>
 800b872:	3201      	adds	r2, #1
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	e747      	b.n	800b708 <_dtoa_r+0x960>
 800b878:	2a00      	cmp	r2, #0
 800b87a:	dd07      	ble.n	800b88c <_dtoa_r+0xae4>
 800b87c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b880:	d0ed      	beq.n	800b85e <_dtoa_r+0xab6>
 800b882:	9a01      	ldr	r2, [sp, #4]
 800b884:	f109 0301 	add.w	r3, r9, #1
 800b888:	7013      	strb	r3, [r2, #0]
 800b88a:	e73d      	b.n	800b708 <_dtoa_r+0x960>
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	9a08      	ldr	r2, [sp, #32]
 800b890:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b894:	4293      	cmp	r3, r2
 800b896:	d043      	beq.n	800b920 <_dtoa_r+0xb78>
 800b898:	4651      	mov	r1, sl
 800b89a:	2300      	movs	r3, #0
 800b89c:	220a      	movs	r2, #10
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 f92a 	bl	800baf8 <__multadd>
 800b8a4:	45b8      	cmp	r8, r7
 800b8a6:	4682      	mov	sl, r0
 800b8a8:	f04f 0300 	mov.w	r3, #0
 800b8ac:	f04f 020a 	mov.w	r2, #10
 800b8b0:	4641      	mov	r1, r8
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	d107      	bne.n	800b8c6 <_dtoa_r+0xb1e>
 800b8b6:	f000 f91f 	bl	800baf8 <__multadd>
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4607      	mov	r7, r0
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	e775      	b.n	800b7b2 <_dtoa_r+0xa0a>
 800b8c6:	f000 f917 	bl	800baf8 <__multadd>
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	220a      	movs	r2, #10
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f910 	bl	800baf8 <__multadd>
 800b8d8:	4607      	mov	r7, r0
 800b8da:	e7f0      	b.n	800b8be <_dtoa_r+0xb16>
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	9d00      	ldr	r5, [sp, #0]
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	f7ff f9d4 	bl	800ac92 <quorem>
 800b8ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8ee:	9b00      	ldr	r3, [sp, #0]
 800b8f0:	f805 9b01 	strb.w	r9, [r5], #1
 800b8f4:	1aea      	subs	r2, r5, r3
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	dd07      	ble.n	800b90c <_dtoa_r+0xb64>
 800b8fc:	4651      	mov	r1, sl
 800b8fe:	2300      	movs	r3, #0
 800b900:	220a      	movs	r2, #10
 800b902:	4620      	mov	r0, r4
 800b904:	f000 f8f8 	bl	800baf8 <__multadd>
 800b908:	4682      	mov	sl, r0
 800b90a:	e7ea      	b.n	800b8e2 <_dtoa_r+0xb3a>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfc8      	it	gt
 800b912:	461d      	movgt	r5, r3
 800b914:	9b00      	ldr	r3, [sp, #0]
 800b916:	bfd8      	it	le
 800b918:	2501      	movle	r5, #1
 800b91a:	441d      	add	r5, r3
 800b91c:	f04f 0800 	mov.w	r8, #0
 800b920:	4651      	mov	r1, sl
 800b922:	2201      	movs	r2, #1
 800b924:	4620      	mov	r0, r4
 800b926:	f000 fa95 	bl	800be54 <__lshift>
 800b92a:	4631      	mov	r1, r6
 800b92c:	4682      	mov	sl, r0
 800b92e:	f000 fafd 	bl	800bf2c <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	dc96      	bgt.n	800b864 <_dtoa_r+0xabc>
 800b936:	d102      	bne.n	800b93e <_dtoa_r+0xb96>
 800b938:	f019 0f01 	tst.w	r9, #1
 800b93c:	d192      	bne.n	800b864 <_dtoa_r+0xabc>
 800b93e:	462b      	mov	r3, r5
 800b940:	461d      	mov	r5, r3
 800b942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b946:	2a30      	cmp	r2, #48	; 0x30
 800b948:	d0fa      	beq.n	800b940 <_dtoa_r+0xb98>
 800b94a:	e6dd      	b.n	800b708 <_dtoa_r+0x960>
 800b94c:	9a00      	ldr	r2, [sp, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d189      	bne.n	800b866 <_dtoa_r+0xabe>
 800b952:	f10b 0b01 	add.w	fp, fp, #1
 800b956:	2331      	movs	r3, #49	; 0x31
 800b958:	e796      	b.n	800b888 <_dtoa_r+0xae0>
 800b95a:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <_dtoa_r+0xbdc>)
 800b95c:	f7ff ba99 	b.w	800ae92 <_dtoa_r+0xea>
 800b960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b962:	2b00      	cmp	r3, #0
 800b964:	f47f aa6d 	bne.w	800ae42 <_dtoa_r+0x9a>
 800b968:	4b07      	ldr	r3, [pc, #28]	; (800b988 <_dtoa_r+0xbe0>)
 800b96a:	f7ff ba92 	b.w	800ae92 <_dtoa_r+0xea>
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dcb5      	bgt.n	800b8e0 <_dtoa_r+0xb38>
 800b974:	9b07      	ldr	r3, [sp, #28]
 800b976:	2b02      	cmp	r3, #2
 800b978:	f73f aeb1 	bgt.w	800b6de <_dtoa_r+0x936>
 800b97c:	e7b0      	b.n	800b8e0 <_dtoa_r+0xb38>
 800b97e:	bf00      	nop
 800b980:	0800cfac 	.word	0x0800cfac
 800b984:	0800cf0c 	.word	0x0800cf0c
 800b988:	0800cf30 	.word	0x0800cf30

0800b98c <_free_r>:
 800b98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b98e:	2900      	cmp	r1, #0
 800b990:	d044      	beq.n	800ba1c <_free_r+0x90>
 800b992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b996:	9001      	str	r0, [sp, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f1a1 0404 	sub.w	r4, r1, #4
 800b99e:	bfb8      	it	lt
 800b9a0:	18e4      	addlt	r4, r4, r3
 800b9a2:	f7fe fb41 	bl	800a028 <__malloc_lock>
 800b9a6:	4a1e      	ldr	r2, [pc, #120]	; (800ba20 <_free_r+0x94>)
 800b9a8:	9801      	ldr	r0, [sp, #4]
 800b9aa:	6813      	ldr	r3, [r2, #0]
 800b9ac:	b933      	cbnz	r3, 800b9bc <_free_r+0x30>
 800b9ae:	6063      	str	r3, [r4, #4]
 800b9b0:	6014      	str	r4, [r2, #0]
 800b9b2:	b003      	add	sp, #12
 800b9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9b8:	f7fe bb3c 	b.w	800a034 <__malloc_unlock>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d908      	bls.n	800b9d2 <_free_r+0x46>
 800b9c0:	6825      	ldr	r5, [r4, #0]
 800b9c2:	1961      	adds	r1, r4, r5
 800b9c4:	428b      	cmp	r3, r1
 800b9c6:	bf01      	itttt	eq
 800b9c8:	6819      	ldreq	r1, [r3, #0]
 800b9ca:	685b      	ldreq	r3, [r3, #4]
 800b9cc:	1949      	addeq	r1, r1, r5
 800b9ce:	6021      	streq	r1, [r4, #0]
 800b9d0:	e7ed      	b.n	800b9ae <_free_r+0x22>
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	b10b      	cbz	r3, 800b9dc <_free_r+0x50>
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	d9fa      	bls.n	800b9d2 <_free_r+0x46>
 800b9dc:	6811      	ldr	r1, [r2, #0]
 800b9de:	1855      	adds	r5, r2, r1
 800b9e0:	42a5      	cmp	r5, r4
 800b9e2:	d10b      	bne.n	800b9fc <_free_r+0x70>
 800b9e4:	6824      	ldr	r4, [r4, #0]
 800b9e6:	4421      	add	r1, r4
 800b9e8:	1854      	adds	r4, r2, r1
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	6011      	str	r1, [r2, #0]
 800b9ee:	d1e0      	bne.n	800b9b2 <_free_r+0x26>
 800b9f0:	681c      	ldr	r4, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	6053      	str	r3, [r2, #4]
 800b9f6:	440c      	add	r4, r1
 800b9f8:	6014      	str	r4, [r2, #0]
 800b9fa:	e7da      	b.n	800b9b2 <_free_r+0x26>
 800b9fc:	d902      	bls.n	800ba04 <_free_r+0x78>
 800b9fe:	230c      	movs	r3, #12
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	e7d6      	b.n	800b9b2 <_free_r+0x26>
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	bf04      	itt	eq
 800ba0c:	6819      	ldreq	r1, [r3, #0]
 800ba0e:	685b      	ldreq	r3, [r3, #4]
 800ba10:	6063      	str	r3, [r4, #4]
 800ba12:	bf04      	itt	eq
 800ba14:	1949      	addeq	r1, r1, r5
 800ba16:	6021      	streq	r1, [r4, #0]
 800ba18:	6054      	str	r4, [r2, #4]
 800ba1a:	e7ca      	b.n	800b9b2 <_free_r+0x26>
 800ba1c:	b003      	add	sp, #12
 800ba1e:	bd30      	pop	{r4, r5, pc}
 800ba20:	20002490 	.word	0x20002490

0800ba24 <malloc>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <malloc+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f7fe ba7d 	b.w	8009f28 <_malloc_r>
 800ba2e:	bf00      	nop
 800ba30:	20000118 	.word	0x20000118

0800ba34 <_Balloc>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	69c6      	ldr	r6, [r0, #28]
 800ba38:	4604      	mov	r4, r0
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	b976      	cbnz	r6, 800ba5c <_Balloc+0x28>
 800ba3e:	2010      	movs	r0, #16
 800ba40:	f7ff fff0 	bl	800ba24 <malloc>
 800ba44:	4602      	mov	r2, r0
 800ba46:	61e0      	str	r0, [r4, #28]
 800ba48:	b920      	cbnz	r0, 800ba54 <_Balloc+0x20>
 800ba4a:	4b18      	ldr	r3, [pc, #96]	; (800baac <_Balloc+0x78>)
 800ba4c:	4818      	ldr	r0, [pc, #96]	; (800bab0 <_Balloc+0x7c>)
 800ba4e:	216b      	movs	r1, #107	; 0x6b
 800ba50:	f000 fd8c 	bl	800c56c <__assert_func>
 800ba54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba58:	6006      	str	r6, [r0, #0]
 800ba5a:	60c6      	str	r6, [r0, #12]
 800ba5c:	69e6      	ldr	r6, [r4, #28]
 800ba5e:	68f3      	ldr	r3, [r6, #12]
 800ba60:	b183      	cbz	r3, 800ba84 <_Balloc+0x50>
 800ba62:	69e3      	ldr	r3, [r4, #28]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba6a:	b9b8      	cbnz	r0, 800ba9c <_Balloc+0x68>
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba72:	1d72      	adds	r2, r6, #5
 800ba74:	0092      	lsls	r2, r2, #2
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7fe fa20 	bl	8009ebc <_calloc_r>
 800ba7c:	b160      	cbz	r0, 800ba98 <_Balloc+0x64>
 800ba7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba82:	e00e      	b.n	800baa2 <_Balloc+0x6e>
 800ba84:	2221      	movs	r2, #33	; 0x21
 800ba86:	2104      	movs	r1, #4
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f7fe fa17 	bl	8009ebc <_calloc_r>
 800ba8e:	69e3      	ldr	r3, [r4, #28]
 800ba90:	60f0      	str	r0, [r6, #12]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e4      	bne.n	800ba62 <_Balloc+0x2e>
 800ba98:	2000      	movs	r0, #0
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	6802      	ldr	r2, [r0, #0]
 800ba9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baa2:	2300      	movs	r3, #0
 800baa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baa8:	e7f7      	b.n	800ba9a <_Balloc+0x66>
 800baaa:	bf00      	nop
 800baac:	0800cf3d 	.word	0x0800cf3d
 800bab0:	0800cfbd 	.word	0x0800cfbd

0800bab4 <_Bfree>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	69c6      	ldr	r6, [r0, #28]
 800bab8:	4605      	mov	r5, r0
 800baba:	460c      	mov	r4, r1
 800babc:	b976      	cbnz	r6, 800badc <_Bfree+0x28>
 800babe:	2010      	movs	r0, #16
 800bac0:	f7ff ffb0 	bl	800ba24 <malloc>
 800bac4:	4602      	mov	r2, r0
 800bac6:	61e8      	str	r0, [r5, #28]
 800bac8:	b920      	cbnz	r0, 800bad4 <_Bfree+0x20>
 800baca:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <_Bfree+0x3c>)
 800bacc:	4809      	ldr	r0, [pc, #36]	; (800baf4 <_Bfree+0x40>)
 800bace:	218f      	movs	r1, #143	; 0x8f
 800bad0:	f000 fd4c 	bl	800c56c <__assert_func>
 800bad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bad8:	6006      	str	r6, [r0, #0]
 800bada:	60c6      	str	r6, [r0, #12]
 800badc:	b13c      	cbz	r4, 800baee <_Bfree+0x3a>
 800bade:	69eb      	ldr	r3, [r5, #28]
 800bae0:	6862      	ldr	r2, [r4, #4]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bae8:	6021      	str	r1, [r4, #0]
 800baea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	0800cf3d 	.word	0x0800cf3d
 800baf4:	0800cfbd 	.word	0x0800cfbd

0800baf8 <__multadd>:
 800baf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafc:	690d      	ldr	r5, [r1, #16]
 800bafe:	4607      	mov	r7, r0
 800bb00:	460c      	mov	r4, r1
 800bb02:	461e      	mov	r6, r3
 800bb04:	f101 0c14 	add.w	ip, r1, #20
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb0e:	b299      	uxth	r1, r3
 800bb10:	fb02 6101 	mla	r1, r2, r1, r6
 800bb14:	0c1e      	lsrs	r6, r3, #16
 800bb16:	0c0b      	lsrs	r3, r1, #16
 800bb18:	fb02 3306 	mla	r3, r2, r6, r3
 800bb1c:	b289      	uxth	r1, r1
 800bb1e:	3001      	adds	r0, #1
 800bb20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb24:	4285      	cmp	r5, r0
 800bb26:	f84c 1b04 	str.w	r1, [ip], #4
 800bb2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb2e:	dcec      	bgt.n	800bb0a <__multadd+0x12>
 800bb30:	b30e      	cbz	r6, 800bb76 <__multadd+0x7e>
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	42ab      	cmp	r3, r5
 800bb36:	dc19      	bgt.n	800bb6c <__multadd+0x74>
 800bb38:	6861      	ldr	r1, [r4, #4]
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	3101      	adds	r1, #1
 800bb3e:	f7ff ff79 	bl	800ba34 <_Balloc>
 800bb42:	4680      	mov	r8, r0
 800bb44:	b928      	cbnz	r0, 800bb52 <__multadd+0x5a>
 800bb46:	4602      	mov	r2, r0
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <__multadd+0x84>)
 800bb4a:	480d      	ldr	r0, [pc, #52]	; (800bb80 <__multadd+0x88>)
 800bb4c:	21ba      	movs	r1, #186	; 0xba
 800bb4e:	f000 fd0d 	bl	800c56c <__assert_func>
 800bb52:	6922      	ldr	r2, [r4, #16]
 800bb54:	3202      	adds	r2, #2
 800bb56:	f104 010c 	add.w	r1, r4, #12
 800bb5a:	0092      	lsls	r2, r2, #2
 800bb5c:	300c      	adds	r0, #12
 800bb5e:	f7ff f88a 	bl	800ac76 <memcpy>
 800bb62:	4621      	mov	r1, r4
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff ffa5 	bl	800bab4 <_Bfree>
 800bb6a:	4644      	mov	r4, r8
 800bb6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb70:	3501      	adds	r5, #1
 800bb72:	615e      	str	r6, [r3, #20]
 800bb74:	6125      	str	r5, [r4, #16]
 800bb76:	4620      	mov	r0, r4
 800bb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7c:	0800cfac 	.word	0x0800cfac
 800bb80:	0800cfbd 	.word	0x0800cfbd

0800bb84 <__hi0bits>:
 800bb84:	0c03      	lsrs	r3, r0, #16
 800bb86:	041b      	lsls	r3, r3, #16
 800bb88:	b9d3      	cbnz	r3, 800bbc0 <__hi0bits+0x3c>
 800bb8a:	0400      	lsls	r0, r0, #16
 800bb8c:	2310      	movs	r3, #16
 800bb8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb92:	bf04      	itt	eq
 800bb94:	0200      	lsleq	r0, r0, #8
 800bb96:	3308      	addeq	r3, #8
 800bb98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb9c:	bf04      	itt	eq
 800bb9e:	0100      	lsleq	r0, r0, #4
 800bba0:	3304      	addeq	r3, #4
 800bba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bba6:	bf04      	itt	eq
 800bba8:	0080      	lsleq	r0, r0, #2
 800bbaa:	3302      	addeq	r3, #2
 800bbac:	2800      	cmp	r0, #0
 800bbae:	db05      	blt.n	800bbbc <__hi0bits+0x38>
 800bbb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbb4:	f103 0301 	add.w	r3, r3, #1
 800bbb8:	bf08      	it	eq
 800bbba:	2320      	moveq	r3, #32
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	4770      	bx	lr
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e7e4      	b.n	800bb8e <__hi0bits+0xa>

0800bbc4 <__lo0bits>:
 800bbc4:	6803      	ldr	r3, [r0, #0]
 800bbc6:	f013 0207 	ands.w	r2, r3, #7
 800bbca:	d00c      	beq.n	800bbe6 <__lo0bits+0x22>
 800bbcc:	07d9      	lsls	r1, r3, #31
 800bbce:	d422      	bmi.n	800bc16 <__lo0bits+0x52>
 800bbd0:	079a      	lsls	r2, r3, #30
 800bbd2:	bf49      	itett	mi
 800bbd4:	085b      	lsrmi	r3, r3, #1
 800bbd6:	089b      	lsrpl	r3, r3, #2
 800bbd8:	6003      	strmi	r3, [r0, #0]
 800bbda:	2201      	movmi	r2, #1
 800bbdc:	bf5c      	itt	pl
 800bbde:	6003      	strpl	r3, [r0, #0]
 800bbe0:	2202      	movpl	r2, #2
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4770      	bx	lr
 800bbe6:	b299      	uxth	r1, r3
 800bbe8:	b909      	cbnz	r1, 800bbee <__lo0bits+0x2a>
 800bbea:	0c1b      	lsrs	r3, r3, #16
 800bbec:	2210      	movs	r2, #16
 800bbee:	b2d9      	uxtb	r1, r3
 800bbf0:	b909      	cbnz	r1, 800bbf6 <__lo0bits+0x32>
 800bbf2:	3208      	adds	r2, #8
 800bbf4:	0a1b      	lsrs	r3, r3, #8
 800bbf6:	0719      	lsls	r1, r3, #28
 800bbf8:	bf04      	itt	eq
 800bbfa:	091b      	lsreq	r3, r3, #4
 800bbfc:	3204      	addeq	r2, #4
 800bbfe:	0799      	lsls	r1, r3, #30
 800bc00:	bf04      	itt	eq
 800bc02:	089b      	lsreq	r3, r3, #2
 800bc04:	3202      	addeq	r2, #2
 800bc06:	07d9      	lsls	r1, r3, #31
 800bc08:	d403      	bmi.n	800bc12 <__lo0bits+0x4e>
 800bc0a:	085b      	lsrs	r3, r3, #1
 800bc0c:	f102 0201 	add.w	r2, r2, #1
 800bc10:	d003      	beq.n	800bc1a <__lo0bits+0x56>
 800bc12:	6003      	str	r3, [r0, #0]
 800bc14:	e7e5      	b.n	800bbe2 <__lo0bits+0x1e>
 800bc16:	2200      	movs	r2, #0
 800bc18:	e7e3      	b.n	800bbe2 <__lo0bits+0x1e>
 800bc1a:	2220      	movs	r2, #32
 800bc1c:	e7e1      	b.n	800bbe2 <__lo0bits+0x1e>
	...

0800bc20 <__i2b>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	2101      	movs	r1, #1
 800bc26:	f7ff ff05 	bl	800ba34 <_Balloc>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	b928      	cbnz	r0, 800bc3a <__i2b+0x1a>
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <__i2b+0x24>)
 800bc30:	4805      	ldr	r0, [pc, #20]	; (800bc48 <__i2b+0x28>)
 800bc32:	f240 1145 	movw	r1, #325	; 0x145
 800bc36:	f000 fc99 	bl	800c56c <__assert_func>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	6144      	str	r4, [r0, #20]
 800bc3e:	6103      	str	r3, [r0, #16]
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	bf00      	nop
 800bc44:	0800cfac 	.word	0x0800cfac
 800bc48:	0800cfbd 	.word	0x0800cfbd

0800bc4c <__multiply>:
 800bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	4691      	mov	r9, r2
 800bc52:	690a      	ldr	r2, [r1, #16]
 800bc54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	bfb8      	it	lt
 800bc5c:	460b      	movlt	r3, r1
 800bc5e:	460c      	mov	r4, r1
 800bc60:	bfbc      	itt	lt
 800bc62:	464c      	movlt	r4, r9
 800bc64:	4699      	movlt	r9, r3
 800bc66:	6927      	ldr	r7, [r4, #16]
 800bc68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc6c:	68a3      	ldr	r3, [r4, #8]
 800bc6e:	6861      	ldr	r1, [r4, #4]
 800bc70:	eb07 060a 	add.w	r6, r7, sl
 800bc74:	42b3      	cmp	r3, r6
 800bc76:	b085      	sub	sp, #20
 800bc78:	bfb8      	it	lt
 800bc7a:	3101      	addlt	r1, #1
 800bc7c:	f7ff feda 	bl	800ba34 <_Balloc>
 800bc80:	b930      	cbnz	r0, 800bc90 <__multiply+0x44>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4b44      	ldr	r3, [pc, #272]	; (800bd98 <__multiply+0x14c>)
 800bc86:	4845      	ldr	r0, [pc, #276]	; (800bd9c <__multiply+0x150>)
 800bc88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc8c:	f000 fc6e 	bl	800c56c <__assert_func>
 800bc90:	f100 0514 	add.w	r5, r0, #20
 800bc94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc98:	462b      	mov	r3, r5
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4543      	cmp	r3, r8
 800bc9e:	d321      	bcc.n	800bce4 <__multiply+0x98>
 800bca0:	f104 0314 	add.w	r3, r4, #20
 800bca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bca8:	f109 0314 	add.w	r3, r9, #20
 800bcac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcb0:	9202      	str	r2, [sp, #8]
 800bcb2:	1b3a      	subs	r2, r7, r4
 800bcb4:	3a15      	subs	r2, #21
 800bcb6:	f022 0203 	bic.w	r2, r2, #3
 800bcba:	3204      	adds	r2, #4
 800bcbc:	f104 0115 	add.w	r1, r4, #21
 800bcc0:	428f      	cmp	r7, r1
 800bcc2:	bf38      	it	cc
 800bcc4:	2204      	movcc	r2, #4
 800bcc6:	9201      	str	r2, [sp, #4]
 800bcc8:	9a02      	ldr	r2, [sp, #8]
 800bcca:	9303      	str	r3, [sp, #12]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d80c      	bhi.n	800bcea <__multiply+0x9e>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	dd03      	ble.n	800bcdc <__multiply+0x90>
 800bcd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d05b      	beq.n	800bd94 <__multiply+0x148>
 800bcdc:	6106      	str	r6, [r0, #16]
 800bcde:	b005      	add	sp, #20
 800bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce4:	f843 2b04 	str.w	r2, [r3], #4
 800bce8:	e7d8      	b.n	800bc9c <__multiply+0x50>
 800bcea:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcee:	f1ba 0f00 	cmp.w	sl, #0
 800bcf2:	d024      	beq.n	800bd3e <__multiply+0xf2>
 800bcf4:	f104 0e14 	add.w	lr, r4, #20
 800bcf8:	46a9      	mov	r9, r5
 800bcfa:	f04f 0c00 	mov.w	ip, #0
 800bcfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd02:	f8d9 1000 	ldr.w	r1, [r9]
 800bd06:	fa1f fb82 	uxth.w	fp, r2
 800bd0a:	b289      	uxth	r1, r1
 800bd0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd14:	f8d9 2000 	ldr.w	r2, [r9]
 800bd18:	4461      	add	r1, ip
 800bd1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd26:	b289      	uxth	r1, r1
 800bd28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd2c:	4577      	cmp	r7, lr
 800bd2e:	f849 1b04 	str.w	r1, [r9], #4
 800bd32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd36:	d8e2      	bhi.n	800bcfe <__multiply+0xb2>
 800bd38:	9a01      	ldr	r2, [sp, #4]
 800bd3a:	f845 c002 	str.w	ip, [r5, r2]
 800bd3e:	9a03      	ldr	r2, [sp, #12]
 800bd40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd44:	3304      	adds	r3, #4
 800bd46:	f1b9 0f00 	cmp.w	r9, #0
 800bd4a:	d021      	beq.n	800bd90 <__multiply+0x144>
 800bd4c:	6829      	ldr	r1, [r5, #0]
 800bd4e:	f104 0c14 	add.w	ip, r4, #20
 800bd52:	46ae      	mov	lr, r5
 800bd54:	f04f 0a00 	mov.w	sl, #0
 800bd58:	f8bc b000 	ldrh.w	fp, [ip]
 800bd5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd60:	fb09 220b 	mla	r2, r9, fp, r2
 800bd64:	4452      	add	r2, sl
 800bd66:	b289      	uxth	r1, r1
 800bd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd6c:	f84e 1b04 	str.w	r1, [lr], #4
 800bd70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd78:	f8be 1000 	ldrh.w	r1, [lr]
 800bd7c:	fb09 110a 	mla	r1, r9, sl, r1
 800bd80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd84:	4567      	cmp	r7, ip
 800bd86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd8a:	d8e5      	bhi.n	800bd58 <__multiply+0x10c>
 800bd8c:	9a01      	ldr	r2, [sp, #4]
 800bd8e:	50a9      	str	r1, [r5, r2]
 800bd90:	3504      	adds	r5, #4
 800bd92:	e799      	b.n	800bcc8 <__multiply+0x7c>
 800bd94:	3e01      	subs	r6, #1
 800bd96:	e79b      	b.n	800bcd0 <__multiply+0x84>
 800bd98:	0800cfac 	.word	0x0800cfac
 800bd9c:	0800cfbd 	.word	0x0800cfbd

0800bda0 <__pow5mult>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	4615      	mov	r5, r2
 800bda6:	f012 0203 	ands.w	r2, r2, #3
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	d007      	beq.n	800bdc0 <__pow5mult+0x20>
 800bdb0:	4c25      	ldr	r4, [pc, #148]	; (800be48 <__pow5mult+0xa8>)
 800bdb2:	3a01      	subs	r2, #1
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdba:	f7ff fe9d 	bl	800baf8 <__multadd>
 800bdbe:	4607      	mov	r7, r0
 800bdc0:	10ad      	asrs	r5, r5, #2
 800bdc2:	d03d      	beq.n	800be40 <__pow5mult+0xa0>
 800bdc4:	69f4      	ldr	r4, [r6, #28]
 800bdc6:	b97c      	cbnz	r4, 800bde8 <__pow5mult+0x48>
 800bdc8:	2010      	movs	r0, #16
 800bdca:	f7ff fe2b 	bl	800ba24 <malloc>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	61f0      	str	r0, [r6, #28]
 800bdd2:	b928      	cbnz	r0, 800bde0 <__pow5mult+0x40>
 800bdd4:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <__pow5mult+0xac>)
 800bdd6:	481e      	ldr	r0, [pc, #120]	; (800be50 <__pow5mult+0xb0>)
 800bdd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bddc:	f000 fbc6 	bl	800c56c <__assert_func>
 800bde0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bde4:	6004      	str	r4, [r0, #0]
 800bde6:	60c4      	str	r4, [r0, #12]
 800bde8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdf0:	b94c      	cbnz	r4, 800be06 <__pow5mult+0x66>
 800bdf2:	f240 2171 	movw	r1, #625	; 0x271
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7ff ff12 	bl	800bc20 <__i2b>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800be02:	4604      	mov	r4, r0
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	f04f 0900 	mov.w	r9, #0
 800be0a:	07eb      	lsls	r3, r5, #31
 800be0c:	d50a      	bpl.n	800be24 <__pow5mult+0x84>
 800be0e:	4639      	mov	r1, r7
 800be10:	4622      	mov	r2, r4
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ff1a 	bl	800bc4c <__multiply>
 800be18:	4639      	mov	r1, r7
 800be1a:	4680      	mov	r8, r0
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7ff fe49 	bl	800bab4 <_Bfree>
 800be22:	4647      	mov	r7, r8
 800be24:	106d      	asrs	r5, r5, #1
 800be26:	d00b      	beq.n	800be40 <__pow5mult+0xa0>
 800be28:	6820      	ldr	r0, [r4, #0]
 800be2a:	b938      	cbnz	r0, 800be3c <__pow5mult+0x9c>
 800be2c:	4622      	mov	r2, r4
 800be2e:	4621      	mov	r1, r4
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ff0b 	bl	800bc4c <__multiply>
 800be36:	6020      	str	r0, [r4, #0]
 800be38:	f8c0 9000 	str.w	r9, [r0]
 800be3c:	4604      	mov	r4, r0
 800be3e:	e7e4      	b.n	800be0a <__pow5mult+0x6a>
 800be40:	4638      	mov	r0, r7
 800be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be46:	bf00      	nop
 800be48:	0800d108 	.word	0x0800d108
 800be4c:	0800cf3d 	.word	0x0800cf3d
 800be50:	0800cfbd 	.word	0x0800cfbd

0800be54 <__lshift>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	6849      	ldr	r1, [r1, #4]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be62:	68a3      	ldr	r3, [r4, #8]
 800be64:	4607      	mov	r7, r0
 800be66:	4691      	mov	r9, r2
 800be68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be6c:	f108 0601 	add.w	r6, r8, #1
 800be70:	42b3      	cmp	r3, r6
 800be72:	db0b      	blt.n	800be8c <__lshift+0x38>
 800be74:	4638      	mov	r0, r7
 800be76:	f7ff fddd 	bl	800ba34 <_Balloc>
 800be7a:	4605      	mov	r5, r0
 800be7c:	b948      	cbnz	r0, 800be92 <__lshift+0x3e>
 800be7e:	4602      	mov	r2, r0
 800be80:	4b28      	ldr	r3, [pc, #160]	; (800bf24 <__lshift+0xd0>)
 800be82:	4829      	ldr	r0, [pc, #164]	; (800bf28 <__lshift+0xd4>)
 800be84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be88:	f000 fb70 	bl	800c56c <__assert_func>
 800be8c:	3101      	adds	r1, #1
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	e7ee      	b.n	800be70 <__lshift+0x1c>
 800be92:	2300      	movs	r3, #0
 800be94:	f100 0114 	add.w	r1, r0, #20
 800be98:	f100 0210 	add.w	r2, r0, #16
 800be9c:	4618      	mov	r0, r3
 800be9e:	4553      	cmp	r3, sl
 800bea0:	db33      	blt.n	800bf0a <__lshift+0xb6>
 800bea2:	6920      	ldr	r0, [r4, #16]
 800bea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bea8:	f104 0314 	add.w	r3, r4, #20
 800beac:	f019 091f 	ands.w	r9, r9, #31
 800beb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800beb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800beb8:	d02b      	beq.n	800bf12 <__lshift+0xbe>
 800beba:	f1c9 0e20 	rsb	lr, r9, #32
 800bebe:	468a      	mov	sl, r1
 800bec0:	2200      	movs	r2, #0
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	fa00 f009 	lsl.w	r0, r0, r9
 800bec8:	4310      	orrs	r0, r2
 800beca:	f84a 0b04 	str.w	r0, [sl], #4
 800bece:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed2:	459c      	cmp	ip, r3
 800bed4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bed8:	d8f3      	bhi.n	800bec2 <__lshift+0x6e>
 800beda:	ebac 0304 	sub.w	r3, ip, r4
 800bede:	3b15      	subs	r3, #21
 800bee0:	f023 0303 	bic.w	r3, r3, #3
 800bee4:	3304      	adds	r3, #4
 800bee6:	f104 0015 	add.w	r0, r4, #21
 800beea:	4584      	cmp	ip, r0
 800beec:	bf38      	it	cc
 800beee:	2304      	movcc	r3, #4
 800bef0:	50ca      	str	r2, [r1, r3]
 800bef2:	b10a      	cbz	r2, 800bef8 <__lshift+0xa4>
 800bef4:	f108 0602 	add.w	r6, r8, #2
 800bef8:	3e01      	subs	r6, #1
 800befa:	4638      	mov	r0, r7
 800befc:	612e      	str	r6, [r5, #16]
 800befe:	4621      	mov	r1, r4
 800bf00:	f7ff fdd8 	bl	800bab4 <_Bfree>
 800bf04:	4628      	mov	r0, r5
 800bf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf0e:	3301      	adds	r3, #1
 800bf10:	e7c5      	b.n	800be9e <__lshift+0x4a>
 800bf12:	3904      	subs	r1, #4
 800bf14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf18:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf1c:	459c      	cmp	ip, r3
 800bf1e:	d8f9      	bhi.n	800bf14 <__lshift+0xc0>
 800bf20:	e7ea      	b.n	800bef8 <__lshift+0xa4>
 800bf22:	bf00      	nop
 800bf24:	0800cfac 	.word	0x0800cfac
 800bf28:	0800cfbd 	.word	0x0800cfbd

0800bf2c <__mcmp>:
 800bf2c:	b530      	push	{r4, r5, lr}
 800bf2e:	6902      	ldr	r2, [r0, #16]
 800bf30:	690c      	ldr	r4, [r1, #16]
 800bf32:	1b12      	subs	r2, r2, r4
 800bf34:	d10e      	bne.n	800bf54 <__mcmp+0x28>
 800bf36:	f100 0314 	add.w	r3, r0, #20
 800bf3a:	3114      	adds	r1, #20
 800bf3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf4c:	42a5      	cmp	r5, r4
 800bf4e:	d003      	beq.n	800bf58 <__mcmp+0x2c>
 800bf50:	d305      	bcc.n	800bf5e <__mcmp+0x32>
 800bf52:	2201      	movs	r2, #1
 800bf54:	4610      	mov	r0, r2
 800bf56:	bd30      	pop	{r4, r5, pc}
 800bf58:	4283      	cmp	r3, r0
 800bf5a:	d3f3      	bcc.n	800bf44 <__mcmp+0x18>
 800bf5c:	e7fa      	b.n	800bf54 <__mcmp+0x28>
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf62:	e7f7      	b.n	800bf54 <__mcmp+0x28>

0800bf64 <__mdiff>:
 800bf64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	460c      	mov	r4, r1
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4690      	mov	r8, r2
 800bf72:	f7ff ffdb 	bl	800bf2c <__mcmp>
 800bf76:	1e05      	subs	r5, r0, #0
 800bf78:	d110      	bne.n	800bf9c <__mdiff+0x38>
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff fd59 	bl	800ba34 <_Balloc>
 800bf82:	b930      	cbnz	r0, 800bf92 <__mdiff+0x2e>
 800bf84:	4b3a      	ldr	r3, [pc, #232]	; (800c070 <__mdiff+0x10c>)
 800bf86:	4602      	mov	r2, r0
 800bf88:	f240 2137 	movw	r1, #567	; 0x237
 800bf8c:	4839      	ldr	r0, [pc, #228]	; (800c074 <__mdiff+0x110>)
 800bf8e:	f000 faed 	bl	800c56c <__assert_func>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	bfa4      	itt	ge
 800bf9e:	4643      	movge	r3, r8
 800bfa0:	46a0      	movge	r8, r4
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfa8:	bfa6      	itte	ge
 800bfaa:	461c      	movge	r4, r3
 800bfac:	2500      	movge	r5, #0
 800bfae:	2501      	movlt	r5, #1
 800bfb0:	f7ff fd40 	bl	800ba34 <_Balloc>
 800bfb4:	b920      	cbnz	r0, 800bfc0 <__mdiff+0x5c>
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <__mdiff+0x10c>)
 800bfb8:	4602      	mov	r2, r0
 800bfba:	f240 2145 	movw	r1, #581	; 0x245
 800bfbe:	e7e5      	b.n	800bf8c <__mdiff+0x28>
 800bfc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfc4:	6926      	ldr	r6, [r4, #16]
 800bfc6:	60c5      	str	r5, [r0, #12]
 800bfc8:	f104 0914 	add.w	r9, r4, #20
 800bfcc:	f108 0514 	add.w	r5, r8, #20
 800bfd0:	f100 0e14 	add.w	lr, r0, #20
 800bfd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfdc:	f108 0210 	add.w	r2, r8, #16
 800bfe0:	46f2      	mov	sl, lr
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfec:	fa11 f88b 	uxtah	r8, r1, fp
 800bff0:	b299      	uxth	r1, r3
 800bff2:	0c1b      	lsrs	r3, r3, #16
 800bff4:	eba8 0801 	sub.w	r8, r8, r1
 800bff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bffc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c000:	fa1f f888 	uxth.w	r8, r8
 800c004:	1419      	asrs	r1, r3, #16
 800c006:	454e      	cmp	r6, r9
 800c008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c00c:	f84a 3b04 	str.w	r3, [sl], #4
 800c010:	d8e8      	bhi.n	800bfe4 <__mdiff+0x80>
 800c012:	1b33      	subs	r3, r6, r4
 800c014:	3b15      	subs	r3, #21
 800c016:	f023 0303 	bic.w	r3, r3, #3
 800c01a:	3304      	adds	r3, #4
 800c01c:	3415      	adds	r4, #21
 800c01e:	42a6      	cmp	r6, r4
 800c020:	bf38      	it	cc
 800c022:	2304      	movcc	r3, #4
 800c024:	441d      	add	r5, r3
 800c026:	4473      	add	r3, lr
 800c028:	469e      	mov	lr, r3
 800c02a:	462e      	mov	r6, r5
 800c02c:	4566      	cmp	r6, ip
 800c02e:	d30e      	bcc.n	800c04e <__mdiff+0xea>
 800c030:	f10c 0203 	add.w	r2, ip, #3
 800c034:	1b52      	subs	r2, r2, r5
 800c036:	f022 0203 	bic.w	r2, r2, #3
 800c03a:	3d03      	subs	r5, #3
 800c03c:	45ac      	cmp	ip, r5
 800c03e:	bf38      	it	cc
 800c040:	2200      	movcc	r2, #0
 800c042:	4413      	add	r3, r2
 800c044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c048:	b17a      	cbz	r2, 800c06a <__mdiff+0x106>
 800c04a:	6107      	str	r7, [r0, #16]
 800c04c:	e7a4      	b.n	800bf98 <__mdiff+0x34>
 800c04e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c052:	fa11 f288 	uxtah	r2, r1, r8
 800c056:	1414      	asrs	r4, r2, #16
 800c058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c05c:	b292      	uxth	r2, r2
 800c05e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c062:	f84e 2b04 	str.w	r2, [lr], #4
 800c066:	1421      	asrs	r1, r4, #16
 800c068:	e7e0      	b.n	800c02c <__mdiff+0xc8>
 800c06a:	3f01      	subs	r7, #1
 800c06c:	e7ea      	b.n	800c044 <__mdiff+0xe0>
 800c06e:	bf00      	nop
 800c070:	0800cfac 	.word	0x0800cfac
 800c074:	0800cfbd 	.word	0x0800cfbd

0800c078 <__d2b>:
 800c078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	460f      	mov	r7, r1
 800c07e:	2101      	movs	r1, #1
 800c080:	ec59 8b10 	vmov	r8, r9, d0
 800c084:	4616      	mov	r6, r2
 800c086:	f7ff fcd5 	bl	800ba34 <_Balloc>
 800c08a:	4604      	mov	r4, r0
 800c08c:	b930      	cbnz	r0, 800c09c <__d2b+0x24>
 800c08e:	4602      	mov	r2, r0
 800c090:	4b24      	ldr	r3, [pc, #144]	; (800c124 <__d2b+0xac>)
 800c092:	4825      	ldr	r0, [pc, #148]	; (800c128 <__d2b+0xb0>)
 800c094:	f240 310f 	movw	r1, #783	; 0x30f
 800c098:	f000 fa68 	bl	800c56c <__assert_func>
 800c09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0a4:	bb2d      	cbnz	r5, 800c0f2 <__d2b+0x7a>
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c0ac:	d026      	beq.n	800c0fc <__d2b+0x84>
 800c0ae:	4668      	mov	r0, sp
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	f7ff fd87 	bl	800bbc4 <__lo0bits>
 800c0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0ba:	b1e8      	cbz	r0, 800c0f8 <__d2b+0x80>
 800c0bc:	f1c0 0320 	rsb	r3, r0, #32
 800c0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	40c2      	lsrs	r2, r0
 800c0c8:	6163      	str	r3, [r4, #20]
 800c0ca:	9201      	str	r2, [sp, #4]
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	61a3      	str	r3, [r4, #24]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bf14      	ite	ne
 800c0d4:	2202      	movne	r2, #2
 800c0d6:	2201      	moveq	r2, #1
 800c0d8:	6122      	str	r2, [r4, #16]
 800c0da:	b1bd      	cbz	r5, 800c10c <__d2b+0x94>
 800c0dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0e0:	4405      	add	r5, r0
 800c0e2:	603d      	str	r5, [r7, #0]
 800c0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0e8:	6030      	str	r0, [r6, #0]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	b003      	add	sp, #12
 800c0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0f6:	e7d6      	b.n	800c0a6 <__d2b+0x2e>
 800c0f8:	6161      	str	r1, [r4, #20]
 800c0fa:	e7e7      	b.n	800c0cc <__d2b+0x54>
 800c0fc:	a801      	add	r0, sp, #4
 800c0fe:	f7ff fd61 	bl	800bbc4 <__lo0bits>
 800c102:	9b01      	ldr	r3, [sp, #4]
 800c104:	6163      	str	r3, [r4, #20]
 800c106:	3020      	adds	r0, #32
 800c108:	2201      	movs	r2, #1
 800c10a:	e7e5      	b.n	800c0d8 <__d2b+0x60>
 800c10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c114:	6038      	str	r0, [r7, #0]
 800c116:	6918      	ldr	r0, [r3, #16]
 800c118:	f7ff fd34 	bl	800bb84 <__hi0bits>
 800c11c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c120:	e7e2      	b.n	800c0e8 <__d2b+0x70>
 800c122:	bf00      	nop
 800c124:	0800cfac 	.word	0x0800cfac
 800c128:	0800cfbd 	.word	0x0800cfbd

0800c12c <__ssputs_r>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	688e      	ldr	r6, [r1, #8]
 800c132:	461f      	mov	r7, r3
 800c134:	42be      	cmp	r6, r7
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	4682      	mov	sl, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	4690      	mov	r8, r2
 800c13e:	d82c      	bhi.n	800c19a <__ssputs_r+0x6e>
 800c140:	898a      	ldrh	r2, [r1, #12]
 800c142:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c146:	d026      	beq.n	800c196 <__ssputs_r+0x6a>
 800c148:	6965      	ldr	r5, [r4, #20]
 800c14a:	6909      	ldr	r1, [r1, #16]
 800c14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c150:	eba3 0901 	sub.w	r9, r3, r1
 800c154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c158:	1c7b      	adds	r3, r7, #1
 800c15a:	444b      	add	r3, r9
 800c15c:	106d      	asrs	r5, r5, #1
 800c15e:	429d      	cmp	r5, r3
 800c160:	bf38      	it	cc
 800c162:	461d      	movcc	r5, r3
 800c164:	0553      	lsls	r3, r2, #21
 800c166:	d527      	bpl.n	800c1b8 <__ssputs_r+0x8c>
 800c168:	4629      	mov	r1, r5
 800c16a:	f7fd fedd 	bl	8009f28 <_malloc_r>
 800c16e:	4606      	mov	r6, r0
 800c170:	b360      	cbz	r0, 800c1cc <__ssputs_r+0xa0>
 800c172:	6921      	ldr	r1, [r4, #16]
 800c174:	464a      	mov	r2, r9
 800c176:	f7fe fd7e 	bl	800ac76 <memcpy>
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	6126      	str	r6, [r4, #16]
 800c188:	6165      	str	r5, [r4, #20]
 800c18a:	444e      	add	r6, r9
 800c18c:	eba5 0509 	sub.w	r5, r5, r9
 800c190:	6026      	str	r6, [r4, #0]
 800c192:	60a5      	str	r5, [r4, #8]
 800c194:	463e      	mov	r6, r7
 800c196:	42be      	cmp	r6, r7
 800c198:	d900      	bls.n	800c19c <__ssputs_r+0x70>
 800c19a:	463e      	mov	r6, r7
 800c19c:	6820      	ldr	r0, [r4, #0]
 800c19e:	4632      	mov	r2, r6
 800c1a0:	4641      	mov	r1, r8
 800c1a2:	f000 f9c9 	bl	800c538 <memmove>
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	1b9b      	subs	r3, r3, r6
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	4433      	add	r3, r6
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	f000 fa07 	bl	800c5cc <_realloc_r>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d1e0      	bne.n	800c186 <__ssputs_r+0x5a>
 800c1c4:	6921      	ldr	r1, [r4, #16]
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f7ff fbe0 	bl	800b98c <_free_r>
 800c1cc:	230c      	movs	r3, #12
 800c1ce:	f8ca 3000 	str.w	r3, [sl]
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d8:	81a3      	strh	r3, [r4, #12]
 800c1da:	f04f 30ff 	mov.w	r0, #4294967295
 800c1de:	e7e9      	b.n	800c1b4 <__ssputs_r+0x88>

0800c1e0 <_svfiprintf_r>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	4698      	mov	r8, r3
 800c1e6:	898b      	ldrh	r3, [r1, #12]
 800c1e8:	061b      	lsls	r3, r3, #24
 800c1ea:	b09d      	sub	sp, #116	; 0x74
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	4614      	mov	r4, r2
 800c1f2:	d50e      	bpl.n	800c212 <_svfiprintf_r+0x32>
 800c1f4:	690b      	ldr	r3, [r1, #16]
 800c1f6:	b963      	cbnz	r3, 800c212 <_svfiprintf_r+0x32>
 800c1f8:	2140      	movs	r1, #64	; 0x40
 800c1fa:	f7fd fe95 	bl	8009f28 <_malloc_r>
 800c1fe:	6028      	str	r0, [r5, #0]
 800c200:	6128      	str	r0, [r5, #16]
 800c202:	b920      	cbnz	r0, 800c20e <_svfiprintf_r+0x2e>
 800c204:	230c      	movs	r3, #12
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e0d0      	b.n	800c3b0 <_svfiprintf_r+0x1d0>
 800c20e:	2340      	movs	r3, #64	; 0x40
 800c210:	616b      	str	r3, [r5, #20]
 800c212:	2300      	movs	r3, #0
 800c214:	9309      	str	r3, [sp, #36]	; 0x24
 800c216:	2320      	movs	r3, #32
 800c218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c220:	2330      	movs	r3, #48	; 0x30
 800c222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3c8 <_svfiprintf_r+0x1e8>
 800c226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c22a:	f04f 0901 	mov.w	r9, #1
 800c22e:	4623      	mov	r3, r4
 800c230:	469a      	mov	sl, r3
 800c232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c236:	b10a      	cbz	r2, 800c23c <_svfiprintf_r+0x5c>
 800c238:	2a25      	cmp	r2, #37	; 0x25
 800c23a:	d1f9      	bne.n	800c230 <_svfiprintf_r+0x50>
 800c23c:	ebba 0b04 	subs.w	fp, sl, r4
 800c240:	d00b      	beq.n	800c25a <_svfiprintf_r+0x7a>
 800c242:	465b      	mov	r3, fp
 800c244:	4622      	mov	r2, r4
 800c246:	4629      	mov	r1, r5
 800c248:	4638      	mov	r0, r7
 800c24a:	f7ff ff6f 	bl	800c12c <__ssputs_r>
 800c24e:	3001      	adds	r0, #1
 800c250:	f000 80a9 	beq.w	800c3a6 <_svfiprintf_r+0x1c6>
 800c254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c256:	445a      	add	r2, fp
 800c258:	9209      	str	r2, [sp, #36]	; 0x24
 800c25a:	f89a 3000 	ldrb.w	r3, [sl]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 80a1 	beq.w	800c3a6 <_svfiprintf_r+0x1c6>
 800c264:	2300      	movs	r3, #0
 800c266:	f04f 32ff 	mov.w	r2, #4294967295
 800c26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c26e:	f10a 0a01 	add.w	sl, sl, #1
 800c272:	9304      	str	r3, [sp, #16]
 800c274:	9307      	str	r3, [sp, #28]
 800c276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c27a:	931a      	str	r3, [sp, #104]	; 0x68
 800c27c:	4654      	mov	r4, sl
 800c27e:	2205      	movs	r2, #5
 800c280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c284:	4850      	ldr	r0, [pc, #320]	; (800c3c8 <_svfiprintf_r+0x1e8>)
 800c286:	f7f3 ffbb 	bl	8000200 <memchr>
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	b9d8      	cbnz	r0, 800c2c6 <_svfiprintf_r+0xe6>
 800c28e:	06d0      	lsls	r0, r2, #27
 800c290:	bf44      	itt	mi
 800c292:	2320      	movmi	r3, #32
 800c294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c298:	0711      	lsls	r1, r2, #28
 800c29a:	bf44      	itt	mi
 800c29c:	232b      	movmi	r3, #43	; 0x2b
 800c29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a8:	d015      	beq.n	800c2d6 <_svfiprintf_r+0xf6>
 800c2aa:	9a07      	ldr	r2, [sp, #28]
 800c2ac:	4654      	mov	r4, sl
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	f04f 0c0a 	mov.w	ip, #10
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ba:	3b30      	subs	r3, #48	; 0x30
 800c2bc:	2b09      	cmp	r3, #9
 800c2be:	d94d      	bls.n	800c35c <_svfiprintf_r+0x17c>
 800c2c0:	b1b0      	cbz	r0, 800c2f0 <_svfiprintf_r+0x110>
 800c2c2:	9207      	str	r2, [sp, #28]
 800c2c4:	e014      	b.n	800c2f0 <_svfiprintf_r+0x110>
 800c2c6:	eba0 0308 	sub.w	r3, r0, r8
 800c2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	46a2      	mov	sl, r4
 800c2d4:	e7d2      	b.n	800c27c <_svfiprintf_r+0x9c>
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	1d19      	adds	r1, r3, #4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	9103      	str	r1, [sp, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfbb      	ittet	lt
 800c2e2:	425b      	neglt	r3, r3
 800c2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e8:	9307      	strge	r3, [sp, #28]
 800c2ea:	9307      	strlt	r3, [sp, #28]
 800c2ec:	bfb8      	it	lt
 800c2ee:	9204      	strlt	r2, [sp, #16]
 800c2f0:	7823      	ldrb	r3, [r4, #0]
 800c2f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f4:	d10c      	bne.n	800c310 <_svfiprintf_r+0x130>
 800c2f6:	7863      	ldrb	r3, [r4, #1]
 800c2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fa:	d134      	bne.n	800c366 <_svfiprintf_r+0x186>
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	1d1a      	adds	r2, r3, #4
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	9203      	str	r2, [sp, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	bfb8      	it	lt
 800c308:	f04f 33ff 	movlt.w	r3, #4294967295
 800c30c:	3402      	adds	r4, #2
 800c30e:	9305      	str	r3, [sp, #20]
 800c310:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3d8 <_svfiprintf_r+0x1f8>
 800c314:	7821      	ldrb	r1, [r4, #0]
 800c316:	2203      	movs	r2, #3
 800c318:	4650      	mov	r0, sl
 800c31a:	f7f3 ff71 	bl	8000200 <memchr>
 800c31e:	b138      	cbz	r0, 800c330 <_svfiprintf_r+0x150>
 800c320:	9b04      	ldr	r3, [sp, #16]
 800c322:	eba0 000a 	sub.w	r0, r0, sl
 800c326:	2240      	movs	r2, #64	; 0x40
 800c328:	4082      	lsls	r2, r0
 800c32a:	4313      	orrs	r3, r2
 800c32c:	3401      	adds	r4, #1
 800c32e:	9304      	str	r3, [sp, #16]
 800c330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c334:	4825      	ldr	r0, [pc, #148]	; (800c3cc <_svfiprintf_r+0x1ec>)
 800c336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c33a:	2206      	movs	r2, #6
 800c33c:	f7f3 ff60 	bl	8000200 <memchr>
 800c340:	2800      	cmp	r0, #0
 800c342:	d038      	beq.n	800c3b6 <_svfiprintf_r+0x1d6>
 800c344:	4b22      	ldr	r3, [pc, #136]	; (800c3d0 <_svfiprintf_r+0x1f0>)
 800c346:	bb1b      	cbnz	r3, 800c390 <_svfiprintf_r+0x1b0>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	3307      	adds	r3, #7
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	9303      	str	r3, [sp, #12]
 800c354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c356:	4433      	add	r3, r6
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	e768      	b.n	800c22e <_svfiprintf_r+0x4e>
 800c35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c360:	460c      	mov	r4, r1
 800c362:	2001      	movs	r0, #1
 800c364:	e7a6      	b.n	800c2b4 <_svfiprintf_r+0xd4>
 800c366:	2300      	movs	r3, #0
 800c368:	3401      	adds	r4, #1
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f04f 0c0a 	mov.w	ip, #10
 800c372:	4620      	mov	r0, r4
 800c374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c378:	3a30      	subs	r2, #48	; 0x30
 800c37a:	2a09      	cmp	r2, #9
 800c37c:	d903      	bls.n	800c386 <_svfiprintf_r+0x1a6>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0c6      	beq.n	800c310 <_svfiprintf_r+0x130>
 800c382:	9105      	str	r1, [sp, #20]
 800c384:	e7c4      	b.n	800c310 <_svfiprintf_r+0x130>
 800c386:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38a:	4604      	mov	r4, r0
 800c38c:	2301      	movs	r3, #1
 800c38e:	e7f0      	b.n	800c372 <_svfiprintf_r+0x192>
 800c390:	ab03      	add	r3, sp, #12
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	462a      	mov	r2, r5
 800c396:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <_svfiprintf_r+0x1f4>)
 800c398:	a904      	add	r1, sp, #16
 800c39a:	4638      	mov	r0, r7
 800c39c:	f7fd fef0 	bl	800a180 <_printf_float>
 800c3a0:	1c42      	adds	r2, r0, #1
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	d1d6      	bne.n	800c354 <_svfiprintf_r+0x174>
 800c3a6:	89ab      	ldrh	r3, [r5, #12]
 800c3a8:	065b      	lsls	r3, r3, #25
 800c3aa:	f53f af2d 	bmi.w	800c208 <_svfiprintf_r+0x28>
 800c3ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3b0:	b01d      	add	sp, #116	; 0x74
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <_svfiprintf_r+0x1f4>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7fe f981 	bl	800a6c8 <_printf_i>
 800c3c6:	e7eb      	b.n	800c3a0 <_svfiprintf_r+0x1c0>
 800c3c8:	0800d114 	.word	0x0800d114
 800c3cc:	0800d11e 	.word	0x0800d11e
 800c3d0:	0800a181 	.word	0x0800a181
 800c3d4:	0800c12d 	.word	0x0800c12d
 800c3d8:	0800d11a 	.word	0x0800d11a

0800c3dc <__sflush_r>:
 800c3dc:	898a      	ldrh	r2, [r1, #12]
 800c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	0710      	lsls	r0, r2, #28
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	d458      	bmi.n	800c49c <__sflush_r+0xc0>
 800c3ea:	684b      	ldr	r3, [r1, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dc05      	bgt.n	800c3fc <__sflush_r+0x20>
 800c3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	dc02      	bgt.n	800c3fc <__sflush_r+0x20>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3fe:	2e00      	cmp	r6, #0
 800c400:	d0f9      	beq.n	800c3f6 <__sflush_r+0x1a>
 800c402:	2300      	movs	r3, #0
 800c404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c408:	682f      	ldr	r7, [r5, #0]
 800c40a:	6a21      	ldr	r1, [r4, #32]
 800c40c:	602b      	str	r3, [r5, #0]
 800c40e:	d032      	beq.n	800c476 <__sflush_r+0x9a>
 800c410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	075a      	lsls	r2, r3, #29
 800c416:	d505      	bpl.n	800c424 <__sflush_r+0x48>
 800c418:	6863      	ldr	r3, [r4, #4]
 800c41a:	1ac0      	subs	r0, r0, r3
 800c41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c41e:	b10b      	cbz	r3, 800c424 <__sflush_r+0x48>
 800c420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c422:	1ac0      	subs	r0, r0, r3
 800c424:	2300      	movs	r3, #0
 800c426:	4602      	mov	r2, r0
 800c428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c42a:	6a21      	ldr	r1, [r4, #32]
 800c42c:	4628      	mov	r0, r5
 800c42e:	47b0      	blx	r6
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	d106      	bne.n	800c444 <__sflush_r+0x68>
 800c436:	6829      	ldr	r1, [r5, #0]
 800c438:	291d      	cmp	r1, #29
 800c43a:	d82b      	bhi.n	800c494 <__sflush_r+0xb8>
 800c43c:	4a29      	ldr	r2, [pc, #164]	; (800c4e4 <__sflush_r+0x108>)
 800c43e:	410a      	asrs	r2, r1
 800c440:	07d6      	lsls	r6, r2, #31
 800c442:	d427      	bmi.n	800c494 <__sflush_r+0xb8>
 800c444:	2200      	movs	r2, #0
 800c446:	6062      	str	r2, [r4, #4]
 800c448:	04d9      	lsls	r1, r3, #19
 800c44a:	6922      	ldr	r2, [r4, #16]
 800c44c:	6022      	str	r2, [r4, #0]
 800c44e:	d504      	bpl.n	800c45a <__sflush_r+0x7e>
 800c450:	1c42      	adds	r2, r0, #1
 800c452:	d101      	bne.n	800c458 <__sflush_r+0x7c>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b903      	cbnz	r3, 800c45a <__sflush_r+0x7e>
 800c458:	6560      	str	r0, [r4, #84]	; 0x54
 800c45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c45c:	602f      	str	r7, [r5, #0]
 800c45e:	2900      	cmp	r1, #0
 800c460:	d0c9      	beq.n	800c3f6 <__sflush_r+0x1a>
 800c462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c466:	4299      	cmp	r1, r3
 800c468:	d002      	beq.n	800c470 <__sflush_r+0x94>
 800c46a:	4628      	mov	r0, r5
 800c46c:	f7ff fa8e 	bl	800b98c <_free_r>
 800c470:	2000      	movs	r0, #0
 800c472:	6360      	str	r0, [r4, #52]	; 0x34
 800c474:	e7c0      	b.n	800c3f8 <__sflush_r+0x1c>
 800c476:	2301      	movs	r3, #1
 800c478:	4628      	mov	r0, r5
 800c47a:	47b0      	blx	r6
 800c47c:	1c41      	adds	r1, r0, #1
 800c47e:	d1c8      	bne.n	800c412 <__sflush_r+0x36>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0c5      	beq.n	800c412 <__sflush_r+0x36>
 800c486:	2b1d      	cmp	r3, #29
 800c488:	d001      	beq.n	800c48e <__sflush_r+0xb2>
 800c48a:	2b16      	cmp	r3, #22
 800c48c:	d101      	bne.n	800c492 <__sflush_r+0xb6>
 800c48e:	602f      	str	r7, [r5, #0]
 800c490:	e7b1      	b.n	800c3f6 <__sflush_r+0x1a>
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c498:	81a3      	strh	r3, [r4, #12]
 800c49a:	e7ad      	b.n	800c3f8 <__sflush_r+0x1c>
 800c49c:	690f      	ldr	r7, [r1, #16]
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	d0a9      	beq.n	800c3f6 <__sflush_r+0x1a>
 800c4a2:	0793      	lsls	r3, r2, #30
 800c4a4:	680e      	ldr	r6, [r1, #0]
 800c4a6:	bf08      	it	eq
 800c4a8:	694b      	ldreq	r3, [r1, #20]
 800c4aa:	600f      	str	r7, [r1, #0]
 800c4ac:	bf18      	it	ne
 800c4ae:	2300      	movne	r3, #0
 800c4b0:	eba6 0807 	sub.w	r8, r6, r7
 800c4b4:	608b      	str	r3, [r1, #8]
 800c4b6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ba:	dd9c      	ble.n	800c3f6 <__sflush_r+0x1a>
 800c4bc:	6a21      	ldr	r1, [r4, #32]
 800c4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4c0:	4643      	mov	r3, r8
 800c4c2:	463a      	mov	r2, r7
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b0      	blx	r6
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dc06      	bgt.n	800c4da <__sflush_r+0xfe>
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	e78e      	b.n	800c3f8 <__sflush_r+0x1c>
 800c4da:	4407      	add	r7, r0
 800c4dc:	eba8 0800 	sub.w	r8, r8, r0
 800c4e0:	e7e9      	b.n	800c4b6 <__sflush_r+0xda>
 800c4e2:	bf00      	nop
 800c4e4:	dfbffffe 	.word	0xdfbffffe

0800c4e8 <_fflush_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	690b      	ldr	r3, [r1, #16]
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b913      	cbnz	r3, 800c4f8 <_fflush_r+0x10>
 800c4f2:	2500      	movs	r5, #0
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	b118      	cbz	r0, 800c502 <_fflush_r+0x1a>
 800c4fa:	6a03      	ldr	r3, [r0, #32]
 800c4fc:	b90b      	cbnz	r3, 800c502 <_fflush_r+0x1a>
 800c4fe:	f7fe fa91 	bl	800aa24 <__sinit>
 800c502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0f3      	beq.n	800c4f2 <_fflush_r+0xa>
 800c50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c50c:	07d0      	lsls	r0, r2, #31
 800c50e:	d404      	bmi.n	800c51a <_fflush_r+0x32>
 800c510:	0599      	lsls	r1, r3, #22
 800c512:	d402      	bmi.n	800c51a <_fflush_r+0x32>
 800c514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c516:	f7fe fbac 	bl	800ac72 <__retarget_lock_acquire_recursive>
 800c51a:	4628      	mov	r0, r5
 800c51c:	4621      	mov	r1, r4
 800c51e:	f7ff ff5d 	bl	800c3dc <__sflush_r>
 800c522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c524:	07da      	lsls	r2, r3, #31
 800c526:	4605      	mov	r5, r0
 800c528:	d4e4      	bmi.n	800c4f4 <_fflush_r+0xc>
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	059b      	lsls	r3, r3, #22
 800c52e:	d4e1      	bmi.n	800c4f4 <_fflush_r+0xc>
 800c530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c532:	f7fe fb9f 	bl	800ac74 <__retarget_lock_release_recursive>
 800c536:	e7dd      	b.n	800c4f4 <_fflush_r+0xc>

0800c538 <memmove>:
 800c538:	4288      	cmp	r0, r1
 800c53a:	b510      	push	{r4, lr}
 800c53c:	eb01 0402 	add.w	r4, r1, r2
 800c540:	d902      	bls.n	800c548 <memmove+0x10>
 800c542:	4284      	cmp	r4, r0
 800c544:	4623      	mov	r3, r4
 800c546:	d807      	bhi.n	800c558 <memmove+0x20>
 800c548:	1e43      	subs	r3, r0, #1
 800c54a:	42a1      	cmp	r1, r4
 800c54c:	d008      	beq.n	800c560 <memmove+0x28>
 800c54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c556:	e7f8      	b.n	800c54a <memmove+0x12>
 800c558:	4402      	add	r2, r0
 800c55a:	4601      	mov	r1, r0
 800c55c:	428a      	cmp	r2, r1
 800c55e:	d100      	bne.n	800c562 <memmove+0x2a>
 800c560:	bd10      	pop	{r4, pc}
 800c562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c56a:	e7f7      	b.n	800c55c <memmove+0x24>

0800c56c <__assert_func>:
 800c56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c56e:	4614      	mov	r4, r2
 800c570:	461a      	mov	r2, r3
 800c572:	4b09      	ldr	r3, [pc, #36]	; (800c598 <__assert_func+0x2c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4605      	mov	r5, r0
 800c578:	68d8      	ldr	r0, [r3, #12]
 800c57a:	b14c      	cbz	r4, 800c590 <__assert_func+0x24>
 800c57c:	4b07      	ldr	r3, [pc, #28]	; (800c59c <__assert_func+0x30>)
 800c57e:	9100      	str	r1, [sp, #0]
 800c580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c584:	4906      	ldr	r1, [pc, #24]	; (800c5a0 <__assert_func+0x34>)
 800c586:	462b      	mov	r3, r5
 800c588:	f000 f85c 	bl	800c644 <fiprintf>
 800c58c:	f000 f86c 	bl	800c668 <abort>
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <__assert_func+0x38>)
 800c592:	461c      	mov	r4, r3
 800c594:	e7f3      	b.n	800c57e <__assert_func+0x12>
 800c596:	bf00      	nop
 800c598:	20000118 	.word	0x20000118
 800c59c:	0800d12f 	.word	0x0800d12f
 800c5a0:	0800d13c 	.word	0x0800d13c
 800c5a4:	0800d16a 	.word	0x0800d16a

0800c5a8 <__ascii_mbtowc>:
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	b901      	cbnz	r1, 800c5ae <__ascii_mbtowc+0x6>
 800c5ac:	a901      	add	r1, sp, #4
 800c5ae:	b142      	cbz	r2, 800c5c2 <__ascii_mbtowc+0x1a>
 800c5b0:	b14b      	cbz	r3, 800c5c6 <__ascii_mbtowc+0x1e>
 800c5b2:	7813      	ldrb	r3, [r2, #0]
 800c5b4:	600b      	str	r3, [r1, #0]
 800c5b6:	7812      	ldrb	r2, [r2, #0]
 800c5b8:	1e10      	subs	r0, r2, #0
 800c5ba:	bf18      	it	ne
 800c5bc:	2001      	movne	r0, #1
 800c5be:	b002      	add	sp, #8
 800c5c0:	4770      	bx	lr
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	e7fb      	b.n	800c5be <__ascii_mbtowc+0x16>
 800c5c6:	f06f 0001 	mvn.w	r0, #1
 800c5ca:	e7f8      	b.n	800c5be <__ascii_mbtowc+0x16>

0800c5cc <_realloc_r>:
 800c5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d0:	4680      	mov	r8, r0
 800c5d2:	4614      	mov	r4, r2
 800c5d4:	460e      	mov	r6, r1
 800c5d6:	b921      	cbnz	r1, 800c5e2 <_realloc_r+0x16>
 800c5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5dc:	4611      	mov	r1, r2
 800c5de:	f7fd bca3 	b.w	8009f28 <_malloc_r>
 800c5e2:	b92a      	cbnz	r2, 800c5f0 <_realloc_r+0x24>
 800c5e4:	f7ff f9d2 	bl	800b98c <_free_r>
 800c5e8:	4625      	mov	r5, r4
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f0:	f000 f841 	bl	800c676 <_malloc_usable_size_r>
 800c5f4:	4284      	cmp	r4, r0
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	d802      	bhi.n	800c600 <_realloc_r+0x34>
 800c5fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5fe:	d812      	bhi.n	800c626 <_realloc_r+0x5a>
 800c600:	4621      	mov	r1, r4
 800c602:	4640      	mov	r0, r8
 800c604:	f7fd fc90 	bl	8009f28 <_malloc_r>
 800c608:	4605      	mov	r5, r0
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0ed      	beq.n	800c5ea <_realloc_r+0x1e>
 800c60e:	42bc      	cmp	r4, r7
 800c610:	4622      	mov	r2, r4
 800c612:	4631      	mov	r1, r6
 800c614:	bf28      	it	cs
 800c616:	463a      	movcs	r2, r7
 800c618:	f7fe fb2d 	bl	800ac76 <memcpy>
 800c61c:	4631      	mov	r1, r6
 800c61e:	4640      	mov	r0, r8
 800c620:	f7ff f9b4 	bl	800b98c <_free_r>
 800c624:	e7e1      	b.n	800c5ea <_realloc_r+0x1e>
 800c626:	4635      	mov	r5, r6
 800c628:	e7df      	b.n	800c5ea <_realloc_r+0x1e>

0800c62a <__ascii_wctomb>:
 800c62a:	b149      	cbz	r1, 800c640 <__ascii_wctomb+0x16>
 800c62c:	2aff      	cmp	r2, #255	; 0xff
 800c62e:	bf85      	ittet	hi
 800c630:	238a      	movhi	r3, #138	; 0x8a
 800c632:	6003      	strhi	r3, [r0, #0]
 800c634:	700a      	strbls	r2, [r1, #0]
 800c636:	f04f 30ff 	movhi.w	r0, #4294967295
 800c63a:	bf98      	it	ls
 800c63c:	2001      	movls	r0, #1
 800c63e:	4770      	bx	lr
 800c640:	4608      	mov	r0, r1
 800c642:	4770      	bx	lr

0800c644 <fiprintf>:
 800c644:	b40e      	push	{r1, r2, r3}
 800c646:	b503      	push	{r0, r1, lr}
 800c648:	4601      	mov	r1, r0
 800c64a:	ab03      	add	r3, sp, #12
 800c64c:	4805      	ldr	r0, [pc, #20]	; (800c664 <fiprintf+0x20>)
 800c64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c652:	6800      	ldr	r0, [r0, #0]
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	f000 f83f 	bl	800c6d8 <_vfiprintf_r>
 800c65a:	b002      	add	sp, #8
 800c65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c660:	b003      	add	sp, #12
 800c662:	4770      	bx	lr
 800c664:	20000118 	.word	0x20000118

0800c668 <abort>:
 800c668:	b508      	push	{r3, lr}
 800c66a:	2006      	movs	r0, #6
 800c66c:	f000 fa0c 	bl	800ca88 <raise>
 800c670:	2001      	movs	r0, #1
 800c672:	f7f6 fb5b 	bl	8002d2c <_exit>

0800c676 <_malloc_usable_size_r>:
 800c676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c67a:	1f18      	subs	r0, r3, #4
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfbc      	itt	lt
 800c680:	580b      	ldrlt	r3, [r1, r0]
 800c682:	18c0      	addlt	r0, r0, r3
 800c684:	4770      	bx	lr

0800c686 <__sfputc_r>:
 800c686:	6893      	ldr	r3, [r2, #8]
 800c688:	3b01      	subs	r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	b410      	push	{r4}
 800c68e:	6093      	str	r3, [r2, #8]
 800c690:	da08      	bge.n	800c6a4 <__sfputc_r+0x1e>
 800c692:	6994      	ldr	r4, [r2, #24]
 800c694:	42a3      	cmp	r3, r4
 800c696:	db01      	blt.n	800c69c <__sfputc_r+0x16>
 800c698:	290a      	cmp	r1, #10
 800c69a:	d103      	bne.n	800c6a4 <__sfputc_r+0x1e>
 800c69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a0:	f000 b934 	b.w	800c90c <__swbuf_r>
 800c6a4:	6813      	ldr	r3, [r2, #0]
 800c6a6:	1c58      	adds	r0, r3, #1
 800c6a8:	6010      	str	r0, [r2, #0]
 800c6aa:	7019      	strb	r1, [r3, #0]
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <__sfputs_r>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	460f      	mov	r7, r1
 800c6ba:	4614      	mov	r4, r2
 800c6bc:	18d5      	adds	r5, r2, r3
 800c6be:	42ac      	cmp	r4, r5
 800c6c0:	d101      	bne.n	800c6c6 <__sfputs_r+0x12>
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	e007      	b.n	800c6d6 <__sfputs_r+0x22>
 800c6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ca:	463a      	mov	r2, r7
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7ff ffda 	bl	800c686 <__sfputc_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d1f3      	bne.n	800c6be <__sfputs_r+0xa>
 800c6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6d8 <_vfiprintf_r>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	460d      	mov	r5, r1
 800c6de:	b09d      	sub	sp, #116	; 0x74
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	4698      	mov	r8, r3
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	b118      	cbz	r0, 800c6f0 <_vfiprintf_r+0x18>
 800c6e8:	6a03      	ldr	r3, [r0, #32]
 800c6ea:	b90b      	cbnz	r3, 800c6f0 <_vfiprintf_r+0x18>
 800c6ec:	f7fe f99a 	bl	800aa24 <__sinit>
 800c6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_vfiprintf_r+0x2a>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_vfiprintf_r+0x2a>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fe:	f7fe fab8 	bl	800ac72 <__retarget_lock_acquire_recursive>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	071b      	lsls	r3, r3, #28
 800c706:	d501      	bpl.n	800c70c <_vfiprintf_r+0x34>
 800c708:	692b      	ldr	r3, [r5, #16]
 800c70a:	b99b      	cbnz	r3, 800c734 <_vfiprintf_r+0x5c>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4630      	mov	r0, r6
 800c710:	f000 f93a 	bl	800c988 <__swsetup_r>
 800c714:	b170      	cbz	r0, 800c734 <_vfiprintf_r+0x5c>
 800c716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c718:	07dc      	lsls	r4, r3, #31
 800c71a:	d504      	bpl.n	800c726 <_vfiprintf_r+0x4e>
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	b01d      	add	sp, #116	; 0x74
 800c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	0598      	lsls	r0, r3, #22
 800c72a:	d4f7      	bmi.n	800c71c <_vfiprintf_r+0x44>
 800c72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72e:	f7fe faa1 	bl	800ac74 <__retarget_lock_release_recursive>
 800c732:	e7f3      	b.n	800c71c <_vfiprintf_r+0x44>
 800c734:	2300      	movs	r3, #0
 800c736:	9309      	str	r3, [sp, #36]	; 0x24
 800c738:	2320      	movs	r3, #32
 800c73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c73e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c742:	2330      	movs	r3, #48	; 0x30
 800c744:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c8f8 <_vfiprintf_r+0x220>
 800c748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c74c:	f04f 0901 	mov.w	r9, #1
 800c750:	4623      	mov	r3, r4
 800c752:	469a      	mov	sl, r3
 800c754:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c758:	b10a      	cbz	r2, 800c75e <_vfiprintf_r+0x86>
 800c75a:	2a25      	cmp	r2, #37	; 0x25
 800c75c:	d1f9      	bne.n	800c752 <_vfiprintf_r+0x7a>
 800c75e:	ebba 0b04 	subs.w	fp, sl, r4
 800c762:	d00b      	beq.n	800c77c <_vfiprintf_r+0xa4>
 800c764:	465b      	mov	r3, fp
 800c766:	4622      	mov	r2, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7ff ffa2 	bl	800c6b4 <__sfputs_r>
 800c770:	3001      	adds	r0, #1
 800c772:	f000 80a9 	beq.w	800c8c8 <_vfiprintf_r+0x1f0>
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	445a      	add	r2, fp
 800c77a:	9209      	str	r2, [sp, #36]	; 0x24
 800c77c:	f89a 3000 	ldrb.w	r3, [sl]
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 80a1 	beq.w	800c8c8 <_vfiprintf_r+0x1f0>
 800c786:	2300      	movs	r3, #0
 800c788:	f04f 32ff 	mov.w	r2, #4294967295
 800c78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c790:	f10a 0a01 	add.w	sl, sl, #1
 800c794:	9304      	str	r3, [sp, #16]
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c79c:	931a      	str	r3, [sp, #104]	; 0x68
 800c79e:	4654      	mov	r4, sl
 800c7a0:	2205      	movs	r2, #5
 800c7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a6:	4854      	ldr	r0, [pc, #336]	; (800c8f8 <_vfiprintf_r+0x220>)
 800c7a8:	f7f3 fd2a 	bl	8000200 <memchr>
 800c7ac:	9a04      	ldr	r2, [sp, #16]
 800c7ae:	b9d8      	cbnz	r0, 800c7e8 <_vfiprintf_r+0x110>
 800c7b0:	06d1      	lsls	r1, r2, #27
 800c7b2:	bf44      	itt	mi
 800c7b4:	2320      	movmi	r3, #32
 800c7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ba:	0713      	lsls	r3, r2, #28
 800c7bc:	bf44      	itt	mi
 800c7be:	232b      	movmi	r3, #43	; 0x2b
 800c7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ca:	d015      	beq.n	800c7f8 <_vfiprintf_r+0x120>
 800c7cc:	9a07      	ldr	r2, [sp, #28]
 800c7ce:	4654      	mov	r4, sl
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	f04f 0c0a 	mov.w	ip, #10
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7dc:	3b30      	subs	r3, #48	; 0x30
 800c7de:	2b09      	cmp	r3, #9
 800c7e0:	d94d      	bls.n	800c87e <_vfiprintf_r+0x1a6>
 800c7e2:	b1b0      	cbz	r0, 800c812 <_vfiprintf_r+0x13a>
 800c7e4:	9207      	str	r2, [sp, #28]
 800c7e6:	e014      	b.n	800c812 <_vfiprintf_r+0x13a>
 800c7e8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	46a2      	mov	sl, r4
 800c7f6:	e7d2      	b.n	800c79e <_vfiprintf_r+0xc6>
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	1d19      	adds	r1, r3, #4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	9103      	str	r1, [sp, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfbb      	ittet	lt
 800c804:	425b      	neglt	r3, r3
 800c806:	f042 0202 	orrlt.w	r2, r2, #2
 800c80a:	9307      	strge	r3, [sp, #28]
 800c80c:	9307      	strlt	r3, [sp, #28]
 800c80e:	bfb8      	it	lt
 800c810:	9204      	strlt	r2, [sp, #16]
 800c812:	7823      	ldrb	r3, [r4, #0]
 800c814:	2b2e      	cmp	r3, #46	; 0x2e
 800c816:	d10c      	bne.n	800c832 <_vfiprintf_r+0x15a>
 800c818:	7863      	ldrb	r3, [r4, #1]
 800c81a:	2b2a      	cmp	r3, #42	; 0x2a
 800c81c:	d134      	bne.n	800c888 <_vfiprintf_r+0x1b0>
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	9203      	str	r2, [sp, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	bfb8      	it	lt
 800c82a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c82e:	3402      	adds	r4, #2
 800c830:	9305      	str	r3, [sp, #20]
 800c832:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c908 <_vfiprintf_r+0x230>
 800c836:	7821      	ldrb	r1, [r4, #0]
 800c838:	2203      	movs	r2, #3
 800c83a:	4650      	mov	r0, sl
 800c83c:	f7f3 fce0 	bl	8000200 <memchr>
 800c840:	b138      	cbz	r0, 800c852 <_vfiprintf_r+0x17a>
 800c842:	9b04      	ldr	r3, [sp, #16]
 800c844:	eba0 000a 	sub.w	r0, r0, sl
 800c848:	2240      	movs	r2, #64	; 0x40
 800c84a:	4082      	lsls	r2, r0
 800c84c:	4313      	orrs	r3, r2
 800c84e:	3401      	adds	r4, #1
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c856:	4829      	ldr	r0, [pc, #164]	; (800c8fc <_vfiprintf_r+0x224>)
 800c858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c85c:	2206      	movs	r2, #6
 800c85e:	f7f3 fccf 	bl	8000200 <memchr>
 800c862:	2800      	cmp	r0, #0
 800c864:	d03f      	beq.n	800c8e6 <_vfiprintf_r+0x20e>
 800c866:	4b26      	ldr	r3, [pc, #152]	; (800c900 <_vfiprintf_r+0x228>)
 800c868:	bb1b      	cbnz	r3, 800c8b2 <_vfiprintf_r+0x1da>
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	3307      	adds	r3, #7
 800c86e:	f023 0307 	bic.w	r3, r3, #7
 800c872:	3308      	adds	r3, #8
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c878:	443b      	add	r3, r7
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
 800c87c:	e768      	b.n	800c750 <_vfiprintf_r+0x78>
 800c87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c882:	460c      	mov	r4, r1
 800c884:	2001      	movs	r0, #1
 800c886:	e7a6      	b.n	800c7d6 <_vfiprintf_r+0xfe>
 800c888:	2300      	movs	r3, #0
 800c88a:	3401      	adds	r4, #1
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	4619      	mov	r1, r3
 800c890:	f04f 0c0a 	mov.w	ip, #10
 800c894:	4620      	mov	r0, r4
 800c896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89a:	3a30      	subs	r2, #48	; 0x30
 800c89c:	2a09      	cmp	r2, #9
 800c89e:	d903      	bls.n	800c8a8 <_vfiprintf_r+0x1d0>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0c6      	beq.n	800c832 <_vfiprintf_r+0x15a>
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	e7c4      	b.n	800c832 <_vfiprintf_r+0x15a>
 800c8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e7f0      	b.n	800c894 <_vfiprintf_r+0x1bc>
 800c8b2:	ab03      	add	r3, sp, #12
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4b12      	ldr	r3, [pc, #72]	; (800c904 <_vfiprintf_r+0x22c>)
 800c8ba:	a904      	add	r1, sp, #16
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7fd fc5f 	bl	800a180 <_printf_float>
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	1c78      	adds	r0, r7, #1
 800c8c6:	d1d6      	bne.n	800c876 <_vfiprintf_r+0x19e>
 800c8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8ca:	07d9      	lsls	r1, r3, #31
 800c8cc:	d405      	bmi.n	800c8da <_vfiprintf_r+0x202>
 800c8ce:	89ab      	ldrh	r3, [r5, #12]
 800c8d0:	059a      	lsls	r2, r3, #22
 800c8d2:	d402      	bmi.n	800c8da <_vfiprintf_r+0x202>
 800c8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8d6:	f7fe f9cd 	bl	800ac74 <__retarget_lock_release_recursive>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	065b      	lsls	r3, r3, #25
 800c8de:	f53f af1d 	bmi.w	800c71c <_vfiprintf_r+0x44>
 800c8e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8e4:	e71c      	b.n	800c720 <_vfiprintf_r+0x48>
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <_vfiprintf_r+0x22c>)
 800c8ee:	a904      	add	r1, sp, #16
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7fd fee9 	bl	800a6c8 <_printf_i>
 800c8f6:	e7e4      	b.n	800c8c2 <_vfiprintf_r+0x1ea>
 800c8f8:	0800d114 	.word	0x0800d114
 800c8fc:	0800d11e 	.word	0x0800d11e
 800c900:	0800a181 	.word	0x0800a181
 800c904:	0800c6b5 	.word	0x0800c6b5
 800c908:	0800d11a 	.word	0x0800d11a

0800c90c <__swbuf_r>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	460e      	mov	r6, r1
 800c910:	4614      	mov	r4, r2
 800c912:	4605      	mov	r5, r0
 800c914:	b118      	cbz	r0, 800c91e <__swbuf_r+0x12>
 800c916:	6a03      	ldr	r3, [r0, #32]
 800c918:	b90b      	cbnz	r3, 800c91e <__swbuf_r+0x12>
 800c91a:	f7fe f883 	bl	800aa24 <__sinit>
 800c91e:	69a3      	ldr	r3, [r4, #24]
 800c920:	60a3      	str	r3, [r4, #8]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	071a      	lsls	r2, r3, #28
 800c926:	d525      	bpl.n	800c974 <__swbuf_r+0x68>
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	b31b      	cbz	r3, 800c974 <__swbuf_r+0x68>
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	6922      	ldr	r2, [r4, #16]
 800c930:	1a98      	subs	r0, r3, r2
 800c932:	6963      	ldr	r3, [r4, #20]
 800c934:	b2f6      	uxtb	r6, r6
 800c936:	4283      	cmp	r3, r0
 800c938:	4637      	mov	r7, r6
 800c93a:	dc04      	bgt.n	800c946 <__swbuf_r+0x3a>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f7ff fdd2 	bl	800c4e8 <_fflush_r>
 800c944:	b9e0      	cbnz	r0, 800c980 <__swbuf_r+0x74>
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	3b01      	subs	r3, #1
 800c94a:	60a3      	str	r3, [r4, #8]
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	6022      	str	r2, [r4, #0]
 800c952:	701e      	strb	r6, [r3, #0]
 800c954:	6962      	ldr	r2, [r4, #20]
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	429a      	cmp	r2, r3
 800c95a:	d004      	beq.n	800c966 <__swbuf_r+0x5a>
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	07db      	lsls	r3, r3, #31
 800c960:	d506      	bpl.n	800c970 <__swbuf_r+0x64>
 800c962:	2e0a      	cmp	r6, #10
 800c964:	d104      	bne.n	800c970 <__swbuf_r+0x64>
 800c966:	4621      	mov	r1, r4
 800c968:	4628      	mov	r0, r5
 800c96a:	f7ff fdbd 	bl	800c4e8 <_fflush_r>
 800c96e:	b938      	cbnz	r0, 800c980 <__swbuf_r+0x74>
 800c970:	4638      	mov	r0, r7
 800c972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c974:	4621      	mov	r1, r4
 800c976:	4628      	mov	r0, r5
 800c978:	f000 f806 	bl	800c988 <__swsetup_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d0d5      	beq.n	800c92c <__swbuf_r+0x20>
 800c980:	f04f 37ff 	mov.w	r7, #4294967295
 800c984:	e7f4      	b.n	800c970 <__swbuf_r+0x64>
	...

0800c988 <__swsetup_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4b2a      	ldr	r3, [pc, #168]	; (800ca34 <__swsetup_r+0xac>)
 800c98c:	4605      	mov	r5, r0
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	460c      	mov	r4, r1
 800c992:	b118      	cbz	r0, 800c99c <__swsetup_r+0x14>
 800c994:	6a03      	ldr	r3, [r0, #32]
 800c996:	b90b      	cbnz	r3, 800c99c <__swsetup_r+0x14>
 800c998:	f7fe f844 	bl	800aa24 <__sinit>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a2:	0718      	lsls	r0, r3, #28
 800c9a4:	d422      	bmi.n	800c9ec <__swsetup_r+0x64>
 800c9a6:	06d9      	lsls	r1, r3, #27
 800c9a8:	d407      	bmi.n	800c9ba <__swsetup_r+0x32>
 800c9aa:	2309      	movs	r3, #9
 800c9ac:	602b      	str	r3, [r5, #0]
 800c9ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9b2:	81a3      	strh	r3, [r4, #12]
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	e034      	b.n	800ca24 <__swsetup_r+0x9c>
 800c9ba:	0758      	lsls	r0, r3, #29
 800c9bc:	d512      	bpl.n	800c9e4 <__swsetup_r+0x5c>
 800c9be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9c0:	b141      	cbz	r1, 800c9d4 <__swsetup_r+0x4c>
 800c9c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c6:	4299      	cmp	r1, r3
 800c9c8:	d002      	beq.n	800c9d0 <__swsetup_r+0x48>
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7fe ffde 	bl	800b98c <_free_r>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	6363      	str	r3, [r4, #52]	; 0x34
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	6063      	str	r3, [r4, #4]
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	f043 0308 	orr.w	r3, r3, #8
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	b94b      	cbnz	r3, 800ca04 <__swsetup_r+0x7c>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9fa:	d003      	beq.n	800ca04 <__swsetup_r+0x7c>
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f000 f884 	bl	800cb0c <__smakebuf_r>
 800ca04:	89a0      	ldrh	r0, [r4, #12]
 800ca06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca0a:	f010 0301 	ands.w	r3, r0, #1
 800ca0e:	d00a      	beq.n	800ca26 <__swsetup_r+0x9e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	6963      	ldr	r3, [r4, #20]
 800ca16:	425b      	negs	r3, r3
 800ca18:	61a3      	str	r3, [r4, #24]
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	b943      	cbnz	r3, 800ca30 <__swsetup_r+0xa8>
 800ca1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca22:	d1c4      	bne.n	800c9ae <__swsetup_r+0x26>
 800ca24:	bd38      	pop	{r3, r4, r5, pc}
 800ca26:	0781      	lsls	r1, r0, #30
 800ca28:	bf58      	it	pl
 800ca2a:	6963      	ldrpl	r3, [r4, #20]
 800ca2c:	60a3      	str	r3, [r4, #8]
 800ca2e:	e7f4      	b.n	800ca1a <__swsetup_r+0x92>
 800ca30:	2000      	movs	r0, #0
 800ca32:	e7f7      	b.n	800ca24 <__swsetup_r+0x9c>
 800ca34:	20000118 	.word	0x20000118

0800ca38 <_raise_r>:
 800ca38:	291f      	cmp	r1, #31
 800ca3a:	b538      	push	{r3, r4, r5, lr}
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	d904      	bls.n	800ca4c <_raise_r+0x14>
 800ca42:	2316      	movs	r3, #22
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca4e:	b112      	cbz	r2, 800ca56 <_raise_r+0x1e>
 800ca50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca54:	b94b      	cbnz	r3, 800ca6a <_raise_r+0x32>
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 f830 	bl	800cabc <_getpid_r>
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	4601      	mov	r1, r0
 800ca60:	4620      	mov	r0, r4
 800ca62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca66:	f000 b817 	b.w	800ca98 <_kill_r>
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d00a      	beq.n	800ca84 <_raise_r+0x4c>
 800ca6e:	1c59      	adds	r1, r3, #1
 800ca70:	d103      	bne.n	800ca7a <_raise_r+0x42>
 800ca72:	2316      	movs	r3, #22
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	2001      	movs	r0, #1
 800ca78:	e7e7      	b.n	800ca4a <_raise_r+0x12>
 800ca7a:	2400      	movs	r4, #0
 800ca7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca80:	4628      	mov	r0, r5
 800ca82:	4798      	blx	r3
 800ca84:	2000      	movs	r0, #0
 800ca86:	e7e0      	b.n	800ca4a <_raise_r+0x12>

0800ca88 <raise>:
 800ca88:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <raise+0xc>)
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	f7ff bfd3 	b.w	800ca38 <_raise_r>
 800ca92:	bf00      	nop
 800ca94:	20000118 	.word	0x20000118

0800ca98 <_kill_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	; (800cab8 <_kill_r+0x20>)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4608      	mov	r0, r1
 800caa2:	4611      	mov	r1, r2
 800caa4:	602b      	str	r3, [r5, #0]
 800caa6:	f7f6 f931 	bl	8002d0c <_kill>
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	d102      	bne.n	800cab4 <_kill_r+0x1c>
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	b103      	cbz	r3, 800cab4 <_kill_r+0x1c>
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	bf00      	nop
 800cab8:	200025d4 	.word	0x200025d4

0800cabc <_getpid_r>:
 800cabc:	f7f6 b91e 	b.w	8002cfc <_getpid>

0800cac0 <__swhatbuf_r>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	460c      	mov	r4, r1
 800cac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac8:	2900      	cmp	r1, #0
 800caca:	b096      	sub	sp, #88	; 0x58
 800cacc:	4615      	mov	r5, r2
 800cace:	461e      	mov	r6, r3
 800cad0:	da0d      	bge.n	800caee <__swhatbuf_r+0x2e>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cad8:	f04f 0100 	mov.w	r1, #0
 800cadc:	bf0c      	ite	eq
 800cade:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cae2:	2340      	movne	r3, #64	; 0x40
 800cae4:	2000      	movs	r0, #0
 800cae6:	6031      	str	r1, [r6, #0]
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	b016      	add	sp, #88	; 0x58
 800caec:	bd70      	pop	{r4, r5, r6, pc}
 800caee:	466a      	mov	r2, sp
 800caf0:	f000 f848 	bl	800cb84 <_fstat_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	dbec      	blt.n	800cad2 <__swhatbuf_r+0x12>
 800caf8:	9901      	ldr	r1, [sp, #4]
 800cafa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cafe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb02:	4259      	negs	r1, r3
 800cb04:	4159      	adcs	r1, r3
 800cb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb0a:	e7eb      	b.n	800cae4 <__swhatbuf_r+0x24>

0800cb0c <__smakebuf_r>:
 800cb0c:	898b      	ldrh	r3, [r1, #12]
 800cb0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb10:	079d      	lsls	r5, r3, #30
 800cb12:	4606      	mov	r6, r0
 800cb14:	460c      	mov	r4, r1
 800cb16:	d507      	bpl.n	800cb28 <__smakebuf_r+0x1c>
 800cb18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb1c:	6023      	str	r3, [r4, #0]
 800cb1e:	6123      	str	r3, [r4, #16]
 800cb20:	2301      	movs	r3, #1
 800cb22:	6163      	str	r3, [r4, #20]
 800cb24:	b002      	add	sp, #8
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	ab01      	add	r3, sp, #4
 800cb2a:	466a      	mov	r2, sp
 800cb2c:	f7ff ffc8 	bl	800cac0 <__swhatbuf_r>
 800cb30:	9900      	ldr	r1, [sp, #0]
 800cb32:	4605      	mov	r5, r0
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7fd f9f7 	bl	8009f28 <_malloc_r>
 800cb3a:	b948      	cbnz	r0, 800cb50 <__smakebuf_r+0x44>
 800cb3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb40:	059a      	lsls	r2, r3, #22
 800cb42:	d4ef      	bmi.n	800cb24 <__smakebuf_r+0x18>
 800cb44:	f023 0303 	bic.w	r3, r3, #3
 800cb48:	f043 0302 	orr.w	r3, r3, #2
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	e7e3      	b.n	800cb18 <__smakebuf_r+0xc>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	9b00      	ldr	r3, [sp, #0]
 800cb5c:	6163      	str	r3, [r4, #20]
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	6120      	str	r0, [r4, #16]
 800cb62:	b15b      	cbz	r3, 800cb7c <__smakebuf_r+0x70>
 800cb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 f81d 	bl	800cba8 <_isatty_r>
 800cb6e:	b128      	cbz	r0, 800cb7c <__smakebuf_r+0x70>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	f043 0301 	orr.w	r3, r3, #1
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	431d      	orrs	r5, r3
 800cb80:	81a5      	strh	r5, [r4, #12]
 800cb82:	e7cf      	b.n	800cb24 <__smakebuf_r+0x18>

0800cb84 <_fstat_r>:
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	4d07      	ldr	r5, [pc, #28]	; (800cba4 <_fstat_r+0x20>)
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	4611      	mov	r1, r2
 800cb90:	602b      	str	r3, [r5, #0]
 800cb92:	f7f6 f91a 	bl	8002dca <_fstat>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	d102      	bne.n	800cba0 <_fstat_r+0x1c>
 800cb9a:	682b      	ldr	r3, [r5, #0]
 800cb9c:	b103      	cbz	r3, 800cba0 <_fstat_r+0x1c>
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	bd38      	pop	{r3, r4, r5, pc}
 800cba2:	bf00      	nop
 800cba4:	200025d4 	.word	0x200025d4

0800cba8 <_isatty_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d06      	ldr	r5, [pc, #24]	; (800cbc4 <_isatty_r+0x1c>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f6 f919 	bl	8002dea <_isatty>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_isatty_r+0x1a>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_isatty_r+0x1a>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	200025d4 	.word	0x200025d4

0800cbc8 <_init>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	bf00      	nop
 800cbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbce:	bc08      	pop	{r3}
 800cbd0:	469e      	mov	lr, r3
 800cbd2:	4770      	bx	lr

0800cbd4 <_fini>:
 800cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd6:	bf00      	nop
 800cbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbda:	bc08      	pop	{r3}
 800cbdc:	469e      	mov	lr, r3
 800cbde:	4770      	bx	lr
