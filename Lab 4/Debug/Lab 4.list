
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008438  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a14  08008a14  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001f0  08008c0c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08008c0c  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001276e  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280a  00000000  00000000  000329d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbe  00000000  00000000  00036128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c470  00000000  00000000  00036ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014166  00000000  00000000  00063156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001088ff  00000000  00000000  000772bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fb8  00000000  00000000  0017fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00184b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080085e0 	.word	0x080085e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	080085e0 	.word	0x080085e0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fed1 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f83b 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f917 	bl	8001114 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ee6:	f000 f8c9 	bl	800107c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000eea:	f000 f887 	bl	8000ffc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BSP_HSENSOR_Init();
 8000eee:	f000 fa8b 	bl	8001408 <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000ef2:	f000 fab7 	bl	8001464 <BSP_TSENSOR_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  float humidity = BSP_HSENSOR_ReadHumidity();
 8000ef6:	f000 faa7 	bl	8001448 <BSP_HSENSOR_ReadHumidity>
 8000efa:	ed87 0a03 	vstr	s0, [r7, #12]
	  float temperature = BSP_TSENSOR_ReadTemp();
 8000efe:	f000 facd 	bl	800149c <BSP_TSENSOR_ReadTemp>
 8000f02:	ed87 0a02 	vstr	s0, [r7, #8]
	  char* msg = calloc(1, sizeof(char) * 100);
 8000f06:	2164      	movs	r1, #100	; 0x64
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f004 fcdb 	bl	80058c4 <calloc>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	607b      	str	r3, [r7, #4]
	  sprintf(msg, "The humidity is: %.2f\r\nThe temperature is: %.2f\r\n", humidity, temperature);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff fb30 	bl	8000578 <__aeabi_f2d>
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	68b8      	ldr	r0, [r7, #8]
 8000f1e:	f7ff fb2b 	bl	8000578 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	e9cd 2300 	strd	r2, r3, [sp]
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	462b      	mov	r3, r5
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <main+0x7c>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f005 fab9 	bl	80064a8 <siprintf>
	  HAL_Delay(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3a:	f000 ff15 	bl	8001d68 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, msg, sizeof(char) * 100, 10000);
 8000f3e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f42:	2264      	movs	r2, #100	; 0x64
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <main+0x80>)
 8000f48:	f003 fe14 	bl	8004b74 <HAL_UART_Transmit>
  {
 8000f4c:	e7d3      	b.n	8000ef6 <main+0x22>
 8000f4e:	bf00      	nop
 8000f50:	080085f8 	.word	0x080085f8
 8000f54:	20000260 	.word	0x20000260

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2244      	movs	r2, #68	; 0x44
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 fb01 	bl	800656e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f002 f916 	bl	80031ac <HAL_PWREx_ControlVoltageScaling>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f86:	f000 f8e9 	bl	800115c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000fa6:	233c      	movs	r3, #60	; 0x3c
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f99a 	bl	80032f4 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fc6:	f000 f8c9 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fda0 	bl	8003b28 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fee:	f000 f8b5 	bl	800115c <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3758      	adds	r7, #88	; 0x58
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C2_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C2_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C2_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C2_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C2_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C2_Init+0x74>)
 8001038:	f001 fa50 	bl	80024dc <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 f88b 	bl	800115c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C2_Init+0x74>)
 800104a:	f001 fff7 	bl	800303c <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 f882 	bl	800115c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C2_Init+0x74>)
 800105c:	f002 f839 	bl	80030d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 f879 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000020c 	.word	0x2000020c
 8001074:	40005800 	.word	0x40005800
 8001078:	307075b1 	.word	0x307075b1

0800107c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_USART1_UART_Init+0x90>)
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <MX_USART1_UART_Init+0x94>)
 8001084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_USART1_UART_Init+0x90>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_USART1_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010c6:	f003 fd05 	bl	8004ad4 <HAL_UART_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010d0:	f000 f844 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010d8:	f004 fb2a 	bl	8005730 <HAL_UARTEx_SetTxFifoThreshold>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010e2:	f000 f83b 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010ea:	f004 fb5f 	bl	80057ac <HAL_UARTEx_SetRxFifoThreshold>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010f4:	f000 f832 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_USART1_UART_Init+0x90>)
 80010fa:	f004 fae0 	bl	80056be <HAL_UARTEx_DisableFifoMode>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001104:	f000 f82a 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000260 	.word	0x20000260
 8001110:	40013800 	.word	0x40013800

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_GPIO_Init+0x44>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <MX_GPIO_Init+0x44>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_GPIO_Init+0x44>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_GPIO_Init+0x44>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <MX_GPIO_Init+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_GPIO_Init+0x44>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <I2Cx_MspInit+0xa8>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <I2Cx_MspInit+0xa8>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <I2Cx_MspInit+0xa8>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001188:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800118c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800119a:	2304      	movs	r3, #4
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	481b      	ldr	r0, [pc, #108]	; (8001214 <I2Cx_MspInit+0xac>)
 80011a6:	f000 ff15 	bl	8001fd4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <I2Cx_MspInit+0xac>)
 80011b2:	f000 ff0f 	bl	8001fd4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c0:	6593      	str	r3, [r2, #88]	; 0x58
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <I2Cx_MspInit+0xa8>)
 80011e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	2021      	movs	r0, #33	; 0x21
 80011ec:	f000 febb 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011f0:	2021      	movs	r0, #33	; 0x21
 80011f2:	f000 fed4 	bl	8001f9e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	210f      	movs	r1, #15
 80011fa:	2022      	movs	r0, #34	; 0x22
 80011fc:	f000 feb3 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001200:	2022      	movs	r0, #34	; 0x22
 8001202:	f000 fecc 	bl	8001f9e <HAL_NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <I2Cx_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <I2Cx_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff89 	bl	8001168 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f001 f940 	bl	80024dc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800125c:	2100      	movs	r1, #0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 feec 	bl	800303c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40005800 	.word	0x40005800
 8001270:	00702681 	.word	0x00702681

08001274 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af04      	add	r7, sp, #16
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	460b      	mov	r3, r1
 8001288:	813b      	strh	r3, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	b299      	uxth	r1, r3
 8001296:	88f8      	ldrh	r0, [r7, #6]
 8001298:	893a      	ldrh	r2, [r7, #8]
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4603      	mov	r3, r0
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 faf4 	bl	8002898 <HAL_I2C_Mem_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f832 	bl	8001328 <I2Cx_Error>
  }
  return status;
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b08a      	sub	sp, #40	; 0x28
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	72fb      	strb	r3, [r7, #11]
 80012e0:	460b      	mov	r3, r1
 80012e2:	813b      	strh	r3, [r7, #8]
 80012e4:	4613      	mov	r3, r2
 80012e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	b299      	uxth	r1, r3
 80012f0:	88f8      	ldrh	r0, [r7, #6]
 80012f2:	893a      	ldrh	r2, [r7, #8]
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4603      	mov	r3, r0
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f001 f9b3 	bl	8002670 <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	4619      	mov	r1, r3
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f805 	bl	8001328 <I2Cx_Error>
  }
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 f96c 	bl	8002612 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff6c 	bl	8001218 <I2Cx_Init>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <SENSOR_IO_Init+0x10>)
 800134e:	f7ff ff63 	bl	8001218 <I2Cx_Init>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002f4 	.word	0x200002f4

0800135c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af02      	add	r7, sp, #8
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	460b      	mov	r3, r1
 8001368:	71bb      	strb	r3, [r7, #6]
 800136a:	4613      	mov	r3, r2
 800136c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	b29a      	uxth	r2, r3
 8001372:	79f9      	ldrb	r1, [r7, #7]
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	1d7b      	adds	r3, r7, #5
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	4803      	ldr	r0, [pc, #12]	; (800138c <SENSOR_IO_Write+0x30>)
 8001380:	f7ff ffa5 	bl	80012ce <I2Cx_WriteMultiple>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200002f4 	.word	0x200002f4

08001390 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	79f9      	ldrb	r1, [r7, #7]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f107 030f 	add.w	r3, r7, #15
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <SENSOR_IO_Read+0x38>)
 80013b8:	f7ff ff5c 	bl	8001274 <I2Cx_ReadMultiple>

  return read_value;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200002f4 	.word	0x200002f4

080013cc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	603a      	str	r2, [r7, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	460b      	mov	r3, r1
 80013dc:	71bb      	strb	r3, [r7, #6]
 80013de:	4613      	mov	r3, r2
 80013e0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	79f9      	ldrb	r1, [r7, #7]
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <SENSOR_IO_ReadMultiple+0x38>)
 80013f4:	f7ff ff3e 	bl	8001274 <I2Cx_ReadMultiple>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29b      	uxth	r3, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002f4 	.word	0x200002f4

08001408 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <BSP_HSENSOR_Init+0x38>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	20be      	movs	r0, #190	; 0xbe
 8001414:	4798      	blx	r3
 8001416:	4603      	mov	r3, r0
 8001418:	2bbc      	cmp	r3, #188	; 0xbc
 800141a:	d002      	beq.n	8001422 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e009      	b.n	8001436 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <BSP_HSENSOR_Init+0x3c>)
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <BSP_HSENSOR_Init+0x38>)
 8001426:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <BSP_HSENSOR_Init+0x3c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	20be      	movs	r0, #190	; 0xbe
 8001430:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001436:	687b      	ldr	r3, [r7, #4]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000004 	.word	0x20000004
 8001444:	20000348 	.word	0x20000348

08001448 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <BSP_HSENSOR_ReadHumidity+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	20be      	movs	r0, #190	; 0xbe
 8001454:	4798      	blx	r3
 8001456:	eef0 7a40 	vmov.f32	s15, s0
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000348 	.word	0x20000348

08001464 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <BSP_TSENSOR_Init+0x30>)
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <BSP_TSENSOR_Init+0x34>)
 8001472:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001474:	f7ff ff68 	bl	8001348 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <BSP_TSENSOR_Init+0x30>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	20be      	movs	r0, #190	; 0xbe
 8001482:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001488:	79fb      	ldrb	r3, [r7, #7]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000034c 	.word	0x2000034c
 8001498:	20000010 	.word	0x20000010

0800149c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <BSP_TSENSOR_ReadTemp+0x18>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	20be      	movs	r0, #190	; 0xbe
 80014a8:	4798      	blx	r3
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000034c 	.word	0x2000034c

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0ae      	sub	sp, #184	; 0xb8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2294      	movs	r2, #148	; 0x94
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f824 	bl	800656e <memset>
  if(hi2c->Instance==I2C2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_I2C_MspInit+0xb0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d13b      	bne.n	80015a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fdb1 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001548:	f7ff fe08 	bl	800115c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001564:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156c:	2312      	movs	r3, #18
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800157e:	2304      	movs	r3, #4
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001588:	4619      	mov	r1, r3
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_I2C_MspInit+0xb8>)
 800158c:	f000 fd22 	bl	8001fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 8001596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159a:	6593      	str	r3, [r2, #88]	; 0x58
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_I2C_MspInit+0xb4>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	37b8      	adds	r7, #184	; 0xb8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005800 	.word	0x40005800
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400

080015bc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_I2C_MspDeInit+0x3c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10f      	bne.n	80015ee <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_I2C_MspDeInit+0x40>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_I2C_MspDeInit+0x40>)
 80015d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <HAL_I2C_MspDeInit+0x44>)
 80015e0:	f000 fe8a 	bl	80022f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80015e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_I2C_MspDeInit+0x44>)
 80015ea:	f000 fe85 	bl	80022f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005800 	.word	0x40005800
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0b0      	sub	sp, #192	; 0xc0
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	2294      	movs	r2, #148	; 0x94
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f004 ffa2 	bl	800656e <memset>
  if(huart->Instance==USART1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_UART_MspInit+0xf4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d15d      	bne.n	80016f0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001638:	2300      	movs	r3, #0
 800163a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fd2f 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f7ff fd86 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_UART_MspInit+0xf8>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_UART_MspInit+0xf8>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6613      	str	r3, [r2, #96]	; 0x60
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_UART_MspInit+0xf8>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_UART_MspInit+0xf8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_UART_MspInit+0xf8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_UART_MspInit+0xf8>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_UART_MspInit+0xf8>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_UART_MspInit+0xf8>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_UART_MspInit+0xf8>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b2:	2307      	movs	r3, #7
 80016b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f000 fc87 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016de:	2307      	movs	r3, #7
 80016e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_UART_MspInit+0xfc>)
 80016ec:	f000 fc72 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	37c0      	adds	r7, #192	; 0xc0
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000400 	.word	0x48000400

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 faea 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001772:	f004 ff5f 	bl	8006634 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
  }

  return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
  }
  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f004 fec4 	bl	8006634 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200a0000 	.word	0x200a0000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000350 	.word	0x20000350
 80018e0:	200004a8 	.word	0x200004a8

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff ffea 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001936:	f004 fe83 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7ff facb 	bl	8000ed4 <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800194c:	08008a1c 	.word	0x08008a1c
  ldr r2, =_sbss
 8001950:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001954:	200004a4 	.word	0x200004a4

08001958 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_IRQHandler>

0800195a <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2120      	movs	r1, #32
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fd10 	bl	8001390 <SENSOR_IO_Read>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	f023 0304 	bic.w	r3, r3, #4
 800197a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	2120      	movs	r1, #32
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fcd9 	bl	800135c <SENSOR_IO_Write>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80019c0:	f7ff fcc2 	bl	8001348 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	210f      	movs	r1, #15
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fce0 	bl	8001390 <SENSOR_IO_Read>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	b2d8      	uxtb	r0, r3
 80019ee:	f107 020c 	add.w	r2, r7, #12
 80019f2:	2302      	movs	r3, #2
 80019f4:	21b0      	movs	r1, #176	; 0xb0
 80019f6:	f7ff fce9 	bl	80013cc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80019fa:	7b3b      	ldrb	r3, [r7, #12]
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	b2d8      	uxtb	r0, r3
 8001a0e:	f107 020c 	add.w	r2, r7, #12
 8001a12:	2302      	movs	r3, #2
 8001a14:	21b6      	movs	r1, #182	; 0xb6
 8001a16:	f7ff fcd9 	bl	80013cc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	7b3b      	ldrb	r3, [r7, #12]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	f107 020c 	add.w	r2, r7, #12
 8001a30:	2302      	movs	r3, #2
 8001a32:	21ba      	movs	r1, #186	; 0xba
 8001a34:	f7ff fcca 	bl	80013cc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001a38:	7b7b      	ldrb	r3, [r7, #13]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	b2d8      	uxtb	r0, r3
 8001a4a:	f107 020c 	add.w	r2, r7, #12
 8001a4e:	2302      	movs	r3, #2
 8001a50:	21a8      	movs	r1, #168	; 0xa8
 8001a52:	f7ff fcbb 	bl	80013cc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	7b3b      	ldrb	r3, [r7, #12]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001a64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001a7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a8c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001a90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b10 <HTS221_H_ReadHumidity+0x130>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	dd01      	ble.n	8001adc <HTS221_H_ReadHumidity+0xfc>
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HTS221_H_ReadHumidity+0x134>)
 8001ada:	e00a      	b.n	8001af2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001adc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d502      	bpl.n	8001af0 <HTS221_H_ReadHumidity+0x110>
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e000      	b.n	8001af2 <HTS221_H_ReadHumidity+0x112>
 8001af0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001af2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001afc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b00:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	447a0000 	.word	0x447a0000
 8001b14:	447a0000 	.word	0x447a0000

08001b18 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2120      	movs	r1, #32
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc30 	bl	8001390 <SENSOR_IO_Read>
 8001b30:	4603      	mov	r3, r0
 8001b32:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	f023 0304 	bic.w	r3, r3, #4
 8001b3a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	2120      	movs	r1, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fbf9 	bl	800135c <SENSOR_IO_Write>
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b088      	sub	sp, #32
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	b2d8      	uxtb	r0, r3
 8001b80:	f107 0208 	add.w	r2, r7, #8
 8001b84:	2302      	movs	r3, #2
 8001b86:	21b2      	movs	r1, #178	; 0xb2
 8001b88:	f7ff fc20 	bl	80013cc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2135      	movs	r1, #53	; 0x35
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fbfc 	bl	8001390 <SENSOR_IO_Read>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	7a3b      	ldrb	r3, [r7, #8]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001bb0:	7ffb      	ldrb	r3, [r7, #31]
 8001bb2:	019b      	lsls	r3, r3, #6
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	7a7b      	ldrb	r3, [r7, #9]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001bc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001bcc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bd0:	10db      	asrs	r3, r3, #3
 8001bd2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	f107 0208 	add.w	r2, r7, #8
 8001bdc:	2304      	movs	r3, #4
 8001bde:	21bc      	movs	r1, #188	; 0xbc
 8001be0:	f7ff fbf4 	bl	80013cc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7a3b      	ldrb	r3, [r7, #8]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	7abb      	ldrb	r3, [r7, #10]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	b2d8      	uxtb	r0, r3
 8001c04:	f107 0208 	add.w	r2, r7, #8
 8001c08:	2302      	movs	r3, #2
 8001c0a:	21aa      	movs	r1, #170	; 0xaa
 8001c0c:	f7ff fbde 	bl	80013cc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7a3b      	ldrb	r3, [r7, #8]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001c1e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	ee07 3a90 	vmov	s15, r3
}
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f000 f960 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 f80d 	bl	8001cb0 <HAL_InitTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	e001      	b.n	8001ca6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca2:	f7ff fc09 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_InitTick+0x6c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_InitTick+0x70>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_InitTick+0x6c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f96d 	bl	8001fba <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d809      	bhi.n	8001d00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f937 	bl	8001f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_InitTick+0x74>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e007      	b.n	8001d10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e004      	b.n	8001d10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	e001      	b.n	8001d10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000024 	.word	0x20000024
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000020 	.word	0x20000020

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000024 	.word	0x20000024
 8001d4c:	20000354 	.word	0x20000354

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000354 	.word	0x20000354

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000024 	.word	0x20000024

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e166      	b.n	80022b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8158 	beq.w	80022ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x40>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d123      	bne.n	8002106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0203 	and.w	r2, r3, #3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80b2 	beq.w	80022ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_GPIO_Init+0x2fc>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <HAL_GPIO_Init+0x2fc>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6613      	str	r3, [r2, #96]	; 0x60
 8002154:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_GPIO_Init+0x2fc>)
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002160:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <HAL_GPIO_Init+0x300>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800218a:	d02b      	beq.n	80021e4 <HAL_GPIO_Init+0x210>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d025      	beq.n	80021e0 <HAL_GPIO_Init+0x20c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_GPIO_Init+0x308>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d01f      	beq.n	80021dc <HAL_GPIO_Init+0x208>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_GPIO_Init+0x30c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d019      	beq.n	80021d8 <HAL_GPIO_Init+0x204>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x310>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_GPIO_Init+0x200>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <HAL_GPIO_Init+0x314>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_GPIO_Init+0x1fc>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_GPIO_Init+0x318>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0x1f8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_GPIO_Init+0x31c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_GPIO_Init+0x1f4>
 80021c4:	2307      	movs	r3, #7
 80021c6:	e00e      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021c8:	2308      	movs	r3, #8
 80021ca:	e00c      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021cc:	2306      	movs	r3, #6
 80021ce:	e00a      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021d0:	2305      	movs	r3, #5
 80021d2:	e008      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021d8:	2303      	movs	r3, #3
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x212>
 80021e4:	2300      	movs	r3, #0
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f6:	4937      	ldr	r1, [pc, #220]	; (80022d4 <HAL_GPIO_Init+0x300>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002204:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002228:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <HAL_GPIO_Init+0x320>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002252:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002258:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_GPIO_Init+0x320>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_GPIO_Init+0x320>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_GPIO_Init+0x320>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f ae91 	bne.w	8001fe4 <HAL_GPIO_Init+0x10>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	48000400 	.word	0x48000400
 80022dc:	48000800 	.word	0x48000800
 80022e0:	48000c00 	.word	0x48000c00
 80022e4:	48001000 	.word	0x48001000
 80022e8:	48001400 	.word	0x48001400
 80022ec:	48001800 	.word	0x48001800
 80022f0:	48001c00 	.word	0x48001c00
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002306:	e0c9      	b.n	800249c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002308:	2201      	movs	r2, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80bc 	beq.w	8002496 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800231e:	4a66      	ldr	r2, [pc, #408]	; (80024b8 <HAL_GPIO_DeInit+0x1c0>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002346:	d02b      	beq.n	80023a0 <HAL_GPIO_DeInit+0xa8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_GPIO_DeInit+0x1c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d025      	beq.n	800239c <HAL_GPIO_DeInit+0xa4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a5b      	ldr	r2, [pc, #364]	; (80024c0 <HAL_GPIO_DeInit+0x1c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01f      	beq.n	8002398 <HAL_GPIO_DeInit+0xa0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_GPIO_DeInit+0x1cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d019      	beq.n	8002394 <HAL_GPIO_DeInit+0x9c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_GPIO_DeInit+0x1d0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_GPIO_DeInit+0x98>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a58      	ldr	r2, [pc, #352]	; (80024cc <HAL_GPIO_DeInit+0x1d4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_GPIO_DeInit+0x94>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_GPIO_DeInit+0x1d8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_DeInit+0x90>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_GPIO_DeInit+0x1dc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_GPIO_DeInit+0x8c>
 8002380:	2307      	movs	r3, #7
 8002382:	e00e      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 8002384:	2308      	movs	r3, #8
 8002386:	e00c      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 8002388:	2306      	movs	r3, #6
 800238a:	e00a      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 800238c:	2305      	movs	r3, #5
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 8002390:	2304      	movs	r3, #4
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_DeInit+0xaa>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d132      	bne.n	8002418 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4947      	ldr	r1, [pc, #284]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4943      	ldr	r1, [pc, #268]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80023ce:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	493c      	ldr	r1, [pc, #240]	; (80024d8 <HAL_GPIO_DeInit+0x1e0>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_DeInit+0x1c0>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43da      	mvns	r2, r3
 800240a:	482b      	ldr	r0, [pc, #172]	; (80024b8 <HAL_GPIO_DeInit+0x1c0>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	400a      	ands	r2, r1
 8002412:	3302      	adds	r3, #2
 8002414:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2103      	movs	r1, #3
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	08d2      	lsrs	r2, r2, #3
 800244c:	4019      	ands	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2103      	movs	r1, #3
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2101      	movs	r1, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2103      	movs	r1, #3
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af2f 	bne.w	8002308 <HAL_GPIO_DeInit+0x10>
  }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40010000 	.word	0x40010000
 80024bc:	48000400 	.word	0x48000400
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48000c00 	.word	0x48000c00
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48001400 	.word	0x48001400
 80024d0:	48001800 	.word	0x48001800
 80024d4:	48001c00 	.word	0x48001c00
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e08d      	b.n	800260a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fffc 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e006      	b.n	8002564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d108      	bne.n	800257e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	e007      	b.n	800258e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69d9      	ldr	r1, [r3, #28]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e021      	b.n	8002668 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe ffbd 	bl	80015bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	f040 80f9 	bne.w	800288a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x34>
 800269e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ed      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Mem_Write+0x4e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0e6      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c6:	f7ff fb43 	bl	8001d50 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fac3 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d1      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a3a      	ldr	r2, [r7, #32]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4603      	mov	r3, r0
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9d3 	bl	8002acc <I2C_RequestMemoryWrite>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0a9      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2bff      	cmp	r3, #255	; 0xff
 8002740:	d90e      	bls.n	8002760 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	b2da      	uxtb	r2, r3
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fc3d 	bl	8002fd8 <I2C_TransferConfig>
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	b2da      	uxtb	r2, r3
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	2300      	movs	r3, #0
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fc2c 	bl	8002fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fabc 	bl	8002d02 <I2C_WaitOnTXISFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e07b      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d034      	beq.n	8002838 <HAL_I2C_Mem_Write+0x1c8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d130      	bne.n	8002838 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	2200      	movs	r2, #0
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fa3f 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e04d      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2bff      	cmp	r3, #255	; 0xff
 80027f8:	d90e      	bls.n	8002818 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	2300      	movs	r3, #0
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fbe1 	bl	8002fd8 <I2C_TransferConfig>
 8002816:	e00f      	b.n	8002838 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fbd0 	bl	8002fd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d19e      	bne.n	8002780 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 faa2 	bl	8002d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e01a      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2220      	movs	r2, #32
 800285c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_I2C_Mem_Write+0x224>)
 800286a:	400b      	ands	r3, r1
 800286c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	fe00e800 	.word	0xfe00e800

08002898 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	f040 80fd 	bne.w	8002aba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_I2C_Mem_Read+0x34>
 80028c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0f1      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x4e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0ea      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ee:	f7ff fa2f 	bl	8001d50 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2319      	movs	r3, #25
 80028fa:	2201      	movs	r2, #1
 80028fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f9af 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0d5      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2222      	movs	r2, #34	; 0x22
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002938:	88f8      	ldrh	r0, [r7, #6]
 800293a:	893a      	ldrh	r2, [r7, #8]
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4603      	mov	r3, r0
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f913 	bl	8002b74 <I2C_RequestMemoryRead>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0ad      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d90e      	bls.n	8002988 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	b2da      	uxtb	r2, r3
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_I2C_Mem_Read+0x22c>)
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fb29 	bl	8002fd8 <I2C_TransferConfig>
 8002986:	e00f      	b.n	80029a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_I2C_Mem_Read+0x22c>)
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fb18 	bl	8002fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	2200      	movs	r2, #0
 80029b0:	2104      	movs	r1, #4
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f956 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07c      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d034      	beq.n	8002a68 <HAL_I2C_Mem_Read+0x1d0>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d130      	bne.n	8002a68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f927 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e04d      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	; 0xff
 8002a28:	d90e      	bls.n	8002a48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	22ff      	movs	r2, #255	; 0xff
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fac9 	bl	8002fd8 <I2C_TransferConfig>
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fab8 	bl	8002fd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d19a      	bne.n	80029a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f98a 	bl	8002d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e01a      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_I2C_Mem_Read+0x230>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	80002400 	.word	0x80002400
 8002ac8:	fe00e800 	.word	0xfe00e800

08002acc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <I2C_RequestMemoryWrite+0xa4>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fa6f 	bl	8002fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f8ff 	bl	8002d02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02c      	b.n	8002b68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1e:	e015      	b.n	8002b4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	69b9      	ldr	r1, [r7, #24]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f8e5 	bl	8002d02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e012      	b.n	8002b68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b42:	893b      	ldrh	r3, [r7, #8]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f884 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	80002000 	.word	0x80002000

08002b74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	8979      	ldrh	r1, [r7, #10]
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <I2C_RequestMemoryRead+0xa4>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa1c 	bl	8002fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f8ac 	bl	8002d02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e02c      	b.n	8002c0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc4:	e015      	b.n	8002bf2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc6:	893b      	ldrh	r3, [r7, #8]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f892 	bl	8002d02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e012      	b.n	8002c0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f831 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	80002000 	.word	0x80002000

08002c1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d103      	bne.n	8002c3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	619a      	str	r2, [r3, #24]
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c74:	e031      	b.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d02d      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7ff f867 	bl	8001d50 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d122      	bne.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d113      	bne.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00f      	b.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d0be      	beq.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d0e:	e033      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f87f 	bl	8002e18 <I2C_IsErrorOccurred>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e031      	b.n	8002d88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d025      	beq.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7ff f810 	bl	8001d50 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11a      	bne.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d013      	beq.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e007      	b.n	8002d88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d1c4      	bne.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d9c:	e02f      	b.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f838 	bl	8002e18 <I2C_IsErrorOccurred>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e02d      	b.n	8002e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fe ffcd 	bl	8001d50 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d013      	beq.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e007      	b.n	8002e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d1c8      	bne.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d068      	beq.n	8002f16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e4c:	e049      	b.n	8002ee2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d045      	beq.n	8002ee2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe ff7b 	bl	8001d50 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_IsErrorOccurred+0x54>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d13a      	bne.n	8002ee2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e8e:	d121      	bne.n	8002ed4 <I2C_IsErrorOccurred+0xbc>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e96:	d01d      	beq.n	8002ed4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d01a      	beq.n	8002ed4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eae:	f7fe ff4f 	bl	8001d50 <HAL_GetTick>
 8002eb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb4:	e00e      	b.n	8002ed4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eb6:	f7fe ff4b 	bl	8001d50 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b19      	cmp	r3, #25
 8002ec2:	d907      	bls.n	8002ed4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f043 0320 	orr.w	r3, r3, #32
 8002eca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ed2:	e006      	b.n	8002ee2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d1e9      	bne.n	8002eb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d003      	beq.n	8002ef8 <I2C_IsErrorOccurred+0xe0>
 8002ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0aa      	beq.n	8002e4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2220      	movs	r2, #32
 8002f06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01c      	beq.n	8002fc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fe45 	bl	8002c1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <I2C_IsErrorOccurred+0x1bc>)
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	fe00e800 	.word	0xfe00e800

08002fd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ff0:	7a7b      	ldrb	r3, [r7, #9]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	4313      	orrs	r3, r2
 8003002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003006:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	0d5b      	lsrs	r3, r3, #21
 8003012:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <I2C_TransferConfig+0x60>)
 8003018:	430b      	orrs	r3, r1
 800301a:	43db      	mvns	r3, r3
 800301c:	ea02 0103 	and.w	r1, r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	03ff63ff 	.word	0x03ff63ff

0800303c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	d138      	bne.n	80030c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800305c:	2302      	movs	r3, #2
 800305e:	e032      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d139      	bne.n	800315c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e033      	b.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	; 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003124:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d102      	bne.n	8003184 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800317e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003182:	e00b      	b.n	800319c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d102      	bne.n	800319a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	e000      	b.n	800319c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800319a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40007000 	.word	0x40007000

080031ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d141      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d131      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2232      	movs	r2, #50	; 0x32
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	e002      	b.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d102      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d158      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e057      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800323c:	e04d      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d141      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d131      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	e002      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d102      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f2      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d112      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e011      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c8:	e007      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40007000 	.word	0x40007000
 80032ec:	20000000 	.word	0x20000000
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f000 bc08 	b.w	8003b18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003308:	4b96      	ldr	r3, [pc, #600]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003312:	4b94      	ldr	r3, [pc, #592]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80e4 	beq.w	80034f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_RCC_OscConfig+0x4c>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	f040 808b 	bne.w	800344e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 8087 	bne.w	800344e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003340:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_OscConfig+0x64>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e3df      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_RCC_OscConfig+0x7e>
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003370:	e005      	b.n	800337e <HAL_RCC_OscConfig+0x8a>
 8003372:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337e:	4293      	cmp	r3, r2
 8003380:	d223      	bcs.n	80033ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fdcc 	bl	8003f24 <RCC_SetFlashLatencyFromMSIRange>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e3c0      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a72      	ldr	r2, [pc, #456]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	496d      	ldr	r1, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b4:	4b6b      	ldr	r3, [pc, #428]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4968      	ldr	r1, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
 80033c8:	e025      	b.n	8003416 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ca:	4b66      	ldr	r3, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4960      	ldr	r1, [pc, #384]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e8:	4b5e      	ldr	r3, [pc, #376]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	495b      	ldr	r1, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fd8c 	bl	8003f24 <RCC_SetFlashLatencyFromMSIRange>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e380      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003416:	f000 fcc1 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	4950      	ldr	r1, [pc, #320]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_RCC_OscConfig+0x278>)
 8003434:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_RCC_OscConfig+0x27c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fc38 	bl	8001cb0 <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d052      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	e364      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d032      	beq.n	80034bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003456:	4b43      	ldr	r3, [pc, #268]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a42      	ldr	r2, [pc, #264]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003462:	f7fe fc75 	bl	8001d50 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800346a:	f7fe fc71 	bl	8001d50 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e34d      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	4b36      	ldr	r3, [pc, #216]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4930      	ldr	r1, [pc, #192]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	492b      	ldr	r1, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
 80034ba:	e01a      	b.n	80034f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c8:	f7fe fc42 	bl	8001d50 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d0:	f7fe fc3e 	bl	8001d50 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e31a      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1dc>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d073      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d005      	beq.n	8003510 <HAL_RCC_OscConfig+0x21c>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d10e      	bne.n	8003528 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d063      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d15f      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e2f7      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x24c>
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e025      	b.n	800358c <HAL_RCC_OscConfig+0x298>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d114      	bne.n	8003574 <HAL_RCC_OscConfig+0x280>
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a02      	ldr	r2, [pc, #8]	; (8003564 <HAL_RCC_OscConfig+0x270>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e013      	b.n	800358c <HAL_RCC_OscConfig+0x298>
 8003564:	40021000 	.word	0x40021000
 8003568:	0800862c 	.word	0x0800862c
 800356c:	20000000 	.word	0x20000000
 8003570:	20000020 	.word	0x20000020
 8003574:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a9f      	ldr	r2, [pc, #636]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b9d      	ldr	r3, [pc, #628]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a9c      	ldr	r2, [pc, #624]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fbdc 	bl	8001d50 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fbd8 	bl	8001d50 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e2b4      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	4b92      	ldr	r3, [pc, #584]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x2a8>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fbc8 	bl	8001d50 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fbc4 	bl	8001d50 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e2a0      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d6:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2d0>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d060      	beq.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x310>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d119      	bne.n	8003632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d116      	bne.n	8003632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_OscConfig+0x328>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e27d      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	4973      	ldr	r1, [pc, #460]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	e040      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d023      	beq.n	8003682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363a:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fb83 	bl	8001d50 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364e:	f7fe fb7f 	bl	8001d50 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e25b      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	495f      	ldr	r1, [pc, #380]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	e018      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b5d      	ldr	r3, [pc, #372]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fe fb5f 	bl	8001d50 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fb5b 	bl	8001d50 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e237      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a8:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03c      	beq.n	800373a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ce:	4a4a      	ldr	r2, [pc, #296]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fb3a 	bl	8001d50 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fe fb36 	bl	8001d50 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e212      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3ec>
 8003700:	e01b      	b.n	800373a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003702:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003708:	4a3b      	ldr	r2, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fe fb1d 	bl	8001d50 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fb19 	bl	8001d50 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1f5      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372c:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ef      	bne.n	800371a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a6 	beq.w	8003894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003748:	2300      	movs	r3, #0
 800374a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	; 0x58
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_RCC_OscConfig+0x508>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d118      	bne.n	80037b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_OscConfig+0x508>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x508>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378c:	f7fe fae0 	bl	8001d50 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fe fadc 	bl	8001d50 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1b8      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <HAL_RCC_OscConfig+0x508>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0x4d8>
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ca:	e029      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d115      	bne.n	8003800 <HAL_RCC_OscConfig+0x50c>
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
 8003800:	4b9d      	ldr	r3, [pc, #628]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a9c      	ldr	r2, [pc, #624]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a98      	ldr	r2, [pc, #608]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe fa92 	bl	8001d50 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe fa8e 	bl	8001d50 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e168      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b8c      	ldr	r3, [pc, #560]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ed      	beq.n	8003830 <HAL_RCC_OscConfig+0x53c>
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe fa7b 	bl	8001d50 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe fa77 	bl	8001d50 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e151      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003874:	4b80      	ldr	r3, [pc, #512]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ed      	bne.n	800385e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003882:	7ffb      	ldrb	r3, [r7, #31]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b7b      	ldr	r3, [pc, #492]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	4a7a      	ldr	r2, [pc, #488]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03c      	beq.n	800391a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038a8:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80038aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ae:	4a72      	ldr	r2, [pc, #456]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fe fa4a 	bl	8001d50 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038c0:	f7fe fa46 	bl	8001d50 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e122      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038d2:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80038d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ef      	beq.n	80038c0 <HAL_RCC_OscConfig+0x5cc>
 80038e0:	e01b      	b.n	800391a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80038e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e8:	4a63      	ldr	r2, [pc, #396]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fe fa2d 	bl	8001d50 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fa:	f7fe fa29 	bl	8001d50 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e105      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800390c:	4b5a      	ldr	r3, [pc, #360]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 800390e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ef      	bne.n	80038fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80f9 	beq.w	8003b16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 80cf 	bne.w	8003acc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0203 	and.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	429a      	cmp	r2, r3
 8003940:	d12c      	bne.n	800399c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	3b01      	subs	r3, #1
 800394e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d123      	bne.n	800399c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d11b      	bne.n	800399c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d113      	bne.n	800399c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d109      	bne.n	800399c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d071      	beq.n	8003a80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d068      	beq.n	8003a74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039a2:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039ae:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0ac      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ca:	f7fe f9c1 	bl	8001d50 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe f9bd 	bl	8001d50 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e099      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f0      	bne.n	80039d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_RCC_OscConfig+0x788>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a0a:	0212      	lsls	r2, r2, #8
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a12:	0852      	lsrs	r2, r2, #1
 8003a14:	3a01      	subs	r2, #1
 8003a16:	0552      	lsls	r2, r2, #21
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a1e:	0852      	lsrs	r2, r2, #1
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0652      	lsls	r2, r2, #25
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a2a:	06d2      	lsls	r2, r2, #27
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4912      	ldr	r1, [pc, #72]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a4c:	f7fe f980 	bl	8001d50 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fe f97c 	bl	8001d50 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e058      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a72:	e050      	b.n	8003b16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e04f      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d144      	bne.n	8003b16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aa4:	f7fe f954 	bl	8001d50 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe f950 	bl	8001d50 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e02c      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x7b8>
 8003aca:	e024      	b.n	8003b16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d01f      	beq.n	8003b12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe f937 	bl	8001d50 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe f933 	bl	8001d50 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e00f      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	4905      	ldr	r1, [pc, #20]	; (8003b20 <HAL_RCC_OscConfig+0x82c>)
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_OscConfig+0x830>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60cb      	str	r3, [r1, #12]
 8003b10:	e001      	b.n	8003b16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	feeefffc 	.word	0xfeeefffc

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e11d      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b90      	ldr	r3, [pc, #576]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 020f 	bic.w	r2, r3, #15
 8003b56:	498b      	ldr	r1, [pc, #556]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b89      	ldr	r3, [pc, #548]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e105      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	4b81      	ldr	r3, [pc, #516]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d908      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b7e      	ldr	r3, [pc, #504]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	497b      	ldr	r1, [pc, #492]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d079      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0dc      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003bc2:	f000 fa09 	bl	8003fd8 <RCC_GetSysClockFreqFromPLLSource>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4a70      	ldr	r2, [pc, #448]	; (8003d8c <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d946      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bce:	4b6e      	ldr	r3, [pc, #440]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d140      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bda:	4b6b      	ldr	r3, [pc, #428]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be2:	4a69      	ldr	r2, [pc, #420]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e035      	b.n	8003c5c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf8:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d115      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b9      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c10:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0ad      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0a5      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c30:	f000 f8b4 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a55      	ldr	r2, [pc, #340]	; (8003d8c <HAL_RCC_ClockConfig+0x264>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d90f      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c3c:	4b52      	ldr	r3, [pc, #328]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c50:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5c:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f023 0203 	bic.w	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4947      	ldr	r1, [pc, #284]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6e:	f7fe f86f 	bl	8001d50 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c76:	f7fe f86b 	bl	8001d50 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e077      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 020c 	and.w	r2, r3, #12
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d1eb      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a37      	ldr	r2, [pc, #220]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d208      	bcs.n	8003cde <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	492b      	ldr	r1, [pc, #172]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d210      	bcs.n	8003d0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 020f 	bic.w	r2, r3, #15
 8003cf4:	4923      	ldr	r1, [pc, #140]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_ClockConfig+0x25c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e036      	b.n	8003d7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4918      	ldr	r1, [pc, #96]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4910      	ldr	r1, [pc, #64]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4c:	f000 f826 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <HAL_RCC_ClockConfig+0x268>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x26c>)
 8003d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd ff9d 	bl	8001cb0 <HAL_InitTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	73fb      	strb	r3, [r7, #15]

  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	04c4b400 	.word	0x04c4b400
 8003d90:	0800862c 	.word	0x0800862c
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000020 	.word	0x20000020

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d121      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d11e      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dd0:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ddc:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	e005      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dec:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003df8:	4a2b      	ldr	r2, [pc, #172]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10d      	bne.n	8003e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d102      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCC_GetSysClockFreq+0x110>)
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	e004      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d134      	bne.n	8003e94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0xac>
 8003e40:	e005      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_GetSysClockFreq+0x110>)
 8003e44:	617b      	str	r3, [r7, #20]
      break;
 8003e46:	e005      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e4a:	617b      	str	r3, [r7, #20]
      break;
 8003e4c:	e002      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	617b      	str	r3, [r7, #20]
      break;
 8003e52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3301      	adds	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	fb03 f202 	mul.w	r2, r3, r2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	0e5b      	lsrs	r3, r3, #25
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	3301      	adds	r3, #1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e94:	69bb      	ldr	r3, [r7, #24]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08008644 	.word	0x08008644
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200

08003eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000000 	.word	0x20000000

08003ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ed0:	f7ff fff0 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	0800863c 	.word	0x0800863c

08003ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003efc:	f7ff ffda 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0adb      	lsrs	r3, r3, #11
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4904      	ldr	r1, [pc, #16]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	0800863c 	.word	0x0800863c

08003f24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f3c:	f7ff f916 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003f40:	6178      	str	r0, [r7, #20]
 8003f42:	e014      	b.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f5c:	f7ff f906 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003f60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d10b      	bne.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d913      	bls.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2ba0      	cmp	r3, #160	; 0xa0
 8003f80:	d902      	bls.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f82:	2302      	movs	r3, #2
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	e00d      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f88:	2301      	movs	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	e00a      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b7f      	cmp	r3, #127	; 0x7f
 8003f92:	d902      	bls.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f94:	2302      	movs	r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e004      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d101      	bne.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 020f 	bic.w	r2, r3, #15
 8003fac:	4909      	ldr	r1, [pc, #36]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d00b      	beq.n	8004006 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d825      	bhi.n	8004040 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d008      	beq.n	800400c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d11f      	bne.n	8004040 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004002:	613b      	str	r3, [r7, #16]
    break;
 8004004:	e01f      	b.n	8004046 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004008:	613b      	str	r3, [r7, #16]
    break;
 800400a:	e01c      	b.n	8004046 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e005      	b.n	8004034 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	613b      	str	r3, [r7, #16]
    break;
 800403e:	e002      	b.n	8004046 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
    break;
 8004044:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	3301      	adds	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	fb03 f202 	mul.w	r2, r3, r2
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0e5b      	lsrs	r3, r3, #25
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004086:	683b      	ldr	r3, [r7, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40021000 	.word	0x40021000
 8004098:	00f42400 	.word	0x00f42400
 800409c:	007a1200 	.word	0x007a1200
 80040a0:	08008644 	.word	0x08008644

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d040      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	2b80      	cmp	r3, #128	; 0x80
 80040c6:	d02a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d825      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040cc:	2b60      	cmp	r3, #96	; 0x60
 80040ce:	d026      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040d0:	2b60      	cmp	r3, #96	; 0x60
 80040d2:	d821      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d006      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d81d      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d010      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040e4:	e018      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e6:	4b89      	ldr	r3, [pc, #548]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4a88      	ldr	r2, [pc, #544]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040f2:	e015      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb02 	bl	8004704 <RCCEx_PLLSAI1_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004104:	e00c      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3320      	adds	r3, #32
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fbed 	bl	80048ec <RCCEx_PLLSAI2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	74fb      	strb	r3, [r7, #19]
      break;
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800411e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004126:	4b79      	ldr	r3, [pc, #484]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800412c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004134:	4975      	ldr	r1, [pc, #468]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800413c:	e001      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d047      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d030      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d82a      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800415e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004162:	d02a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004168:	d824      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800416a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d81e      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800417a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417e:	d010      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004180:	e018      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004182:	4b62      	ldr	r3, [pc, #392]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a61      	ldr	r2, [pc, #388]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800418e:	e015      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fab4 	bl	8004704 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a0:	e00c      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3320      	adds	r3, #32
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fb9f 	bl	80048ec <RCCEx_PLLSAI2_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b2:	e003      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	74fb      	strb	r3, [r7, #19]
      break;
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80041ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041c2:	4b52      	ldr	r3, [pc, #328]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	494e      	ldr	r1, [pc, #312]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041d8:	e001      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 809f 	beq.w	800432a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	4a40      	ldr	r2, [pc, #256]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	; 0x58
 8004212:	4b3e      	ldr	r3, [pc, #248]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422e:	f7fd fd8f 	bl	8001d50 <HAL_GetTick>
 8004232:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004234:	e009      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd fd8b 	bl	8001d50 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
        break;
 8004248:	e005      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d15b      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01f      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	429a      	cmp	r2, r3
 8004278:	d019      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004286:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a6:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d016      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fd4a 	bl	8001d50 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042be:	e00b      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd fd46 	bl	8001d50 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d902      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	74fb      	strb	r3, [r7, #19]
            break;
 80042d6:	e006      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ec      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	4903      	ldr	r1, [pc, #12]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
 800430a:	e005      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004318:	7c7b      	ldrb	r3, [r7, #17]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4ba0      	ldr	r3, [pc, #640]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	4a9f      	ldr	r2, [pc, #636]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004336:	4b9a      	ldr	r3, [pc, #616]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f023 0203 	bic.w	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	4996      	ldr	r1, [pc, #600]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004358:	4b91      	ldr	r3, [pc, #580]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 020c 	bic.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	498e      	ldr	r1, [pc, #568]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800437a:	4b89      	ldr	r3, [pc, #548]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	4985      	ldr	r1, [pc, #532]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800439c:	4b80      	ldr	r3, [pc, #512]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	497d      	ldr	r1, [pc, #500]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043be:	4b78      	ldr	r3, [pc, #480]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	4974      	ldr	r1, [pc, #464]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e0:	4b6f      	ldr	r3, [pc, #444]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	496c      	ldr	r1, [pc, #432]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004402:	4b67      	ldr	r3, [pc, #412]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	4963      	ldr	r1, [pc, #396]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004424:	4b5e      	ldr	r3, [pc, #376]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004432:	495b      	ldr	r1, [pc, #364]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004446:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	4952      	ldr	r1, [pc, #328]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004468:	4b4d      	ldr	r3, [pc, #308]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	494a      	ldr	r1, [pc, #296]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800448a:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	4941      	ldr	r1, [pc, #260]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ac:	4b3c      	ldr	r3, [pc, #240]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	4939      	ldr	r1, [pc, #228]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ce:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	4930      	ldr	r1, [pc, #192]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ec:	d106      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ee:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f8:	60d3      	str	r3, [r2, #12]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f8f9 	bl	8004704 <RCCEx_PLLSAI1_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d04d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004534:	d108      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004542:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004546:	e012      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004554:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004566:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004576:	d106      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004582:	60d3      	str	r3, [r2, #12]
 8004584:	e020      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458e:	d109      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a02      	ldr	r2, [pc, #8]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e014      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f8a5 	bl	8004704 <RCCEx_PLLSAI1_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d028      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d4:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e2:	4947      	ldr	r1, [pc, #284]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f2:	d106      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a41      	ldr	r2, [pc, #260]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fe:	60d3      	str	r3, [r2, #12]
 8004600:	e011      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460a:	d10c      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	2101      	movs	r1, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f876 	bl	8004704 <RCCEx_PLLSAI1_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004622:	7cfb      	ldrb	r3, [r7, #19]
 8004624:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01e      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004632:	4b33      	ldr	r3, [pc, #204]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	492f      	ldr	r1, [pc, #188]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f851 	bl	8004704 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004682:	f023 0204 	bic.w	r2, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468c:	491c      	ldr	r1, [pc, #112]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a6:	f023 0218 	bic.w	r2, r3, #24
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	4913      	ldr	r1, [pc, #76]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d4:	490a      	ldr	r1, [pc, #40]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e6:	d105      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000

08004704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800471e:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0203 	and.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d103      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
       ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d142      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	e03f      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d018      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x72>
 8004744:	2b03      	cmp	r3, #3
 8004746:	d825      	bhi.n	8004794 <RCCEx_PLLSAI1_Config+0x90>
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0x4e>
 800474c:	2b02      	cmp	r3, #2
 800474e:	d009      	beq.n	8004764 <RCCEx_PLLSAI1_Config+0x60>
 8004750:	e020      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004752:	4b62      	ldr	r3, [pc, #392]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d11d      	bne.n	800479a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004762:	e01a      	b.n	800479a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004764:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004774:	e013      	b.n	800479e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004776:	4b59      	ldr	r3, [pc, #356]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004782:	4b56      	ldr	r3, [pc, #344]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004792:	e006      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e004      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4949      	ldr	r1, [pc, #292]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 8086 	bne.w	80048d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047c4:	4b45      	ldr	r3, [pc, #276]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a44      	ldr	r2, [pc, #272]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fabe 	bl	8001d50 <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047d6:	e009      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d8:	f7fd faba 	bl	8001d50 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d902      	bls.n	80047ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ea:	e005      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ec:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ef      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d168      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d113      	bne.n	800482c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004804:	4b35      	ldr	r3, [pc, #212]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480a:	4013      	ands	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	0211      	lsls	r1, r2, #8
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	06d2      	lsls	r2, r2, #27
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6852      	ldr	r2, [r2, #4]
 800481e:	3a01      	subs	r2, #1
 8004820:	0112      	lsls	r2, r2, #4
 8004822:	430a      	orrs	r2, r1
 8004824:	492d      	ldr	r1, [pc, #180]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	610b      	str	r3, [r1, #16]
 800482a:	e02d      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d115      	bne.n	800485e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6892      	ldr	r2, [r2, #8]
 800483e:	0211      	lsls	r1, r2, #8
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6912      	ldr	r2, [r2, #16]
 8004844:	0852      	lsrs	r2, r2, #1
 8004846:	3a01      	subs	r2, #1
 8004848:	0552      	lsls	r2, r2, #21
 800484a:	4311      	orrs	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	3a01      	subs	r2, #1
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	430a      	orrs	r2, r1
 8004856:	4921      	ldr	r1, [pc, #132]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004858:	4313      	orrs	r3, r2
 800485a:	610b      	str	r3, [r1, #16]
 800485c:	e014      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800485e:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	0211      	lsls	r1, r2, #8
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6952      	ldr	r2, [r2, #20]
 8004870:	0852      	lsrs	r2, r2, #1
 8004872:	3a01      	subs	r2, #1
 8004874:	0652      	lsls	r2, r2, #25
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6852      	ldr	r2, [r2, #4]
 800487c:	3a01      	subs	r2, #1
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	430a      	orrs	r2, r1
 8004882:	4916      	ldr	r1, [pc, #88]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a13      	ldr	r2, [pc, #76]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800488e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd fa5c 	bl	8001d50 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800489a:	e009      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800489c:	f7fd fa58 	bl	8001d50 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d902      	bls.n	80048b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
          break;
 80048ae:	e005      	b.n	80048bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	07ff800f 	.word	0x07ff800f
 80048e4:	ff9f800f 	.word	0xff9f800f
 80048e8:	f9ff800f 	.word	0xf9ff800f

080048ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fa:	4b72      	ldr	r3, [pc, #456]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004906:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0203 	and.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d103      	bne.n	800491e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
       ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d142      	bne.n	80049a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
 8004922:	e03f      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d018      	beq.n	800495e <RCCEx_PLLSAI2_Config+0x72>
 800492c:	2b03      	cmp	r3, #3
 800492e:	d825      	bhi.n	800497c <RCCEx_PLLSAI2_Config+0x90>
 8004930:	2b01      	cmp	r3, #1
 8004932:	d002      	beq.n	800493a <RCCEx_PLLSAI2_Config+0x4e>
 8004934:	2b02      	cmp	r3, #2
 8004936:	d009      	beq.n	800494c <RCCEx_PLLSAI2_Config+0x60>
 8004938:	e020      	b.n	800497c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800493a:	4b62      	ldr	r3, [pc, #392]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d11d      	bne.n	8004982 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494a:	e01a      	b.n	8004982 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800494c:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d116      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495c:	e013      	b.n	8004986 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800495e:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800496a:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800497a:	e006      	b.n	800498a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e004      	b.n	800498c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004982:	bf00      	nop
 8004984:	e002      	b.n	800498c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800498a:	bf00      	nop
    }

    if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004992:	4b4c      	ldr	r3, [pc, #304]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4949      	ldr	r1, [pc, #292]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8086 	bne.w	8004ab8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049ac:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a44      	ldr	r2, [pc, #272]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b8:	f7fd f9ca 	bl	8001d50 <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049be:	e009      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049c0:	f7fd f9c6 	bl	8001d50 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	73fb      	strb	r3, [r7, #15]
        break;
 80049d2:	e005      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d4:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ef      	bne.n	80049c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d168      	bne.n	8004ab8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d113      	bne.n	8004a14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ec:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6892      	ldr	r2, [r2, #8]
 80049f8:	0211      	lsls	r1, r2, #8
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	06d2      	lsls	r2, r2, #27
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6852      	ldr	r2, [r2, #4]
 8004a06:	3a01      	subs	r2, #1
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	492d      	ldr	r1, [pc, #180]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	614b      	str	r3, [r1, #20]
 8004a12:	e02d      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d115      	bne.n	8004a46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	0211      	lsls	r1, r2, #8
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6912      	ldr	r2, [r2, #16]
 8004a2c:	0852      	lsrs	r2, r2, #1
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0552      	lsls	r2, r2, #21
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6852      	ldr	r2, [r2, #4]
 8004a38:	3a01      	subs	r2, #1
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4921      	ldr	r1, [pc, #132]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	614b      	str	r3, [r1, #20]
 8004a44:	e014      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6952      	ldr	r2, [r2, #20]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0652      	lsls	r2, r2, #25
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6852      	ldr	r2, [r2, #4]
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd f968 	bl	8001d50 <HAL_GetTick>
 8004a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a82:	e009      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a84:	f7fd f964 	bl	8001d50 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d902      	bls.n	8004a98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	73fb      	strb	r3, [r7, #15]
          break;
 8004a96:	e005      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ef      	beq.n	8004a84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	07ff800f 	.word	0x07ff800f
 8004acc:	ff9f800f 	.word	0xff9f800f
 8004ad0:	f9ff800f 	.word	0xf9ff800f

08004ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e042      	b.n	8004b6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc fd83 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2224      	movs	r2, #36	; 0x24
 8004b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fbb4 	bl	800528c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8b5 	bl	8004c94 <UART_SetConfig>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e01b      	b.n	8004b6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fc33 	bl	80053d0 <UART_CheckIdleState>
 8004b6a:	4603      	mov	r3, r0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d17c      	bne.n	8004c88 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_Transmit+0x26>
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e075      	b.n	8004c8a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2221      	movs	r2, #33	; 0x21
 8004baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bae:	f7fd f8cf 	bl	8001d50 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d108      	bne.n	8004be0 <HAL_UART_Transmit+0x6c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e003      	b.n	8004be8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004be8:	e031      	b.n	8004c4e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fc95 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e03e      	b.n	8004c8a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	881a      	ldrh	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3302      	adds	r3, #2
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	e008      	b.n	8004c3c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	b292      	uxth	r2, r2
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1c7      	bne.n	8004bea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2140      	movs	r1, #64	; 0x40
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fc5d 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e006      	b.n	8004c8a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b08c      	sub	sp, #48	; 0x30
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4baa      	ldr	r3, [pc, #680]	; (8004f6c <UART_SetConfig+0x2d8>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a9f      	ldr	r2, [pc, #636]	; (8004f70 <UART_SetConfig+0x2dc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	f023 010f 	bic.w	r1, r3, #15
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a90      	ldr	r2, [pc, #576]	; (8004f74 <UART_SetConfig+0x2e0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d125      	bne.n	8004d84 <UART_SetConfig+0xf0>
 8004d38:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d81a      	bhi.n	8004d7c <UART_SetConfig+0xe8>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0xb8>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e116      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	e112      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d72:	e10e      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	e10a      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e106      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <UART_SetConfig+0x2e8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d138      	bne.n	8004e00 <UART_SetConfig+0x16c>
 8004d8e:	4b7a      	ldr	r3, [pc, #488]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	d82d      	bhi.n	8004df8 <UART_SetConfig+0x164>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x110>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004df9 	.word	0x08004df9
 8004dac:	08004df9 	.word	0x08004df9
 8004db0:	08004df9 	.word	0x08004df9
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004df9 	.word	0x08004df9
 8004dbc:	08004df9 	.word	0x08004df9
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004df9 	.word	0x08004df9
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dde:	e0d8      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004de0:	2302      	movs	r3, #2
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de6:	e0d4      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dee:	e0d0      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e0cc      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e0c8      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a5e      	ldr	r2, [pc, #376]	; (8004f80 <UART_SetConfig+0x2ec>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d125      	bne.n	8004e56 <UART_SetConfig+0x1c2>
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d016      	beq.n	8004e46 <UART_SetConfig+0x1b2>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d818      	bhi.n	8004e4e <UART_SetConfig+0x1ba>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d00a      	beq.n	8004e36 <UART_SetConfig+0x1a2>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d814      	bhi.n	8004e4e <UART_SetConfig+0x1ba>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <UART_SetConfig+0x19a>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d008      	beq.n	8004e3e <UART_SetConfig+0x1aa>
 8004e2c:	e00f      	b.n	8004e4e <UART_SetConfig+0x1ba>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e34:	e0ad      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e36:	2302      	movs	r3, #2
 8004e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3c:	e0a9      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e44:	e0a5      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e46:	2308      	movs	r3, #8
 8004e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4c:	e0a1      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e4e:	2310      	movs	r3, #16
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e54:	e09d      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a4a      	ldr	r2, [pc, #296]	; (8004f84 <UART_SetConfig+0x2f0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d125      	bne.n	8004eac <UART_SetConfig+0x218>
 8004e60:	4b45      	ldr	r3, [pc, #276]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e6c:	d016      	beq.n	8004e9c <UART_SetConfig+0x208>
 8004e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e70:	d818      	bhi.n	8004ea4 <UART_SetConfig+0x210>
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d00a      	beq.n	8004e8c <UART_SetConfig+0x1f8>
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d814      	bhi.n	8004ea4 <UART_SetConfig+0x210>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <UART_SetConfig+0x1f0>
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d008      	beq.n	8004e94 <UART_SetConfig+0x200>
 8004e82:	e00f      	b.n	8004ea4 <UART_SetConfig+0x210>
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	e082      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e07e      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e07a      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e076      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	e072      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <UART_SetConfig+0x2f4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d12a      	bne.n	8004f0c <UART_SetConfig+0x278>
 8004eb6:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec4:	d01a      	beq.n	8004efc <UART_SetConfig+0x268>
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eca:	d81b      	bhi.n	8004f04 <UART_SetConfig+0x270>
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed0:	d00c      	beq.n	8004eec <UART_SetConfig+0x258>
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed6:	d815      	bhi.n	8004f04 <UART_SetConfig+0x270>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <UART_SetConfig+0x250>
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d008      	beq.n	8004ef4 <UART_SetConfig+0x260>
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x270>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e052      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e04e      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efa:	e04a      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f02:	e046      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0a:	e042      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <UART_SetConfig+0x2dc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d13a      	bne.n	8004f8c <UART_SetConfig+0x2f8>
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <UART_SetConfig+0x2e4>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f24:	d01a      	beq.n	8004f5c <UART_SetConfig+0x2c8>
 8004f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2a:	d81b      	bhi.n	8004f64 <UART_SetConfig+0x2d0>
 8004f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f30:	d00c      	beq.n	8004f4c <UART_SetConfig+0x2b8>
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d815      	bhi.n	8004f64 <UART_SetConfig+0x2d0>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <UART_SetConfig+0x2b0>
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d008      	beq.n	8004f54 <UART_SetConfig+0x2c0>
 8004f42:	e00f      	b.n	8004f64 <UART_SetConfig+0x2d0>
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e022      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e01e      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e01a      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f62:	e016      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6a:	e012      	b.n	8004f92 <UART_SetConfig+0x2fe>
 8004f6c:	cfff69f3 	.word	0xcfff69f3
 8004f70:	40008000 	.word	0x40008000
 8004f74:	40013800 	.word	0x40013800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40004400 	.word	0x40004400
 8004f80:	40004800 	.word	0x40004800
 8004f84:	40004c00 	.word	0x40004c00
 8004f88:	40005000 	.word	0x40005000
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4aae      	ldr	r2, [pc, #696]	; (8005250 <UART_SetConfig+0x5bc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	f040 8097 	bne.w	80050cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d823      	bhi.n	8004fee <UART_SetConfig+0x35a>
 8004fa6:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0x318>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fef 	.word	0x08004fef
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fef 	.word	0x08004fef
 8004fbc:	08004fdf 	.word	0x08004fdf
 8004fc0:	08004fef 	.word	0x08004fef
 8004fc4:	08004fef 	.word	0x08004fef
 8004fc8:	08004fef 	.word	0x08004fef
 8004fcc:	08004fe7 	.word	0x08004fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f7fe ff7c 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 8004fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd6:	e010      	b.n	8004ffa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd8:	4b9e      	ldr	r3, [pc, #632]	; (8005254 <UART_SetConfig+0x5c0>)
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fdc:	e00d      	b.n	8004ffa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fde:	f7fe fedd 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fe4:	e009      	b.n	8004ffa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fec:	e005      	b.n	8004ffa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8130 	beq.w	8005262 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	4a94      	ldr	r2, [pc, #592]	; (8005258 <UART_SetConfig+0x5c4>)
 8005008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500c:	461a      	mov	r2, r3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	fbb3 f3f2 	udiv	r3, r3, r2
 8005014:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	429a      	cmp	r2, r3
 8005024:	d305      	bcc.n	8005032 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005038:	e113      	b.n	8005262 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2200      	movs	r2, #0
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	60fa      	str	r2, [r7, #12]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	4a84      	ldr	r2, [pc, #528]	; (8005258 <UART_SetConfig+0x5c4>)
 8005048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504c:	b29b      	uxth	r3, r3
 800504e:	2200      	movs	r2, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800505c:	f7fb fdbc 	bl	8000bd8 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	020b      	lsls	r3, r1, #8
 8005072:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005076:	0202      	lsls	r2, r0, #8
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	6849      	ldr	r1, [r1, #4]
 800507c:	0849      	lsrs	r1, r1, #1
 800507e:	2000      	movs	r0, #0
 8005080:	460c      	mov	r4, r1
 8005082:	4605      	mov	r5, r0
 8005084:	eb12 0804 	adds.w	r8, r2, r4
 8005088:	eb43 0905 	adc.w	r9, r3, r5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	469a      	mov	sl, r3
 8005094:	4693      	mov	fp, r2
 8005096:	4652      	mov	r2, sl
 8005098:	465b      	mov	r3, fp
 800509a:	4640      	mov	r0, r8
 800509c:	4649      	mov	r1, r9
 800509e:	f7fb fd9b 	bl	8000bd8 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4613      	mov	r3, r2
 80050a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d308      	bcc.n	80050c4 <UART_SetConfig+0x430>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b8:	d204      	bcs.n	80050c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e0ce      	b.n	8005262 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050ca:	e0ca      	b.n	8005262 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d166      	bne.n	80051a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80050d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d827      	bhi.n	800512e <UART_SetConfig+0x49a>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x450>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe fee0 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800510e:	e014      	b.n	800513a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe fef2 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 8005114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b4e      	ldr	r3, [pc, #312]	; (8005254 <UART_SetConfig+0x5c0>)
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fe fe3d 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8090 	beq.w	8005262 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	4a44      	ldr	r2, [pc, #272]	; (8005258 <UART_SetConfig+0x5c4>)
 8005148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514c:	461a      	mov	r2, r3
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	fbb3 f3f2 	udiv	r3, r3, r2
 8005154:	005a      	lsls	r2, r3, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	441a      	add	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	d916      	bls.n	800519c <UART_SetConfig+0x508>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d212      	bcs.n	800519c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f023 030f 	bic.w	r3, r3, #15
 800517e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	b29a      	uxth	r2, r3
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	4313      	orrs	r3, r2
 8005190:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	8bfa      	ldrh	r2, [r7, #30]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e062      	b.n	8005262 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051a2:	e05e      	b.n	8005262 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d828      	bhi.n	80051fe <UART_SetConfig+0x56a>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x520>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ff 	.word	0x080051ff
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fe fe78 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051de:	e014      	b.n	800520a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fe fe8a 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 80051e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <UART_SetConfig+0x5c0>)
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051ec:	e00d      	b.n	800520a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fdd5 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f4:	e009      	b.n	800520a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051fc:	e005      	b.n	800520a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005208:	bf00      	nop
    }

    if (pclk != 0U)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d028      	beq.n	8005262 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	4a10      	ldr	r2, [pc, #64]	; (8005258 <UART_SetConfig+0x5c4>)
 8005216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	441a      	add	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d910      	bls.n	800525c <UART_SetConfig+0x5c8>
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d20c      	bcs.n	800525c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	b29a      	uxth	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e009      	b.n	8005262 <UART_SetConfig+0x5ce>
 800524e:	bf00      	nop
 8005250:	40008000 	.word	0x40008000
 8005254:	00f42400 	.word	0x00f42400
 8005258:	08008674 	.word	0x08008674
      }
      else
      {
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2201      	movs	r2, #1
 8005266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2201      	movs	r2, #1
 800526e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2200      	movs	r2, #0
 800527c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800527e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800528c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538a:	d10a      	bne.n	80053a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b098      	sub	sp, #96	; 0x60
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e0:	f7fc fcb6 	bl	8001d50 <HAL_GetTick>
 80053e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d12f      	bne.n	8005454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f88e 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d022      	beq.n	8005454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	653b      	str	r3, [r7, #80]	; 0x50
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542c:	647b      	str	r3, [r7, #68]	; 0x44
 800542e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e6      	bne.n	800540e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e063      	b.n	800551c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d149      	bne.n	80054f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005462:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	2200      	movs	r2, #0
 800546c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f857 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d03c      	beq.n	80054f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	623b      	str	r3, [r7, #32]
   return(result);
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	633b      	str	r3, [r7, #48]	; 0x30
 800549c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ce:	61fa      	str	r2, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	617b      	str	r3, [r7, #20]
   return(result);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e012      	b.n	800551c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3758      	adds	r7, #88	; 0x58
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	e049      	b.n	80055ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d045      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fc fc07 	bl	8001d50 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e048      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d031      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d110      	bne.n	8005596 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2208      	movs	r2, #8
 800557a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f838 	bl	80055f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2208      	movs	r2, #8
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e029      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a4:	d111      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f81e 	bl	80055f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e00f      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d0a6      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b095      	sub	sp, #84	; 0x54
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
 800561a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800561e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	61fb      	str	r3, [r7, #28]
   return(result);
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	64bb      	str	r3, [r7, #72]	; 0x48
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e3      	bne.n	800562c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d118      	bne.n	800569e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	60bb      	str	r3, [r7, #8]
   return(result);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	647b      	str	r3, [r7, #68]	; 0x44
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	613b      	str	r3, [r7, #16]
   return(result);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e6      	bne.n	800566c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056b2:	bf00      	nop
 80056b4:	3754      	adds	r7, #84	; 0x54
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e027      	b.n	8005724 <HAL_UARTEx_DisableFifoMode+0x66>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005702:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e02d      	b.n	80057a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	; 0x24
 8005754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f84f 	bl	8005828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e02d      	b.n	8005820 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f811 	bl	8005828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005848:	e031      	b.n	80058ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800584a:	2308      	movs	r3, #8
 800584c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800584e:	2308      	movs	r3, #8
 8005850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	0e5b      	lsrs	r3, r3, #25
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	0f5b      	lsrs	r3, r3, #29
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	7b3a      	ldrb	r2, [r7, #12]
 8005876:	4911      	ldr	r1, [pc, #68]	; (80058bc <UARTEx_SetNbDataToProcess+0x94>)
 8005878:	5c8a      	ldrb	r2, [r1, r2]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800587e:	7b3a      	ldrb	r2, [r7, #12]
 8005880:	490f      	ldr	r1, [pc, #60]	; (80058c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005882:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005884:	fb93 f3f2 	sdiv	r3, r3, r2
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	7b7a      	ldrb	r2, [r7, #13]
 8005894:	4909      	ldr	r1, [pc, #36]	; (80058bc <UARTEx_SetNbDataToProcess+0x94>)
 8005896:	5c8a      	ldrb	r2, [r1, r2]
 8005898:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800589c:	7b7a      	ldrb	r2, [r7, #13]
 800589e:	4908      	ldr	r1, [pc, #32]	; (80058c0 <UARTEx_SetNbDataToProcess+0x98>)
 80058a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	0800868c 	.word	0x0800868c
 80058c0:	08008694 	.word	0x08008694

080058c4 <calloc>:
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <calloc+0xc>)
 80058c6:	460a      	mov	r2, r1
 80058c8:	4601      	mov	r1, r0
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	f000 b802 	b.w	80058d4 <_calloc_r>
 80058d0:	20000080 	.word	0x20000080

080058d4 <_calloc_r>:
 80058d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058d6:	fba1 2402 	umull	r2, r4, r1, r2
 80058da:	b94c      	cbnz	r4, 80058f0 <_calloc_r+0x1c>
 80058dc:	4611      	mov	r1, r2
 80058de:	9201      	str	r2, [sp, #4]
 80058e0:	f000 f82e 	bl	8005940 <_malloc_r>
 80058e4:	9a01      	ldr	r2, [sp, #4]
 80058e6:	4605      	mov	r5, r0
 80058e8:	b930      	cbnz	r0, 80058f8 <_calloc_r+0x24>
 80058ea:	4628      	mov	r0, r5
 80058ec:	b003      	add	sp, #12
 80058ee:	bd30      	pop	{r4, r5, pc}
 80058f0:	220c      	movs	r2, #12
 80058f2:	6002      	str	r2, [r0, #0]
 80058f4:	2500      	movs	r5, #0
 80058f6:	e7f8      	b.n	80058ea <_calloc_r+0x16>
 80058f8:	4621      	mov	r1, r4
 80058fa:	f000 fe38 	bl	800656e <memset>
 80058fe:	e7f4      	b.n	80058ea <_calloc_r+0x16>

08005900 <sbrk_aligned>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4e0e      	ldr	r6, [pc, #56]	; (800593c <sbrk_aligned+0x3c>)
 8005904:	460c      	mov	r4, r1
 8005906:	6831      	ldr	r1, [r6, #0]
 8005908:	4605      	mov	r5, r0
 800590a:	b911      	cbnz	r1, 8005912 <sbrk_aligned+0x12>
 800590c:	f000 fe70 	bl	80065f0 <_sbrk_r>
 8005910:	6030      	str	r0, [r6, #0]
 8005912:	4621      	mov	r1, r4
 8005914:	4628      	mov	r0, r5
 8005916:	f000 fe6b 	bl	80065f0 <_sbrk_r>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d00a      	beq.n	8005934 <sbrk_aligned+0x34>
 800591e:	1cc4      	adds	r4, r0, #3
 8005920:	f024 0403 	bic.w	r4, r4, #3
 8005924:	42a0      	cmp	r0, r4
 8005926:	d007      	beq.n	8005938 <sbrk_aligned+0x38>
 8005928:	1a21      	subs	r1, r4, r0
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fe60 	bl	80065f0 <_sbrk_r>
 8005930:	3001      	adds	r0, #1
 8005932:	d101      	bne.n	8005938 <sbrk_aligned+0x38>
 8005934:	f04f 34ff 	mov.w	r4, #4294967295
 8005938:	4620      	mov	r0, r4
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	2000035c 	.word	0x2000035c

08005940 <_malloc_r>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	1ccd      	adds	r5, r1, #3
 8005946:	f025 0503 	bic.w	r5, r5, #3
 800594a:	3508      	adds	r5, #8
 800594c:	2d0c      	cmp	r5, #12
 800594e:	bf38      	it	cc
 8005950:	250c      	movcc	r5, #12
 8005952:	2d00      	cmp	r5, #0
 8005954:	4607      	mov	r7, r0
 8005956:	db01      	blt.n	800595c <_malloc_r+0x1c>
 8005958:	42a9      	cmp	r1, r5
 800595a:	d905      	bls.n	8005968 <_malloc_r+0x28>
 800595c:	230c      	movs	r3, #12
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	2600      	movs	r6, #0
 8005962:	4630      	mov	r0, r6
 8005964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005968:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a3c <_malloc_r+0xfc>
 800596c:	f000 f868 	bl	8005a40 <__malloc_lock>
 8005970:	f8d8 3000 	ldr.w	r3, [r8]
 8005974:	461c      	mov	r4, r3
 8005976:	bb5c      	cbnz	r4, 80059d0 <_malloc_r+0x90>
 8005978:	4629      	mov	r1, r5
 800597a:	4638      	mov	r0, r7
 800597c:	f7ff ffc0 	bl	8005900 <sbrk_aligned>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	4604      	mov	r4, r0
 8005984:	d155      	bne.n	8005a32 <_malloc_r+0xf2>
 8005986:	f8d8 4000 	ldr.w	r4, [r8]
 800598a:	4626      	mov	r6, r4
 800598c:	2e00      	cmp	r6, #0
 800598e:	d145      	bne.n	8005a1c <_malloc_r+0xdc>
 8005990:	2c00      	cmp	r4, #0
 8005992:	d048      	beq.n	8005a26 <_malloc_r+0xe6>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	4631      	mov	r1, r6
 8005998:	4638      	mov	r0, r7
 800599a:	eb04 0903 	add.w	r9, r4, r3
 800599e:	f000 fe27 	bl	80065f0 <_sbrk_r>
 80059a2:	4581      	cmp	r9, r0
 80059a4:	d13f      	bne.n	8005a26 <_malloc_r+0xe6>
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	1a6d      	subs	r5, r5, r1
 80059aa:	4629      	mov	r1, r5
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff ffa7 	bl	8005900 <sbrk_aligned>
 80059b2:	3001      	adds	r0, #1
 80059b4:	d037      	beq.n	8005a26 <_malloc_r+0xe6>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	442b      	add	r3, r5
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	f8d8 3000 	ldr.w	r3, [r8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d038      	beq.n	8005a36 <_malloc_r+0xf6>
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	42a2      	cmp	r2, r4
 80059c8:	d12b      	bne.n	8005a22 <_malloc_r+0xe2>
 80059ca:	2200      	movs	r2, #0
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	e00f      	b.n	80059f0 <_malloc_r+0xb0>
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	1b52      	subs	r2, r2, r5
 80059d4:	d41f      	bmi.n	8005a16 <_malloc_r+0xd6>
 80059d6:	2a0b      	cmp	r2, #11
 80059d8:	d917      	bls.n	8005a0a <_malloc_r+0xca>
 80059da:	1961      	adds	r1, r4, r5
 80059dc:	42a3      	cmp	r3, r4
 80059de:	6025      	str	r5, [r4, #0]
 80059e0:	bf18      	it	ne
 80059e2:	6059      	strne	r1, [r3, #4]
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	bf08      	it	eq
 80059e8:	f8c8 1000 	streq.w	r1, [r8]
 80059ec:	5162      	str	r2, [r4, r5]
 80059ee:	604b      	str	r3, [r1, #4]
 80059f0:	4638      	mov	r0, r7
 80059f2:	f104 060b 	add.w	r6, r4, #11
 80059f6:	f000 f829 	bl	8005a4c <__malloc_unlock>
 80059fa:	f026 0607 	bic.w	r6, r6, #7
 80059fe:	1d23      	adds	r3, r4, #4
 8005a00:	1af2      	subs	r2, r6, r3
 8005a02:	d0ae      	beq.n	8005962 <_malloc_r+0x22>
 8005a04:	1b9b      	subs	r3, r3, r6
 8005a06:	50a3      	str	r3, [r4, r2]
 8005a08:	e7ab      	b.n	8005962 <_malloc_r+0x22>
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	6862      	ldr	r2, [r4, #4]
 8005a0e:	d1dd      	bne.n	80059cc <_malloc_r+0x8c>
 8005a10:	f8c8 2000 	str.w	r2, [r8]
 8005a14:	e7ec      	b.n	80059f0 <_malloc_r+0xb0>
 8005a16:	4623      	mov	r3, r4
 8005a18:	6864      	ldr	r4, [r4, #4]
 8005a1a:	e7ac      	b.n	8005976 <_malloc_r+0x36>
 8005a1c:	4634      	mov	r4, r6
 8005a1e:	6876      	ldr	r6, [r6, #4]
 8005a20:	e7b4      	b.n	800598c <_malloc_r+0x4c>
 8005a22:	4613      	mov	r3, r2
 8005a24:	e7cc      	b.n	80059c0 <_malloc_r+0x80>
 8005a26:	230c      	movs	r3, #12
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f000 f80e 	bl	8005a4c <__malloc_unlock>
 8005a30:	e797      	b.n	8005962 <_malloc_r+0x22>
 8005a32:	6025      	str	r5, [r4, #0]
 8005a34:	e7dc      	b.n	80059f0 <_malloc_r+0xb0>
 8005a36:	605b      	str	r3, [r3, #4]
 8005a38:	deff      	udf	#255	; 0xff
 8005a3a:	bf00      	nop
 8005a3c:	20000358 	.word	0x20000358

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_lock+0x8>)
 8005a42:	f000 be22 	b.w	800668a <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	200004a0 	.word	0x200004a0

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f000 be1d 	b.w	800668c <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	200004a0 	.word	0x200004a0

08005a58 <__cvt>:
 8005a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	ec55 4b10 	vmov	r4, r5, d0
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	460e      	mov	r6, r1
 8005a64:	4619      	mov	r1, r3
 8005a66:	462b      	mov	r3, r5
 8005a68:	bfbb      	ittet	lt
 8005a6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a6e:	461d      	movlt	r5, r3
 8005a70:	2300      	movge	r3, #0
 8005a72:	232d      	movlt	r3, #45	; 0x2d
 8005a74:	700b      	strb	r3, [r1, #0]
 8005a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a7c:	4691      	mov	r9, r2
 8005a7e:	f023 0820 	bic.w	r8, r3, #32
 8005a82:	bfbc      	itt	lt
 8005a84:	4622      	movlt	r2, r4
 8005a86:	4614      	movlt	r4, r2
 8005a88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a8c:	d005      	beq.n	8005a9a <__cvt+0x42>
 8005a8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a92:	d100      	bne.n	8005a96 <__cvt+0x3e>
 8005a94:	3601      	adds	r6, #1
 8005a96:	2102      	movs	r1, #2
 8005a98:	e000      	b.n	8005a9c <__cvt+0x44>
 8005a9a:	2103      	movs	r1, #3
 8005a9c:	ab03      	add	r3, sp, #12
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	ab02      	add	r3, sp, #8
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	ec45 4b10 	vmov	d0, r4, r5
 8005aa8:	4653      	mov	r3, sl
 8005aaa:	4632      	mov	r2, r6
 8005aac:	f000 fe88 	bl	80067c0 <_dtoa_r>
 8005ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	d102      	bne.n	8005abe <__cvt+0x66>
 8005ab8:	f019 0f01 	tst.w	r9, #1
 8005abc:	d022      	beq.n	8005b04 <__cvt+0xac>
 8005abe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ac2:	eb07 0906 	add.w	r9, r7, r6
 8005ac6:	d110      	bne.n	8005aea <__cvt+0x92>
 8005ac8:	783b      	ldrb	r3, [r7, #0]
 8005aca:	2b30      	cmp	r3, #48	; 0x30
 8005acc:	d10a      	bne.n	8005ae4 <__cvt+0x8c>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fb f80f 	bl	8000af8 <__aeabi_dcmpeq>
 8005ada:	b918      	cbnz	r0, 8005ae4 <__cvt+0x8c>
 8005adc:	f1c6 0601 	rsb	r6, r6, #1
 8005ae0:	f8ca 6000 	str.w	r6, [sl]
 8005ae4:	f8da 3000 	ldr.w	r3, [sl]
 8005ae8:	4499      	add	r9, r3
 8005aea:	2200      	movs	r2, #0
 8005aec:	2300      	movs	r3, #0
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fb f801 	bl	8000af8 <__aeabi_dcmpeq>
 8005af6:	b108      	cbz	r0, 8005afc <__cvt+0xa4>
 8005af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005afc:	2230      	movs	r2, #48	; 0x30
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	454b      	cmp	r3, r9
 8005b02:	d307      	bcc.n	8005b14 <__cvt+0xbc>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b08:	1bdb      	subs	r3, r3, r7
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	b004      	add	sp, #16
 8005b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	9103      	str	r1, [sp, #12]
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e7f0      	b.n	8005afe <__cvt+0xa6>

08005b1c <__exponent>:
 8005b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2900      	cmp	r1, #0
 8005b22:	bfb8      	it	lt
 8005b24:	4249      	neglt	r1, r1
 8005b26:	f803 2b02 	strb.w	r2, [r3], #2
 8005b2a:	bfb4      	ite	lt
 8005b2c:	222d      	movlt	r2, #45	; 0x2d
 8005b2e:	222b      	movge	r2, #43	; 0x2b
 8005b30:	2909      	cmp	r1, #9
 8005b32:	7042      	strb	r2, [r0, #1]
 8005b34:	dd2a      	ble.n	8005b8c <__exponent+0x70>
 8005b36:	f10d 0207 	add.w	r2, sp, #7
 8005b3a:	4617      	mov	r7, r2
 8005b3c:	260a      	movs	r6, #10
 8005b3e:	4694      	mov	ip, r2
 8005b40:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b44:	fb06 1415 	mls	r4, r6, r5, r1
 8005b48:	3430      	adds	r4, #48	; 0x30
 8005b4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b4e:	460c      	mov	r4, r1
 8005b50:	2c63      	cmp	r4, #99	; 0x63
 8005b52:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b56:	4629      	mov	r1, r5
 8005b58:	dcf1      	bgt.n	8005b3e <__exponent+0x22>
 8005b5a:	3130      	adds	r1, #48	; 0x30
 8005b5c:	f1ac 0402 	sub.w	r4, ip, #2
 8005b60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b64:	1c41      	adds	r1, r0, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	42ba      	cmp	r2, r7
 8005b6a:	d30a      	bcc.n	8005b82 <__exponent+0x66>
 8005b6c:	f10d 0209 	add.w	r2, sp, #9
 8005b70:	eba2 020c 	sub.w	r2, r2, ip
 8005b74:	42bc      	cmp	r4, r7
 8005b76:	bf88      	it	hi
 8005b78:	2200      	movhi	r2, #0
 8005b7a:	4413      	add	r3, r2
 8005b7c:	1a18      	subs	r0, r3, r0
 8005b7e:	b003      	add	sp, #12
 8005b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b8a:	e7ed      	b.n	8005b68 <__exponent+0x4c>
 8005b8c:	2330      	movs	r3, #48	; 0x30
 8005b8e:	3130      	adds	r1, #48	; 0x30
 8005b90:	7083      	strb	r3, [r0, #2]
 8005b92:	70c1      	strb	r1, [r0, #3]
 8005b94:	1d03      	adds	r3, r0, #4
 8005b96:	e7f1      	b.n	8005b7c <__exponent+0x60>

08005b98 <_printf_float>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	ed2d 8b02 	vpush	{d8}
 8005ba0:	b08d      	sub	sp, #52	; 0x34
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ba8:	4616      	mov	r6, r2
 8005baa:	461f      	mov	r7, r3
 8005bac:	4605      	mov	r5, r0
 8005bae:	f000 fce7 	bl	8006580 <_localeconv_r>
 8005bb2:	f8d0 a000 	ldr.w	sl, [r0]
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	f7fa fb72 	bl	80002a0 <strlen>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bcc:	3307      	adds	r3, #7
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	f103 0208 	add.w	r2, r3, #8
 8005bd6:	f8c8 2000 	str.w	r2, [r8]
 8005bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005be2:	9307      	str	r3, [sp, #28]
 8005be4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005be8:	ee08 0a10 	vmov	s16, r0
 8005bec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf4:	4b9e      	ldr	r3, [pc, #632]	; (8005e70 <_printf_float+0x2d8>)
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfa:	f7fa ffaf 	bl	8000b5c <__aeabi_dcmpun>
 8005bfe:	bb88      	cbnz	r0, 8005c64 <_printf_float+0xcc>
 8005c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c04:	4b9a      	ldr	r3, [pc, #616]	; (8005e70 <_printf_float+0x2d8>)
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	f7fa ff89 	bl	8000b20 <__aeabi_dcmple>
 8005c0e:	bb48      	cbnz	r0, 8005c64 <_printf_float+0xcc>
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	4640      	mov	r0, r8
 8005c16:	4649      	mov	r1, r9
 8005c18:	f7fa ff78 	bl	8000b0c <__aeabi_dcmplt>
 8005c1c:	b110      	cbz	r0, 8005c24 <_printf_float+0x8c>
 8005c1e:	232d      	movs	r3, #45	; 0x2d
 8005c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c24:	4a93      	ldr	r2, [pc, #588]	; (8005e74 <_printf_float+0x2dc>)
 8005c26:	4b94      	ldr	r3, [pc, #592]	; (8005e78 <_printf_float+0x2e0>)
 8005c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c2c:	bf94      	ite	ls
 8005c2e:	4690      	movls	r8, r2
 8005c30:	4698      	movhi	r8, r3
 8005c32:	2303      	movs	r3, #3
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	9700      	str	r7, [sp, #0]
 8005c44:	4633      	mov	r3, r6
 8005c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f9da 	bl	8006004 <_printf_common>
 8005c50:	3001      	adds	r0, #1
 8005c52:	f040 8090 	bne.w	8005d76 <_printf_float+0x1de>
 8005c56:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5a:	b00d      	add	sp, #52	; 0x34
 8005c5c:	ecbd 8b02 	vpop	{d8}
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa ff76 	bl	8000b5c <__aeabi_dcmpun>
 8005c70:	b140      	cbz	r0, 8005c84 <_printf_float+0xec>
 8005c72:	464b      	mov	r3, r9
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfbc      	itt	lt
 8005c78:	232d      	movlt	r3, #45	; 0x2d
 8005c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c7e:	4a7f      	ldr	r2, [pc, #508]	; (8005e7c <_printf_float+0x2e4>)
 8005c80:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <_printf_float+0x2e8>)
 8005c82:	e7d1      	b.n	8005c28 <_printf_float+0x90>
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c8a:	9206      	str	r2, [sp, #24]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	d13f      	bne.n	8005d10 <_printf_float+0x178>
 8005c90:	2306      	movs	r3, #6
 8005c92:	6063      	str	r3, [r4, #4]
 8005c94:	9b05      	ldr	r3, [sp, #20]
 8005c96:	6861      	ldr	r1, [r4, #4]
 8005c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ca6:	ab09      	add	r3, sp, #36	; 0x24
 8005ca8:	ec49 8b10 	vmov	d0, r8, r9
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f7ff fecf 	bl	8005a58 <__cvt>
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cbe:	2b47      	cmp	r3, #71	; 0x47
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	d108      	bne.n	8005cd6 <_printf_float+0x13e>
 8005cc4:	1cc8      	adds	r0, r1, #3
 8005cc6:	db02      	blt.n	8005cce <_printf_float+0x136>
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	dd41      	ble.n	8005d52 <_printf_float+0x1ba>
 8005cce:	f1ab 0302 	sub.w	r3, fp, #2
 8005cd2:	fa5f fb83 	uxtb.w	fp, r3
 8005cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cda:	d820      	bhi.n	8005d1e <_printf_float+0x186>
 8005cdc:	3901      	subs	r1, #1
 8005cde:	465a      	mov	r2, fp
 8005ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ce6:	f7ff ff19 	bl	8005b1c <__exponent>
 8005cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cec:	1813      	adds	r3, r2, r0
 8005cee:	2a01      	cmp	r2, #1
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	dc02      	bgt.n	8005cfc <_printf_float+0x164>
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	07d2      	lsls	r2, r2, #31
 8005cfa:	d501      	bpl.n	8005d00 <_printf_float+0x168>
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d09c      	beq.n	8005c42 <_printf_float+0xaa>
 8005d08:	232d      	movs	r3, #45	; 0x2d
 8005d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0e:	e798      	b.n	8005c42 <_printf_float+0xaa>
 8005d10:	9a06      	ldr	r2, [sp, #24]
 8005d12:	2a47      	cmp	r2, #71	; 0x47
 8005d14:	d1be      	bne.n	8005c94 <_printf_float+0xfc>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1bc      	bne.n	8005c94 <_printf_float+0xfc>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e7b9      	b.n	8005c92 <_printf_float+0xfa>
 8005d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d22:	d118      	bne.n	8005d56 <_printf_float+0x1be>
 8005d24:	2900      	cmp	r1, #0
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	dd0b      	ble.n	8005d42 <_printf_float+0x1aa>
 8005d2a:	6121      	str	r1, [r4, #16]
 8005d2c:	b913      	cbnz	r3, 8005d34 <_printf_float+0x19c>
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	07d0      	lsls	r0, r2, #31
 8005d32:	d502      	bpl.n	8005d3a <_printf_float+0x1a2>
 8005d34:	3301      	adds	r3, #1
 8005d36:	440b      	add	r3, r1
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d3c:	f04f 0900 	mov.w	r9, #0
 8005d40:	e7de      	b.n	8005d00 <_printf_float+0x168>
 8005d42:	b913      	cbnz	r3, 8005d4a <_printf_float+0x1b2>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	07d2      	lsls	r2, r2, #31
 8005d48:	d501      	bpl.n	8005d4e <_printf_float+0x1b6>
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	e7f4      	b.n	8005d38 <_printf_float+0x1a0>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e7f2      	b.n	8005d38 <_printf_float+0x1a0>
 8005d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	db05      	blt.n	8005d68 <_printf_float+0x1d0>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	6121      	str	r1, [r4, #16]
 8005d60:	07d8      	lsls	r0, r3, #31
 8005d62:	d5ea      	bpl.n	8005d3a <_printf_float+0x1a2>
 8005d64:	1c4b      	adds	r3, r1, #1
 8005d66:	e7e7      	b.n	8005d38 <_printf_float+0x1a0>
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	bfd4      	ite	le
 8005d6c:	f1c1 0202 	rsble	r2, r1, #2
 8005d70:	2201      	movgt	r2, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	e7e0      	b.n	8005d38 <_printf_float+0x1a0>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	055a      	lsls	r2, r3, #21
 8005d7a:	d407      	bmi.n	8005d8c <_printf_float+0x1f4>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	4642      	mov	r2, r8
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	d12c      	bne.n	8005de4 <_printf_float+0x24c>
 8005d8a:	e764      	b.n	8005c56 <_printf_float+0xbe>
 8005d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d90:	f240 80e0 	bls.w	8005f54 <_printf_float+0x3bc>
 8005d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f7fa feac 	bl	8000af8 <__aeabi_dcmpeq>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d034      	beq.n	8005e0e <_printf_float+0x276>
 8005da4:	4a37      	ldr	r2, [pc, #220]	; (8005e84 <_printf_float+0x2ec>)
 8005da6:	2301      	movs	r3, #1
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af51 	beq.w	8005c56 <_printf_float+0xbe>
 8005db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db8:	429a      	cmp	r2, r3
 8005dba:	db02      	blt.n	8005dc2 <_printf_float+0x22a>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07d8      	lsls	r0, r3, #31
 8005dc0:	d510      	bpl.n	8005de4 <_printf_float+0x24c>
 8005dc2:	ee18 3a10 	vmov	r3, s16
 8005dc6:	4652      	mov	r2, sl
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f af41 	beq.w	8005c56 <_printf_float+0xbe>
 8005dd4:	f04f 0800 	mov.w	r8, #0
 8005dd8:	f104 091a 	add.w	r9, r4, #26
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dde:	3b01      	subs	r3, #1
 8005de0:	4543      	cmp	r3, r8
 8005de2:	dc09      	bgt.n	8005df8 <_printf_float+0x260>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	079b      	lsls	r3, r3, #30
 8005de8:	f100 8107 	bmi.w	8005ffa <_printf_float+0x462>
 8005dec:	68e0      	ldr	r0, [r4, #12]
 8005dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df0:	4298      	cmp	r0, r3
 8005df2:	bfb8      	it	lt
 8005df4:	4618      	movlt	r0, r3
 8005df6:	e730      	b.n	8005c5a <_printf_float+0xc2>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	464a      	mov	r2, r9
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f af27 	beq.w	8005c56 <_printf_float+0xbe>
 8005e08:	f108 0801 	add.w	r8, r8, #1
 8005e0c:	e7e6      	b.n	8005ddc <_printf_float+0x244>
 8005e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dc39      	bgt.n	8005e88 <_printf_float+0x2f0>
 8005e14:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <_printf_float+0x2ec>)
 8005e16:	2301      	movs	r3, #1
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af19 	beq.w	8005c56 <_printf_float+0xbe>
 8005e24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d102      	bne.n	8005e32 <_printf_float+0x29a>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	07d9      	lsls	r1, r3, #31
 8005e30:	d5d8      	bpl.n	8005de4 <_printf_float+0x24c>
 8005e32:	ee18 3a10 	vmov	r3, s16
 8005e36:	4652      	mov	r2, sl
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	47b8      	blx	r7
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f43f af09 	beq.w	8005c56 <_printf_float+0xbe>
 8005e44:	f04f 0900 	mov.w	r9, #0
 8005e48:	f104 0a1a 	add.w	sl, r4, #26
 8005e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4e:	425b      	negs	r3, r3
 8005e50:	454b      	cmp	r3, r9
 8005e52:	dc01      	bgt.n	8005e58 <_printf_float+0x2c0>
 8005e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e56:	e792      	b.n	8005d7e <_printf_float+0x1e6>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f aef7 	beq.w	8005c56 <_printf_float+0xbe>
 8005e68:	f109 0901 	add.w	r9, r9, #1
 8005e6c:	e7ee      	b.n	8005e4c <_printf_float+0x2b4>
 8005e6e:	bf00      	nop
 8005e70:	7fefffff 	.word	0x7fefffff
 8005e74:	0800869c 	.word	0x0800869c
 8005e78:	080086a0 	.word	0x080086a0
 8005e7c:	080086a4 	.word	0x080086a4
 8005e80:	080086a8 	.word	0x080086a8
 8005e84:	080086ac 	.word	0x080086ac
 8005e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	bfa8      	it	ge
 8005e90:	461a      	movge	r2, r3
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	4691      	mov	r9, r2
 8005e96:	dc37      	bgt.n	8005f08 <_printf_float+0x370>
 8005e98:	f04f 0b00 	mov.w	fp, #0
 8005e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ea0:	f104 021a 	add.w	r2, r4, #26
 8005ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	eba3 0309 	sub.w	r3, r3, r9
 8005eac:	455b      	cmp	r3, fp
 8005eae:	dc33      	bgt.n	8005f18 <_printf_float+0x380>
 8005eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	db3b      	blt.n	8005f30 <_printf_float+0x398>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d438      	bmi.n	8005f30 <_printf_float+0x398>
 8005ebe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ec2:	eba2 0903 	sub.w	r9, r2, r3
 8005ec6:	9b05      	ldr	r3, [sp, #20]
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	4591      	cmp	r9, r2
 8005ecc:	bfa8      	it	ge
 8005ece:	4691      	movge	r9, r2
 8005ed0:	f1b9 0f00 	cmp.w	r9, #0
 8005ed4:	dc35      	bgt.n	8005f42 <_printf_float+0x3aa>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ede:	f104 0a1a 	add.w	sl, r4, #26
 8005ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	eba3 0309 	sub.w	r3, r3, r9
 8005eec:	4543      	cmp	r3, r8
 8005eee:	f77f af79 	ble.w	8005de4 <_printf_float+0x24c>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f aeaa 	beq.w	8005c56 <_printf_float+0xbe>
 8005f02:	f108 0801 	add.w	r8, r8, #1
 8005f06:	e7ec      	b.n	8005ee2 <_printf_float+0x34a>
 8005f08:	4613      	mov	r3, r2
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	d1c0      	bne.n	8005e98 <_printf_float+0x300>
 8005f16:	e69e      	b.n	8005c56 <_printf_float+0xbe>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	9205      	str	r2, [sp, #20]
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f ae97 	beq.w	8005c56 <_printf_float+0xbe>
 8005f28:	9a05      	ldr	r2, [sp, #20]
 8005f2a:	f10b 0b01 	add.w	fp, fp, #1
 8005f2e:	e7b9      	b.n	8005ea4 <_printf_float+0x30c>
 8005f30:	ee18 3a10 	vmov	r3, s16
 8005f34:	4652      	mov	r2, sl
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d1be      	bne.n	8005ebe <_printf_float+0x326>
 8005f40:	e689      	b.n	8005c56 <_printf_float+0xbe>
 8005f42:	9a05      	ldr	r2, [sp, #20]
 8005f44:	464b      	mov	r3, r9
 8005f46:	4442      	add	r2, r8
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d1c1      	bne.n	8005ed6 <_printf_float+0x33e>
 8005f52:	e680      	b.n	8005c56 <_printf_float+0xbe>
 8005f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f56:	2a01      	cmp	r2, #1
 8005f58:	dc01      	bgt.n	8005f5e <_printf_float+0x3c6>
 8005f5a:	07db      	lsls	r3, r3, #31
 8005f5c:	d53a      	bpl.n	8005fd4 <_printf_float+0x43c>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4642      	mov	r2, r8
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f ae74 	beq.w	8005c56 <_printf_float+0xbe>
 8005f6e:	ee18 3a10 	vmov	r3, s16
 8005f72:	4652      	mov	r2, sl
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f ae6b 	beq.w	8005c56 <_printf_float+0xbe>
 8005f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f84:	2200      	movs	r2, #0
 8005f86:	2300      	movs	r3, #0
 8005f88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005f8c:	f7fa fdb4 	bl	8000af8 <__aeabi_dcmpeq>
 8005f90:	b9d8      	cbnz	r0, 8005fca <_printf_float+0x432>
 8005f92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005f96:	f108 0201 	add.w	r2, r8, #1
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b8      	blx	r7
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d10e      	bne.n	8005fc2 <_printf_float+0x42a>
 8005fa4:	e657      	b.n	8005c56 <_printf_float+0xbe>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4652      	mov	r2, sl
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae50 	beq.w	8005c56 <_printf_float+0xbe>
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4543      	cmp	r3, r8
 8005fc0:	dcf1      	bgt.n	8005fa6 <_printf_float+0x40e>
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fc8:	e6da      	b.n	8005d80 <_printf_float+0x1e8>
 8005fca:	f04f 0800 	mov.w	r8, #0
 8005fce:	f104 0a1a 	add.w	sl, r4, #26
 8005fd2:	e7f2      	b.n	8005fba <_printf_float+0x422>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	e7df      	b.n	8005f9a <_printf_float+0x402>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	464a      	mov	r2, r9
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f43f ae36 	beq.w	8005c56 <_printf_float+0xbe>
 8005fea:	f108 0801 	add.w	r8, r8, #1
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ff2:	1a5b      	subs	r3, r3, r1
 8005ff4:	4543      	cmp	r3, r8
 8005ff6:	dcf0      	bgt.n	8005fda <_printf_float+0x442>
 8005ff8:	e6f8      	b.n	8005dec <_printf_float+0x254>
 8005ffa:	f04f 0800 	mov.w	r8, #0
 8005ffe:	f104 0919 	add.w	r9, r4, #25
 8006002:	e7f4      	b.n	8005fee <_printf_float+0x456>

08006004 <_printf_common>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	4616      	mov	r6, r2
 800600a:	4699      	mov	r9, r3
 800600c:	688a      	ldr	r2, [r1, #8]
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006014:	4293      	cmp	r3, r2
 8006016:	bfb8      	it	lt
 8006018:	4613      	movlt	r3, r2
 800601a:	6033      	str	r3, [r6, #0]
 800601c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006020:	4607      	mov	r7, r0
 8006022:	460c      	mov	r4, r1
 8006024:	b10a      	cbz	r2, 800602a <_printf_common+0x26>
 8006026:	3301      	adds	r3, #1
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	0699      	lsls	r1, r3, #26
 800602e:	bf42      	ittt	mi
 8006030:	6833      	ldrmi	r3, [r6, #0]
 8006032:	3302      	addmi	r3, #2
 8006034:	6033      	strmi	r3, [r6, #0]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	f015 0506 	ands.w	r5, r5, #6
 800603c:	d106      	bne.n	800604c <_printf_common+0x48>
 800603e:	f104 0a19 	add.w	sl, r4, #25
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	6832      	ldr	r2, [r6, #0]
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	42ab      	cmp	r3, r5
 800604a:	dc26      	bgt.n	800609a <_printf_common+0x96>
 800604c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006050:	1e13      	subs	r3, r2, #0
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	2301      	movne	r3, #1
 8006058:	0692      	lsls	r2, r2, #26
 800605a:	d42b      	bmi.n	80060b4 <_printf_common+0xb0>
 800605c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006060:	4649      	mov	r1, r9
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d01e      	beq.n	80060a8 <_printf_common+0xa4>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	6922      	ldr	r2, [r4, #16]
 800606e:	f003 0306 	and.w	r3, r3, #6
 8006072:	2b04      	cmp	r3, #4
 8006074:	bf02      	ittt	eq
 8006076:	68e5      	ldreq	r5, [r4, #12]
 8006078:	6833      	ldreq	r3, [r6, #0]
 800607a:	1aed      	subeq	r5, r5, r3
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	bf0c      	ite	eq
 8006080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006084:	2500      	movne	r5, #0
 8006086:	4293      	cmp	r3, r2
 8006088:	bfc4      	itt	gt
 800608a:	1a9b      	subgt	r3, r3, r2
 800608c:	18ed      	addgt	r5, r5, r3
 800608e:	2600      	movs	r6, #0
 8006090:	341a      	adds	r4, #26
 8006092:	42b5      	cmp	r5, r6
 8006094:	d11a      	bne.n	80060cc <_printf_common+0xc8>
 8006096:	2000      	movs	r0, #0
 8006098:	e008      	b.n	80060ac <_printf_common+0xa8>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4649      	mov	r1, r9
 80060a0:	4638      	mov	r0, r7
 80060a2:	47c0      	blx	r8
 80060a4:	3001      	adds	r0, #1
 80060a6:	d103      	bne.n	80060b0 <_printf_common+0xac>
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	3501      	adds	r5, #1
 80060b2:	e7c6      	b.n	8006042 <_printf_common+0x3e>
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	2030      	movs	r0, #48	; 0x30
 80060ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060be:	4422      	add	r2, r4
 80060c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c8:	3302      	adds	r3, #2
 80060ca:	e7c7      	b.n	800605c <_printf_common+0x58>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4622      	mov	r2, r4
 80060d0:	4649      	mov	r1, r9
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c0      	blx	r8
 80060d6:	3001      	adds	r0, #1
 80060d8:	d0e6      	beq.n	80060a8 <_printf_common+0xa4>
 80060da:	3601      	adds	r6, #1
 80060dc:	e7d9      	b.n	8006092 <_printf_common+0x8e>
	...

080060e0 <_printf_i>:
 80060e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	7e0f      	ldrb	r7, [r1, #24]
 80060e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e8:	2f78      	cmp	r7, #120	; 0x78
 80060ea:	4691      	mov	r9, r2
 80060ec:	4680      	mov	r8, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	469a      	mov	sl, r3
 80060f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060f6:	d807      	bhi.n	8006108 <_printf_i+0x28>
 80060f8:	2f62      	cmp	r7, #98	; 0x62
 80060fa:	d80a      	bhi.n	8006112 <_printf_i+0x32>
 80060fc:	2f00      	cmp	r7, #0
 80060fe:	f000 80d4 	beq.w	80062aa <_printf_i+0x1ca>
 8006102:	2f58      	cmp	r7, #88	; 0x58
 8006104:	f000 80c0 	beq.w	8006288 <_printf_i+0x1a8>
 8006108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006110:	e03a      	b.n	8006188 <_printf_i+0xa8>
 8006112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006116:	2b15      	cmp	r3, #21
 8006118:	d8f6      	bhi.n	8006108 <_printf_i+0x28>
 800611a:	a101      	add	r1, pc, #4	; (adr r1, 8006120 <_printf_i+0x40>)
 800611c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006120:	08006179 	.word	0x08006179
 8006124:	0800618d 	.word	0x0800618d
 8006128:	08006109 	.word	0x08006109
 800612c:	08006109 	.word	0x08006109
 8006130:	08006109 	.word	0x08006109
 8006134:	08006109 	.word	0x08006109
 8006138:	0800618d 	.word	0x0800618d
 800613c:	08006109 	.word	0x08006109
 8006140:	08006109 	.word	0x08006109
 8006144:	08006109 	.word	0x08006109
 8006148:	08006109 	.word	0x08006109
 800614c:	08006291 	.word	0x08006291
 8006150:	080061b9 	.word	0x080061b9
 8006154:	0800624b 	.word	0x0800624b
 8006158:	08006109 	.word	0x08006109
 800615c:	08006109 	.word	0x08006109
 8006160:	080062b3 	.word	0x080062b3
 8006164:	08006109 	.word	0x08006109
 8006168:	080061b9 	.word	0x080061b9
 800616c:	08006109 	.word	0x08006109
 8006170:	08006109 	.word	0x08006109
 8006174:	08006253 	.word	0x08006253
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	602a      	str	r2, [r5, #0]
 8006180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006188:	2301      	movs	r3, #1
 800618a:	e09f      	b.n	80062cc <_printf_i+0x1ec>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	0607      	lsls	r7, r0, #24
 8006192:	f103 0104 	add.w	r1, r3, #4
 8006196:	6029      	str	r1, [r5, #0]
 8006198:	d501      	bpl.n	800619e <_printf_i+0xbe>
 800619a:	681e      	ldr	r6, [r3, #0]
 800619c:	e003      	b.n	80061a6 <_printf_i+0xc6>
 800619e:	0646      	lsls	r6, r0, #25
 80061a0:	d5fb      	bpl.n	800619a <_printf_i+0xba>
 80061a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	da03      	bge.n	80061b2 <_printf_i+0xd2>
 80061aa:	232d      	movs	r3, #45	; 0x2d
 80061ac:	4276      	negs	r6, r6
 80061ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b2:	485a      	ldr	r0, [pc, #360]	; (800631c <_printf_i+0x23c>)
 80061b4:	230a      	movs	r3, #10
 80061b6:	e012      	b.n	80061de <_printf_i+0xfe>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1d19      	adds	r1, r3, #4
 80061be:	6029      	str	r1, [r5, #0]
 80061c0:	0605      	lsls	r5, r0, #24
 80061c2:	d501      	bpl.n	80061c8 <_printf_i+0xe8>
 80061c4:	681e      	ldr	r6, [r3, #0]
 80061c6:	e002      	b.n	80061ce <_printf_i+0xee>
 80061c8:	0641      	lsls	r1, r0, #25
 80061ca:	d5fb      	bpl.n	80061c4 <_printf_i+0xe4>
 80061cc:	881e      	ldrh	r6, [r3, #0]
 80061ce:	4853      	ldr	r0, [pc, #332]	; (800631c <_printf_i+0x23c>)
 80061d0:	2f6f      	cmp	r7, #111	; 0x6f
 80061d2:	bf0c      	ite	eq
 80061d4:	2308      	moveq	r3, #8
 80061d6:	230a      	movne	r3, #10
 80061d8:	2100      	movs	r1, #0
 80061da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061de:	6865      	ldr	r5, [r4, #4]
 80061e0:	60a5      	str	r5, [r4, #8]
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	bfa2      	ittt	ge
 80061e6:	6821      	ldrge	r1, [r4, #0]
 80061e8:	f021 0104 	bicge.w	r1, r1, #4
 80061ec:	6021      	strge	r1, [r4, #0]
 80061ee:	b90e      	cbnz	r6, 80061f4 <_printf_i+0x114>
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	d04b      	beq.n	800628c <_printf_i+0x1ac>
 80061f4:	4615      	mov	r5, r2
 80061f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061fa:	fb03 6711 	mls	r7, r3, r1, r6
 80061fe:	5dc7      	ldrb	r7, [r0, r7]
 8006200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006204:	4637      	mov	r7, r6
 8006206:	42bb      	cmp	r3, r7
 8006208:	460e      	mov	r6, r1
 800620a:	d9f4      	bls.n	80061f6 <_printf_i+0x116>
 800620c:	2b08      	cmp	r3, #8
 800620e:	d10b      	bne.n	8006228 <_printf_i+0x148>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	07de      	lsls	r6, r3, #31
 8006214:	d508      	bpl.n	8006228 <_printf_i+0x148>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	4299      	cmp	r1, r3
 800621c:	bfde      	ittt	le
 800621e:	2330      	movle	r3, #48	; 0x30
 8006220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006228:	1b52      	subs	r2, r2, r5
 800622a:	6122      	str	r2, [r4, #16]
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	464b      	mov	r3, r9
 8006232:	aa03      	add	r2, sp, #12
 8006234:	4621      	mov	r1, r4
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff fee4 	bl	8006004 <_printf_common>
 800623c:	3001      	adds	r0, #1
 800623e:	d14a      	bne.n	80062d6 <_printf_i+0x1f6>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b004      	add	sp, #16
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	4833      	ldr	r0, [pc, #204]	; (8006320 <_printf_i+0x240>)
 8006254:	2778      	movs	r7, #120	; 0x78
 8006256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	6829      	ldr	r1, [r5, #0]
 800625e:	061f      	lsls	r7, r3, #24
 8006260:	f851 6b04 	ldr.w	r6, [r1], #4
 8006264:	d402      	bmi.n	800626c <_printf_i+0x18c>
 8006266:	065f      	lsls	r7, r3, #25
 8006268:	bf48      	it	mi
 800626a:	b2b6      	uxthmi	r6, r6
 800626c:	07df      	lsls	r7, r3, #31
 800626e:	bf48      	it	mi
 8006270:	f043 0320 	orrmi.w	r3, r3, #32
 8006274:	6029      	str	r1, [r5, #0]
 8006276:	bf48      	it	mi
 8006278:	6023      	strmi	r3, [r4, #0]
 800627a:	b91e      	cbnz	r6, 8006284 <_printf_i+0x1a4>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	f023 0320 	bic.w	r3, r3, #32
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	2310      	movs	r3, #16
 8006286:	e7a7      	b.n	80061d8 <_printf_i+0xf8>
 8006288:	4824      	ldr	r0, [pc, #144]	; (800631c <_printf_i+0x23c>)
 800628a:	e7e4      	b.n	8006256 <_printf_i+0x176>
 800628c:	4615      	mov	r5, r2
 800628e:	e7bd      	b.n	800620c <_printf_i+0x12c>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	6826      	ldr	r6, [r4, #0]
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	1d18      	adds	r0, r3, #4
 8006298:	6028      	str	r0, [r5, #0]
 800629a:	0635      	lsls	r5, r6, #24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0x1c4>
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0x1ca>
 80062a4:	0670      	lsls	r0, r6, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0x1c0>
 80062a8:	8019      	strh	r1, [r3, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	4615      	mov	r5, r2
 80062b0:	e7bc      	b.n	800622c <_printf_i+0x14c>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	2100      	movs	r1, #0
 80062be:	4628      	mov	r0, r5
 80062c0:	f7f9 ff9e 	bl	8000200 <memchr>
 80062c4:	b108      	cbz	r0, 80062ca <_printf_i+0x1ea>
 80062c6:	1b40      	subs	r0, r0, r5
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d4:	e7aa      	b.n	800622c <_printf_i+0x14c>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	462a      	mov	r2, r5
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d0ad      	beq.n	8006240 <_printf_i+0x160>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	d413      	bmi.n	8006312 <_printf_i+0x232>
 80062ea:	68e0      	ldr	r0, [r4, #12]
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	4298      	cmp	r0, r3
 80062f0:	bfb8      	it	lt
 80062f2:	4618      	movlt	r0, r3
 80062f4:	e7a6      	b.n	8006244 <_printf_i+0x164>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d09d      	beq.n	8006240 <_printf_i+0x160>
 8006304:	3501      	adds	r5, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	9903      	ldr	r1, [sp, #12]
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	42ab      	cmp	r3, r5
 800630e:	dcf2      	bgt.n	80062f6 <_printf_i+0x216>
 8006310:	e7eb      	b.n	80062ea <_printf_i+0x20a>
 8006312:	2500      	movs	r5, #0
 8006314:	f104 0619 	add.w	r6, r4, #25
 8006318:	e7f5      	b.n	8006306 <_printf_i+0x226>
 800631a:	bf00      	nop
 800631c:	080086ae 	.word	0x080086ae
 8006320:	080086bf 	.word	0x080086bf

08006324 <std>:
 8006324:	2300      	movs	r3, #0
 8006326:	b510      	push	{r4, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	e9c0 3300 	strd	r3, r3, [r0]
 800632e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006332:	6083      	str	r3, [r0, #8]
 8006334:	8181      	strh	r1, [r0, #12]
 8006336:	6643      	str	r3, [r0, #100]	; 0x64
 8006338:	81c2      	strh	r2, [r0, #14]
 800633a:	6183      	str	r3, [r0, #24]
 800633c:	4619      	mov	r1, r3
 800633e:	2208      	movs	r2, #8
 8006340:	305c      	adds	r0, #92	; 0x5c
 8006342:	f000 f914 	bl	800656e <memset>
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <std+0x58>)
 8006348:	6263      	str	r3, [r4, #36]	; 0x24
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <std+0x5c>)
 800634c:	62a3      	str	r3, [r4, #40]	; 0x28
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <std+0x60>)
 8006350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <std+0x64>)
 8006354:	6323      	str	r3, [r4, #48]	; 0x30
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <std+0x68>)
 8006358:	6224      	str	r4, [r4, #32]
 800635a:	429c      	cmp	r4, r3
 800635c:	d006      	beq.n	800636c <std+0x48>
 800635e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006362:	4294      	cmp	r4, r2
 8006364:	d002      	beq.n	800636c <std+0x48>
 8006366:	33d0      	adds	r3, #208	; 0xd0
 8006368:	429c      	cmp	r4, r3
 800636a:	d105      	bne.n	8006378 <std+0x54>
 800636c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f000 b988 	b.w	8006688 <__retarget_lock_init_recursive>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	080064e9 	.word	0x080064e9
 8006380:	0800650b 	.word	0x0800650b
 8006384:	08006543 	.word	0x08006543
 8006388:	08006567 	.word	0x08006567
 800638c:	20000360 	.word	0x20000360

08006390 <stdio_exit_handler>:
 8006390:	4a02      	ldr	r2, [pc, #8]	; (800639c <stdio_exit_handler+0xc>)
 8006392:	4903      	ldr	r1, [pc, #12]	; (80063a0 <stdio_exit_handler+0x10>)
 8006394:	4803      	ldr	r0, [pc, #12]	; (80063a4 <stdio_exit_handler+0x14>)
 8006396:	f000 b869 	b.w	800646c <_fwalk_sglue>
 800639a:	bf00      	nop
 800639c:	20000028 	.word	0x20000028
 80063a0:	08007f01 	.word	0x08007f01
 80063a4:	20000034 	.word	0x20000034

080063a8 <cleanup_stdio>:
 80063a8:	6841      	ldr	r1, [r0, #4]
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <cleanup_stdio+0x34>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	b510      	push	{r4, lr}
 80063b0:	4604      	mov	r4, r0
 80063b2:	d001      	beq.n	80063b8 <cleanup_stdio+0x10>
 80063b4:	f001 fda4 	bl	8007f00 <_fflush_r>
 80063b8:	68a1      	ldr	r1, [r4, #8]
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <cleanup_stdio+0x38>)
 80063bc:	4299      	cmp	r1, r3
 80063be:	d002      	beq.n	80063c6 <cleanup_stdio+0x1e>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f001 fd9d 	bl	8007f00 <_fflush_r>
 80063c6:	68e1      	ldr	r1, [r4, #12]
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <cleanup_stdio+0x3c>)
 80063ca:	4299      	cmp	r1, r3
 80063cc:	d004      	beq.n	80063d8 <cleanup_stdio+0x30>
 80063ce:	4620      	mov	r0, r4
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	f001 bd94 	b.w	8007f00 <_fflush_r>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	bf00      	nop
 80063dc:	20000360 	.word	0x20000360
 80063e0:	200003c8 	.word	0x200003c8
 80063e4:	20000430 	.word	0x20000430

080063e8 <global_stdio_init.part.0>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <global_stdio_init.part.0+0x30>)
 80063ec:	4c0b      	ldr	r4, [pc, #44]	; (800641c <global_stdio_init.part.0+0x34>)
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <global_stdio_init.part.0+0x38>)
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	2200      	movs	r2, #0
 80063f6:	2104      	movs	r1, #4
 80063f8:	f7ff ff94 	bl	8006324 <std>
 80063fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006400:	2201      	movs	r2, #1
 8006402:	2109      	movs	r1, #9
 8006404:	f7ff ff8e 	bl	8006324 <std>
 8006408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800640c:	2202      	movs	r2, #2
 800640e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006412:	2112      	movs	r1, #18
 8006414:	f7ff bf86 	b.w	8006324 <std>
 8006418:	20000498 	.word	0x20000498
 800641c:	20000360 	.word	0x20000360
 8006420:	08006391 	.word	0x08006391

08006424 <__sfp_lock_acquire>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__sfp_lock_acquire+0x8>)
 8006426:	f000 b930 	b.w	800668a <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	200004a1 	.word	0x200004a1

08006430 <__sfp_lock_release>:
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <__sfp_lock_release+0x8>)
 8006432:	f000 b92b 	b.w	800668c <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	200004a1 	.word	0x200004a1

0800643c <__sinit>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	f7ff fff0 	bl	8006424 <__sfp_lock_acquire>
 8006444:	6a23      	ldr	r3, [r4, #32]
 8006446:	b11b      	cbz	r3, 8006450 <__sinit+0x14>
 8006448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800644c:	f7ff bff0 	b.w	8006430 <__sfp_lock_release>
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__sinit+0x28>)
 8006452:	6223      	str	r3, [r4, #32]
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <__sinit+0x2c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f5      	bne.n	8006448 <__sinit+0xc>
 800645c:	f7ff ffc4 	bl	80063e8 <global_stdio_init.part.0>
 8006460:	e7f2      	b.n	8006448 <__sinit+0xc>
 8006462:	bf00      	nop
 8006464:	080063a9 	.word	0x080063a9
 8006468:	20000498 	.word	0x20000498

0800646c <_fwalk_sglue>:
 800646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006470:	4607      	mov	r7, r0
 8006472:	4688      	mov	r8, r1
 8006474:	4614      	mov	r4, r2
 8006476:	2600      	movs	r6, #0
 8006478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800647c:	f1b9 0901 	subs.w	r9, r9, #1
 8006480:	d505      	bpl.n	800648e <_fwalk_sglue+0x22>
 8006482:	6824      	ldr	r4, [r4, #0]
 8006484:	2c00      	cmp	r4, #0
 8006486:	d1f7      	bne.n	8006478 <_fwalk_sglue+0xc>
 8006488:	4630      	mov	r0, r6
 800648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d907      	bls.n	80064a4 <_fwalk_sglue+0x38>
 8006494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006498:	3301      	adds	r3, #1
 800649a:	d003      	beq.n	80064a4 <_fwalk_sglue+0x38>
 800649c:	4629      	mov	r1, r5
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	4306      	orrs	r6, r0
 80064a4:	3568      	adds	r5, #104	; 0x68
 80064a6:	e7e9      	b.n	800647c <_fwalk_sglue+0x10>

080064a8 <siprintf>:
 80064a8:	b40e      	push	{r1, r2, r3}
 80064aa:	b500      	push	{lr}
 80064ac:	b09c      	sub	sp, #112	; 0x70
 80064ae:	ab1d      	add	r3, sp, #116	; 0x74
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b8:	4809      	ldr	r0, [pc, #36]	; (80064e0 <siprintf+0x38>)
 80064ba:	9107      	str	r1, [sp, #28]
 80064bc:	9104      	str	r1, [sp, #16]
 80064be:	4909      	ldr	r1, [pc, #36]	; (80064e4 <siprintf+0x3c>)
 80064c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c4:	9105      	str	r1, [sp, #20]
 80064c6:	6800      	ldr	r0, [r0, #0]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	a902      	add	r1, sp, #8
 80064cc:	f001 fb94 	bl	8007bf8 <_svfiprintf_r>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	b01c      	add	sp, #112	; 0x70
 80064d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064dc:	b003      	add	sp, #12
 80064de:	4770      	bx	lr
 80064e0:	20000080 	.word	0x20000080
 80064e4:	ffff0208 	.word	0xffff0208

080064e8 <__sread>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	460c      	mov	r4, r1
 80064ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f0:	f000 f86c 	bl	80065cc <_read_r>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	bfab      	itete	ge
 80064f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064fa:	89a3      	ldrhlt	r3, [r4, #12]
 80064fc:	181b      	addge	r3, r3, r0
 80064fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006502:	bfac      	ite	ge
 8006504:	6563      	strge	r3, [r4, #84]	; 0x54
 8006506:	81a3      	strhlt	r3, [r4, #12]
 8006508:	bd10      	pop	{r4, pc}

0800650a <__swrite>:
 800650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	461f      	mov	r7, r3
 8006510:	898b      	ldrh	r3, [r1, #12]
 8006512:	05db      	lsls	r3, r3, #23
 8006514:	4605      	mov	r5, r0
 8006516:	460c      	mov	r4, r1
 8006518:	4616      	mov	r6, r2
 800651a:	d505      	bpl.n	8006528 <__swrite+0x1e>
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	2302      	movs	r3, #2
 8006522:	2200      	movs	r2, #0
 8006524:	f000 f840 	bl	80065a8 <_lseek_r>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800652e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	4628      	mov	r0, r5
 800653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	f000 b867 	b.w	8006610 <_write_r>

08006542 <__sseek>:
 8006542:	b510      	push	{r4, lr}
 8006544:	460c      	mov	r4, r1
 8006546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654a:	f000 f82d 	bl	80065a8 <_lseek_r>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	bf15      	itete	ne
 8006554:	6560      	strne	r0, [r4, #84]	; 0x54
 8006556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800655a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800655e:	81a3      	strheq	r3, [r4, #12]
 8006560:	bf18      	it	ne
 8006562:	81a3      	strhne	r3, [r4, #12]
 8006564:	bd10      	pop	{r4, pc}

08006566 <__sclose>:
 8006566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656a:	f000 b80d 	b.w	8006588 <_close_r>

0800656e <memset>:
 800656e:	4402      	add	r2, r0
 8006570:	4603      	mov	r3, r0
 8006572:	4293      	cmp	r3, r2
 8006574:	d100      	bne.n	8006578 <memset+0xa>
 8006576:	4770      	bx	lr
 8006578:	f803 1b01 	strb.w	r1, [r3], #1
 800657c:	e7f9      	b.n	8006572 <memset+0x4>
	...

08006580 <_localeconv_r>:
 8006580:	4800      	ldr	r0, [pc, #0]	; (8006584 <_localeconv_r+0x4>)
 8006582:	4770      	bx	lr
 8006584:	20000174 	.word	0x20000174

08006588 <_close_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_close_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fb f93b 	bl	800180e <_close>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_close_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_close_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	2000049c 	.word	0x2000049c

080065a8 <_lseek_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	; (80065c8 <_lseek_r+0x20>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fb f950 	bl	800185c <_lseek>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_lseek_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_lseek_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	2000049c 	.word	0x2000049c

080065cc <_read_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	; (80065ec <_read_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb f8de 	bl	800179c <_read>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_read_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_read_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	2000049c 	.word	0x2000049c

080065f0 <_sbrk_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4d06      	ldr	r5, [pc, #24]	; (800660c <_sbrk_r+0x1c>)
 80065f4:	2300      	movs	r3, #0
 80065f6:	4604      	mov	r4, r0
 80065f8:	4608      	mov	r0, r1
 80065fa:	602b      	str	r3, [r5, #0]
 80065fc:	f7fb f93c 	bl	8001878 <_sbrk>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d102      	bne.n	800660a <_sbrk_r+0x1a>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	b103      	cbz	r3, 800660a <_sbrk_r+0x1a>
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	2000049c 	.word	0x2000049c

08006610 <_write_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d07      	ldr	r5, [pc, #28]	; (8006630 <_write_r+0x20>)
 8006614:	4604      	mov	r4, r0
 8006616:	4608      	mov	r0, r1
 8006618:	4611      	mov	r1, r2
 800661a:	2200      	movs	r2, #0
 800661c:	602a      	str	r2, [r5, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f7fb f8d9 	bl	80017d6 <_write>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_write_r+0x1e>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_write_r+0x1e>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	2000049c 	.word	0x2000049c

08006634 <__errno>:
 8006634:	4b01      	ldr	r3, [pc, #4]	; (800663c <__errno+0x8>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000080 	.word	0x20000080

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4d0d      	ldr	r5, [pc, #52]	; (8006678 <__libc_init_array+0x38>)
 8006644:	4c0d      	ldr	r4, [pc, #52]	; (800667c <__libc_init_array+0x3c>)
 8006646:	1b64      	subs	r4, r4, r5
 8006648:	10a4      	asrs	r4, r4, #2
 800664a:	2600      	movs	r6, #0
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	4d0b      	ldr	r5, [pc, #44]	; (8006680 <__libc_init_array+0x40>)
 8006652:	4c0c      	ldr	r4, [pc, #48]	; (8006684 <__libc_init_array+0x44>)
 8006654:	f001 ffc4 	bl	80085e0 <_init>
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	2600      	movs	r6, #0
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f855 3b04 	ldr.w	r3, [r5], #4
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	08008a14 	.word	0x08008a14
 800667c:	08008a14 	.word	0x08008a14
 8006680:	08008a14 	.word	0x08008a14
 8006684:	08008a18 	.word	0x08008a18

08006688 <__retarget_lock_init_recursive>:
 8006688:	4770      	bx	lr

0800668a <__retarget_lock_acquire_recursive>:
 800668a:	4770      	bx	lr

0800668c <__retarget_lock_release_recursive>:
 800668c:	4770      	bx	lr

0800668e <memcpy>:
 800668e:	440a      	add	r2, r1
 8006690:	4291      	cmp	r1, r2
 8006692:	f100 33ff 	add.w	r3, r0, #4294967295
 8006696:	d100      	bne.n	800669a <memcpy+0xc>
 8006698:	4770      	bx	lr
 800669a:	b510      	push	{r4, lr}
 800669c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a4:	4291      	cmp	r1, r2
 80066a6:	d1f9      	bne.n	800669c <memcpy+0xe>
 80066a8:	bd10      	pop	{r4, pc}

080066aa <quorem>:
 80066aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ae:	6903      	ldr	r3, [r0, #16]
 80066b0:	690c      	ldr	r4, [r1, #16]
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	4607      	mov	r7, r0
 80066b6:	db7e      	blt.n	80067b6 <quorem+0x10c>
 80066b8:	3c01      	subs	r4, #1
 80066ba:	f101 0814 	add.w	r8, r1, #20
 80066be:	f100 0514 	add.w	r5, r0, #20
 80066c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066d0:	3301      	adds	r3, #1
 80066d2:	429a      	cmp	r2, r3
 80066d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80066e0:	d331      	bcc.n	8006746 <quorem+0x9c>
 80066e2:	f04f 0e00 	mov.w	lr, #0
 80066e6:	4640      	mov	r0, r8
 80066e8:	46ac      	mov	ip, r5
 80066ea:	46f2      	mov	sl, lr
 80066ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80066f0:	b293      	uxth	r3, r2
 80066f2:	fb06 e303 	mla	r3, r6, r3, lr
 80066f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066fa:	0c1a      	lsrs	r2, r3, #16
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006702:	f8dc a000 	ldr.w	sl, [ip]
 8006706:	fa13 f38a 	uxtah	r3, r3, sl
 800670a:	fb06 220e 	mla	r2, r6, lr, r2
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	9b00      	ldr	r3, [sp, #0]
 8006712:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006716:	b292      	uxth	r2, r2
 8006718:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800671c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006720:	f8bd 3000 	ldrh.w	r3, [sp]
 8006724:	4581      	cmp	r9, r0
 8006726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672a:	f84c 3b04 	str.w	r3, [ip], #4
 800672e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006732:	d2db      	bcs.n	80066ec <quorem+0x42>
 8006734:	f855 300b 	ldr.w	r3, [r5, fp]
 8006738:	b92b      	cbnz	r3, 8006746 <quorem+0x9c>
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	3b04      	subs	r3, #4
 800673e:	429d      	cmp	r5, r3
 8006740:	461a      	mov	r2, r3
 8006742:	d32c      	bcc.n	800679e <quorem+0xf4>
 8006744:	613c      	str	r4, [r7, #16]
 8006746:	4638      	mov	r0, r7
 8006748:	f001 f8fc 	bl	8007944 <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	db22      	blt.n	8006796 <quorem+0xec>
 8006750:	3601      	adds	r6, #1
 8006752:	4629      	mov	r1, r5
 8006754:	2000      	movs	r0, #0
 8006756:	f858 2b04 	ldr.w	r2, [r8], #4
 800675a:	f8d1 c000 	ldr.w	ip, [r1]
 800675e:	b293      	uxth	r3, r2
 8006760:	1ac3      	subs	r3, r0, r3
 8006762:	0c12      	lsrs	r2, r2, #16
 8006764:	fa13 f38c 	uxtah	r3, r3, ip
 8006768:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800676c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006770:	b29b      	uxth	r3, r3
 8006772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006776:	45c1      	cmp	r9, r8
 8006778:	f841 3b04 	str.w	r3, [r1], #4
 800677c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006780:	d2e9      	bcs.n	8006756 <quorem+0xac>
 8006782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006786:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800678a:	b922      	cbnz	r2, 8006796 <quorem+0xec>
 800678c:	3b04      	subs	r3, #4
 800678e:	429d      	cmp	r5, r3
 8006790:	461a      	mov	r2, r3
 8006792:	d30a      	bcc.n	80067aa <quorem+0x100>
 8006794:	613c      	str	r4, [r7, #16]
 8006796:	4630      	mov	r0, r6
 8006798:	b003      	add	sp, #12
 800679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	d1ce      	bne.n	8006744 <quorem+0x9a>
 80067a6:	3c01      	subs	r4, #1
 80067a8:	e7c9      	b.n	800673e <quorem+0x94>
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	d1f0      	bne.n	8006794 <quorem+0xea>
 80067b2:	3c01      	subs	r4, #1
 80067b4:	e7eb      	b.n	800678e <quorem+0xe4>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e7ee      	b.n	8006798 <quorem+0xee>
 80067ba:	0000      	movs	r0, r0
 80067bc:	0000      	movs	r0, r0
	...

080067c0 <_dtoa_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	ed2d 8b04 	vpush	{d8-d9}
 80067c8:	69c5      	ldr	r5, [r0, #28]
 80067ca:	b093      	sub	sp, #76	; 0x4c
 80067cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067d0:	ec57 6b10 	vmov	r6, r7, d0
 80067d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067d8:	9107      	str	r1, [sp, #28]
 80067da:	4604      	mov	r4, r0
 80067dc:	920a      	str	r2, [sp, #40]	; 0x28
 80067de:	930d      	str	r3, [sp, #52]	; 0x34
 80067e0:	b975      	cbnz	r5, 8006800 <_dtoa_r+0x40>
 80067e2:	2010      	movs	r0, #16
 80067e4:	f000 fe2a 	bl	800743c <malloc>
 80067e8:	4602      	mov	r2, r0
 80067ea:	61e0      	str	r0, [r4, #28]
 80067ec:	b920      	cbnz	r0, 80067f8 <_dtoa_r+0x38>
 80067ee:	4bae      	ldr	r3, [pc, #696]	; (8006aa8 <_dtoa_r+0x2e8>)
 80067f0:	21ef      	movs	r1, #239	; 0xef
 80067f2:	48ae      	ldr	r0, [pc, #696]	; (8006aac <_dtoa_r+0x2ec>)
 80067f4:	f001 fbc6 	bl	8007f84 <__assert_func>
 80067f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067fc:	6005      	str	r5, [r0, #0]
 80067fe:	60c5      	str	r5, [r0, #12]
 8006800:	69e3      	ldr	r3, [r4, #28]
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	b151      	cbz	r1, 800681c <_dtoa_r+0x5c>
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	604a      	str	r2, [r1, #4]
 800680a:	2301      	movs	r3, #1
 800680c:	4093      	lsls	r3, r2
 800680e:	608b      	str	r3, [r1, #8]
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fe5b 	bl	80074cc <_Bfree>
 8006816:	69e3      	ldr	r3, [r4, #28]
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	1e3b      	subs	r3, r7, #0
 800681e:	bfbb      	ittet	lt
 8006820:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006824:	9303      	strlt	r3, [sp, #12]
 8006826:	2300      	movge	r3, #0
 8006828:	2201      	movlt	r2, #1
 800682a:	bfac      	ite	ge
 800682c:	f8c8 3000 	strge.w	r3, [r8]
 8006830:	f8c8 2000 	strlt.w	r2, [r8]
 8006834:	4b9e      	ldr	r3, [pc, #632]	; (8006ab0 <_dtoa_r+0x2f0>)
 8006836:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800683a:	ea33 0308 	bics.w	r3, r3, r8
 800683e:	d11b      	bne.n	8006878 <_dtoa_r+0xb8>
 8006840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006842:	f242 730f 	movw	r3, #9999	; 0x270f
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800684c:	4333      	orrs	r3, r6
 800684e:	f000 8593 	beq.w	8007378 <_dtoa_r+0xbb8>
 8006852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006854:	b963      	cbnz	r3, 8006870 <_dtoa_r+0xb0>
 8006856:	4b97      	ldr	r3, [pc, #604]	; (8006ab4 <_dtoa_r+0x2f4>)
 8006858:	e027      	b.n	80068aa <_dtoa_r+0xea>
 800685a:	4b97      	ldr	r3, [pc, #604]	; (8006ab8 <_dtoa_r+0x2f8>)
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	9800      	ldr	r0, [sp, #0]
 8006866:	b013      	add	sp, #76	; 0x4c
 8006868:	ecbd 8b04 	vpop	{d8-d9}
 800686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006870:	4b90      	ldr	r3, [pc, #576]	; (8006ab4 <_dtoa_r+0x2f4>)
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	3303      	adds	r3, #3
 8006876:	e7f3      	b.n	8006860 <_dtoa_r+0xa0>
 8006878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	ec51 0b17 	vmov	r0, r1, d7
 8006882:	eeb0 8a47 	vmov.f32	s16, s14
 8006886:	eef0 8a67 	vmov.f32	s17, s15
 800688a:	2300      	movs	r3, #0
 800688c:	f7fa f934 	bl	8000af8 <__aeabi_dcmpeq>
 8006890:	4681      	mov	r9, r0
 8006892:	b160      	cbz	r0, 80068ae <_dtoa_r+0xee>
 8006894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006896:	2301      	movs	r3, #1
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8568 	beq.w	8007372 <_dtoa_r+0xbb2>
 80068a2:	4b86      	ldr	r3, [pc, #536]	; (8006abc <_dtoa_r+0x2fc>)
 80068a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	e7da      	b.n	8006864 <_dtoa_r+0xa4>
 80068ae:	aa10      	add	r2, sp, #64	; 0x40
 80068b0:	a911      	add	r1, sp, #68	; 0x44
 80068b2:	4620      	mov	r0, r4
 80068b4:	eeb0 0a48 	vmov.f32	s0, s16
 80068b8:	eef0 0a68 	vmov.f32	s1, s17
 80068bc:	f001 f8e8 	bl	8007a90 <__d2b>
 80068c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80068c4:	4682      	mov	sl, r0
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	d07f      	beq.n	80069ca <_dtoa_r+0x20a>
 80068ca:	ee18 3a90 	vmov	r3, s17
 80068ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80068d6:	ec51 0b18 	vmov	r0, r1, d8
 80068da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80068de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80068e6:	4619      	mov	r1, r3
 80068e8:	2200      	movs	r2, #0
 80068ea:	4b75      	ldr	r3, [pc, #468]	; (8006ac0 <_dtoa_r+0x300>)
 80068ec:	f7f9 fce4 	bl	80002b8 <__aeabi_dsub>
 80068f0:	a367      	add	r3, pc, #412	; (adr r3, 8006a90 <_dtoa_r+0x2d0>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fe97 	bl	8000628 <__aeabi_dmul>
 80068fa:	a367      	add	r3, pc, #412	; (adr r3, 8006a98 <_dtoa_r+0x2d8>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fcdc 	bl	80002bc <__adddf3>
 8006904:	4606      	mov	r6, r0
 8006906:	4628      	mov	r0, r5
 8006908:	460f      	mov	r7, r1
 800690a:	f7f9 fe23 	bl	8000554 <__aeabi_i2d>
 800690e:	a364      	add	r3, pc, #400	; (adr r3, 8006aa0 <_dtoa_r+0x2e0>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f7f9 fe88 	bl	8000628 <__aeabi_dmul>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4630      	mov	r0, r6
 800691e:	4639      	mov	r1, r7
 8006920:	f7f9 fccc 	bl	80002bc <__adddf3>
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	f7fa f92e 	bl	8000b88 <__aeabi_d2iz>
 800692c:	2200      	movs	r2, #0
 800692e:	4683      	mov	fp, r0
 8006930:	2300      	movs	r3, #0
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7fa f8e9 	bl	8000b0c <__aeabi_dcmplt>
 800693a:	b148      	cbz	r0, 8006950 <_dtoa_r+0x190>
 800693c:	4658      	mov	r0, fp
 800693e:	f7f9 fe09 	bl	8000554 <__aeabi_i2d>
 8006942:	4632      	mov	r2, r6
 8006944:	463b      	mov	r3, r7
 8006946:	f7fa f8d7 	bl	8000af8 <__aeabi_dcmpeq>
 800694a:	b908      	cbnz	r0, 8006950 <_dtoa_r+0x190>
 800694c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006950:	f1bb 0f16 	cmp.w	fp, #22
 8006954:	d857      	bhi.n	8006a06 <_dtoa_r+0x246>
 8006956:	4b5b      	ldr	r3, [pc, #364]	; (8006ac4 <_dtoa_r+0x304>)
 8006958:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	ec51 0b18 	vmov	r0, r1, d8
 8006964:	f7fa f8d2 	bl	8000b0c <__aeabi_dcmplt>
 8006968:	2800      	cmp	r0, #0
 800696a:	d04e      	beq.n	8006a0a <_dtoa_r+0x24a>
 800696c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006970:	2300      	movs	r3, #0
 8006972:	930c      	str	r3, [sp, #48]	; 0x30
 8006974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006976:	1b5b      	subs	r3, r3, r5
 8006978:	1e5a      	subs	r2, r3, #1
 800697a:	bf45      	ittet	mi
 800697c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006980:	9305      	strmi	r3, [sp, #20]
 8006982:	2300      	movpl	r3, #0
 8006984:	2300      	movmi	r3, #0
 8006986:	9206      	str	r2, [sp, #24]
 8006988:	bf54      	ite	pl
 800698a:	9305      	strpl	r3, [sp, #20]
 800698c:	9306      	strmi	r3, [sp, #24]
 800698e:	f1bb 0f00 	cmp.w	fp, #0
 8006992:	db3c      	blt.n	8006a0e <_dtoa_r+0x24e>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800699a:	445b      	add	r3, fp
 800699c:	9306      	str	r3, [sp, #24]
 800699e:	2300      	movs	r3, #0
 80069a0:	9308      	str	r3, [sp, #32]
 80069a2:	9b07      	ldr	r3, [sp, #28]
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	d868      	bhi.n	8006a7a <_dtoa_r+0x2ba>
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	bfc4      	itt	gt
 80069ac:	3b04      	subgt	r3, #4
 80069ae:	9307      	strgt	r3, [sp, #28]
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	f1a3 0302 	sub.w	r3, r3, #2
 80069b6:	bfcc      	ite	gt
 80069b8:	2500      	movgt	r5, #0
 80069ba:	2501      	movle	r5, #1
 80069bc:	2b03      	cmp	r3, #3
 80069be:	f200 8085 	bhi.w	8006acc <_dtoa_r+0x30c>
 80069c2:	e8df f003 	tbb	[pc, r3]
 80069c6:	3b2e      	.short	0x3b2e
 80069c8:	5839      	.short	0x5839
 80069ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069ce:	441d      	add	r5, r3
 80069d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	bfc1      	itttt	gt
 80069d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80069e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80069e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80069e8:	bfd6      	itet	le
 80069ea:	f1c3 0320 	rsble	r3, r3, #32
 80069ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80069f2:	fa06 f003 	lslle.w	r0, r6, r3
 80069f6:	f7f9 fd9d 	bl	8000534 <__aeabi_ui2d>
 80069fa:	2201      	movs	r2, #1
 80069fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a00:	3d01      	subs	r5, #1
 8006a02:	920e      	str	r2, [sp, #56]	; 0x38
 8006a04:	e76f      	b.n	80068e6 <_dtoa_r+0x126>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e7b3      	b.n	8006972 <_dtoa_r+0x1b2>
 8006a0a:	900c      	str	r0, [sp, #48]	; 0x30
 8006a0c:	e7b2      	b.n	8006974 <_dtoa_r+0x1b4>
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	eba3 030b 	sub.w	r3, r3, fp
 8006a14:	9305      	str	r3, [sp, #20]
 8006a16:	f1cb 0300 	rsb	r3, fp, #0
 8006a1a:	9308      	str	r3, [sp, #32]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a20:	e7bf      	b.n	80069a2 <_dtoa_r+0x1e2>
 8006a22:	2300      	movs	r3, #0
 8006a24:	9309      	str	r3, [sp, #36]	; 0x24
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dc52      	bgt.n	8006ad2 <_dtoa_r+0x312>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	461a      	mov	r2, r3
 8006a34:	920a      	str	r2, [sp, #40]	; 0x28
 8006a36:	e00b      	b.n	8006a50 <_dtoa_r+0x290>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e7f3      	b.n	8006a24 <_dtoa_r+0x264>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a42:	445b      	add	r3, fp
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	3301      	adds	r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	bfb8      	it	lt
 8006a4e:	2301      	movlt	r3, #1
 8006a50:	69e0      	ldr	r0, [r4, #28]
 8006a52:	2100      	movs	r1, #0
 8006a54:	2204      	movs	r2, #4
 8006a56:	f102 0614 	add.w	r6, r2, #20
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	d93d      	bls.n	8006ada <_dtoa_r+0x31a>
 8006a5e:	6041      	str	r1, [r0, #4]
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fcf3 	bl	800744c <_Balloc>
 8006a66:	9000      	str	r0, [sp, #0]
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d139      	bne.n	8006ae0 <_dtoa_r+0x320>
 8006a6c:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <_dtoa_r+0x308>)
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f240 11af 	movw	r1, #431	; 0x1af
 8006a74:	e6bd      	b.n	80067f2 <_dtoa_r+0x32>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e7e1      	b.n	8006a3e <_dtoa_r+0x27e>
 8006a7a:	2501      	movs	r5, #1
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9307      	str	r3, [sp, #28]
 8006a80:	9509      	str	r5, [sp, #36]	; 0x24
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2312      	movs	r3, #18
 8006a8e:	e7d1      	b.n	8006a34 <_dtoa_r+0x274>
 8006a90:	636f4361 	.word	0x636f4361
 8006a94:	3fd287a7 	.word	0x3fd287a7
 8006a98:	8b60c8b3 	.word	0x8b60c8b3
 8006a9c:	3fc68a28 	.word	0x3fc68a28
 8006aa0:	509f79fb 	.word	0x509f79fb
 8006aa4:	3fd34413 	.word	0x3fd34413
 8006aa8:	080086dd 	.word	0x080086dd
 8006aac:	080086f4 	.word	0x080086f4
 8006ab0:	7ff00000 	.word	0x7ff00000
 8006ab4:	080086d9 	.word	0x080086d9
 8006ab8:	080086d0 	.word	0x080086d0
 8006abc:	080086ad 	.word	0x080086ad
 8006ac0:	3ff80000 	.word	0x3ff80000
 8006ac4:	080087e0 	.word	0x080087e0
 8006ac8:	0800874c 	.word	0x0800874c
 8006acc:	2301      	movs	r3, #1
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	e7d7      	b.n	8006a82 <_dtoa_r+0x2c2>
 8006ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	e7ba      	b.n	8006a50 <_dtoa_r+0x290>
 8006ada:	3101      	adds	r1, #1
 8006adc:	0052      	lsls	r2, r2, #1
 8006ade:	e7ba      	b.n	8006a56 <_dtoa_r+0x296>
 8006ae0:	69e3      	ldr	r3, [r4, #28]
 8006ae2:	9a00      	ldr	r2, [sp, #0]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	9b04      	ldr	r3, [sp, #16]
 8006ae8:	2b0e      	cmp	r3, #14
 8006aea:	f200 80a8 	bhi.w	8006c3e <_dtoa_r+0x47e>
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	f000 80a5 	beq.w	8006c3e <_dtoa_r+0x47e>
 8006af4:	f1bb 0f00 	cmp.w	fp, #0
 8006af8:	dd38      	ble.n	8006b6c <_dtoa_r+0x3ac>
 8006afa:	4bc0      	ldr	r3, [pc, #768]	; (8006dfc <_dtoa_r+0x63c>)
 8006afc:	f00b 020f 	and.w	r2, fp, #15
 8006b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006b10:	d019      	beq.n	8006b46 <_dtoa_r+0x386>
 8006b12:	4bbb      	ldr	r3, [pc, #748]	; (8006e00 <_dtoa_r+0x640>)
 8006b14:	ec51 0b18 	vmov	r0, r1, d8
 8006b18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b1c:	f7f9 feae 	bl	800087c <__aeabi_ddiv>
 8006b20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b24:	f008 080f 	and.w	r8, r8, #15
 8006b28:	2503      	movs	r5, #3
 8006b2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006e00 <_dtoa_r+0x640>
 8006b2e:	f1b8 0f00 	cmp.w	r8, #0
 8006b32:	d10a      	bne.n	8006b4a <_dtoa_r+0x38a>
 8006b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	f7f9 fe9e 	bl	800087c <__aeabi_ddiv>
 8006b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b44:	e02b      	b.n	8006b9e <_dtoa_r+0x3de>
 8006b46:	2502      	movs	r5, #2
 8006b48:	e7ef      	b.n	8006b2a <_dtoa_r+0x36a>
 8006b4a:	f018 0f01 	tst.w	r8, #1
 8006b4e:	d008      	beq.n	8006b62 <_dtoa_r+0x3a2>
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b58:	f7f9 fd66 	bl	8000628 <__aeabi_dmul>
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460f      	mov	r7, r1
 8006b62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b66:	f109 0908 	add.w	r9, r9, #8
 8006b6a:	e7e0      	b.n	8006b2e <_dtoa_r+0x36e>
 8006b6c:	f000 809f 	beq.w	8006cae <_dtoa_r+0x4ee>
 8006b70:	f1cb 0600 	rsb	r6, fp, #0
 8006b74:	4ba1      	ldr	r3, [pc, #644]	; (8006dfc <_dtoa_r+0x63c>)
 8006b76:	4fa2      	ldr	r7, [pc, #648]	; (8006e00 <_dtoa_r+0x640>)
 8006b78:	f006 020f 	and.w	r2, r6, #15
 8006b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	ec51 0b18 	vmov	r0, r1, d8
 8006b88:	f7f9 fd4e 	bl	8000628 <__aeabi_dmul>
 8006b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b90:	1136      	asrs	r6, r6, #4
 8006b92:	2300      	movs	r3, #0
 8006b94:	2502      	movs	r5, #2
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d17e      	bne.n	8006c98 <_dtoa_r+0x4d8>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1d0      	bne.n	8006b40 <_dtoa_r+0x380>
 8006b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8084 	beq.w	8006cb2 <_dtoa_r+0x4f2>
 8006baa:	4b96      	ldr	r3, [pc, #600]	; (8006e04 <_dtoa_r+0x644>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 ffab 	bl	8000b0c <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d07b      	beq.n	8006cb2 <_dtoa_r+0x4f2>
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d078      	beq.n	8006cb2 <_dtoa_r+0x4f2>
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	dd39      	ble.n	8006c3a <_dtoa_r+0x47a>
 8006bc6:	4b90      	ldr	r3, [pc, #576]	; (8006e08 <_dtoa_r+0x648>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 fd2b 	bl	8000628 <__aeabi_dmul>
 8006bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd6:	9e01      	ldr	r6, [sp, #4]
 8006bd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006bdc:	3501      	adds	r5, #1
 8006bde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7f9 fcb6 	bl	8000554 <__aeabi_i2d>
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	f7f9 fd1c 	bl	8000628 <__aeabi_dmul>
 8006bf0:	4b86      	ldr	r3, [pc, #536]	; (8006e0c <_dtoa_r+0x64c>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f7f9 fb62 	bl	80002bc <__adddf3>
 8006bf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c00:	9303      	str	r3, [sp, #12]
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	d158      	bne.n	8006cb8 <_dtoa_r+0x4f8>
 8006c06:	4b82      	ldr	r3, [pc, #520]	; (8006e10 <_dtoa_r+0x650>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fb53 	bl	80002b8 <__aeabi_dsub>
 8006c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c16:	4680      	mov	r8, r0
 8006c18:	4689      	mov	r9, r1
 8006c1a:	f7f9 ff95 	bl	8000b48 <__aeabi_dcmpgt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f040 8296 	bne.w	8007150 <_dtoa_r+0x990>
 8006c24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c28:	4640      	mov	r0, r8
 8006c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c2e:	4649      	mov	r1, r9
 8006c30:	f7f9 ff6c 	bl	8000b0c <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 8289 	bne.w	800714c <_dtoa_r+0x98c>
 8006c3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f2c0 814e 	blt.w	8006ee2 <_dtoa_r+0x722>
 8006c46:	f1bb 0f0e 	cmp.w	fp, #14
 8006c4a:	f300 814a 	bgt.w	8006ee2 <_dtoa_r+0x722>
 8006c4e:	4b6b      	ldr	r3, [pc, #428]	; (8006dfc <_dtoa_r+0x63c>)
 8006c50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f280 80dc 	bge.w	8006e18 <_dtoa_r+0x658>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f300 80d8 	bgt.w	8006e18 <_dtoa_r+0x658>
 8006c68:	f040 826f 	bne.w	800714a <_dtoa_r+0x98a>
 8006c6c:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <_dtoa_r+0x650>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 fcd8 	bl	8000628 <__aeabi_dmul>
 8006c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7c:	f7f9 ff5a 	bl	8000b34 <__aeabi_dcmpge>
 8006c80:	9e04      	ldr	r6, [sp, #16]
 8006c82:	4637      	mov	r7, r6
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f040 8245 	bne.w	8007114 <_dtoa_r+0x954>
 8006c8a:	9d00      	ldr	r5, [sp, #0]
 8006c8c:	2331      	movs	r3, #49	; 0x31
 8006c8e:	f805 3b01 	strb.w	r3, [r5], #1
 8006c92:	f10b 0b01 	add.w	fp, fp, #1
 8006c96:	e241      	b.n	800711c <_dtoa_r+0x95c>
 8006c98:	07f2      	lsls	r2, r6, #31
 8006c9a:	d505      	bpl.n	8006ca8 <_dtoa_r+0x4e8>
 8006c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca0:	f7f9 fcc2 	bl	8000628 <__aeabi_dmul>
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	1076      	asrs	r6, r6, #1
 8006caa:	3708      	adds	r7, #8
 8006cac:	e773      	b.n	8006b96 <_dtoa_r+0x3d6>
 8006cae:	2502      	movs	r5, #2
 8006cb0:	e775      	b.n	8006b9e <_dtoa_r+0x3de>
 8006cb2:	9e04      	ldr	r6, [sp, #16]
 8006cb4:	465f      	mov	r7, fp
 8006cb6:	e792      	b.n	8006bde <_dtoa_r+0x41e>
 8006cb8:	9900      	ldr	r1, [sp, #0]
 8006cba:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <_dtoa_r+0x63c>)
 8006cbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cc0:	4431      	add	r1, r6
 8006cc2:	9102      	str	r1, [sp, #8]
 8006cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc6:	eeb0 9a47 	vmov.f32	s18, s14
 8006cca:	eef0 9a67 	vmov.f32	s19, s15
 8006cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d044      	beq.n	8006d64 <_dtoa_r+0x5a4>
 8006cda:	494e      	ldr	r1, [pc, #312]	; (8006e14 <_dtoa_r+0x654>)
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7f9 fdcd 	bl	800087c <__aeabi_ddiv>
 8006ce2:	ec53 2b19 	vmov	r2, r3, d9
 8006ce6:	f7f9 fae7 	bl	80002b8 <__aeabi_dsub>
 8006cea:	9d00      	ldr	r5, [sp, #0]
 8006cec:	ec41 0b19 	vmov	d9, r0, r1
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7f9 ff48 	bl	8000b88 <__aeabi_d2iz>
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	f7f9 fc2b 	bl	8000554 <__aeabi_i2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 fad7 	bl	80002b8 <__aeabi_dsub>
 8006d0a:	3630      	adds	r6, #48	; 0x30
 8006d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006d10:	ec53 2b19 	vmov	r2, r3, d9
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	f7f9 fef8 	bl	8000b0c <__aeabi_dcmplt>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d164      	bne.n	8006dea <_dtoa_r+0x62a>
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	4937      	ldr	r1, [pc, #220]	; (8006e04 <_dtoa_r+0x644>)
 8006d26:	2000      	movs	r0, #0
 8006d28:	f7f9 fac6 	bl	80002b8 <__aeabi_dsub>
 8006d2c:	ec53 2b19 	vmov	r2, r3, d9
 8006d30:	f7f9 feec 	bl	8000b0c <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 80b6 	bne.w	8006ea6 <_dtoa_r+0x6e6>
 8006d3a:	9b02      	ldr	r3, [sp, #8]
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	f43f af7c 	beq.w	8006c3a <_dtoa_r+0x47a>
 8006d42:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <_dtoa_r+0x648>)
 8006d44:	ec51 0b19 	vmov	r0, r1, d9
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7f9 fc6d 	bl	8000628 <__aeabi_dmul>
 8006d4e:	4b2e      	ldr	r3, [pc, #184]	; (8006e08 <_dtoa_r+0x648>)
 8006d50:	ec41 0b19 	vmov	d9, r0, r1
 8006d54:	2200      	movs	r2, #0
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 fc65 	bl	8000628 <__aeabi_dmul>
 8006d5e:	4680      	mov	r8, r0
 8006d60:	4689      	mov	r9, r1
 8006d62:	e7c5      	b.n	8006cf0 <_dtoa_r+0x530>
 8006d64:	ec51 0b17 	vmov	r0, r1, d7
 8006d68:	f7f9 fc5e 	bl	8000628 <__aeabi_dmul>
 8006d6c:	9b02      	ldr	r3, [sp, #8]
 8006d6e:	9d00      	ldr	r5, [sp, #0]
 8006d70:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d72:	ec41 0b19 	vmov	d9, r0, r1
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f7f9 ff05 	bl	8000b88 <__aeabi_d2iz>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	f7f9 fbe8 	bl	8000554 <__aeabi_i2d>
 8006d84:	3630      	adds	r6, #48	; 0x30
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	f7f9 fa93 	bl	80002b8 <__aeabi_dsub>
 8006d92:	f805 6b01 	strb.w	r6, [r5], #1
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	429d      	cmp	r5, r3
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	d124      	bne.n	8006dee <_dtoa_r+0x62e>
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <_dtoa_r+0x654>)
 8006da6:	ec51 0b19 	vmov	r0, r1, d9
 8006daa:	f7f9 fa87 	bl	80002bc <__adddf3>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fec7 	bl	8000b48 <__aeabi_dcmpgt>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d173      	bne.n	8006ea6 <_dtoa_r+0x6e6>
 8006dbe:	ec53 2b19 	vmov	r2, r3, d9
 8006dc2:	4914      	ldr	r1, [pc, #80]	; (8006e14 <_dtoa_r+0x654>)
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7f9 fa77 	bl	80002b8 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	f7f9 fe9b 	bl	8000b0c <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f af2f 	beq.w	8006c3a <_dtoa_r+0x47a>
 8006ddc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006dde:	1e6b      	subs	r3, r5, #1
 8006de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006de6:	2b30      	cmp	r3, #48	; 0x30
 8006de8:	d0f8      	beq.n	8006ddc <_dtoa_r+0x61c>
 8006dea:	46bb      	mov	fp, r7
 8006dec:	e04a      	b.n	8006e84 <_dtoa_r+0x6c4>
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <_dtoa_r+0x648>)
 8006df0:	f7f9 fc1a 	bl	8000628 <__aeabi_dmul>
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	e7bd      	b.n	8006d76 <_dtoa_r+0x5b6>
 8006dfa:	bf00      	nop
 8006dfc:	080087e0 	.word	0x080087e0
 8006e00:	080087b8 	.word	0x080087b8
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	401c0000 	.word	0x401c0000
 8006e10:	40140000 	.word	0x40140000
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e1c:	9d00      	ldr	r5, [sp, #0]
 8006e1e:	4642      	mov	r2, r8
 8006e20:	464b      	mov	r3, r9
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fd29 	bl	800087c <__aeabi_ddiv>
 8006e2a:	f7f9 fead 	bl	8000b88 <__aeabi_d2iz>
 8006e2e:	9001      	str	r0, [sp, #4]
 8006e30:	f7f9 fb90 	bl	8000554 <__aeabi_i2d>
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	f7f9 fbf6 	bl	8000628 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4630      	mov	r0, r6
 8006e42:	4639      	mov	r1, r7
 8006e44:	f7f9 fa38 	bl	80002b8 <__aeabi_dsub>
 8006e48:	9e01      	ldr	r6, [sp, #4]
 8006e4a:	9f04      	ldr	r7, [sp, #16]
 8006e4c:	3630      	adds	r6, #48	; 0x30
 8006e4e:	f805 6b01 	strb.w	r6, [r5], #1
 8006e52:	9e00      	ldr	r6, [sp, #0]
 8006e54:	1bae      	subs	r6, r5, r6
 8006e56:	42b7      	cmp	r7, r6
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	d134      	bne.n	8006ec8 <_dtoa_r+0x708>
 8006e5e:	f7f9 fa2d 	bl	80002bc <__adddf3>
 8006e62:	4642      	mov	r2, r8
 8006e64:	464b      	mov	r3, r9
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	f7f9 fe6d 	bl	8000b48 <__aeabi_dcmpgt>
 8006e6e:	b9c8      	cbnz	r0, 8006ea4 <_dtoa_r+0x6e4>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 8006e7c:	b110      	cbz	r0, 8006e84 <_dtoa_r+0x6c4>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	07db      	lsls	r3, r3, #31
 8006e82:	d40f      	bmi.n	8006ea4 <_dtoa_r+0x6e4>
 8006e84:	4651      	mov	r1, sl
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 fb20 	bl	80074cc <_Bfree>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e90:	702b      	strb	r3, [r5, #0]
 8006e92:	f10b 0301 	add.w	r3, fp, #1
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f43f ace2 	beq.w	8006864 <_dtoa_r+0xa4>
 8006ea0:	601d      	str	r5, [r3, #0]
 8006ea2:	e4df      	b.n	8006864 <_dtoa_r+0xa4>
 8006ea4:	465f      	mov	r7, fp
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	461d      	mov	r5, r3
 8006eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eae:	2a39      	cmp	r2, #57	; 0x39
 8006eb0:	d106      	bne.n	8006ec0 <_dtoa_r+0x700>
 8006eb2:	9a00      	ldr	r2, [sp, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d1f7      	bne.n	8006ea8 <_dtoa_r+0x6e8>
 8006eb8:	9900      	ldr	r1, [sp, #0]
 8006eba:	2230      	movs	r2, #48	; 0x30
 8006ebc:	3701      	adds	r7, #1
 8006ebe:	700a      	strb	r2, [r1, #0]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	3201      	adds	r2, #1
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e790      	b.n	8006dea <_dtoa_r+0x62a>
 8006ec8:	4ba3      	ldr	r3, [pc, #652]	; (8007158 <_dtoa_r+0x998>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7f9 fbac 	bl	8000628 <__aeabi_dmul>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	460f      	mov	r7, r1
 8006ed8:	f7f9 fe0e 	bl	8000af8 <__aeabi_dcmpeq>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d09e      	beq.n	8006e1e <_dtoa_r+0x65e>
 8006ee0:	e7d0      	b.n	8006e84 <_dtoa_r+0x6c4>
 8006ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	f000 80ca 	beq.w	800707e <_dtoa_r+0x8be>
 8006eea:	9a07      	ldr	r2, [sp, #28]
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	f300 80ad 	bgt.w	800704c <_dtoa_r+0x88c>
 8006ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	f000 80a5 	beq.w	8007044 <_dtoa_r+0x884>
 8006efa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006efe:	9e08      	ldr	r6, [sp, #32]
 8006f00:	9d05      	ldr	r5, [sp, #20]
 8006f02:	9a05      	ldr	r2, [sp, #20]
 8006f04:	441a      	add	r2, r3
 8006f06:	9205      	str	r2, [sp, #20]
 8006f08:	9a06      	ldr	r2, [sp, #24]
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	441a      	add	r2, r3
 8006f0e:	4620      	mov	r0, r4
 8006f10:	9206      	str	r2, [sp, #24]
 8006f12:	f000 fb91 	bl	8007638 <__i2b>
 8006f16:	4607      	mov	r7, r0
 8006f18:	b165      	cbz	r5, 8006f34 <_dtoa_r+0x774>
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd09      	ble.n	8006f34 <_dtoa_r+0x774>
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	bfa8      	it	ge
 8006f26:	462b      	movge	r3, r5
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	9205      	str	r2, [sp, #20]
 8006f2c:	9a06      	ldr	r2, [sp, #24]
 8006f2e:	1aed      	subs	r5, r5, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	9b08      	ldr	r3, [sp, #32]
 8006f36:	b1f3      	cbz	r3, 8006f76 <_dtoa_r+0x7b6>
 8006f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80a3 	beq.w	8007086 <_dtoa_r+0x8c6>
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	dd10      	ble.n	8006f66 <_dtoa_r+0x7a6>
 8006f44:	4639      	mov	r1, r7
 8006f46:	4632      	mov	r2, r6
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fc35 	bl	80077b8 <__pow5mult>
 8006f4e:	4652      	mov	r2, sl
 8006f50:	4601      	mov	r1, r0
 8006f52:	4607      	mov	r7, r0
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fb85 	bl	8007664 <__multiply>
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 fab4 	bl	80074cc <_Bfree>
 8006f64:	46c2      	mov	sl, r8
 8006f66:	9b08      	ldr	r3, [sp, #32]
 8006f68:	1b9a      	subs	r2, r3, r6
 8006f6a:	d004      	beq.n	8006f76 <_dtoa_r+0x7b6>
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fc22 	bl	80077b8 <__pow5mult>
 8006f74:	4682      	mov	sl, r0
 8006f76:	2101      	movs	r1, #1
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fb5d 	bl	8007638 <__i2b>
 8006f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	4606      	mov	r6, r0
 8006f84:	f340 8081 	ble.w	800708a <_dtoa_r+0x8ca>
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 fc13 	bl	80077b8 <__pow5mult>
 8006f92:	9b07      	ldr	r3, [sp, #28]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	4606      	mov	r6, r0
 8006f98:	dd7a      	ble.n	8007090 <_dtoa_r+0x8d0>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	6933      	ldr	r3, [r6, #16]
 8006fa0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fa4:	6918      	ldr	r0, [r3, #16]
 8006fa6:	f000 faf9 	bl	800759c <__hi0bits>
 8006faa:	f1c0 0020 	rsb	r0, r0, #32
 8006fae:	9b06      	ldr	r3, [sp, #24]
 8006fb0:	4418      	add	r0, r3
 8006fb2:	f010 001f 	ands.w	r0, r0, #31
 8006fb6:	f000 8094 	beq.w	80070e2 <_dtoa_r+0x922>
 8006fba:	f1c0 0320 	rsb	r3, r0, #32
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	f340 8085 	ble.w	80070ce <_dtoa_r+0x90e>
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	f1c0 001c 	rsb	r0, r0, #28
 8006fca:	4403      	add	r3, r0
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	4403      	add	r3, r0
 8006fd2:	4405      	add	r5, r0
 8006fd4:	9306      	str	r3, [sp, #24]
 8006fd6:	9b05      	ldr	r3, [sp, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd05      	ble.n	8006fe8 <_dtoa_r+0x828>
 8006fdc:	4651      	mov	r1, sl
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fc43 	bl	800786c <__lshift>
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	9b06      	ldr	r3, [sp, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd05      	ble.n	8006ffa <_dtoa_r+0x83a>
 8006fee:	4631      	mov	r1, r6
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fc3a 	bl	800786c <__lshift>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d072      	beq.n	80070e6 <_dtoa_r+0x926>
 8007000:	4631      	mov	r1, r6
 8007002:	4650      	mov	r0, sl
 8007004:	f000 fc9e 	bl	8007944 <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	da6c      	bge.n	80070e6 <_dtoa_r+0x926>
 800700c:	2300      	movs	r3, #0
 800700e:	4651      	mov	r1, sl
 8007010:	220a      	movs	r2, #10
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fa7c 	bl	8007510 <__multadd>
 8007018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800701e:	4682      	mov	sl, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 81b0 	beq.w	8007386 <_dtoa_r+0xbc6>
 8007026:	2300      	movs	r3, #0
 8007028:	4639      	mov	r1, r7
 800702a:	220a      	movs	r2, #10
 800702c:	4620      	mov	r0, r4
 800702e:	f000 fa6f 	bl	8007510 <__multadd>
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	4607      	mov	r7, r0
 8007038:	f300 8096 	bgt.w	8007168 <_dtoa_r+0x9a8>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	2b02      	cmp	r3, #2
 8007040:	dc59      	bgt.n	80070f6 <_dtoa_r+0x936>
 8007042:	e091      	b.n	8007168 <_dtoa_r+0x9a8>
 8007044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800704a:	e758      	b.n	8006efe <_dtoa_r+0x73e>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	1e5e      	subs	r6, r3, #1
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	42b3      	cmp	r3, r6
 8007054:	bfbf      	itttt	lt
 8007056:	9b08      	ldrlt	r3, [sp, #32]
 8007058:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800705a:	9608      	strlt	r6, [sp, #32]
 800705c:	1af3      	sublt	r3, r6, r3
 800705e:	bfb4      	ite	lt
 8007060:	18d2      	addlt	r2, r2, r3
 8007062:	1b9e      	subge	r6, r3, r6
 8007064:	9b04      	ldr	r3, [sp, #16]
 8007066:	bfbc      	itt	lt
 8007068:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800706a:	2600      	movlt	r6, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	bfb7      	itett	lt
 8007070:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007074:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007078:	1a9d      	sublt	r5, r3, r2
 800707a:	2300      	movlt	r3, #0
 800707c:	e741      	b.n	8006f02 <_dtoa_r+0x742>
 800707e:	9e08      	ldr	r6, [sp, #32]
 8007080:	9d05      	ldr	r5, [sp, #20]
 8007082:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007084:	e748      	b.n	8006f18 <_dtoa_r+0x758>
 8007086:	9a08      	ldr	r2, [sp, #32]
 8007088:	e770      	b.n	8006f6c <_dtoa_r+0x7ac>
 800708a:	9b07      	ldr	r3, [sp, #28]
 800708c:	2b01      	cmp	r3, #1
 800708e:	dc19      	bgt.n	80070c4 <_dtoa_r+0x904>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	b9bb      	cbnz	r3, 80070c4 <_dtoa_r+0x904>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709a:	b99b      	cbnz	r3, 80070c4 <_dtoa_r+0x904>
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070a2:	0d1b      	lsrs	r3, r3, #20
 80070a4:	051b      	lsls	r3, r3, #20
 80070a6:	b183      	cbz	r3, 80070ca <_dtoa_r+0x90a>
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	3301      	adds	r3, #1
 80070ac:	9305      	str	r3, [sp, #20]
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	3301      	adds	r3, #1
 80070b2:	9306      	str	r3, [sp, #24]
 80070b4:	f04f 0801 	mov.w	r8, #1
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f47f af6f 	bne.w	8006f9e <_dtoa_r+0x7de>
 80070c0:	2001      	movs	r0, #1
 80070c2:	e774      	b.n	8006fae <_dtoa_r+0x7ee>
 80070c4:	f04f 0800 	mov.w	r8, #0
 80070c8:	e7f6      	b.n	80070b8 <_dtoa_r+0x8f8>
 80070ca:	4698      	mov	r8, r3
 80070cc:	e7f4      	b.n	80070b8 <_dtoa_r+0x8f8>
 80070ce:	d082      	beq.n	8006fd6 <_dtoa_r+0x816>
 80070d0:	9a05      	ldr	r2, [sp, #20]
 80070d2:	331c      	adds	r3, #28
 80070d4:	441a      	add	r2, r3
 80070d6:	9205      	str	r2, [sp, #20]
 80070d8:	9a06      	ldr	r2, [sp, #24]
 80070da:	441a      	add	r2, r3
 80070dc:	441d      	add	r5, r3
 80070de:	9206      	str	r2, [sp, #24]
 80070e0:	e779      	b.n	8006fd6 <_dtoa_r+0x816>
 80070e2:	4603      	mov	r3, r0
 80070e4:	e7f4      	b.n	80070d0 <_dtoa_r+0x910>
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc37      	bgt.n	800715c <_dtoa_r+0x99c>
 80070ec:	9b07      	ldr	r3, [sp, #28]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	dd34      	ble.n	800715c <_dtoa_r+0x99c>
 80070f2:	9b04      	ldr	r3, [sp, #16]
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	b963      	cbnz	r3, 8007114 <_dtoa_r+0x954>
 80070fa:	4631      	mov	r1, r6
 80070fc:	2205      	movs	r2, #5
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fa06 	bl	8007510 <__multadd>
 8007104:	4601      	mov	r1, r0
 8007106:	4606      	mov	r6, r0
 8007108:	4650      	mov	r0, sl
 800710a:	f000 fc1b 	bl	8007944 <__mcmp>
 800710e:	2800      	cmp	r0, #0
 8007110:	f73f adbb 	bgt.w	8006c8a <_dtoa_r+0x4ca>
 8007114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007116:	9d00      	ldr	r5, [sp, #0]
 8007118:	ea6f 0b03 	mvn.w	fp, r3
 800711c:	f04f 0800 	mov.w	r8, #0
 8007120:	4631      	mov	r1, r6
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f9d2 	bl	80074cc <_Bfree>
 8007128:	2f00      	cmp	r7, #0
 800712a:	f43f aeab 	beq.w	8006e84 <_dtoa_r+0x6c4>
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	d005      	beq.n	8007140 <_dtoa_r+0x980>
 8007134:	45b8      	cmp	r8, r7
 8007136:	d003      	beq.n	8007140 <_dtoa_r+0x980>
 8007138:	4641      	mov	r1, r8
 800713a:	4620      	mov	r0, r4
 800713c:	f000 f9c6 	bl	80074cc <_Bfree>
 8007140:	4639      	mov	r1, r7
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f9c2 	bl	80074cc <_Bfree>
 8007148:	e69c      	b.n	8006e84 <_dtoa_r+0x6c4>
 800714a:	2600      	movs	r6, #0
 800714c:	4637      	mov	r7, r6
 800714e:	e7e1      	b.n	8007114 <_dtoa_r+0x954>
 8007150:	46bb      	mov	fp, r7
 8007152:	4637      	mov	r7, r6
 8007154:	e599      	b.n	8006c8a <_dtoa_r+0x4ca>
 8007156:	bf00      	nop
 8007158:	40240000 	.word	0x40240000
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80c8 	beq.w	80072f4 <_dtoa_r+0xb34>
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	2d00      	cmp	r5, #0
 800716a:	dd05      	ble.n	8007178 <_dtoa_r+0x9b8>
 800716c:	4639      	mov	r1, r7
 800716e:	462a      	mov	r2, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fb7b 	bl	800786c <__lshift>
 8007176:	4607      	mov	r7, r0
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	d05b      	beq.n	8007236 <_dtoa_r+0xa76>
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4620      	mov	r0, r4
 8007182:	f000 f963 	bl	800744c <_Balloc>
 8007186:	4605      	mov	r5, r0
 8007188:	b928      	cbnz	r0, 8007196 <_dtoa_r+0x9d6>
 800718a:	4b83      	ldr	r3, [pc, #524]	; (8007398 <_dtoa_r+0xbd8>)
 800718c:	4602      	mov	r2, r0
 800718e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007192:	f7ff bb2e 	b.w	80067f2 <_dtoa_r+0x32>
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	3202      	adds	r2, #2
 800719a:	0092      	lsls	r2, r2, #2
 800719c:	f107 010c 	add.w	r1, r7, #12
 80071a0:	300c      	adds	r0, #12
 80071a2:	f7ff fa74 	bl	800668e <memcpy>
 80071a6:	2201      	movs	r2, #1
 80071a8:	4629      	mov	r1, r5
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 fb5e 	bl	800786c <__lshift>
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ba:	4413      	add	r3, r2
 80071bc:	9308      	str	r3, [sp, #32]
 80071be:	9b02      	ldr	r3, [sp, #8]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	46b8      	mov	r8, r7
 80071c6:	9306      	str	r3, [sp, #24]
 80071c8:	4607      	mov	r7, r0
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	4631      	mov	r1, r6
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4650      	mov	r0, sl
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f7ff fa69 	bl	80066aa <quorem>
 80071d8:	4641      	mov	r1, r8
 80071da:	9002      	str	r0, [sp, #8]
 80071dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071e0:	4650      	mov	r0, sl
 80071e2:	f000 fbaf 	bl	8007944 <__mcmp>
 80071e6:	463a      	mov	r2, r7
 80071e8:	9005      	str	r0, [sp, #20]
 80071ea:	4631      	mov	r1, r6
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fbc5 	bl	800797c <__mdiff>
 80071f2:	68c2      	ldr	r2, [r0, #12]
 80071f4:	4605      	mov	r5, r0
 80071f6:	bb02      	cbnz	r2, 800723a <_dtoa_r+0xa7a>
 80071f8:	4601      	mov	r1, r0
 80071fa:	4650      	mov	r0, sl
 80071fc:	f000 fba2 	bl	8007944 <__mcmp>
 8007200:	4602      	mov	r2, r0
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	9209      	str	r2, [sp, #36]	; 0x24
 8007208:	f000 f960 	bl	80074cc <_Bfree>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007210:	9d04      	ldr	r5, [sp, #16]
 8007212:	ea43 0102 	orr.w	r1, r3, r2
 8007216:	9b06      	ldr	r3, [sp, #24]
 8007218:	4319      	orrs	r1, r3
 800721a:	d110      	bne.n	800723e <_dtoa_r+0xa7e>
 800721c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007220:	d029      	beq.n	8007276 <_dtoa_r+0xab6>
 8007222:	9b05      	ldr	r3, [sp, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd02      	ble.n	800722e <_dtoa_r+0xa6e>
 8007228:	9b02      	ldr	r3, [sp, #8]
 800722a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	f883 9000 	strb.w	r9, [r3]
 8007234:	e774      	b.n	8007120 <_dtoa_r+0x960>
 8007236:	4638      	mov	r0, r7
 8007238:	e7ba      	b.n	80071b0 <_dtoa_r+0x9f0>
 800723a:	2201      	movs	r2, #1
 800723c:	e7e1      	b.n	8007202 <_dtoa_r+0xa42>
 800723e:	9b05      	ldr	r3, [sp, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	db04      	blt.n	800724e <_dtoa_r+0xa8e>
 8007244:	9907      	ldr	r1, [sp, #28]
 8007246:	430b      	orrs	r3, r1
 8007248:	9906      	ldr	r1, [sp, #24]
 800724a:	430b      	orrs	r3, r1
 800724c:	d120      	bne.n	8007290 <_dtoa_r+0xad0>
 800724e:	2a00      	cmp	r2, #0
 8007250:	dded      	ble.n	800722e <_dtoa_r+0xa6e>
 8007252:	4651      	mov	r1, sl
 8007254:	2201      	movs	r2, #1
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fb08 	bl	800786c <__lshift>
 800725c:	4631      	mov	r1, r6
 800725e:	4682      	mov	sl, r0
 8007260:	f000 fb70 	bl	8007944 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	dc03      	bgt.n	8007270 <_dtoa_r+0xab0>
 8007268:	d1e1      	bne.n	800722e <_dtoa_r+0xa6e>
 800726a:	f019 0f01 	tst.w	r9, #1
 800726e:	d0de      	beq.n	800722e <_dtoa_r+0xa6e>
 8007270:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007274:	d1d8      	bne.n	8007228 <_dtoa_r+0xa68>
 8007276:	9a01      	ldr	r2, [sp, #4]
 8007278:	2339      	movs	r3, #57	; 0x39
 800727a:	7013      	strb	r3, [r2, #0]
 800727c:	462b      	mov	r3, r5
 800727e:	461d      	mov	r5, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007286:	2a39      	cmp	r2, #57	; 0x39
 8007288:	d06c      	beq.n	8007364 <_dtoa_r+0xba4>
 800728a:	3201      	adds	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e747      	b.n	8007120 <_dtoa_r+0x960>
 8007290:	2a00      	cmp	r2, #0
 8007292:	dd07      	ble.n	80072a4 <_dtoa_r+0xae4>
 8007294:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007298:	d0ed      	beq.n	8007276 <_dtoa_r+0xab6>
 800729a:	9a01      	ldr	r2, [sp, #4]
 800729c:	f109 0301 	add.w	r3, r9, #1
 80072a0:	7013      	strb	r3, [r2, #0]
 80072a2:	e73d      	b.n	8007120 <_dtoa_r+0x960>
 80072a4:	9b04      	ldr	r3, [sp, #16]
 80072a6:	9a08      	ldr	r2, [sp, #32]
 80072a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d043      	beq.n	8007338 <_dtoa_r+0xb78>
 80072b0:	4651      	mov	r1, sl
 80072b2:	2300      	movs	r3, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 f92a 	bl	8007510 <__multadd>
 80072bc:	45b8      	cmp	r8, r7
 80072be:	4682      	mov	sl, r0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	f04f 020a 	mov.w	r2, #10
 80072c8:	4641      	mov	r1, r8
 80072ca:	4620      	mov	r0, r4
 80072cc:	d107      	bne.n	80072de <_dtoa_r+0xb1e>
 80072ce:	f000 f91f 	bl	8007510 <__multadd>
 80072d2:	4680      	mov	r8, r0
 80072d4:	4607      	mov	r7, r0
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	3301      	adds	r3, #1
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	e775      	b.n	80071ca <_dtoa_r+0xa0a>
 80072de:	f000 f917 	bl	8007510 <__multadd>
 80072e2:	4639      	mov	r1, r7
 80072e4:	4680      	mov	r8, r0
 80072e6:	2300      	movs	r3, #0
 80072e8:	220a      	movs	r2, #10
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f910 	bl	8007510 <__multadd>
 80072f0:	4607      	mov	r7, r0
 80072f2:	e7f0      	b.n	80072d6 <_dtoa_r+0xb16>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	9d00      	ldr	r5, [sp, #0]
 80072fa:	4631      	mov	r1, r6
 80072fc:	4650      	mov	r0, sl
 80072fe:	f7ff f9d4 	bl	80066aa <quorem>
 8007302:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	f805 9b01 	strb.w	r9, [r5], #1
 800730c:	1aea      	subs	r2, r5, r3
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	4293      	cmp	r3, r2
 8007312:	dd07      	ble.n	8007324 <_dtoa_r+0xb64>
 8007314:	4651      	mov	r1, sl
 8007316:	2300      	movs	r3, #0
 8007318:	220a      	movs	r2, #10
 800731a:	4620      	mov	r0, r4
 800731c:	f000 f8f8 	bl	8007510 <__multadd>
 8007320:	4682      	mov	sl, r0
 8007322:	e7ea      	b.n	80072fa <_dtoa_r+0xb3a>
 8007324:	9b01      	ldr	r3, [sp, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfc8      	it	gt
 800732a:	461d      	movgt	r5, r3
 800732c:	9b00      	ldr	r3, [sp, #0]
 800732e:	bfd8      	it	le
 8007330:	2501      	movle	r5, #1
 8007332:	441d      	add	r5, r3
 8007334:	f04f 0800 	mov.w	r8, #0
 8007338:	4651      	mov	r1, sl
 800733a:	2201      	movs	r2, #1
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fa95 	bl	800786c <__lshift>
 8007342:	4631      	mov	r1, r6
 8007344:	4682      	mov	sl, r0
 8007346:	f000 fafd 	bl	8007944 <__mcmp>
 800734a:	2800      	cmp	r0, #0
 800734c:	dc96      	bgt.n	800727c <_dtoa_r+0xabc>
 800734e:	d102      	bne.n	8007356 <_dtoa_r+0xb96>
 8007350:	f019 0f01 	tst.w	r9, #1
 8007354:	d192      	bne.n	800727c <_dtoa_r+0xabc>
 8007356:	462b      	mov	r3, r5
 8007358:	461d      	mov	r5, r3
 800735a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800735e:	2a30      	cmp	r2, #48	; 0x30
 8007360:	d0fa      	beq.n	8007358 <_dtoa_r+0xb98>
 8007362:	e6dd      	b.n	8007120 <_dtoa_r+0x960>
 8007364:	9a00      	ldr	r2, [sp, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d189      	bne.n	800727e <_dtoa_r+0xabe>
 800736a:	f10b 0b01 	add.w	fp, fp, #1
 800736e:	2331      	movs	r3, #49	; 0x31
 8007370:	e796      	b.n	80072a0 <_dtoa_r+0xae0>
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <_dtoa_r+0xbdc>)
 8007374:	f7ff ba99 	b.w	80068aa <_dtoa_r+0xea>
 8007378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800737a:	2b00      	cmp	r3, #0
 800737c:	f47f aa6d 	bne.w	800685a <_dtoa_r+0x9a>
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <_dtoa_r+0xbe0>)
 8007382:	f7ff ba92 	b.w	80068aa <_dtoa_r+0xea>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	dcb5      	bgt.n	80072f8 <_dtoa_r+0xb38>
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	2b02      	cmp	r3, #2
 8007390:	f73f aeb1 	bgt.w	80070f6 <_dtoa_r+0x936>
 8007394:	e7b0      	b.n	80072f8 <_dtoa_r+0xb38>
 8007396:	bf00      	nop
 8007398:	0800874c 	.word	0x0800874c
 800739c:	080086ac 	.word	0x080086ac
 80073a0:	080086d0 	.word	0x080086d0

080073a4 <_free_r>:
 80073a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a6:	2900      	cmp	r1, #0
 80073a8:	d044      	beq.n	8007434 <_free_r+0x90>
 80073aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ae:	9001      	str	r0, [sp, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f1a1 0404 	sub.w	r4, r1, #4
 80073b6:	bfb8      	it	lt
 80073b8:	18e4      	addlt	r4, r4, r3
 80073ba:	f7fe fb41 	bl	8005a40 <__malloc_lock>
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <_free_r+0x94>)
 80073c0:	9801      	ldr	r0, [sp, #4]
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x30>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073d0:	f7fe bb3c 	b.w	8005a4c <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x46>
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	1961      	adds	r1, r4, r5
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1949      	addeq	r1, r1, r5
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x22>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x50>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x46>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1855      	adds	r5, r2, r1
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x70>
 80073fc:	6824      	ldr	r4, [r4, #0]
 80073fe:	4421      	add	r1, r4
 8007400:	1854      	adds	r4, r2, r1
 8007402:	42a3      	cmp	r3, r4
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x26>
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	440c      	add	r4, r1
 8007410:	6014      	str	r4, [r2, #0]
 8007412:	e7da      	b.n	80073ca <_free_r+0x26>
 8007414:	d902      	bls.n	800741c <_free_r+0x78>
 8007416:	230c      	movs	r3, #12
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x26>
 800741c:	6825      	ldr	r5, [r4, #0]
 800741e:	1961      	adds	r1, r4, r5
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1949      	addeq	r1, r1, r5
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7ca      	b.n	80073ca <_free_r+0x26>
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	20000358 	.word	0x20000358

0800743c <malloc>:
 800743c:	4b02      	ldr	r3, [pc, #8]	; (8007448 <malloc+0xc>)
 800743e:	4601      	mov	r1, r0
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	f7fe ba7d 	b.w	8005940 <_malloc_r>
 8007446:	bf00      	nop
 8007448:	20000080 	.word	0x20000080

0800744c <_Balloc>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	69c6      	ldr	r6, [r0, #28]
 8007450:	4604      	mov	r4, r0
 8007452:	460d      	mov	r5, r1
 8007454:	b976      	cbnz	r6, 8007474 <_Balloc+0x28>
 8007456:	2010      	movs	r0, #16
 8007458:	f7ff fff0 	bl	800743c <malloc>
 800745c:	4602      	mov	r2, r0
 800745e:	61e0      	str	r0, [r4, #28]
 8007460:	b920      	cbnz	r0, 800746c <_Balloc+0x20>
 8007462:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <_Balloc+0x78>)
 8007464:	4818      	ldr	r0, [pc, #96]	; (80074c8 <_Balloc+0x7c>)
 8007466:	216b      	movs	r1, #107	; 0x6b
 8007468:	f000 fd8c 	bl	8007f84 <__assert_func>
 800746c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007470:	6006      	str	r6, [r0, #0]
 8007472:	60c6      	str	r6, [r0, #12]
 8007474:	69e6      	ldr	r6, [r4, #28]
 8007476:	68f3      	ldr	r3, [r6, #12]
 8007478:	b183      	cbz	r3, 800749c <_Balloc+0x50>
 800747a:	69e3      	ldr	r3, [r4, #28]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007482:	b9b8      	cbnz	r0, 80074b4 <_Balloc+0x68>
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f605 	lsl.w	r6, r1, r5
 800748a:	1d72      	adds	r2, r6, #5
 800748c:	0092      	lsls	r2, r2, #2
 800748e:	4620      	mov	r0, r4
 8007490:	f7fe fa20 	bl	80058d4 <_calloc_r>
 8007494:	b160      	cbz	r0, 80074b0 <_Balloc+0x64>
 8007496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800749a:	e00e      	b.n	80074ba <_Balloc+0x6e>
 800749c:	2221      	movs	r2, #33	; 0x21
 800749e:	2104      	movs	r1, #4
 80074a0:	4620      	mov	r0, r4
 80074a2:	f7fe fa17 	bl	80058d4 <_calloc_r>
 80074a6:	69e3      	ldr	r3, [r4, #28]
 80074a8:	60f0      	str	r0, [r6, #12]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e4      	bne.n	800747a <_Balloc+0x2e>
 80074b0:	2000      	movs	r0, #0
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	6802      	ldr	r2, [r0, #0]
 80074b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ba:	2300      	movs	r3, #0
 80074bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074c0:	e7f7      	b.n	80074b2 <_Balloc+0x66>
 80074c2:	bf00      	nop
 80074c4:	080086dd 	.word	0x080086dd
 80074c8:	0800875d 	.word	0x0800875d

080074cc <_Bfree>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	69c6      	ldr	r6, [r0, #28]
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	b976      	cbnz	r6, 80074f4 <_Bfree+0x28>
 80074d6:	2010      	movs	r0, #16
 80074d8:	f7ff ffb0 	bl	800743c <malloc>
 80074dc:	4602      	mov	r2, r0
 80074de:	61e8      	str	r0, [r5, #28]
 80074e0:	b920      	cbnz	r0, 80074ec <_Bfree+0x20>
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <_Bfree+0x3c>)
 80074e4:	4809      	ldr	r0, [pc, #36]	; (800750c <_Bfree+0x40>)
 80074e6:	218f      	movs	r1, #143	; 0x8f
 80074e8:	f000 fd4c 	bl	8007f84 <__assert_func>
 80074ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074f0:	6006      	str	r6, [r0, #0]
 80074f2:	60c6      	str	r6, [r0, #12]
 80074f4:	b13c      	cbz	r4, 8007506 <_Bfree+0x3a>
 80074f6:	69eb      	ldr	r3, [r5, #28]
 80074f8:	6862      	ldr	r2, [r4, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007500:	6021      	str	r1, [r4, #0]
 8007502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	080086dd 	.word	0x080086dd
 800750c:	0800875d 	.word	0x0800875d

08007510 <__multadd>:
 8007510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	690d      	ldr	r5, [r1, #16]
 8007516:	4607      	mov	r7, r0
 8007518:	460c      	mov	r4, r1
 800751a:	461e      	mov	r6, r3
 800751c:	f101 0c14 	add.w	ip, r1, #20
 8007520:	2000      	movs	r0, #0
 8007522:	f8dc 3000 	ldr.w	r3, [ip]
 8007526:	b299      	uxth	r1, r3
 8007528:	fb02 6101 	mla	r1, r2, r1, r6
 800752c:	0c1e      	lsrs	r6, r3, #16
 800752e:	0c0b      	lsrs	r3, r1, #16
 8007530:	fb02 3306 	mla	r3, r2, r6, r3
 8007534:	b289      	uxth	r1, r1
 8007536:	3001      	adds	r0, #1
 8007538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800753c:	4285      	cmp	r5, r0
 800753e:	f84c 1b04 	str.w	r1, [ip], #4
 8007542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007546:	dcec      	bgt.n	8007522 <__multadd+0x12>
 8007548:	b30e      	cbz	r6, 800758e <__multadd+0x7e>
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	42ab      	cmp	r3, r5
 800754e:	dc19      	bgt.n	8007584 <__multadd+0x74>
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4638      	mov	r0, r7
 8007554:	3101      	adds	r1, #1
 8007556:	f7ff ff79 	bl	800744c <_Balloc>
 800755a:	4680      	mov	r8, r0
 800755c:	b928      	cbnz	r0, 800756a <__multadd+0x5a>
 800755e:	4602      	mov	r2, r0
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <__multadd+0x84>)
 8007562:	480d      	ldr	r0, [pc, #52]	; (8007598 <__multadd+0x88>)
 8007564:	21ba      	movs	r1, #186	; 0xba
 8007566:	f000 fd0d 	bl	8007f84 <__assert_func>
 800756a:	6922      	ldr	r2, [r4, #16]
 800756c:	3202      	adds	r2, #2
 800756e:	f104 010c 	add.w	r1, r4, #12
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	300c      	adds	r0, #12
 8007576:	f7ff f88a 	bl	800668e <memcpy>
 800757a:	4621      	mov	r1, r4
 800757c:	4638      	mov	r0, r7
 800757e:	f7ff ffa5 	bl	80074cc <_Bfree>
 8007582:	4644      	mov	r4, r8
 8007584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007588:	3501      	adds	r5, #1
 800758a:	615e      	str	r6, [r3, #20]
 800758c:	6125      	str	r5, [r4, #16]
 800758e:	4620      	mov	r0, r4
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007594:	0800874c 	.word	0x0800874c
 8007598:	0800875d 	.word	0x0800875d

0800759c <__hi0bits>:
 800759c:	0c03      	lsrs	r3, r0, #16
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	b9d3      	cbnz	r3, 80075d8 <__hi0bits+0x3c>
 80075a2:	0400      	lsls	r0, r0, #16
 80075a4:	2310      	movs	r3, #16
 80075a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075aa:	bf04      	itt	eq
 80075ac:	0200      	lsleq	r0, r0, #8
 80075ae:	3308      	addeq	r3, #8
 80075b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075b4:	bf04      	itt	eq
 80075b6:	0100      	lsleq	r0, r0, #4
 80075b8:	3304      	addeq	r3, #4
 80075ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075be:	bf04      	itt	eq
 80075c0:	0080      	lsleq	r0, r0, #2
 80075c2:	3302      	addeq	r3, #2
 80075c4:	2800      	cmp	r0, #0
 80075c6:	db05      	blt.n	80075d4 <__hi0bits+0x38>
 80075c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075cc:	f103 0301 	add.w	r3, r3, #1
 80075d0:	bf08      	it	eq
 80075d2:	2320      	moveq	r3, #32
 80075d4:	4618      	mov	r0, r3
 80075d6:	4770      	bx	lr
 80075d8:	2300      	movs	r3, #0
 80075da:	e7e4      	b.n	80075a6 <__hi0bits+0xa>

080075dc <__lo0bits>:
 80075dc:	6803      	ldr	r3, [r0, #0]
 80075de:	f013 0207 	ands.w	r2, r3, #7
 80075e2:	d00c      	beq.n	80075fe <__lo0bits+0x22>
 80075e4:	07d9      	lsls	r1, r3, #31
 80075e6:	d422      	bmi.n	800762e <__lo0bits+0x52>
 80075e8:	079a      	lsls	r2, r3, #30
 80075ea:	bf49      	itett	mi
 80075ec:	085b      	lsrmi	r3, r3, #1
 80075ee:	089b      	lsrpl	r3, r3, #2
 80075f0:	6003      	strmi	r3, [r0, #0]
 80075f2:	2201      	movmi	r2, #1
 80075f4:	bf5c      	itt	pl
 80075f6:	6003      	strpl	r3, [r0, #0]
 80075f8:	2202      	movpl	r2, #2
 80075fa:	4610      	mov	r0, r2
 80075fc:	4770      	bx	lr
 80075fe:	b299      	uxth	r1, r3
 8007600:	b909      	cbnz	r1, 8007606 <__lo0bits+0x2a>
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	2210      	movs	r2, #16
 8007606:	b2d9      	uxtb	r1, r3
 8007608:	b909      	cbnz	r1, 800760e <__lo0bits+0x32>
 800760a:	3208      	adds	r2, #8
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	0719      	lsls	r1, r3, #28
 8007610:	bf04      	itt	eq
 8007612:	091b      	lsreq	r3, r3, #4
 8007614:	3204      	addeq	r2, #4
 8007616:	0799      	lsls	r1, r3, #30
 8007618:	bf04      	itt	eq
 800761a:	089b      	lsreq	r3, r3, #2
 800761c:	3202      	addeq	r2, #2
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	d403      	bmi.n	800762a <__lo0bits+0x4e>
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	f102 0201 	add.w	r2, r2, #1
 8007628:	d003      	beq.n	8007632 <__lo0bits+0x56>
 800762a:	6003      	str	r3, [r0, #0]
 800762c:	e7e5      	b.n	80075fa <__lo0bits+0x1e>
 800762e:	2200      	movs	r2, #0
 8007630:	e7e3      	b.n	80075fa <__lo0bits+0x1e>
 8007632:	2220      	movs	r2, #32
 8007634:	e7e1      	b.n	80075fa <__lo0bits+0x1e>
	...

08007638 <__i2b>:
 8007638:	b510      	push	{r4, lr}
 800763a:	460c      	mov	r4, r1
 800763c:	2101      	movs	r1, #1
 800763e:	f7ff ff05 	bl	800744c <_Balloc>
 8007642:	4602      	mov	r2, r0
 8007644:	b928      	cbnz	r0, 8007652 <__i2b+0x1a>
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <__i2b+0x24>)
 8007648:	4805      	ldr	r0, [pc, #20]	; (8007660 <__i2b+0x28>)
 800764a:	f240 1145 	movw	r1, #325	; 0x145
 800764e:	f000 fc99 	bl	8007f84 <__assert_func>
 8007652:	2301      	movs	r3, #1
 8007654:	6144      	str	r4, [r0, #20]
 8007656:	6103      	str	r3, [r0, #16]
 8007658:	bd10      	pop	{r4, pc}
 800765a:	bf00      	nop
 800765c:	0800874c 	.word	0x0800874c
 8007660:	0800875d 	.word	0x0800875d

08007664 <__multiply>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	4691      	mov	r9, r2
 800766a:	690a      	ldr	r2, [r1, #16]
 800766c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	bfb8      	it	lt
 8007674:	460b      	movlt	r3, r1
 8007676:	460c      	mov	r4, r1
 8007678:	bfbc      	itt	lt
 800767a:	464c      	movlt	r4, r9
 800767c:	4699      	movlt	r9, r3
 800767e:	6927      	ldr	r7, [r4, #16]
 8007680:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007684:	68a3      	ldr	r3, [r4, #8]
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	eb07 060a 	add.w	r6, r7, sl
 800768c:	42b3      	cmp	r3, r6
 800768e:	b085      	sub	sp, #20
 8007690:	bfb8      	it	lt
 8007692:	3101      	addlt	r1, #1
 8007694:	f7ff feda 	bl	800744c <_Balloc>
 8007698:	b930      	cbnz	r0, 80076a8 <__multiply+0x44>
 800769a:	4602      	mov	r2, r0
 800769c:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <__multiply+0x14c>)
 800769e:	4845      	ldr	r0, [pc, #276]	; (80077b4 <__multiply+0x150>)
 80076a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80076a4:	f000 fc6e 	bl	8007f84 <__assert_func>
 80076a8:	f100 0514 	add.w	r5, r0, #20
 80076ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076b0:	462b      	mov	r3, r5
 80076b2:	2200      	movs	r2, #0
 80076b4:	4543      	cmp	r3, r8
 80076b6:	d321      	bcc.n	80076fc <__multiply+0x98>
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076c0:	f109 0314 	add.w	r3, r9, #20
 80076c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076c8:	9202      	str	r2, [sp, #8]
 80076ca:	1b3a      	subs	r2, r7, r4
 80076cc:	3a15      	subs	r2, #21
 80076ce:	f022 0203 	bic.w	r2, r2, #3
 80076d2:	3204      	adds	r2, #4
 80076d4:	f104 0115 	add.w	r1, r4, #21
 80076d8:	428f      	cmp	r7, r1
 80076da:	bf38      	it	cc
 80076dc:	2204      	movcc	r2, #4
 80076de:	9201      	str	r2, [sp, #4]
 80076e0:	9a02      	ldr	r2, [sp, #8]
 80076e2:	9303      	str	r3, [sp, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d80c      	bhi.n	8007702 <__multiply+0x9e>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	dd03      	ble.n	80076f4 <__multiply+0x90>
 80076ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d05b      	beq.n	80077ac <__multiply+0x148>
 80076f4:	6106      	str	r6, [r0, #16]
 80076f6:	b005      	add	sp, #20
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	f843 2b04 	str.w	r2, [r3], #4
 8007700:	e7d8      	b.n	80076b4 <__multiply+0x50>
 8007702:	f8b3 a000 	ldrh.w	sl, [r3]
 8007706:	f1ba 0f00 	cmp.w	sl, #0
 800770a:	d024      	beq.n	8007756 <__multiply+0xf2>
 800770c:	f104 0e14 	add.w	lr, r4, #20
 8007710:	46a9      	mov	r9, r5
 8007712:	f04f 0c00 	mov.w	ip, #0
 8007716:	f85e 2b04 	ldr.w	r2, [lr], #4
 800771a:	f8d9 1000 	ldr.w	r1, [r9]
 800771e:	fa1f fb82 	uxth.w	fp, r2
 8007722:	b289      	uxth	r1, r1
 8007724:	fb0a 110b 	mla	r1, sl, fp, r1
 8007728:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800772c:	f8d9 2000 	ldr.w	r2, [r9]
 8007730:	4461      	add	r1, ip
 8007732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007736:	fb0a c20b 	mla	r2, sl, fp, ip
 800773a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800773e:	b289      	uxth	r1, r1
 8007740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007744:	4577      	cmp	r7, lr
 8007746:	f849 1b04 	str.w	r1, [r9], #4
 800774a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800774e:	d8e2      	bhi.n	8007716 <__multiply+0xb2>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	f845 c002 	str.w	ip, [r5, r2]
 8007756:	9a03      	ldr	r2, [sp, #12]
 8007758:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800775c:	3304      	adds	r3, #4
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	d021      	beq.n	80077a8 <__multiply+0x144>
 8007764:	6829      	ldr	r1, [r5, #0]
 8007766:	f104 0c14 	add.w	ip, r4, #20
 800776a:	46ae      	mov	lr, r5
 800776c:	f04f 0a00 	mov.w	sl, #0
 8007770:	f8bc b000 	ldrh.w	fp, [ip]
 8007774:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007778:	fb09 220b 	mla	r2, r9, fp, r2
 800777c:	4452      	add	r2, sl
 800777e:	b289      	uxth	r1, r1
 8007780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007784:	f84e 1b04 	str.w	r1, [lr], #4
 8007788:	f85c 1b04 	ldr.w	r1, [ip], #4
 800778c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007790:	f8be 1000 	ldrh.w	r1, [lr]
 8007794:	fb09 110a 	mla	r1, r9, sl, r1
 8007798:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800779c:	4567      	cmp	r7, ip
 800779e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077a2:	d8e5      	bhi.n	8007770 <__multiply+0x10c>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	50a9      	str	r1, [r5, r2]
 80077a8:	3504      	adds	r5, #4
 80077aa:	e799      	b.n	80076e0 <__multiply+0x7c>
 80077ac:	3e01      	subs	r6, #1
 80077ae:	e79b      	b.n	80076e8 <__multiply+0x84>
 80077b0:	0800874c 	.word	0x0800874c
 80077b4:	0800875d 	.word	0x0800875d

080077b8 <__pow5mult>:
 80077b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077bc:	4615      	mov	r5, r2
 80077be:	f012 0203 	ands.w	r2, r2, #3
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	d007      	beq.n	80077d8 <__pow5mult+0x20>
 80077c8:	4c25      	ldr	r4, [pc, #148]	; (8007860 <__pow5mult+0xa8>)
 80077ca:	3a01      	subs	r2, #1
 80077cc:	2300      	movs	r3, #0
 80077ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077d2:	f7ff fe9d 	bl	8007510 <__multadd>
 80077d6:	4607      	mov	r7, r0
 80077d8:	10ad      	asrs	r5, r5, #2
 80077da:	d03d      	beq.n	8007858 <__pow5mult+0xa0>
 80077dc:	69f4      	ldr	r4, [r6, #28]
 80077de:	b97c      	cbnz	r4, 8007800 <__pow5mult+0x48>
 80077e0:	2010      	movs	r0, #16
 80077e2:	f7ff fe2b 	bl	800743c <malloc>
 80077e6:	4602      	mov	r2, r0
 80077e8:	61f0      	str	r0, [r6, #28]
 80077ea:	b928      	cbnz	r0, 80077f8 <__pow5mult+0x40>
 80077ec:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <__pow5mult+0xac>)
 80077ee:	481e      	ldr	r0, [pc, #120]	; (8007868 <__pow5mult+0xb0>)
 80077f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077f4:	f000 fbc6 	bl	8007f84 <__assert_func>
 80077f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077fc:	6004      	str	r4, [r0, #0]
 80077fe:	60c4      	str	r4, [r0, #12]
 8007800:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007808:	b94c      	cbnz	r4, 800781e <__pow5mult+0x66>
 800780a:	f240 2171 	movw	r1, #625	; 0x271
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff ff12 	bl	8007638 <__i2b>
 8007814:	2300      	movs	r3, #0
 8007816:	f8c8 0008 	str.w	r0, [r8, #8]
 800781a:	4604      	mov	r4, r0
 800781c:	6003      	str	r3, [r0, #0]
 800781e:	f04f 0900 	mov.w	r9, #0
 8007822:	07eb      	lsls	r3, r5, #31
 8007824:	d50a      	bpl.n	800783c <__pow5mult+0x84>
 8007826:	4639      	mov	r1, r7
 8007828:	4622      	mov	r2, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ff1a 	bl	8007664 <__multiply>
 8007830:	4639      	mov	r1, r7
 8007832:	4680      	mov	r8, r0
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff fe49 	bl	80074cc <_Bfree>
 800783a:	4647      	mov	r7, r8
 800783c:	106d      	asrs	r5, r5, #1
 800783e:	d00b      	beq.n	8007858 <__pow5mult+0xa0>
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	b938      	cbnz	r0, 8007854 <__pow5mult+0x9c>
 8007844:	4622      	mov	r2, r4
 8007846:	4621      	mov	r1, r4
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff ff0b 	bl	8007664 <__multiply>
 800784e:	6020      	str	r0, [r4, #0]
 8007850:	f8c0 9000 	str.w	r9, [r0]
 8007854:	4604      	mov	r4, r0
 8007856:	e7e4      	b.n	8007822 <__pow5mult+0x6a>
 8007858:	4638      	mov	r0, r7
 800785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785e:	bf00      	nop
 8007860:	080088a8 	.word	0x080088a8
 8007864:	080086dd 	.word	0x080086dd
 8007868:	0800875d 	.word	0x0800875d

0800786c <__lshift>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	460c      	mov	r4, r1
 8007872:	6849      	ldr	r1, [r1, #4]
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	4607      	mov	r7, r0
 800787e:	4691      	mov	r9, r2
 8007880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007884:	f108 0601 	add.w	r6, r8, #1
 8007888:	42b3      	cmp	r3, r6
 800788a:	db0b      	blt.n	80078a4 <__lshift+0x38>
 800788c:	4638      	mov	r0, r7
 800788e:	f7ff fddd 	bl	800744c <_Balloc>
 8007892:	4605      	mov	r5, r0
 8007894:	b948      	cbnz	r0, 80078aa <__lshift+0x3e>
 8007896:	4602      	mov	r2, r0
 8007898:	4b28      	ldr	r3, [pc, #160]	; (800793c <__lshift+0xd0>)
 800789a:	4829      	ldr	r0, [pc, #164]	; (8007940 <__lshift+0xd4>)
 800789c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80078a0:	f000 fb70 	bl	8007f84 <__assert_func>
 80078a4:	3101      	adds	r1, #1
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	e7ee      	b.n	8007888 <__lshift+0x1c>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f100 0114 	add.w	r1, r0, #20
 80078b0:	f100 0210 	add.w	r2, r0, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	4553      	cmp	r3, sl
 80078b8:	db33      	blt.n	8007922 <__lshift+0xb6>
 80078ba:	6920      	ldr	r0, [r4, #16]
 80078bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078c0:	f104 0314 	add.w	r3, r4, #20
 80078c4:	f019 091f 	ands.w	r9, r9, #31
 80078c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078d0:	d02b      	beq.n	800792a <__lshift+0xbe>
 80078d2:	f1c9 0e20 	rsb	lr, r9, #32
 80078d6:	468a      	mov	sl, r1
 80078d8:	2200      	movs	r2, #0
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	fa00 f009 	lsl.w	r0, r0, r9
 80078e0:	4310      	orrs	r0, r2
 80078e2:	f84a 0b04 	str.w	r0, [sl], #4
 80078e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ea:	459c      	cmp	ip, r3
 80078ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80078f0:	d8f3      	bhi.n	80078da <__lshift+0x6e>
 80078f2:	ebac 0304 	sub.w	r3, ip, r4
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3304      	adds	r3, #4
 80078fe:	f104 0015 	add.w	r0, r4, #21
 8007902:	4584      	cmp	ip, r0
 8007904:	bf38      	it	cc
 8007906:	2304      	movcc	r3, #4
 8007908:	50ca      	str	r2, [r1, r3]
 800790a:	b10a      	cbz	r2, 8007910 <__lshift+0xa4>
 800790c:	f108 0602 	add.w	r6, r8, #2
 8007910:	3e01      	subs	r6, #1
 8007912:	4638      	mov	r0, r7
 8007914:	612e      	str	r6, [r5, #16]
 8007916:	4621      	mov	r1, r4
 8007918:	f7ff fdd8 	bl	80074cc <_Bfree>
 800791c:	4628      	mov	r0, r5
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	f842 0f04 	str.w	r0, [r2, #4]!
 8007926:	3301      	adds	r3, #1
 8007928:	e7c5      	b.n	80078b6 <__lshift+0x4a>
 800792a:	3904      	subs	r1, #4
 800792c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007930:	f841 2f04 	str.w	r2, [r1, #4]!
 8007934:	459c      	cmp	ip, r3
 8007936:	d8f9      	bhi.n	800792c <__lshift+0xc0>
 8007938:	e7ea      	b.n	8007910 <__lshift+0xa4>
 800793a:	bf00      	nop
 800793c:	0800874c 	.word	0x0800874c
 8007940:	0800875d 	.word	0x0800875d

08007944 <__mcmp>:
 8007944:	b530      	push	{r4, r5, lr}
 8007946:	6902      	ldr	r2, [r0, #16]
 8007948:	690c      	ldr	r4, [r1, #16]
 800794a:	1b12      	subs	r2, r2, r4
 800794c:	d10e      	bne.n	800796c <__mcmp+0x28>
 800794e:	f100 0314 	add.w	r3, r0, #20
 8007952:	3114      	adds	r1, #20
 8007954:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007958:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800795c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007960:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007964:	42a5      	cmp	r5, r4
 8007966:	d003      	beq.n	8007970 <__mcmp+0x2c>
 8007968:	d305      	bcc.n	8007976 <__mcmp+0x32>
 800796a:	2201      	movs	r2, #1
 800796c:	4610      	mov	r0, r2
 800796e:	bd30      	pop	{r4, r5, pc}
 8007970:	4283      	cmp	r3, r0
 8007972:	d3f3      	bcc.n	800795c <__mcmp+0x18>
 8007974:	e7fa      	b.n	800796c <__mcmp+0x28>
 8007976:	f04f 32ff 	mov.w	r2, #4294967295
 800797a:	e7f7      	b.n	800796c <__mcmp+0x28>

0800797c <__mdiff>:
 800797c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	460c      	mov	r4, r1
 8007982:	4606      	mov	r6, r0
 8007984:	4611      	mov	r1, r2
 8007986:	4620      	mov	r0, r4
 8007988:	4690      	mov	r8, r2
 800798a:	f7ff ffdb 	bl	8007944 <__mcmp>
 800798e:	1e05      	subs	r5, r0, #0
 8007990:	d110      	bne.n	80079b4 <__mdiff+0x38>
 8007992:	4629      	mov	r1, r5
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff fd59 	bl	800744c <_Balloc>
 800799a:	b930      	cbnz	r0, 80079aa <__mdiff+0x2e>
 800799c:	4b3a      	ldr	r3, [pc, #232]	; (8007a88 <__mdiff+0x10c>)
 800799e:	4602      	mov	r2, r0
 80079a0:	f240 2137 	movw	r1, #567	; 0x237
 80079a4:	4839      	ldr	r0, [pc, #228]	; (8007a8c <__mdiff+0x110>)
 80079a6:	f000 faed 	bl	8007f84 <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b4:	bfa4      	itt	ge
 80079b6:	4643      	movge	r3, r8
 80079b8:	46a0      	movge	r8, r4
 80079ba:	4630      	mov	r0, r6
 80079bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079c0:	bfa6      	itte	ge
 80079c2:	461c      	movge	r4, r3
 80079c4:	2500      	movge	r5, #0
 80079c6:	2501      	movlt	r5, #1
 80079c8:	f7ff fd40 	bl	800744c <_Balloc>
 80079cc:	b920      	cbnz	r0, 80079d8 <__mdiff+0x5c>
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <__mdiff+0x10c>)
 80079d0:	4602      	mov	r2, r0
 80079d2:	f240 2145 	movw	r1, #581	; 0x245
 80079d6:	e7e5      	b.n	80079a4 <__mdiff+0x28>
 80079d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079dc:	6926      	ldr	r6, [r4, #16]
 80079de:	60c5      	str	r5, [r0, #12]
 80079e0:	f104 0914 	add.w	r9, r4, #20
 80079e4:	f108 0514 	add.w	r5, r8, #20
 80079e8:	f100 0e14 	add.w	lr, r0, #20
 80079ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079f4:	f108 0210 	add.w	r2, r8, #16
 80079f8:	46f2      	mov	sl, lr
 80079fa:	2100      	movs	r1, #0
 80079fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a04:	fa11 f88b 	uxtah	r8, r1, fp
 8007a08:	b299      	uxth	r1, r3
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	eba8 0801 	sub.w	r8, r8, r1
 8007a10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a18:	fa1f f888 	uxth.w	r8, r8
 8007a1c:	1419      	asrs	r1, r3, #16
 8007a1e:	454e      	cmp	r6, r9
 8007a20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a24:	f84a 3b04 	str.w	r3, [sl], #4
 8007a28:	d8e8      	bhi.n	80079fc <__mdiff+0x80>
 8007a2a:	1b33      	subs	r3, r6, r4
 8007a2c:	3b15      	subs	r3, #21
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	3304      	adds	r3, #4
 8007a34:	3415      	adds	r4, #21
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	bf38      	it	cc
 8007a3a:	2304      	movcc	r3, #4
 8007a3c:	441d      	add	r5, r3
 8007a3e:	4473      	add	r3, lr
 8007a40:	469e      	mov	lr, r3
 8007a42:	462e      	mov	r6, r5
 8007a44:	4566      	cmp	r6, ip
 8007a46:	d30e      	bcc.n	8007a66 <__mdiff+0xea>
 8007a48:	f10c 0203 	add.w	r2, ip, #3
 8007a4c:	1b52      	subs	r2, r2, r5
 8007a4e:	f022 0203 	bic.w	r2, r2, #3
 8007a52:	3d03      	subs	r5, #3
 8007a54:	45ac      	cmp	ip, r5
 8007a56:	bf38      	it	cc
 8007a58:	2200      	movcc	r2, #0
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a60:	b17a      	cbz	r2, 8007a82 <__mdiff+0x106>
 8007a62:	6107      	str	r7, [r0, #16]
 8007a64:	e7a4      	b.n	80079b0 <__mdiff+0x34>
 8007a66:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a6a:	fa11 f288 	uxtah	r2, r1, r8
 8007a6e:	1414      	asrs	r4, r2, #16
 8007a70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a74:	b292      	uxth	r2, r2
 8007a76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a7a:	f84e 2b04 	str.w	r2, [lr], #4
 8007a7e:	1421      	asrs	r1, r4, #16
 8007a80:	e7e0      	b.n	8007a44 <__mdiff+0xc8>
 8007a82:	3f01      	subs	r7, #1
 8007a84:	e7ea      	b.n	8007a5c <__mdiff+0xe0>
 8007a86:	bf00      	nop
 8007a88:	0800874c 	.word	0x0800874c
 8007a8c:	0800875d 	.word	0x0800875d

08007a90 <__d2b>:
 8007a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	460f      	mov	r7, r1
 8007a96:	2101      	movs	r1, #1
 8007a98:	ec59 8b10 	vmov	r8, r9, d0
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	f7ff fcd5 	bl	800744c <_Balloc>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	b930      	cbnz	r0, 8007ab4 <__d2b+0x24>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	4b24      	ldr	r3, [pc, #144]	; (8007b3c <__d2b+0xac>)
 8007aaa:	4825      	ldr	r0, [pc, #148]	; (8007b40 <__d2b+0xb0>)
 8007aac:	f240 310f 	movw	r1, #783	; 0x30f
 8007ab0:	f000 fa68 	bl	8007f84 <__assert_func>
 8007ab4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007abc:	bb2d      	cbnz	r5, 8007b0a <__d2b+0x7a>
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ac4:	d026      	beq.n	8007b14 <__d2b+0x84>
 8007ac6:	4668      	mov	r0, sp
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f7ff fd87 	bl	80075dc <__lo0bits>
 8007ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ad2:	b1e8      	cbz	r0, 8007b10 <__d2b+0x80>
 8007ad4:	f1c0 0320 	rsb	r3, r0, #32
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	430b      	orrs	r3, r1
 8007ade:	40c2      	lsrs	r2, r0
 8007ae0:	6163      	str	r3, [r4, #20]
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	61a3      	str	r3, [r4, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf14      	ite	ne
 8007aec:	2202      	movne	r2, #2
 8007aee:	2201      	moveq	r2, #1
 8007af0:	6122      	str	r2, [r4, #16]
 8007af2:	b1bd      	cbz	r5, 8007b24 <__d2b+0x94>
 8007af4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007af8:	4405      	add	r5, r0
 8007afa:	603d      	str	r5, [r7, #0]
 8007afc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	4620      	mov	r0, r4
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b0e:	e7d6      	b.n	8007abe <__d2b+0x2e>
 8007b10:	6161      	str	r1, [r4, #20]
 8007b12:	e7e7      	b.n	8007ae4 <__d2b+0x54>
 8007b14:	a801      	add	r0, sp, #4
 8007b16:	f7ff fd61 	bl	80075dc <__lo0bits>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	6163      	str	r3, [r4, #20]
 8007b1e:	3020      	adds	r0, #32
 8007b20:	2201      	movs	r2, #1
 8007b22:	e7e5      	b.n	8007af0 <__d2b+0x60>
 8007b24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b2c:	6038      	str	r0, [r7, #0]
 8007b2e:	6918      	ldr	r0, [r3, #16]
 8007b30:	f7ff fd34 	bl	800759c <__hi0bits>
 8007b34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b38:	e7e2      	b.n	8007b00 <__d2b+0x70>
 8007b3a:	bf00      	nop
 8007b3c:	0800874c 	.word	0x0800874c
 8007b40:	0800875d 	.word	0x0800875d

08007b44 <__ssputs_r>:
 8007b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b48:	688e      	ldr	r6, [r1, #8]
 8007b4a:	461f      	mov	r7, r3
 8007b4c:	42be      	cmp	r6, r7
 8007b4e:	680b      	ldr	r3, [r1, #0]
 8007b50:	4682      	mov	sl, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	4690      	mov	r8, r2
 8007b56:	d82c      	bhi.n	8007bb2 <__ssputs_r+0x6e>
 8007b58:	898a      	ldrh	r2, [r1, #12]
 8007b5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b5e:	d026      	beq.n	8007bae <__ssputs_r+0x6a>
 8007b60:	6965      	ldr	r5, [r4, #20]
 8007b62:	6909      	ldr	r1, [r1, #16]
 8007b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b68:	eba3 0901 	sub.w	r9, r3, r1
 8007b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b70:	1c7b      	adds	r3, r7, #1
 8007b72:	444b      	add	r3, r9
 8007b74:	106d      	asrs	r5, r5, #1
 8007b76:	429d      	cmp	r5, r3
 8007b78:	bf38      	it	cc
 8007b7a:	461d      	movcc	r5, r3
 8007b7c:	0553      	lsls	r3, r2, #21
 8007b7e:	d527      	bpl.n	8007bd0 <__ssputs_r+0x8c>
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7fd fedd 	bl	8005940 <_malloc_r>
 8007b86:	4606      	mov	r6, r0
 8007b88:	b360      	cbz	r0, 8007be4 <__ssputs_r+0xa0>
 8007b8a:	6921      	ldr	r1, [r4, #16]
 8007b8c:	464a      	mov	r2, r9
 8007b8e:	f7fe fd7e 	bl	800668e <memcpy>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	6126      	str	r6, [r4, #16]
 8007ba0:	6165      	str	r5, [r4, #20]
 8007ba2:	444e      	add	r6, r9
 8007ba4:	eba5 0509 	sub.w	r5, r5, r9
 8007ba8:	6026      	str	r6, [r4, #0]
 8007baa:	60a5      	str	r5, [r4, #8]
 8007bac:	463e      	mov	r6, r7
 8007bae:	42be      	cmp	r6, r7
 8007bb0:	d900      	bls.n	8007bb4 <__ssputs_r+0x70>
 8007bb2:	463e      	mov	r6, r7
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	4641      	mov	r1, r8
 8007bba:	f000 f9c9 	bl	8007f50 <memmove>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	1b9b      	subs	r3, r3, r6
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	4433      	add	r3, r6
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	f000 fa07 	bl	8007fe4 <_realloc_r>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1e0      	bne.n	8007b9e <__ssputs_r+0x5a>
 8007bdc:	6921      	ldr	r1, [r4, #16]
 8007bde:	4650      	mov	r0, sl
 8007be0:	f7ff fbe0 	bl	80073a4 <_free_r>
 8007be4:	230c      	movs	r3, #12
 8007be6:	f8ca 3000 	str.w	r3, [sl]
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	e7e9      	b.n	8007bcc <__ssputs_r+0x88>

08007bf8 <_svfiprintf_r>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4698      	mov	r8, r3
 8007bfe:	898b      	ldrh	r3, [r1, #12]
 8007c00:	061b      	lsls	r3, r3, #24
 8007c02:	b09d      	sub	sp, #116	; 0x74
 8007c04:	4607      	mov	r7, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	d50e      	bpl.n	8007c2a <_svfiprintf_r+0x32>
 8007c0c:	690b      	ldr	r3, [r1, #16]
 8007c0e:	b963      	cbnz	r3, 8007c2a <_svfiprintf_r+0x32>
 8007c10:	2140      	movs	r1, #64	; 0x40
 8007c12:	f7fd fe95 	bl	8005940 <_malloc_r>
 8007c16:	6028      	str	r0, [r5, #0]
 8007c18:	6128      	str	r0, [r5, #16]
 8007c1a:	b920      	cbnz	r0, 8007c26 <_svfiprintf_r+0x2e>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295
 8007c24:	e0d0      	b.n	8007dc8 <_svfiprintf_r+0x1d0>
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	616b      	str	r3, [r5, #20]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2e:	2320      	movs	r3, #32
 8007c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c38:	2330      	movs	r3, #48	; 0x30
 8007c3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007de0 <_svfiprintf_r+0x1e8>
 8007c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c42:	f04f 0901 	mov.w	r9, #1
 8007c46:	4623      	mov	r3, r4
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c4e:	b10a      	cbz	r2, 8007c54 <_svfiprintf_r+0x5c>
 8007c50:	2a25      	cmp	r2, #37	; 0x25
 8007c52:	d1f9      	bne.n	8007c48 <_svfiprintf_r+0x50>
 8007c54:	ebba 0b04 	subs.w	fp, sl, r4
 8007c58:	d00b      	beq.n	8007c72 <_svfiprintf_r+0x7a>
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ff6f 	bl	8007b44 <__ssputs_r>
 8007c66:	3001      	adds	r0, #1
 8007c68:	f000 80a9 	beq.w	8007dbe <_svfiprintf_r+0x1c6>
 8007c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6e:	445a      	add	r2, fp
 8007c70:	9209      	str	r2, [sp, #36]	; 0x24
 8007c72:	f89a 3000 	ldrb.w	r3, [sl]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 80a1 	beq.w	8007dbe <_svfiprintf_r+0x1c6>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c86:	f10a 0a01 	add.w	sl, sl, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	9307      	str	r3, [sp, #28]
 8007c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c92:	931a      	str	r3, [sp, #104]	; 0x68
 8007c94:	4654      	mov	r4, sl
 8007c96:	2205      	movs	r2, #5
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	4850      	ldr	r0, [pc, #320]	; (8007de0 <_svfiprintf_r+0x1e8>)
 8007c9e:	f7f8 faaf 	bl	8000200 <memchr>
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	b9d8      	cbnz	r0, 8007cde <_svfiprintf_r+0xe6>
 8007ca6:	06d0      	lsls	r0, r2, #27
 8007ca8:	bf44      	itt	mi
 8007caa:	2320      	movmi	r3, #32
 8007cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb0:	0711      	lsls	r1, r2, #28
 8007cb2:	bf44      	itt	mi
 8007cb4:	232b      	movmi	r3, #43	; 0x2b
 8007cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cba:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc0:	d015      	beq.n	8007cee <_svfiprintf_r+0xf6>
 8007cc2:	9a07      	ldr	r2, [sp, #28]
 8007cc4:	4654      	mov	r4, sl
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f04f 0c0a 	mov.w	ip, #10
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd2:	3b30      	subs	r3, #48	; 0x30
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d94d      	bls.n	8007d74 <_svfiprintf_r+0x17c>
 8007cd8:	b1b0      	cbz	r0, 8007d08 <_svfiprintf_r+0x110>
 8007cda:	9207      	str	r2, [sp, #28]
 8007cdc:	e014      	b.n	8007d08 <_svfiprintf_r+0x110>
 8007cde:	eba0 0308 	sub.w	r3, r0, r8
 8007ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	46a2      	mov	sl, r4
 8007cec:	e7d2      	b.n	8007c94 <_svfiprintf_r+0x9c>
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	1d19      	adds	r1, r3, #4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	9103      	str	r1, [sp, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfbb      	ittet	lt
 8007cfa:	425b      	neglt	r3, r3
 8007cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8007d00:	9307      	strge	r3, [sp, #28]
 8007d02:	9307      	strlt	r3, [sp, #28]
 8007d04:	bfb8      	it	lt
 8007d06:	9204      	strlt	r2, [sp, #16]
 8007d08:	7823      	ldrb	r3, [r4, #0]
 8007d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d0c:	d10c      	bne.n	8007d28 <_svfiprintf_r+0x130>
 8007d0e:	7863      	ldrb	r3, [r4, #1]
 8007d10:	2b2a      	cmp	r3, #42	; 0x2a
 8007d12:	d134      	bne.n	8007d7e <_svfiprintf_r+0x186>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9203      	str	r2, [sp, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfb8      	it	lt
 8007d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d24:	3402      	adds	r4, #2
 8007d26:	9305      	str	r3, [sp, #20]
 8007d28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007df0 <_svfiprintf_r+0x1f8>
 8007d2c:	7821      	ldrb	r1, [r4, #0]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	4650      	mov	r0, sl
 8007d32:	f7f8 fa65 	bl	8000200 <memchr>
 8007d36:	b138      	cbz	r0, 8007d48 <_svfiprintf_r+0x150>
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	eba0 000a 	sub.w	r0, r0, sl
 8007d3e:	2240      	movs	r2, #64	; 0x40
 8007d40:	4082      	lsls	r2, r0
 8007d42:	4313      	orrs	r3, r2
 8007d44:	3401      	adds	r4, #1
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4c:	4825      	ldr	r0, [pc, #148]	; (8007de4 <_svfiprintf_r+0x1ec>)
 8007d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d52:	2206      	movs	r2, #6
 8007d54:	f7f8 fa54 	bl	8000200 <memchr>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d038      	beq.n	8007dce <_svfiprintf_r+0x1d6>
 8007d5c:	4b22      	ldr	r3, [pc, #136]	; (8007de8 <_svfiprintf_r+0x1f0>)
 8007d5e:	bb1b      	cbnz	r3, 8007da8 <_svfiprintf_r+0x1b0>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	3307      	adds	r3, #7
 8007d64:	f023 0307 	bic.w	r3, r3, #7
 8007d68:	3308      	adds	r3, #8
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6e:	4433      	add	r3, r6
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	e768      	b.n	8007c46 <_svfiprintf_r+0x4e>
 8007d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d78:	460c      	mov	r4, r1
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	e7a6      	b.n	8007ccc <_svfiprintf_r+0xd4>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	3401      	adds	r4, #1
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0c0a 	mov.w	ip, #10
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d90:	3a30      	subs	r2, #48	; 0x30
 8007d92:	2a09      	cmp	r2, #9
 8007d94:	d903      	bls.n	8007d9e <_svfiprintf_r+0x1a6>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0c6      	beq.n	8007d28 <_svfiprintf_r+0x130>
 8007d9a:	9105      	str	r1, [sp, #20]
 8007d9c:	e7c4      	b.n	8007d28 <_svfiprintf_r+0x130>
 8007d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da2:	4604      	mov	r4, r0
 8007da4:	2301      	movs	r3, #1
 8007da6:	e7f0      	b.n	8007d8a <_svfiprintf_r+0x192>
 8007da8:	ab03      	add	r3, sp, #12
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	462a      	mov	r2, r5
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <_svfiprintf_r+0x1f4>)
 8007db0:	a904      	add	r1, sp, #16
 8007db2:	4638      	mov	r0, r7
 8007db4:	f7fd fef0 	bl	8005b98 <_printf_float>
 8007db8:	1c42      	adds	r2, r0, #1
 8007dba:	4606      	mov	r6, r0
 8007dbc:	d1d6      	bne.n	8007d6c <_svfiprintf_r+0x174>
 8007dbe:	89ab      	ldrh	r3, [r5, #12]
 8007dc0:	065b      	lsls	r3, r3, #25
 8007dc2:	f53f af2d 	bmi.w	8007c20 <_svfiprintf_r+0x28>
 8007dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dc8:	b01d      	add	sp, #116	; 0x74
 8007dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	ab03      	add	r3, sp, #12
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <_svfiprintf_r+0x1f4>)
 8007dd6:	a904      	add	r1, sp, #16
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7fe f981 	bl	80060e0 <_printf_i>
 8007dde:	e7eb      	b.n	8007db8 <_svfiprintf_r+0x1c0>
 8007de0:	080088b4 	.word	0x080088b4
 8007de4:	080088be 	.word	0x080088be
 8007de8:	08005b99 	.word	0x08005b99
 8007dec:	08007b45 	.word	0x08007b45
 8007df0:	080088ba 	.word	0x080088ba

08007df4 <__sflush_r>:
 8007df4:	898a      	ldrh	r2, [r1, #12]
 8007df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	0710      	lsls	r0, r2, #28
 8007dfe:	460c      	mov	r4, r1
 8007e00:	d458      	bmi.n	8007eb4 <__sflush_r+0xc0>
 8007e02:	684b      	ldr	r3, [r1, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dc05      	bgt.n	8007e14 <__sflush_r+0x20>
 8007e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dc02      	bgt.n	8007e14 <__sflush_r+0x20>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	d0f9      	beq.n	8007e0e <__sflush_r+0x1a>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e20:	682f      	ldr	r7, [r5, #0]
 8007e22:	6a21      	ldr	r1, [r4, #32]
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	d032      	beq.n	8007e8e <__sflush_r+0x9a>
 8007e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	075a      	lsls	r2, r3, #29
 8007e2e:	d505      	bpl.n	8007e3c <__sflush_r+0x48>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	1ac0      	subs	r0, r0, r3
 8007e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e36:	b10b      	cbz	r3, 8007e3c <__sflush_r+0x48>
 8007e38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e3a:	1ac0      	subs	r0, r0, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4602      	mov	r2, r0
 8007e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e42:	6a21      	ldr	r1, [r4, #32]
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b0      	blx	r6
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	d106      	bne.n	8007e5c <__sflush_r+0x68>
 8007e4e:	6829      	ldr	r1, [r5, #0]
 8007e50:	291d      	cmp	r1, #29
 8007e52:	d82b      	bhi.n	8007eac <__sflush_r+0xb8>
 8007e54:	4a29      	ldr	r2, [pc, #164]	; (8007efc <__sflush_r+0x108>)
 8007e56:	410a      	asrs	r2, r1
 8007e58:	07d6      	lsls	r6, r2, #31
 8007e5a:	d427      	bmi.n	8007eac <__sflush_r+0xb8>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	6062      	str	r2, [r4, #4]
 8007e60:	04d9      	lsls	r1, r3, #19
 8007e62:	6922      	ldr	r2, [r4, #16]
 8007e64:	6022      	str	r2, [r4, #0]
 8007e66:	d504      	bpl.n	8007e72 <__sflush_r+0x7e>
 8007e68:	1c42      	adds	r2, r0, #1
 8007e6a:	d101      	bne.n	8007e70 <__sflush_r+0x7c>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b903      	cbnz	r3, 8007e72 <__sflush_r+0x7e>
 8007e70:	6560      	str	r0, [r4, #84]	; 0x54
 8007e72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e74:	602f      	str	r7, [r5, #0]
 8007e76:	2900      	cmp	r1, #0
 8007e78:	d0c9      	beq.n	8007e0e <__sflush_r+0x1a>
 8007e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	d002      	beq.n	8007e88 <__sflush_r+0x94>
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff fa8e 	bl	80073a4 <_free_r>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e8c:	e7c0      	b.n	8007e10 <__sflush_r+0x1c>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b0      	blx	r6
 8007e94:	1c41      	adds	r1, r0, #1
 8007e96:	d1c8      	bne.n	8007e2a <__sflush_r+0x36>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0c5      	beq.n	8007e2a <__sflush_r+0x36>
 8007e9e:	2b1d      	cmp	r3, #29
 8007ea0:	d001      	beq.n	8007ea6 <__sflush_r+0xb2>
 8007ea2:	2b16      	cmp	r3, #22
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0xb6>
 8007ea6:	602f      	str	r7, [r5, #0]
 8007ea8:	e7b1      	b.n	8007e0e <__sflush_r+0x1a>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	e7ad      	b.n	8007e10 <__sflush_r+0x1c>
 8007eb4:	690f      	ldr	r7, [r1, #16]
 8007eb6:	2f00      	cmp	r7, #0
 8007eb8:	d0a9      	beq.n	8007e0e <__sflush_r+0x1a>
 8007eba:	0793      	lsls	r3, r2, #30
 8007ebc:	680e      	ldr	r6, [r1, #0]
 8007ebe:	bf08      	it	eq
 8007ec0:	694b      	ldreq	r3, [r1, #20]
 8007ec2:	600f      	str	r7, [r1, #0]
 8007ec4:	bf18      	it	ne
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	eba6 0807 	sub.w	r8, r6, r7
 8007ecc:	608b      	str	r3, [r1, #8]
 8007ece:	f1b8 0f00 	cmp.w	r8, #0
 8007ed2:	dd9c      	ble.n	8007e0e <__sflush_r+0x1a>
 8007ed4:	6a21      	ldr	r1, [r4, #32]
 8007ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ed8:	4643      	mov	r3, r8
 8007eda:	463a      	mov	r2, r7
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b0      	blx	r6
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dc06      	bgt.n	8007ef2 <__sflush_r+0xfe>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e78e      	b.n	8007e10 <__sflush_r+0x1c>
 8007ef2:	4407      	add	r7, r0
 8007ef4:	eba8 0800 	sub.w	r8, r8, r0
 8007ef8:	e7e9      	b.n	8007ece <__sflush_r+0xda>
 8007efa:	bf00      	nop
 8007efc:	dfbffffe 	.word	0xdfbffffe

08007f00 <_fflush_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	b913      	cbnz	r3, 8007f10 <_fflush_r+0x10>
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	b118      	cbz	r0, 8007f1a <_fflush_r+0x1a>
 8007f12:	6a03      	ldr	r3, [r0, #32]
 8007f14:	b90b      	cbnz	r3, 8007f1a <_fflush_r+0x1a>
 8007f16:	f7fe fa91 	bl	800643c <__sinit>
 8007f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f3      	beq.n	8007f0a <_fflush_r+0xa>
 8007f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f24:	07d0      	lsls	r0, r2, #31
 8007f26:	d404      	bmi.n	8007f32 <_fflush_r+0x32>
 8007f28:	0599      	lsls	r1, r3, #22
 8007f2a:	d402      	bmi.n	8007f32 <_fflush_r+0x32>
 8007f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2e:	f7fe fbac 	bl	800668a <__retarget_lock_acquire_recursive>
 8007f32:	4628      	mov	r0, r5
 8007f34:	4621      	mov	r1, r4
 8007f36:	f7ff ff5d 	bl	8007df4 <__sflush_r>
 8007f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f3c:	07da      	lsls	r2, r3, #31
 8007f3e:	4605      	mov	r5, r0
 8007f40:	d4e4      	bmi.n	8007f0c <_fflush_r+0xc>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	059b      	lsls	r3, r3, #22
 8007f46:	d4e1      	bmi.n	8007f0c <_fflush_r+0xc>
 8007f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f4a:	f7fe fb9f 	bl	800668c <__retarget_lock_release_recursive>
 8007f4e:	e7dd      	b.n	8007f0c <_fflush_r+0xc>

08007f50 <memmove>:
 8007f50:	4288      	cmp	r0, r1
 8007f52:	b510      	push	{r4, lr}
 8007f54:	eb01 0402 	add.w	r4, r1, r2
 8007f58:	d902      	bls.n	8007f60 <memmove+0x10>
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	d807      	bhi.n	8007f70 <memmove+0x20>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	42a1      	cmp	r1, r4
 8007f64:	d008      	beq.n	8007f78 <memmove+0x28>
 8007f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6e:	e7f8      	b.n	8007f62 <memmove+0x12>
 8007f70:	4402      	add	r2, r0
 8007f72:	4601      	mov	r1, r0
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d100      	bne.n	8007f7a <memmove+0x2a>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f82:	e7f7      	b.n	8007f74 <memmove+0x24>

08007f84 <__assert_func>:
 8007f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f86:	4614      	mov	r4, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <__assert_func+0x2c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4605      	mov	r5, r0
 8007f90:	68d8      	ldr	r0, [r3, #12]
 8007f92:	b14c      	cbz	r4, 8007fa8 <__assert_func+0x24>
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <__assert_func+0x30>)
 8007f96:	9100      	str	r1, [sp, #0]
 8007f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f9c:	4906      	ldr	r1, [pc, #24]	; (8007fb8 <__assert_func+0x34>)
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f000 f85c 	bl	800805c <fiprintf>
 8007fa4:	f000 f86c 	bl	8008080 <abort>
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <__assert_func+0x38>)
 8007faa:	461c      	mov	r4, r3
 8007fac:	e7f3      	b.n	8007f96 <__assert_func+0x12>
 8007fae:	bf00      	nop
 8007fb0:	20000080 	.word	0x20000080
 8007fb4:	080088cf 	.word	0x080088cf
 8007fb8:	080088dc 	.word	0x080088dc
 8007fbc:	0800890a 	.word	0x0800890a

08007fc0 <__ascii_mbtowc>:
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	b901      	cbnz	r1, 8007fc6 <__ascii_mbtowc+0x6>
 8007fc4:	a901      	add	r1, sp, #4
 8007fc6:	b142      	cbz	r2, 8007fda <__ascii_mbtowc+0x1a>
 8007fc8:	b14b      	cbz	r3, 8007fde <__ascii_mbtowc+0x1e>
 8007fca:	7813      	ldrb	r3, [r2, #0]
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	1e10      	subs	r0, r2, #0
 8007fd2:	bf18      	it	ne
 8007fd4:	2001      	movne	r0, #1
 8007fd6:	b002      	add	sp, #8
 8007fd8:	4770      	bx	lr
 8007fda:	4610      	mov	r0, r2
 8007fdc:	e7fb      	b.n	8007fd6 <__ascii_mbtowc+0x16>
 8007fde:	f06f 0001 	mvn.w	r0, #1
 8007fe2:	e7f8      	b.n	8007fd6 <__ascii_mbtowc+0x16>

08007fe4 <_realloc_r>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	4680      	mov	r8, r0
 8007fea:	4614      	mov	r4, r2
 8007fec:	460e      	mov	r6, r1
 8007fee:	b921      	cbnz	r1, 8007ffa <_realloc_r+0x16>
 8007ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	f7fd bca3 	b.w	8005940 <_malloc_r>
 8007ffa:	b92a      	cbnz	r2, 8008008 <_realloc_r+0x24>
 8007ffc:	f7ff f9d2 	bl	80073a4 <_free_r>
 8008000:	4625      	mov	r5, r4
 8008002:	4628      	mov	r0, r5
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	f000 f841 	bl	800808e <_malloc_usable_size_r>
 800800c:	4284      	cmp	r4, r0
 800800e:	4607      	mov	r7, r0
 8008010:	d802      	bhi.n	8008018 <_realloc_r+0x34>
 8008012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008016:	d812      	bhi.n	800803e <_realloc_r+0x5a>
 8008018:	4621      	mov	r1, r4
 800801a:	4640      	mov	r0, r8
 800801c:	f7fd fc90 	bl	8005940 <_malloc_r>
 8008020:	4605      	mov	r5, r0
 8008022:	2800      	cmp	r0, #0
 8008024:	d0ed      	beq.n	8008002 <_realloc_r+0x1e>
 8008026:	42bc      	cmp	r4, r7
 8008028:	4622      	mov	r2, r4
 800802a:	4631      	mov	r1, r6
 800802c:	bf28      	it	cs
 800802e:	463a      	movcs	r2, r7
 8008030:	f7fe fb2d 	bl	800668e <memcpy>
 8008034:	4631      	mov	r1, r6
 8008036:	4640      	mov	r0, r8
 8008038:	f7ff f9b4 	bl	80073a4 <_free_r>
 800803c:	e7e1      	b.n	8008002 <_realloc_r+0x1e>
 800803e:	4635      	mov	r5, r6
 8008040:	e7df      	b.n	8008002 <_realloc_r+0x1e>

08008042 <__ascii_wctomb>:
 8008042:	b149      	cbz	r1, 8008058 <__ascii_wctomb+0x16>
 8008044:	2aff      	cmp	r2, #255	; 0xff
 8008046:	bf85      	ittet	hi
 8008048:	238a      	movhi	r3, #138	; 0x8a
 800804a:	6003      	strhi	r3, [r0, #0]
 800804c:	700a      	strbls	r2, [r1, #0]
 800804e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008052:	bf98      	it	ls
 8008054:	2001      	movls	r0, #1
 8008056:	4770      	bx	lr
 8008058:	4608      	mov	r0, r1
 800805a:	4770      	bx	lr

0800805c <fiprintf>:
 800805c:	b40e      	push	{r1, r2, r3}
 800805e:	b503      	push	{r0, r1, lr}
 8008060:	4601      	mov	r1, r0
 8008062:	ab03      	add	r3, sp, #12
 8008064:	4805      	ldr	r0, [pc, #20]	; (800807c <fiprintf+0x20>)
 8008066:	f853 2b04 	ldr.w	r2, [r3], #4
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	f000 f83f 	bl	80080f0 <_vfiprintf_r>
 8008072:	b002      	add	sp, #8
 8008074:	f85d eb04 	ldr.w	lr, [sp], #4
 8008078:	b003      	add	sp, #12
 800807a:	4770      	bx	lr
 800807c:	20000080 	.word	0x20000080

08008080 <abort>:
 8008080:	b508      	push	{r3, lr}
 8008082:	2006      	movs	r0, #6
 8008084:	f000 fa0c 	bl	80084a0 <raise>
 8008088:	2001      	movs	r0, #1
 800808a:	f7f9 fb7d 	bl	8001788 <_exit>

0800808e <_malloc_usable_size_r>:
 800808e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008092:	1f18      	subs	r0, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfbc      	itt	lt
 8008098:	580b      	ldrlt	r3, [r1, r0]
 800809a:	18c0      	addlt	r0, r0, r3
 800809c:	4770      	bx	lr

0800809e <__sfputc_r>:
 800809e:	6893      	ldr	r3, [r2, #8]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	b410      	push	{r4}
 80080a6:	6093      	str	r3, [r2, #8]
 80080a8:	da08      	bge.n	80080bc <__sfputc_r+0x1e>
 80080aa:	6994      	ldr	r4, [r2, #24]
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	db01      	blt.n	80080b4 <__sfputc_r+0x16>
 80080b0:	290a      	cmp	r1, #10
 80080b2:	d103      	bne.n	80080bc <__sfputc_r+0x1e>
 80080b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b8:	f000 b934 	b.w	8008324 <__swbuf_r>
 80080bc:	6813      	ldr	r3, [r2, #0]
 80080be:	1c58      	adds	r0, r3, #1
 80080c0:	6010      	str	r0, [r2, #0]
 80080c2:	7019      	strb	r1, [r3, #0]
 80080c4:	4608      	mov	r0, r1
 80080c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <__sfputs_r>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	4614      	mov	r4, r2
 80080d4:	18d5      	adds	r5, r2, r3
 80080d6:	42ac      	cmp	r4, r5
 80080d8:	d101      	bne.n	80080de <__sfputs_r+0x12>
 80080da:	2000      	movs	r0, #0
 80080dc:	e007      	b.n	80080ee <__sfputs_r+0x22>
 80080de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e2:	463a      	mov	r2, r7
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ffda 	bl	800809e <__sfputc_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d1f3      	bne.n	80080d6 <__sfputs_r+0xa>
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080f0 <_vfiprintf_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	460d      	mov	r5, r1
 80080f6:	b09d      	sub	sp, #116	; 0x74
 80080f8:	4614      	mov	r4, r2
 80080fa:	4698      	mov	r8, r3
 80080fc:	4606      	mov	r6, r0
 80080fe:	b118      	cbz	r0, 8008108 <_vfiprintf_r+0x18>
 8008100:	6a03      	ldr	r3, [r0, #32]
 8008102:	b90b      	cbnz	r3, 8008108 <_vfiprintf_r+0x18>
 8008104:	f7fe f99a 	bl	800643c <__sinit>
 8008108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	d405      	bmi.n	800811a <_vfiprintf_r+0x2a>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	059a      	lsls	r2, r3, #22
 8008112:	d402      	bmi.n	800811a <_vfiprintf_r+0x2a>
 8008114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008116:	f7fe fab8 	bl	800668a <__retarget_lock_acquire_recursive>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	071b      	lsls	r3, r3, #28
 800811e:	d501      	bpl.n	8008124 <_vfiprintf_r+0x34>
 8008120:	692b      	ldr	r3, [r5, #16]
 8008122:	b99b      	cbnz	r3, 800814c <_vfiprintf_r+0x5c>
 8008124:	4629      	mov	r1, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f93a 	bl	80083a0 <__swsetup_r>
 800812c:	b170      	cbz	r0, 800814c <_vfiprintf_r+0x5c>
 800812e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008130:	07dc      	lsls	r4, r3, #31
 8008132:	d504      	bpl.n	800813e <_vfiprintf_r+0x4e>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	b01d      	add	sp, #116	; 0x74
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	0598      	lsls	r0, r3, #22
 8008142:	d4f7      	bmi.n	8008134 <_vfiprintf_r+0x44>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7fe faa1 	bl	800668c <__retarget_lock_release_recursive>
 800814a:	e7f3      	b.n	8008134 <_vfiprintf_r+0x44>
 800814c:	2300      	movs	r3, #0
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	2320      	movs	r3, #32
 8008152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008156:	f8cd 800c 	str.w	r8, [sp, #12]
 800815a:	2330      	movs	r3, #48	; 0x30
 800815c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008310 <_vfiprintf_r+0x220>
 8008160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008164:	f04f 0901 	mov.w	r9, #1
 8008168:	4623      	mov	r3, r4
 800816a:	469a      	mov	sl, r3
 800816c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008170:	b10a      	cbz	r2, 8008176 <_vfiprintf_r+0x86>
 8008172:	2a25      	cmp	r2, #37	; 0x25
 8008174:	d1f9      	bne.n	800816a <_vfiprintf_r+0x7a>
 8008176:	ebba 0b04 	subs.w	fp, sl, r4
 800817a:	d00b      	beq.n	8008194 <_vfiprintf_r+0xa4>
 800817c:	465b      	mov	r3, fp
 800817e:	4622      	mov	r2, r4
 8008180:	4629      	mov	r1, r5
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff ffa2 	bl	80080cc <__sfputs_r>
 8008188:	3001      	adds	r0, #1
 800818a:	f000 80a9 	beq.w	80082e0 <_vfiprintf_r+0x1f0>
 800818e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008190:	445a      	add	r2, fp
 8008192:	9209      	str	r2, [sp, #36]	; 0x24
 8008194:	f89a 3000 	ldrb.w	r3, [sl]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80a1 	beq.w	80082e0 <_vfiprintf_r+0x1f0>
 800819e:	2300      	movs	r3, #0
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	9307      	str	r3, [sp, #28]
 80081b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b4:	931a      	str	r3, [sp, #104]	; 0x68
 80081b6:	4654      	mov	r4, sl
 80081b8:	2205      	movs	r2, #5
 80081ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081be:	4854      	ldr	r0, [pc, #336]	; (8008310 <_vfiprintf_r+0x220>)
 80081c0:	f7f8 f81e 	bl	8000200 <memchr>
 80081c4:	9a04      	ldr	r2, [sp, #16]
 80081c6:	b9d8      	cbnz	r0, 8008200 <_vfiprintf_r+0x110>
 80081c8:	06d1      	lsls	r1, r2, #27
 80081ca:	bf44      	itt	mi
 80081cc:	2320      	movmi	r3, #32
 80081ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d2:	0713      	lsls	r3, r2, #28
 80081d4:	bf44      	itt	mi
 80081d6:	232b      	movmi	r3, #43	; 0x2b
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081dc:	f89a 3000 	ldrb.w	r3, [sl]
 80081e0:	2b2a      	cmp	r3, #42	; 0x2a
 80081e2:	d015      	beq.n	8008210 <_vfiprintf_r+0x120>
 80081e4:	9a07      	ldr	r2, [sp, #28]
 80081e6:	4654      	mov	r4, sl
 80081e8:	2000      	movs	r0, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4621      	mov	r1, r4
 80081f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f4:	3b30      	subs	r3, #48	; 0x30
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	d94d      	bls.n	8008296 <_vfiprintf_r+0x1a6>
 80081fa:	b1b0      	cbz	r0, 800822a <_vfiprintf_r+0x13a>
 80081fc:	9207      	str	r2, [sp, #28]
 80081fe:	e014      	b.n	800822a <_vfiprintf_r+0x13a>
 8008200:	eba0 0308 	sub.w	r3, r0, r8
 8008204:	fa09 f303 	lsl.w	r3, r9, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	46a2      	mov	sl, r4
 800820e:	e7d2      	b.n	80081b6 <_vfiprintf_r+0xc6>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1d19      	adds	r1, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9103      	str	r1, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfbb      	ittet	lt
 800821c:	425b      	neglt	r3, r3
 800821e:	f042 0202 	orrlt.w	r2, r2, #2
 8008222:	9307      	strge	r3, [sp, #28]
 8008224:	9307      	strlt	r3, [sp, #28]
 8008226:	bfb8      	it	lt
 8008228:	9204      	strlt	r2, [sp, #16]
 800822a:	7823      	ldrb	r3, [r4, #0]
 800822c:	2b2e      	cmp	r3, #46	; 0x2e
 800822e:	d10c      	bne.n	800824a <_vfiprintf_r+0x15a>
 8008230:	7863      	ldrb	r3, [r4, #1]
 8008232:	2b2a      	cmp	r3, #42	; 0x2a
 8008234:	d134      	bne.n	80082a0 <_vfiprintf_r+0x1b0>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	1d1a      	adds	r2, r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	9203      	str	r2, [sp, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	f04f 33ff 	movlt.w	r3, #4294967295
 8008246:	3402      	adds	r4, #2
 8008248:	9305      	str	r3, [sp, #20]
 800824a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008320 <_vfiprintf_r+0x230>
 800824e:	7821      	ldrb	r1, [r4, #0]
 8008250:	2203      	movs	r2, #3
 8008252:	4650      	mov	r0, sl
 8008254:	f7f7 ffd4 	bl	8000200 <memchr>
 8008258:	b138      	cbz	r0, 800826a <_vfiprintf_r+0x17a>
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	eba0 000a 	sub.w	r0, r0, sl
 8008260:	2240      	movs	r2, #64	; 0x40
 8008262:	4082      	lsls	r2, r0
 8008264:	4313      	orrs	r3, r2
 8008266:	3401      	adds	r4, #1
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826e:	4829      	ldr	r0, [pc, #164]	; (8008314 <_vfiprintf_r+0x224>)
 8008270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008274:	2206      	movs	r2, #6
 8008276:	f7f7 ffc3 	bl	8000200 <memchr>
 800827a:	2800      	cmp	r0, #0
 800827c:	d03f      	beq.n	80082fe <_vfiprintf_r+0x20e>
 800827e:	4b26      	ldr	r3, [pc, #152]	; (8008318 <_vfiprintf_r+0x228>)
 8008280:	bb1b      	cbnz	r3, 80082ca <_vfiprintf_r+0x1da>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	3307      	adds	r3, #7
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	3308      	adds	r3, #8
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008290:	443b      	add	r3, r7
 8008292:	9309      	str	r3, [sp, #36]	; 0x24
 8008294:	e768      	b.n	8008168 <_vfiprintf_r+0x78>
 8008296:	fb0c 3202 	mla	r2, ip, r2, r3
 800829a:	460c      	mov	r4, r1
 800829c:	2001      	movs	r0, #1
 800829e:	e7a6      	b.n	80081ee <_vfiprintf_r+0xfe>
 80082a0:	2300      	movs	r3, #0
 80082a2:	3401      	adds	r4, #1
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	4619      	mov	r1, r3
 80082a8:	f04f 0c0a 	mov.w	ip, #10
 80082ac:	4620      	mov	r0, r4
 80082ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b2:	3a30      	subs	r2, #48	; 0x30
 80082b4:	2a09      	cmp	r2, #9
 80082b6:	d903      	bls.n	80082c0 <_vfiprintf_r+0x1d0>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0c6      	beq.n	800824a <_vfiprintf_r+0x15a>
 80082bc:	9105      	str	r1, [sp, #20]
 80082be:	e7c4      	b.n	800824a <_vfiprintf_r+0x15a>
 80082c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c4:	4604      	mov	r4, r0
 80082c6:	2301      	movs	r3, #1
 80082c8:	e7f0      	b.n	80082ac <_vfiprintf_r+0x1bc>
 80082ca:	ab03      	add	r3, sp, #12
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	462a      	mov	r2, r5
 80082d0:	4b12      	ldr	r3, [pc, #72]	; (800831c <_vfiprintf_r+0x22c>)
 80082d2:	a904      	add	r1, sp, #16
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7fd fc5f 	bl	8005b98 <_printf_float>
 80082da:	4607      	mov	r7, r0
 80082dc:	1c78      	adds	r0, r7, #1
 80082de:	d1d6      	bne.n	800828e <_vfiprintf_r+0x19e>
 80082e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_vfiprintf_r+0x202>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	059a      	lsls	r2, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_vfiprintf_r+0x202>
 80082ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ee:	f7fe f9cd 	bl	800668c <__retarget_lock_release_recursive>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	065b      	lsls	r3, r3, #25
 80082f6:	f53f af1d 	bmi.w	8008134 <_vfiprintf_r+0x44>
 80082fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082fc:	e71c      	b.n	8008138 <_vfiprintf_r+0x48>
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	462a      	mov	r2, r5
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <_vfiprintf_r+0x22c>)
 8008306:	a904      	add	r1, sp, #16
 8008308:	4630      	mov	r0, r6
 800830a:	f7fd fee9 	bl	80060e0 <_printf_i>
 800830e:	e7e4      	b.n	80082da <_vfiprintf_r+0x1ea>
 8008310:	080088b4 	.word	0x080088b4
 8008314:	080088be 	.word	0x080088be
 8008318:	08005b99 	.word	0x08005b99
 800831c:	080080cd 	.word	0x080080cd
 8008320:	080088ba 	.word	0x080088ba

08008324 <__swbuf_r>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	460e      	mov	r6, r1
 8008328:	4614      	mov	r4, r2
 800832a:	4605      	mov	r5, r0
 800832c:	b118      	cbz	r0, 8008336 <__swbuf_r+0x12>
 800832e:	6a03      	ldr	r3, [r0, #32]
 8008330:	b90b      	cbnz	r3, 8008336 <__swbuf_r+0x12>
 8008332:	f7fe f883 	bl	800643c <__sinit>
 8008336:	69a3      	ldr	r3, [r4, #24]
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	071a      	lsls	r2, r3, #28
 800833e:	d525      	bpl.n	800838c <__swbuf_r+0x68>
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	b31b      	cbz	r3, 800838c <__swbuf_r+0x68>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	6922      	ldr	r2, [r4, #16]
 8008348:	1a98      	subs	r0, r3, r2
 800834a:	6963      	ldr	r3, [r4, #20]
 800834c:	b2f6      	uxtb	r6, r6
 800834e:	4283      	cmp	r3, r0
 8008350:	4637      	mov	r7, r6
 8008352:	dc04      	bgt.n	800835e <__swbuf_r+0x3a>
 8008354:	4621      	mov	r1, r4
 8008356:	4628      	mov	r0, r5
 8008358:	f7ff fdd2 	bl	8007f00 <_fflush_r>
 800835c:	b9e0      	cbnz	r0, 8008398 <__swbuf_r+0x74>
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	3b01      	subs	r3, #1
 8008362:	60a3      	str	r3, [r4, #8]
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	701e      	strb	r6, [r3, #0]
 800836c:	6962      	ldr	r2, [r4, #20]
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	429a      	cmp	r2, r3
 8008372:	d004      	beq.n	800837e <__swbuf_r+0x5a>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	07db      	lsls	r3, r3, #31
 8008378:	d506      	bpl.n	8008388 <__swbuf_r+0x64>
 800837a:	2e0a      	cmp	r6, #10
 800837c:	d104      	bne.n	8008388 <__swbuf_r+0x64>
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f7ff fdbd 	bl	8007f00 <_fflush_r>
 8008386:	b938      	cbnz	r0, 8008398 <__swbuf_r+0x74>
 8008388:	4638      	mov	r0, r7
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f806 	bl	80083a0 <__swsetup_r>
 8008394:	2800      	cmp	r0, #0
 8008396:	d0d5      	beq.n	8008344 <__swbuf_r+0x20>
 8008398:	f04f 37ff 	mov.w	r7, #4294967295
 800839c:	e7f4      	b.n	8008388 <__swbuf_r+0x64>
	...

080083a0 <__swsetup_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4b2a      	ldr	r3, [pc, #168]	; (800844c <__swsetup_r+0xac>)
 80083a4:	4605      	mov	r5, r0
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	460c      	mov	r4, r1
 80083aa:	b118      	cbz	r0, 80083b4 <__swsetup_r+0x14>
 80083ac:	6a03      	ldr	r3, [r0, #32]
 80083ae:	b90b      	cbnz	r3, 80083b4 <__swsetup_r+0x14>
 80083b0:	f7fe f844 	bl	800643c <__sinit>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ba:	0718      	lsls	r0, r3, #28
 80083bc:	d422      	bmi.n	8008404 <__swsetup_r+0x64>
 80083be:	06d9      	lsls	r1, r3, #27
 80083c0:	d407      	bmi.n	80083d2 <__swsetup_r+0x32>
 80083c2:	2309      	movs	r3, #9
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	e034      	b.n	800843c <__swsetup_r+0x9c>
 80083d2:	0758      	lsls	r0, r3, #29
 80083d4:	d512      	bpl.n	80083fc <__swsetup_r+0x5c>
 80083d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d8:	b141      	cbz	r1, 80083ec <__swsetup_r+0x4c>
 80083da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083de:	4299      	cmp	r1, r3
 80083e0:	d002      	beq.n	80083e8 <__swsetup_r+0x48>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7fe ffde 	bl	80073a4 <_free_r>
 80083e8:	2300      	movs	r3, #0
 80083ea:	6363      	str	r3, [r4, #52]	; 0x34
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	2300      	movs	r3, #0
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f043 0308 	orr.w	r3, r3, #8
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	b94b      	cbnz	r3, 800841c <__swsetup_r+0x7c>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800840e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008412:	d003      	beq.n	800841c <__swsetup_r+0x7c>
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f884 	bl	8008524 <__smakebuf_r>
 800841c:	89a0      	ldrh	r0, [r4, #12]
 800841e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008422:	f010 0301 	ands.w	r3, r0, #1
 8008426:	d00a      	beq.n	800843e <__swsetup_r+0x9e>
 8008428:	2300      	movs	r3, #0
 800842a:	60a3      	str	r3, [r4, #8]
 800842c:	6963      	ldr	r3, [r4, #20]
 800842e:	425b      	negs	r3, r3
 8008430:	61a3      	str	r3, [r4, #24]
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	b943      	cbnz	r3, 8008448 <__swsetup_r+0xa8>
 8008436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800843a:	d1c4      	bne.n	80083c6 <__swsetup_r+0x26>
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	0781      	lsls	r1, r0, #30
 8008440:	bf58      	it	pl
 8008442:	6963      	ldrpl	r3, [r4, #20]
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	e7f4      	b.n	8008432 <__swsetup_r+0x92>
 8008448:	2000      	movs	r0, #0
 800844a:	e7f7      	b.n	800843c <__swsetup_r+0x9c>
 800844c:	20000080 	.word	0x20000080

08008450 <_raise_r>:
 8008450:	291f      	cmp	r1, #31
 8008452:	b538      	push	{r3, r4, r5, lr}
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	d904      	bls.n	8008464 <_raise_r+0x14>
 800845a:	2316      	movs	r3, #22
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008466:	b112      	cbz	r2, 800846e <_raise_r+0x1e>
 8008468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800846c:	b94b      	cbnz	r3, 8008482 <_raise_r+0x32>
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f830 	bl	80084d4 <_getpid_r>
 8008474:	462a      	mov	r2, r5
 8008476:	4601      	mov	r1, r0
 8008478:	4620      	mov	r0, r4
 800847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847e:	f000 b817 	b.w	80084b0 <_kill_r>
 8008482:	2b01      	cmp	r3, #1
 8008484:	d00a      	beq.n	800849c <_raise_r+0x4c>
 8008486:	1c59      	adds	r1, r3, #1
 8008488:	d103      	bne.n	8008492 <_raise_r+0x42>
 800848a:	2316      	movs	r3, #22
 800848c:	6003      	str	r3, [r0, #0]
 800848e:	2001      	movs	r0, #1
 8008490:	e7e7      	b.n	8008462 <_raise_r+0x12>
 8008492:	2400      	movs	r4, #0
 8008494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008498:	4628      	mov	r0, r5
 800849a:	4798      	blx	r3
 800849c:	2000      	movs	r0, #0
 800849e:	e7e0      	b.n	8008462 <_raise_r+0x12>

080084a0 <raise>:
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <raise+0xc>)
 80084a2:	4601      	mov	r1, r0
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f7ff bfd3 	b.w	8008450 <_raise_r>
 80084aa:	bf00      	nop
 80084ac:	20000080 	.word	0x20000080

080084b0 <_kill_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	; (80084d0 <_kill_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f9 f953 	bl	8001768 <_kill>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_kill_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_kill_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	2000049c 	.word	0x2000049c

080084d4 <_getpid_r>:
 80084d4:	f7f9 b940 	b.w	8001758 <_getpid>

080084d8 <__swhatbuf_r>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e0:	2900      	cmp	r1, #0
 80084e2:	b096      	sub	sp, #88	; 0x58
 80084e4:	4615      	mov	r5, r2
 80084e6:	461e      	mov	r6, r3
 80084e8:	da0d      	bge.n	8008506 <__swhatbuf_r+0x2e>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084f0:	f04f 0100 	mov.w	r1, #0
 80084f4:	bf0c      	ite	eq
 80084f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084fa:	2340      	movne	r3, #64	; 0x40
 80084fc:	2000      	movs	r0, #0
 80084fe:	6031      	str	r1, [r6, #0]
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	b016      	add	sp, #88	; 0x58
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	466a      	mov	r2, sp
 8008508:	f000 f848 	bl	800859c <_fstat_r>
 800850c:	2800      	cmp	r0, #0
 800850e:	dbec      	blt.n	80084ea <__swhatbuf_r+0x12>
 8008510:	9901      	ldr	r1, [sp, #4]
 8008512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800851a:	4259      	negs	r1, r3
 800851c:	4159      	adcs	r1, r3
 800851e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008522:	e7eb      	b.n	80084fc <__swhatbuf_r+0x24>

08008524 <__smakebuf_r>:
 8008524:	898b      	ldrh	r3, [r1, #12]
 8008526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008528:	079d      	lsls	r5, r3, #30
 800852a:	4606      	mov	r6, r0
 800852c:	460c      	mov	r4, r1
 800852e:	d507      	bpl.n	8008540 <__smakebuf_r+0x1c>
 8008530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	6123      	str	r3, [r4, #16]
 8008538:	2301      	movs	r3, #1
 800853a:	6163      	str	r3, [r4, #20]
 800853c:	b002      	add	sp, #8
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	ab01      	add	r3, sp, #4
 8008542:	466a      	mov	r2, sp
 8008544:	f7ff ffc8 	bl	80084d8 <__swhatbuf_r>
 8008548:	9900      	ldr	r1, [sp, #0]
 800854a:	4605      	mov	r5, r0
 800854c:	4630      	mov	r0, r6
 800854e:	f7fd f9f7 	bl	8005940 <_malloc_r>
 8008552:	b948      	cbnz	r0, 8008568 <__smakebuf_r+0x44>
 8008554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d4ef      	bmi.n	800853c <__smakebuf_r+0x18>
 800855c:	f023 0303 	bic.w	r3, r3, #3
 8008560:	f043 0302 	orr.w	r3, r3, #2
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	e7e3      	b.n	8008530 <__smakebuf_r+0xc>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	6020      	str	r0, [r4, #0]
 800856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	6163      	str	r3, [r4, #20]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	6120      	str	r0, [r4, #16]
 800857a:	b15b      	cbz	r3, 8008594 <__smakebuf_r+0x70>
 800857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f81d 	bl	80085c0 <_isatty_r>
 8008586:	b128      	cbz	r0, 8008594 <__smakebuf_r+0x70>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	431d      	orrs	r5, r3
 8008598:	81a5      	strh	r5, [r4, #12]
 800859a:	e7cf      	b.n	800853c <__smakebuf_r+0x18>

0800859c <_fstat_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	; (80085bc <_fstat_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7f9 f93c 	bl	8001826 <_fstat>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_fstat_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_fstat_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	2000049c 	.word	0x2000049c

080085c0 <_isatty_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4d06      	ldr	r5, [pc, #24]	; (80085dc <_isatty_r+0x1c>)
 80085c4:	2300      	movs	r3, #0
 80085c6:	4604      	mov	r4, r0
 80085c8:	4608      	mov	r0, r1
 80085ca:	602b      	str	r3, [r5, #0]
 80085cc:	f7f9 f93b 	bl	8001846 <_isatty>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_isatty_r+0x1a>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_isatty_r+0x1a>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	2000049c 	.word	0x2000049c

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
