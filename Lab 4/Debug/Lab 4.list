
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca90  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800cc50  0800cc50  0001cc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2dc  0800d2dc  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2dc  0800d2dc  0001d2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2e4  0800d2e4  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800d2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002354  20000288  0800d574  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025dc  0800d574  000225dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000224f0  00000000  00000000  000202fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d8b  00000000  00000000  000427eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  00047578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e9  00000000  00000000  00049318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030dbd  00000000  00000000  0004aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257b3  00000000  00000000  0007b7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122aeb  00000000  00000000  000a0f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008bd0  00000000  00000000  001c3a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001cc62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000288 	.word	0x20000288
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cc38 	.word	0x0800cc38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	0800cc38 	.word	0x0800cc38

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <vApplicationGetIdleTaskMemory+0x30>)
 8000eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	200002a4 	.word	0x200002a4
 8000f04:	200002f8 	.word	0x200002f8

08000f08 <HAL_GPIO_EXTI_Callback>:
void StartTaskBtnInput(void const * argument);
void StartTaskTransmit(void const * argument);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == Button_Pin)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f18:	d102      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x18>
    {
        buttonPressed = 1;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x24>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
    }
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000844 	.word	0x20000844

08000f30 <computeStatistics>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define min(x, y) ((x) < (y) ? (x) : (y))
void computeStatistics(char* msg){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a2      	sub	sp, #136	; 0x88
 8000f34:	af10      	add	r7, sp, #64	; 0x40
 8000f36:	6078      	str	r0, [r7, #4]
	if(BSP_QSPI_Read((uint8_t*) temperatureSamples, flash_address_temperature, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f38:	4b94      	ldr	r3, [pc, #592]	; (800118c <computeStatistics+0x25c>)
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	4b94      	ldr	r3, [pc, #592]	; (8001190 <computeStatistics+0x260>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b63      	cmp	r3, #99	; 0x63
 8000f42:	dc03      	bgt.n	8000f4c <computeStatistics+0x1c>
 8000f44:	4b92      	ldr	r3, [pc, #584]	; (8001190 <computeStatistics+0x260>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	e000      	b.n	8000f4e <computeStatistics+0x1e>
 8000f4c:	23c8      	movs	r3, #200	; 0xc8
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4890      	ldr	r0, [pc, #576]	; (8001194 <computeStatistics+0x264>)
 8000f52:	f001 f8bf 	bl	80020d4 <BSP_QSPI_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <computeStatistics+0x30>
		Error_Handler();
 8000f5c:	f000 fdf6 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) pressureSamples, flash_address_pressure, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f60:	4b8d      	ldr	r3, [pc, #564]	; (8001198 <computeStatistics+0x268>)
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	4b8a      	ldr	r3, [pc, #552]	; (8001190 <computeStatistics+0x260>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b63      	cmp	r3, #99	; 0x63
 8000f6a:	dc03      	bgt.n	8000f74 <computeStatistics+0x44>
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <computeStatistics+0x260>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	e000      	b.n	8000f76 <computeStatistics+0x46>
 8000f74:	23c8      	movs	r3, #200	; 0xc8
 8000f76:	461a      	mov	r2, r3
 8000f78:	4888      	ldr	r0, [pc, #544]	; (800119c <computeStatistics+0x26c>)
 8000f7a:	f001 f8ab 	bl	80020d4 <BSP_QSPI_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <computeStatistics+0x58>
		Error_Handler();
 8000f84:	f000 fde2 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_x, flash_address_accelerometer_x, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000f88:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <computeStatistics+0x270>)
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	4b80      	ldr	r3, [pc, #512]	; (8001190 <computeStatistics+0x260>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b63      	cmp	r3, #99	; 0x63
 8000f92:	dc03      	bgt.n	8000f9c <computeStatistics+0x6c>
 8000f94:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <computeStatistics+0x260>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	e000      	b.n	8000f9e <computeStatistics+0x6e>
 8000f9c:	23c8      	movs	r3, #200	; 0xc8
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4880      	ldr	r0, [pc, #512]	; (80011a4 <computeStatistics+0x274>)
 8000fa2:	f001 f897 	bl	80020d4 <BSP_QSPI_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <computeStatistics+0x80>
		Error_Handler();
 8000fac:	f000 fdce 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_y, flash_address_accelerometer_y, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <computeStatistics+0x278>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <computeStatistics+0x260>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b63      	cmp	r3, #99	; 0x63
 8000fba:	dc03      	bgt.n	8000fc4 <computeStatistics+0x94>
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <computeStatistics+0x260>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	e000      	b.n	8000fc6 <computeStatistics+0x96>
 8000fc4:	23c8      	movs	r3, #200	; 0xc8
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4878      	ldr	r0, [pc, #480]	; (80011ac <computeStatistics+0x27c>)
 8000fca:	f001 f883 	bl	80020d4 <BSP_QSPI_Read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <computeStatistics+0xa8>
		Error_Handler();
 8000fd4:	f000 fdba 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) acceleroSamples_z, flash_address_accelerometer_z, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <computeStatistics+0x280>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <computeStatistics+0x260>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b63      	cmp	r3, #99	; 0x63
 8000fe2:	dc03      	bgt.n	8000fec <computeStatistics+0xbc>
 8000fe4:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <computeStatistics+0x260>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	e000      	b.n	8000fee <computeStatistics+0xbe>
 8000fec:	23c8      	movs	r3, #200	; 0xc8
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4870      	ldr	r0, [pc, #448]	; (80011b4 <computeStatistics+0x284>)
 8000ff2:	f001 f86f 	bl	80020d4 <BSP_QSPI_Read>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <computeStatistics+0xd0>
		Error_Handler();
 8000ffc:	f000 fda6 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_x, flash_address_magnetometer_x, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001000:	4b6d      	ldr	r3, [pc, #436]	; (80011b8 <computeStatistics+0x288>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b62      	ldr	r3, [pc, #392]	; (8001190 <computeStatistics+0x260>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b63      	cmp	r3, #99	; 0x63
 800100a:	dc03      	bgt.n	8001014 <computeStatistics+0xe4>
 800100c:	4b60      	ldr	r3, [pc, #384]	; (8001190 <computeStatistics+0x260>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	e000      	b.n	8001016 <computeStatistics+0xe6>
 8001014:	23c8      	movs	r3, #200	; 0xc8
 8001016:	461a      	mov	r2, r3
 8001018:	4868      	ldr	r0, [pc, #416]	; (80011bc <computeStatistics+0x28c>)
 800101a:	f001 f85b 	bl	80020d4 <BSP_QSPI_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <computeStatistics+0xf8>
		Error_Handler();
 8001024:	f000 fd92 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_y, flash_address_magnetometer_y, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001028:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <computeStatistics+0x290>)
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <computeStatistics+0x260>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b63      	cmp	r3, #99	; 0x63
 8001032:	dc03      	bgt.n	800103c <computeStatistics+0x10c>
 8001034:	4b56      	ldr	r3, [pc, #344]	; (8001190 <computeStatistics+0x260>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	e000      	b.n	800103e <computeStatistics+0x10e>
 800103c:	23c8      	movs	r3, #200	; 0xc8
 800103e:	461a      	mov	r2, r3
 8001040:	4860      	ldr	r0, [pc, #384]	; (80011c4 <computeStatistics+0x294>)
 8001042:	f001 f847 	bl	80020d4 <BSP_QSPI_Read>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <computeStatistics+0x120>
		Error_Handler();
 800104c:	f000 fd7e 	bl	8001b4c <Error_Handler>
	if(BSP_QSPI_Read((uint8_t*) magnetoSamples_z, flash_address_magnetometer_z, sizeof(int16_t) * min(samples, 100)) != QSPI_OK)
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <computeStatistics+0x298>)
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <computeStatistics+0x260>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b63      	cmp	r3, #99	; 0x63
 800105a:	dc03      	bgt.n	8001064 <computeStatistics+0x134>
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <computeStatistics+0x260>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	e000      	b.n	8001066 <computeStatistics+0x136>
 8001064:	23c8      	movs	r3, #200	; 0xc8
 8001066:	461a      	mov	r2, r3
 8001068:	4858      	ldr	r0, [pc, #352]	; (80011cc <computeStatistics+0x29c>)
 800106a:	f001 f833 	bl	80020d4 <BSP_QSPI_Read>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <computeStatistics+0x148>
		Error_Handler();
 8001074:	f000 fd6a 	bl	8001b4c <Error_Handler>

	int avgTemp = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < min(samples, 100); i++) avgTemp += temperatureSamples[i];
 800107c:	2300      	movs	r3, #0
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
 8001080:	e00a      	b.n	8001098 <computeStatistics+0x168>
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <computeStatistics+0x264>)
 8001084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001086:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800108a:	461a      	mov	r2, r3
 800108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800108e:	4413      	add	r3, r2
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
 8001092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001094:	3301      	adds	r3, #1
 8001096:	643b      	str	r3, [r7, #64]	; 0x40
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <computeStatistics+0x260>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	bfa8      	it	ge
 80010a0:	2364      	movge	r3, #100	; 0x64
 80010a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbec      	blt.n	8001082 <computeStatistics+0x152>
	avgTemp /= min(samples, 100);
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <computeStatistics+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b64      	cmp	r3, #100	; 0x64
 80010ae:	bfa8      	it	ge
 80010b0:	2364      	movge	r3, #100	; 0x64
 80010b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44

	int avgPres = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < min(samples, 100); i++) avgPres += pressureSamples[i];
 80010be:	2300      	movs	r3, #0
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c2:	e00a      	b.n	80010da <computeStatistics+0x1aa>
 80010c4:	4a35      	ldr	r2, [pc, #212]	; (800119c <computeStatistics+0x26c>)
 80010c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80010cc:	461a      	mov	r2, r3
 80010ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d0:	4413      	add	r3, r2
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d6:	3301      	adds	r3, #1
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <computeStatistics+0x260>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	bfa8      	it	ge
 80010e2:	2364      	movge	r3, #100	; 0x64
 80010e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbec      	blt.n	80010c4 <computeStatistics+0x194>
	avgPres /= min(samples, 100);
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <computeStatistics+0x260>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	bfa8      	it	ge
 80010f2:	2364      	movge	r3, #100	; 0x64
 80010f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	int avgAccel_x = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < min(samples, 100); i++) avgAccel_x += acceleroSamples_x[i];
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
 8001104:	e00a      	b.n	800111c <computeStatistics+0x1ec>
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <computeStatistics+0x274>)
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800110e:	461a      	mov	r2, r3
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	4413      	add	r3, r2
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	3301      	adds	r3, #1
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <computeStatistics+0x260>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	bfa8      	it	ge
 8001124:	2364      	movge	r3, #100	; 0x64
 8001126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001128:	429a      	cmp	r2, r3
 800112a:	dbec      	blt.n	8001106 <computeStatistics+0x1d6>
	avgAccel_x /= min(samples, 100);
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <computeStatistics+0x260>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	bfa8      	it	ge
 8001134:	2364      	movge	r3, #100	; 0x64
 8001136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001138:	fb92 f3f3 	sdiv	r3, r2, r3
 800113c:	637b      	str	r3, [r7, #52]	; 0x34

	int avgAccel_y = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < min(samples, 100); i++) avgAccel_y += acceleroSamples_y[i];
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	e00a      	b.n	800115e <computeStatistics+0x22e>
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <computeStatistics+0x27c>)
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001150:	461a      	mov	r2, r3
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	4413      	add	r3, r2
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	3301      	adds	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <computeStatistics+0x260>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	bfa8      	it	ge
 8001166:	2364      	movge	r3, #100	; 0x64
 8001168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116a:	429a      	cmp	r2, r3
 800116c:	dbec      	blt.n	8001148 <computeStatistics+0x218>
	avgAccel_y /= min(samples, 100);
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <computeStatistics+0x260>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	bfa8      	it	ge
 8001176:	2364      	movge	r3, #100	; 0x64
 8001178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117a:	fb92 f3f3 	sdiv	r3, r2, r3
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c

	int avgAccel_z = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < min(samples, 100); i++) avgAccel_z += acceleroSamples_z[i];
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	e02d      	b.n	80011e6 <computeStatistics+0x2b6>
 800118a:	bf00      	nop
 800118c:	20000ea0 	.word	0x20000ea0
 8001190:	20000ea4 	.word	0x20000ea4
 8001194:	20000860 	.word	0x20000860
 8001198:	20000004 	.word	0x20000004
 800119c:	20000928 	.word	0x20000928
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200009f0 	.word	0x200009f0
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000ab8 	.word	0x20000ab8
 80011b0:	20000010 	.word	0x20000010
 80011b4:	20000b80 	.word	0x20000b80
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000c48 	.word	0x20000c48
 80011c0:	20000018 	.word	0x20000018
 80011c4:	20000d10 	.word	0x20000d10
 80011c8:	2000001c 	.word	0x2000001c
 80011cc:	20000dd8 	.word	0x20000dd8
 80011d0:	4a55      	ldr	r2, [pc, #340]	; (8001328 <computeStatistics+0x3f8>)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011d8:	461a      	mov	r2, r3
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	4413      	add	r3, r2
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	4b51      	ldr	r3, [pc, #324]	; (800132c <computeStatistics+0x3fc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	bfa8      	it	ge
 80011ee:	2364      	movge	r3, #100	; 0x64
 80011f0:	6a3a      	ldr	r2, [r7, #32]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbec      	blt.n	80011d0 <computeStatistics+0x2a0>
	avgAccel_z /= min(samples, 100);
 80011f6:	4b4d      	ldr	r3, [pc, #308]	; (800132c <computeStatistics+0x3fc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	bfa8      	it	ge
 80011fe:	2364      	movge	r3, #100	; 0x64
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	fb92 f3f3 	sdiv	r3, r2, r3
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

	int avgMagnet_x = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_x += magnetoSamples_x[i];
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	e00a      	b.n	8001228 <computeStatistics+0x2f8>
 8001212:	4a47      	ldr	r2, [pc, #284]	; (8001330 <computeStatistics+0x400>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800121a:	461a      	mov	r2, r3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	3301      	adds	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <computeStatistics+0x3fc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b64      	cmp	r3, #100	; 0x64
 800122e:	bfa8      	it	ge
 8001230:	2364      	movge	r3, #100	; 0x64
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbec      	blt.n	8001212 <computeStatistics+0x2e2>
	avgMagnet_x /= min(samples, 100);
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <computeStatistics+0x3fc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	bfa8      	it	ge
 8001240:	2364      	movge	r3, #100	; 0x64
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	fb92 f3f3 	sdiv	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

	int avgMagnet_y = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_y += magnetoSamples_y[i];
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e00a      	b.n	800126a <computeStatistics+0x33a>
 8001254:	4a37      	ldr	r2, [pc, #220]	; (8001334 <computeStatistics+0x404>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <computeStatistics+0x3fc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	bfa8      	it	ge
 8001272:	2364      	movge	r3, #100	; 0x64
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbec      	blt.n	8001254 <computeStatistics+0x324>
	avgMagnet_y /= min(samples, 100);
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <computeStatistics+0x3fc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	bfa8      	it	ge
 8001282:	2364      	movge	r3, #100	; 0x64
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	fb92 f3f3 	sdiv	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]

	int avgMagnet_z = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < min(samples, 100); i++) avgMagnet_z += magnetoSamples_z[i];
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	e00a      	b.n	80012ac <computeStatistics+0x37c>
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <computeStatistics+0x408>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <computeStatistics+0x3fc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	bfa8      	it	ge
 80012b4:	2364      	movge	r3, #100	; 0x64
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbec      	blt.n	8001296 <computeStatistics+0x366>
	avgMagnet_z /= min(samples, 100);
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <computeStatistics+0x3fc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	bfa8      	it	ge
 80012c4:	2364      	movge	r3, #100	; 0x64
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]

	sprintf(msg, "\r\nStatistics:\r\nSamples: %d\r\n\tTemperature:\r\n\t\tAverage: %d\r\n\t\tVariance: %d\r\n\r\n\tPressure:\r\n\t\tAverage: %d\r\n\t\tVariance: %d\r\n\r\n\tAccelerometer:\r\n\t\tAverage x: %d\r\n\t\tAverage y: %d\r\n\t\tAverage z: %d\r\n\t\tVariance x: %d\r\n\t\tVariance y: %d\r\n\t\tVariance z: %d\r\n\r\n\tMagnetormeter:\r\n\t\tAverage x: %d\r\n\t\tAverage y: %d\r\n\t\tAverage z: %d\r\n\t\tVariance x: %d\r\n\t\tVariance y: %d\r\n\t\tVariance z: %d\r\n\r\n", min(samples, 100), avgTemp, 0, avgPres, 0, avgAccel_x, avgAccel_y, avgAccel_z, 0, 0, 0, avgMagnet_x, avgMagnet_y, avgMagnet_z, 0, 0, 0);
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <computeStatistics+0x3fc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	bfa8      	it	ge
 80012d6:	2364      	movge	r3, #100	; 0x64
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	930e      	str	r3, [sp, #56]	; 0x38
 80012de:	2300      	movs	r3, #0
 80012e0:	930d      	str	r3, [sp, #52]	; 0x34
 80012e2:	2300      	movs	r3, #0
 80012e4:	930c      	str	r3, [sp, #48]	; 0x30
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	930a      	str	r3, [sp, #40]	; 0x28
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	9309      	str	r3, [sp, #36]	; 0x24
 80012f2:	2300      	movs	r3, #0
 80012f4:	9308      	str	r3, [sp, #32]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9307      	str	r3, [sp, #28]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9306      	str	r3, [sp, #24]
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	9305      	str	r3, [sp, #20]
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	9304      	str	r3, [sp, #16]
 8001306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001318:	4908      	ldr	r1, [pc, #32]	; (800133c <computeStatistics+0x40c>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f009 fbf0 	bl	800ab00 <siprintf>
}
 8001320:	bf00      	nop
 8001322:	3748      	adds	r7, #72	; 0x48
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000b80 	.word	0x20000b80
 800132c:	20000ea4 	.word	0x20000ea4
 8001330:	20000c48 	.word	0x20000c48
 8001334:	20000d10 	.word	0x20000d10
 8001338:	20000dd8 	.word	0x20000dd8
 800133c:	0800cc50 	.word	0x0800cc50

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f002 fa7b 	bl	8003840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f85b 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 f98b 	bl	8001668 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001352:	f000 f93d 	bl	80015d0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001356:	f000 f8a7 	bl	80014a8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800135a:	f000 f8e5 	bl	8001528 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
    BSP_QSPI_Init();
 800135e:	f000 fe3b 	bl	8001fd8 <BSP_QSPI_Init>
    BSP_HSENSOR_Init();
 8001362:	f000 fda7 	bl	8001eb4 <BSP_HSENSOR_Init>
    BSP_TSENSOR_Init();
 8001366:	f001 fa81 	bl	800286c <BSP_TSENSOR_Init>
    BSP_PSENSOR_Init();
 800136a:	f000 fe07 	bl	8001f7c <BSP_PSENSOR_Init>
    BSP_ACCELERO_Init();
 800136e:	f000 fd4b 	bl	8001e08 <BSP_ACCELERO_Init>
    BSP_MAGNETO_Init();
 8001372:	f000 fdbf 	bl	8001ef4 <BSP_MAGNETO_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskReadSensor */
  osThreadDef(taskReadSensor, StartTaskReadSensor, osPriorityNormal, 0, 256);
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <main+0xac>)
 8001378:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskReadSensorHandle = osThreadCreate(osThread(taskReadSensor), NULL);
 800138a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f007 fb98 	bl	8008ac6 <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <main+0xb0>)
 800139a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskBtnInput */
  osThreadDef(taskBtnInput, StartTaskBtnInput, osPriorityNormal, 0, 256);
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <main+0xb4>)
 800139e:	f107 0420 	add.w	r4, r7, #32
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskBtnInputHandle = osThreadCreate(osThread(taskBtnInput), NULL);
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fb85 	bl	8008ac6 <osThreadCreate>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <main+0xb8>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskTransmit */
  osThreadDef(taskTransmit, StartTaskTransmit, osPriorityNormal, 0, 256);
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <main+0xbc>)
 80013c4:	1d3c      	adds	r4, r7, #4
 80013c6:	461d      	mov	r5, r3
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskTransmitHandle = osThreadCreate(osThread(taskTransmit), NULL);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 fb74 	bl	8008ac6 <osThreadCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <main+0xc0>)
 80013e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013e4:	f007 fb68 	bl	8008ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 80013e8:	e7fe      	b.n	80013e8 <main+0xa8>
 80013ea:	bf00      	nop
 80013ec:	0800cdd4 	.word	0x0800cdd4
 80013f0:	20000830 	.word	0x20000830
 80013f4:	0800ce00 	.word	0x0800ce00
 80013f8:	20000834 	.word	0x20000834
 80013fc:	0800ce2c 	.word	0x0800ce2c
 8001400:	20000838 	.word	0x20000838

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f009 fbd7 	bl	800abc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001426:	2000      	movs	r0, #0
 8001428:	f004 fcbc 	bl	8005da4 <HAL_PWREx_ControlVoltageScaling>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001432:	f000 fb8b 	bl	8001b4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001436:	2310      	movs	r3, #16
 8001438:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800144a:	2301      	movs	r3, #1
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001452:	233c      	movs	r3, #60	; 0x3c
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fd40 	bl	8005eec <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001472:	f000 fb6b 	bl	8001b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2105      	movs	r1, #5
 800148e:	4618      	mov	r0, r3
 8001490:	f005 f946 	bl	8006720 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800149a:	f000 fb57 	bl	8001b4c <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3758      	adds	r7, #88	; 0x58
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_I2C2_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_I2C2_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_I2C2_Init+0x74>)
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <MX_I2C2_Init+0x7c>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_I2C2_Init+0x74>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	; (800151c <MX_I2C2_Init+0x74>)
 80014e4:	f002 fd7a 	bl	8003fdc <HAL_I2C_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ee:	f000 fb2d 	bl	8001b4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <MX_I2C2_Init+0x74>)
 80014f6:	f003 fb21 	bl	8004b3c <HAL_I2CEx_ConfigAnalogFilter>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001500:	f000 fb24 	bl	8001b4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_I2C2_Init+0x74>)
 8001508:	f003 fb63 	bl	8004bd2 <HAL_I2CEx_ConfigDigitalFilter>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fb1b 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200006f8 	.word	0x200006f8
 8001520:	40005800 	.word	0x40005800
 8001524:	307075b1 	.word	0x307075b1

08001528 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_OCTOSPI1_Init+0xa4>)
 8001540:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001544:	2201      	movs	r2, #1
 8001546:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001556:	2220      	movs	r2, #32
 8001558:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800155c:	2201      	movs	r2, #1
 800155e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800156e:	2201      	movs	r2, #1
 8001570:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 8001586:	2208      	movs	r2, #8
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 800158c:	f003 fb6e 	bl	8004c6c <HAL_OSPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 fad9 	bl	8001b4c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80015a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015a6:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_OCTOSPI1_Init+0xa0>)
 80015b2:	f003 fe59 	bl	8005268 <HAL_OSPIM_Config>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 80015bc:	f000 fac6 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000074c 	.word	0x2000074c
 80015cc:	a0001000 	.word	0xa0001000

080015d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <MX_USART1_UART_Init+0x94>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_USART1_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800161a:	f006 fb3d 	bl	8007c98 <HAL_UART_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001624:	f000 fa92 	bl	8001b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800162c:	f007 f962 	bl	80088f4 <HAL_UARTEx_SetTxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001636:	f000 fa89 	bl	8001b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800163e:	f007 f997 	bl	8008970 <HAL_UARTEx_SetRxFifoThreshold>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001648:	f000 fa80 	bl	8001b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_USART1_UART_Init+0x90>)
 800164e:	f007 f918 	bl	8008882 <HAL_UARTEx_DisableFifoMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001658:	f000 fa78 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000079c 	.word	0x2000079c
 8001664:	40013800 	.word	0x40013800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <MX_GPIO_Init+0xd0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_GPIO_Init+0xd0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a27      	ldr	r2, [pc, #156]	; (8001738 <MX_GPIO_Init+0xd0>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_GPIO_Init+0xd0>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2108      	movs	r1, #8
 80016e2:	4816      	ldr	r0, [pc, #88]	; (800173c <MX_GPIO_Init+0xd4>)
 80016e4:	f002 fc4a 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDError_Pin */
  GPIO_InitStruct.Pin = LEDError_Pin;
 80016e8:	2308      	movs	r3, #8
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDError_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <MX_GPIO_Init+0xd4>)
 8001700:	f002 f9b8 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_GPIO_Init+0xd8>)
 800171c:	f002 f9aa 	bl	8003a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2105      	movs	r1, #5
 8001724:	2028      	movs	r0, #40	; 0x28
 8001726:	f002 f97b 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172a:	2028      	movs	r0, #40	; 0x28
 800172c:	f002 f994 	bl	8003a58 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	48001000 	.word	0x48001000
 8001740:	48000800 	.word	0x48000800

08001744 <StartTaskReadSensor>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReadSensor */
void StartTaskReadSensor(void const * argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 800174c:	2064      	movs	r0, #100	; 0x64
 800174e:	f007 fa06 	bl	8008b5e <osDelay>

        if(samples == 0){
 8001752:	4b82      	ldr	r3, [pc, #520]	; (800195c <StartTaskReadSensor+0x218>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d14f      	bne.n	80017fa <StartTaskReadSensor+0xb6>
        	if (BSP_QSPI_Erase_Block(flash_address_temperature) != QSPI_OK)
 800175a:	4b81      	ldr	r3, [pc, #516]	; (8001960 <StartTaskReadSensor+0x21c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fd90 	bl	8002284 <BSP_QSPI_Erase_Block>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <StartTaskReadSensor+0x2a>
				Error_Handler();
 800176a:	f000 f9ef 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_pressure) != QSPI_OK)
 800176e:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <StartTaskReadSensor+0x220>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fd86 	bl	8002284 <BSP_QSPI_Erase_Block>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <StartTaskReadSensor+0x3e>
				Error_Handler();
 800177e:	f000 f9e5 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_accelerometer_x) != QSPI_OK)
 8001782:	4b79      	ldr	r3, [pc, #484]	; (8001968 <StartTaskReadSensor+0x224>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fd7c 	bl	8002284 <BSP_QSPI_Erase_Block>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <StartTaskReadSensor+0x52>
				Error_Handler();
 8001792:	f000 f9db 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_accelerometer_y) != QSPI_OK)
 8001796:	4b75      	ldr	r3, [pc, #468]	; (800196c <StartTaskReadSensor+0x228>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fd72 	bl	8002284 <BSP_QSPI_Erase_Block>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <StartTaskReadSensor+0x66>
				Error_Handler();
 80017a6:	f000 f9d1 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_accelerometer_z) != QSPI_OK)
 80017aa:	4b71      	ldr	r3, [pc, #452]	; (8001970 <StartTaskReadSensor+0x22c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fd68 	bl	8002284 <BSP_QSPI_Erase_Block>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <StartTaskReadSensor+0x7a>
				Error_Handler();
 80017ba:	f000 f9c7 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_magnetometer_x) != QSPI_OK)
 80017be:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <StartTaskReadSensor+0x230>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fd5e 	bl	8002284 <BSP_QSPI_Erase_Block>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <StartTaskReadSensor+0x8e>
				Error_Handler();
 80017ce:	f000 f9bd 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_magnetometer_y) != QSPI_OK)
 80017d2:	4b69      	ldr	r3, [pc, #420]	; (8001978 <StartTaskReadSensor+0x234>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fd54 	bl	8002284 <BSP_QSPI_Erase_Block>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <StartTaskReadSensor+0xa2>
				Error_Handler();
 80017e2:	f000 f9b3 	bl	8001b4c <Error_Handler>
			if (BSP_QSPI_Erase_Block(flash_address_magnetometer_z) != QSPI_OK)
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <StartTaskReadSensor+0x238>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fd4a 	bl	8002284 <BSP_QSPI_Erase_Block>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <StartTaskReadSensor+0xb6>
				Error_Handler();
 80017f6:	f000 f9a9 	bl	8001b4c <Error_Handler>
        }

        if(currentSensor == 4) continue;
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <StartTaskReadSensor+0x23c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	f000 80a9 	beq.w	8001956 <StartTaskReadSensor+0x212>

        temperature = BSP_TSENSOR_ReadTemp();
 8001804:	f001 f84e 	bl	80028a4 <BSP_TSENSOR_ReadTemp>
 8001808:	eef0 7a40 	vmov.f32	s15, s0
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <StartTaskReadSensor+0x240>)
 800180e:	edc3 7a00 	vstr	s15, [r3]
        pressure = BSP_PSENSOR_ReadPressure();
 8001812:	f000 fbd3 	bl	8001fbc <BSP_PSENSOR_ReadPressure>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <StartTaskReadSensor+0x244>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
        BSP_ACCELERO_AccGetXYZ(acceleroData);
 8001820:	485a      	ldr	r0, [pc, #360]	; (800198c <StartTaskReadSensor+0x248>)
 8001822:	f000 fb2f 	bl	8001e84 <BSP_ACCELERO_AccGetXYZ>
        BSP_MAGNETO_GetXYZ(magnetoData);
 8001826:	485a      	ldr	r0, [pc, #360]	; (8001990 <StartTaskReadSensor+0x24c>)
 8001828:	f000 fb90 	bl	8001f4c <BSP_MAGNETO_GetXYZ>


        //=======Part 4==========

        // write
        uint32_t offset = samples * sizeof(int16_t);
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <StartTaskReadSensor+0x218>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]

        int16_t temperature_int = (int16_t) (temperature);
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <StartTaskReadSensor+0x240>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183e:	ee17 3a90 	vmov	r3, s15
 8001842:	b21b      	sxth	r3, r3
 8001844:	817b      	strh	r3, [r7, #10]
        if (BSP_QSPI_Write((uint8_t*) &temperature_int, flash_address_temperature + offset, sizeof(int16_t)) != QSPI_OK)
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <StartTaskReadSensor+0x21c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	18d1      	adds	r1, r2, r3
 800184e:	f107 030a 	add.w	r3, r7, #10
 8001852:	2202      	movs	r2, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fc8f 	bl	8002178 <BSP_QSPI_Write>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <StartTaskReadSensor+0x120>
            Error_Handler();
 8001860:	f000 f974 	bl	8001b4c <Error_Handler>

        int16_t pressure_int = (int16_t) (pressure);
 8001864:	4b48      	ldr	r3, [pc, #288]	; (8001988 <StartTaskReadSensor+0x244>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186e:	ee17 3a90 	vmov	r3, s15
 8001872:	b21b      	sxth	r3, r3
 8001874:	813b      	strh	r3, [r7, #8]
		if (BSP_QSPI_Write((uint8_t*) &pressure_int, flash_address_pressure + offset, sizeof(int16_t)) != QSPI_OK)
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <StartTaskReadSensor+0x220>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	18d1      	adds	r1, r2, r3
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2202      	movs	r2, #2
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fc77 	bl	8002178 <BSP_QSPI_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <StartTaskReadSensor+0x150>
			Error_Handler();
 8001890:	f000 f95c 	bl	8001b4c <Error_Handler>

		if (BSP_QSPI_Write((uint8_t*) &acceleroData[0], flash_address_accelerometer_x + offset, sizeof(int16_t)) != QSPI_OK)
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <StartTaskReadSensor+0x224>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	2202      	movs	r2, #2
 800189e:	4619      	mov	r1, r3
 80018a0:	483a      	ldr	r0, [pc, #232]	; (800198c <StartTaskReadSensor+0x248>)
 80018a2:	f000 fc69 	bl	8002178 <BSP_QSPI_Write>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <StartTaskReadSensor+0x16c>
			Error_Handler();
 80018ac:	f000 f94e 	bl	8001b4c <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &acceleroData[1], flash_address_accelerometer_y + offset, sizeof(int16_t)) != QSPI_OK)
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <StartTaskReadSensor+0x228>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	2202      	movs	r2, #2
 80018ba:	4619      	mov	r1, r3
 80018bc:	4835      	ldr	r0, [pc, #212]	; (8001994 <StartTaskReadSensor+0x250>)
 80018be:	f000 fc5b 	bl	8002178 <BSP_QSPI_Write>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <StartTaskReadSensor+0x188>
			Error_Handler();
 80018c8:	f000 f940 	bl	8001b4c <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &acceleroData[2], flash_address_accelerometer_z + offset, sizeof(int16_t)) != QSPI_OK)
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <StartTaskReadSensor+0x22c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	2202      	movs	r2, #2
 80018d6:	4619      	mov	r1, r3
 80018d8:	482f      	ldr	r0, [pc, #188]	; (8001998 <StartTaskReadSensor+0x254>)
 80018da:	f000 fc4d 	bl	8002178 <BSP_QSPI_Write>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <StartTaskReadSensor+0x1a4>
			Error_Handler();
 80018e4:	f000 f932 	bl	8001b4c <Error_Handler>

		if (BSP_QSPI_Write((uint8_t*) &magnetoData[0], flash_address_magnetometer_x + offset, sizeof(int16_t)) != QSPI_OK)
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <StartTaskReadSensor+0x230>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	2202      	movs	r2, #2
 80018f2:	4619      	mov	r1, r3
 80018f4:	4826      	ldr	r0, [pc, #152]	; (8001990 <StartTaskReadSensor+0x24c>)
 80018f6:	f000 fc3f 	bl	8002178 <BSP_QSPI_Write>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <StartTaskReadSensor+0x1c0>
			Error_Handler();
 8001900:	f000 f924 	bl	8001b4c <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &magnetoData[1], flash_address_magnetometer_y + offset, sizeof(int16_t)) != QSPI_OK)
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <StartTaskReadSensor+0x234>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	2202      	movs	r2, #2
 800190e:	4619      	mov	r1, r3
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <StartTaskReadSensor+0x258>)
 8001912:	f000 fc31 	bl	8002178 <BSP_QSPI_Write>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <StartTaskReadSensor+0x1dc>
			Error_Handler();
 800191c:	f000 f916 	bl	8001b4c <Error_Handler>
		if (BSP_QSPI_Write((uint8_t*) &magnetoData[2], flash_address_magnetometer_z + offset, sizeof(int16_t)) != QSPI_OK)
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <StartTaskReadSensor+0x238>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	2202      	movs	r2, #2
 800192a:	4619      	mov	r1, r3
 800192c:	481c      	ldr	r0, [pc, #112]	; (80019a0 <StartTaskReadSensor+0x25c>)
 800192e:	f000 fc23 	bl	8002178 <BSP_QSPI_Write>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <StartTaskReadSensor+0x1f8>
			Error_Handler();
 8001938:	f000 f908 	bl	8001b4c <Error_Handler>


        if(samples < 999)
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <StartTaskReadSensor+0x218>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001944:	4293      	cmp	r3, r2
 8001946:	f73f af01 	bgt.w	800174c <StartTaskReadSensor+0x8>
        	samples++;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <StartTaskReadSensor+0x218>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a02      	ldr	r2, [pc, #8]	; (800195c <StartTaskReadSensor+0x218>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e6fa      	b.n	800174c <StartTaskReadSensor+0x8>
        if(currentSensor == 4) continue;
 8001956:	bf00      	nop
    {
 8001958:	e6f8      	b.n	800174c <StartTaskReadSensor+0x8>
 800195a:	bf00      	nop
 800195c:	20000ea4 	.word	0x20000ea4
 8001960:	20000ea0 	.word	0x20000ea0
 8001964:	20000004 	.word	0x20000004
 8001968:	20000008 	.word	0x20000008
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000010 	.word	0x20000010
 8001974:	20000014 	.word	0x20000014
 8001978:	20000018 	.word	0x20000018
 800197c:	2000001c 	.word	0x2000001c
 8001980:	2000083c 	.word	0x2000083c
 8001984:	20000848 	.word	0x20000848
 8001988:	2000084c 	.word	0x2000084c
 800198c:	20000850 	.word	0x20000850
 8001990:	20000858 	.word	0x20000858
 8001994:	20000852 	.word	0x20000852
 8001998:	20000854 	.word	0x20000854
 800199c:	2000085a 	.word	0x2000085a
 80019a0:	2000085c 	.word	0x2000085c

080019a4 <StartTaskBtnInput>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskBtnInput */
void StartTaskBtnInput(void const * argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBtnInput */
    /* Infinite loop */
    for (;;)
    {
        osDelay(100);
 80019ac:	2064      	movs	r0, #100	; 0x64
 80019ae:	f007 f8d6 	bl	8008b5e <osDelay>
        // task that determines when the button has been pressed,
        // and changes the mode of the application to output data
        // from the next sensor in the sequence;
        if (buttonPressed == 1)
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <StartTaskBtnInput+0x4c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1f8      	bne.n	80019ac <StartTaskBtnInput+0x8>
        {
            currentSensor = (currentSensor + 1) % numSensors; // Increment the currentSensor variable and wrap around
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <StartTaskBtnInput+0x50>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <StartTaskBtnInput+0x54>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80019c8:	fb01 f202 	mul.w	r2, r1, r2
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <StartTaskBtnInput+0x50>)
 80019d0:	6013      	str	r3, [r2, #0]
            buttonPressed = 0;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <StartTaskBtnInput+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

            if(currentSensor == 0){
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <StartTaskBtnInput+0x50>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e5      	bne.n	80019ac <StartTaskBtnInput+0x8>
				samples = 0;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <StartTaskBtnInput+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
				statsPrinted = 0;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <StartTaskBtnInput+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
        osDelay(100);
 80019ec:	e7de      	b.n	80019ac <StartTaskBtnInput+0x8>
 80019ee:	bf00      	nop
 80019f0:	20000844 	.word	0x20000844
 80019f4:	2000083c 	.word	0x2000083c
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000ea4 	.word	0x20000ea4
 8001a00:	20000840 	.word	0x20000840

08001a04 <StartTaskTransmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskTransmit */
void StartTaskTransmit(void const * argument)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTransmit */
    /* Infinite loop */
    for (;;)
    {
        osDelay(500);
 8001a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a10:	f007 f8a5 	bl	8008b5e <osDelay>
        //    ======Part 2==========
        // task that transmits this data to the terminal using the virtual com port UART;
        // and,
        char *msg = calloc(1, sizeof(char) * 1000);
 8001a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f008 fa7f 	bl	8009f1c <calloc>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]
        switch (currentSensor)
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <StartTaskTransmit+0xf4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d853      	bhi.n	8001ad2 <StartTaskTransmit+0xce>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <StartTaskTransmit+0x2c>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a45 	.word	0x08001a45
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	08001a75 	.word	0x08001a75
 8001a3c:	08001a99 	.word	0x08001a99
 8001a40:	08001abd 	.word	0x08001abd
        {
        case 0:
            sprintf(msg, "The Temperature is: %d\r\n", (int)temperature);
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <StartTaskTransmit+0xf8>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	ee17 2a90 	vmov	r2, s15
 8001a52:	492b      	ldr	r1, [pc, #172]	; (8001b00 <StartTaskTransmit+0xfc>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f009 f853 	bl	800ab00 <siprintf>
            break;
 8001a5a:	e040      	b.n	8001ade <StartTaskTransmit+0xda>
        case 1:
            sprintf(msg, "The Pressure is: %d\r\n", (int)pressure);
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <StartTaskTransmit+0x100>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a66:	ee17 2a90 	vmov	r2, s15
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <StartTaskTransmit+0x104>)
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f009 f847 	bl	800ab00 <siprintf>
            break;
 8001a72:	e034      	b.n	8001ade <StartTaskTransmit+0xda>
        case 2:
            sprintf(msg, "The Accelerometer values are: X: %d, Y: %d, Z: %d\r\n", acceleroData[0], acceleroData[1], acceleroData[2]);
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <StartTaskTransmit+0x108>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <StartTaskTransmit+0x108>)
 8001a7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <StartTaskTransmit+0x108>)
 8001a86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4920      	ldr	r1, [pc, #128]	; (8001b10 <StartTaskTransmit+0x10c>)
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f009 f835 	bl	800ab00 <siprintf>
            break;
 8001a96:	e022      	b.n	8001ade <StartTaskTransmit+0xda>
        case 3:
            sprintf(msg, "The Magnetometer values are: X: %d, Y: %d, Z: %d\r\n", magnetoData[0], magnetoData[1], magnetoData[2]);
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <StartTaskTransmit+0x110>)
 8001a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <StartTaskTransmit+0x110>)
 8001aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <StartTaskTransmit+0x110>)
 8001aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4919      	ldr	r1, [pc, #100]	; (8001b18 <StartTaskTransmit+0x114>)
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f009 f823 	bl	800ab00 <siprintf>
            break;
 8001aba:	e010      	b.n	8001ade <StartTaskTransmit+0xda>
        // ======== PART 4 BEGIN ========
        case 4:
        	if(!statsPrinted){
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <StartTaskTransmit+0x118>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <StartTaskTransmit+0xd8>
				computeStatistics(msg);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fa33 	bl	8000f30 <computeStatistics>
				statsPrinted = 1;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <StartTaskTransmit+0x118>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
        	}
        	break;
 8001ad0:	e004      	b.n	8001adc <StartTaskTransmit+0xd8>
		// ========= PART 4 END =========
        default:
            sprintf(msg, "Wrong sensor");
 8001ad2:	4913      	ldr	r1, [pc, #76]	; (8001b20 <StartTaskTransmit+0x11c>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f009 f813 	bl	800ab00 <siprintf>
 8001ada:	e000      	b.n	8001ade <StartTaskTransmit+0xda>
        	break;
 8001adc:	bf00      	nop
        }

        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7fe fbde 	bl	80002a0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <StartTaskTransmit+0x120>)
 8001af0:	f006 f922 	bl	8007d38 <HAL_UART_Transmit>
    {
 8001af4:	e78a      	b.n	8001a0c <StartTaskTransmit+0x8>
 8001af6:	bf00      	nop
 8001af8:	2000083c 	.word	0x2000083c
 8001afc:	20000848 	.word	0x20000848
 8001b00:	0800ce48 	.word	0x0800ce48
 8001b04:	2000084c 	.word	0x2000084c
 8001b08:	0800ce64 	.word	0x0800ce64
 8001b0c:	20000850 	.word	0x20000850
 8001b10:	0800ce7c 	.word	0x0800ce7c
 8001b14:	20000858 	.word	0x20000858
 8001b18:	0800ceb0 	.word	0x0800ceb0
 8001b1c:	20000840 	.word	0x20000840
 8001b20:	0800cee4 	.word	0x0800cee4
 8001b24:	2000079c 	.word	0x2000079c

08001b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b3a:	f001 fe99 	bl	8003870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40001000 	.word	0x40001000

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
}
 8001b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
        HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2108      	movs	r1, #8
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <Error_Handler+0x18>)
 8001b5a:	f002 fa0f 	bl	8003f7c <HAL_GPIO_WritePin>
        __BKPT();
 8001b5e:	be00      	bkpt	0x0000
        HAL_GPIO_WritePin(LEDError_GPIO_Port, LEDError_Pin, GPIO_PIN_RESET);
 8001b60:	e7f8      	b.n	8001b54 <Error_Handler+0x8>
 8001b62:	bf00      	nop
 8001b64:	48001000 	.word	0x48001000

08001b68 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481b      	ldr	r0, [pc, #108]	; (8001c14 <I2Cx_MspInit+0xac>)
 8001ba6:	f001 ff65 	bl	8003a74 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4818      	ldr	r0, [pc, #96]	; (8001c14 <I2Cx_MspInit+0xac>)
 8001bb2:	f001 ff5f 	bl	8003a74 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <I2Cx_MspInit+0xa8>)
 8001be0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001be4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	2021      	movs	r0, #33	; 0x21
 8001bec:	f001 ff18 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bf0:	2021      	movs	r0, #33	; 0x21
 8001bf2:	f001 ff31 	bl	8003a58 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	2022      	movs	r0, #34	; 0x22
 8001bfc:	f001 ff10 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c00:	2022      	movs	r0, #34	; 0x22
 8001c02:	f001 ff29 	bl	8003a58 <HAL_NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	48000400 	.word	0x48000400

08001c18 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <I2Cx_Init+0x54>)
 8001c24:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <I2Cx_Init+0x58>)
 8001c2a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff89 	bl	8001b68 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f002 f9c0 	bl	8003fdc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f002 ff6c 	bl	8004b3c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40005800 	.word	0x40005800
 8001c70:	00702681 	.word	0x00702681

08001c74 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	72fb      	strb	r3, [r7, #11]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	b299      	uxth	r1, r3
 8001c96:	88f8      	ldrh	r0, [r7, #6]
 8001c98:	893a      	ldrh	r2, [r7, #8]
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4603      	mov	r3, r0
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f002 fb74 	bl	8004398 <HAL_I2C_Mem_Read>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f832 	bl	8001d28 <I2Cx_Error>
  }
  return status;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08a      	sub	sp, #40	; 0x28
 8001cd2:	af04      	add	r7, sp, #16
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	4611      	mov	r1, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	813b      	strh	r3, [r7, #8]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	88f8      	ldrh	r0, [r7, #6]
 8001cf2:	893a      	ldrh	r2, [r7, #8]
 8001cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	4603      	mov	r3, r0
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f002 fa33 	bl	8004170 <HAL_I2C_Mem_Write>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	4619      	mov	r1, r3
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f805 	bl	8001d28 <I2Cx_Error>
  }
  return status;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f002 f9ec 	bl	8004112 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff6c 	bl	8001c18 <I2Cx_Init>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <SENSOR_IO_Init+0x10>)
 8001d4e:	f7ff ff63 	bl	8001c18 <I2Cx_Init>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000ea8 	.word	0x20000ea8

08001d5c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	460b      	mov	r3, r1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	79f9      	ldrb	r1, [r7, #7]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	1d7b      	adds	r3, r7, #5
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <SENSOR_IO_Write+0x30>)
 8001d80:	f7ff ffa5 	bl	8001cce <I2Cx_WriteMultiple>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000ea8 	.word	0x20000ea8

08001d90 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	79f9      	ldrb	r1, [r7, #7]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	f107 030f 	add.w	r3, r7, #15
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <SENSOR_IO_Read+0x38>)
 8001db8:	f7ff ff5c 	bl	8001c74 <I2Cx_ReadMultiple>

  return read_value;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000ea8 	.word	0x20000ea8

08001dcc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	603a      	str	r2, [r7, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	71bb      	strb	r3, [r7, #6]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	79f9      	ldrb	r1, [r7, #7]
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2301      	movs	r3, #1
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <SENSOR_IO_ReadMultiple+0x38>)
 8001df4:	f7ff ff3e 	bl	8001c74 <I2Cx_ReadMultiple>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b29b      	uxth	r3, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000ea8 	.word	0x20000ea8

08001e08 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001e12:	2300      	movs	r3, #0
 8001e14:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <BSP_ACCELERO_Init+0x74>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4798      	blx	r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b6a      	cmp	r3, #106	; 0x6a
 8001e20:	d002      	beq.n	8001e28 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e024      	b.n	8001e72 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <BSP_ACCELERO_Init+0x78>)
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <BSP_ACCELERO_Init+0x74>)
 8001e2c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001e2e:	2330      	movs	r3, #48	; 0x30
 8001e30:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001e36:	2300      	movs	r3, #0
 8001e38:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e3a:	2340      	movs	r3, #64	; 0x40
 8001e3c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001e46:	797a      	ldrb	r2, [r7, #5]
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e50:	7a3b      	ldrb	r3, [r7, #8]
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <BSP_ACCELERO_Init+0x78>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	89ba      	ldrh	r2, [r7, #12]
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4798      	blx	r3
  }  

  return ret;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000080 	.word	0x20000080
 8001e80:	20000efc 	.word	0x20000efc

08001e84 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000efc 	.word	0x20000efc

08001eb4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <BSP_HSENSOR_Init+0x38>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	20be      	movs	r0, #190	; 0xbe
 8001ec0:	4798      	blx	r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2bbc      	cmp	r3, #188	; 0xbc
 8001ec6:	d002      	beq.n	8001ece <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	e009      	b.n	8001ee2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <BSP_HSENSOR_Init+0x3c>)
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <BSP_HSENSOR_Init+0x38>)
 8001ed2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <BSP_HSENSOR_Init+0x3c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	20be      	movs	r0, #190	; 0xbe
 8001edc:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001ee2:	687b      	ldr	r3, [r7, #4]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000024 	.word	0x20000024
 8001ef0:	20000f00 	.word	0x20000f00

08001ef4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <BSP_MAGNETO_Init+0x50>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4798      	blx	r3
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b3d      	cmp	r3, #61	; 0x3d
 8001f08:	d002      	beq.n	8001f10 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e013      	b.n	8001f38 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <BSP_MAGNETO_Init+0x54>)
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <BSP_MAGNETO_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001f16:	2358      	movs	r3, #88	; 0x58
 8001f18:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001f22:	2308      	movs	r3, #8
 8001f24:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <BSP_MAGNETO_Init+0x54>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	463a      	mov	r2, r7
 8001f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f36:	4798      	blx	r3
  } 

  return ret;  
 8001f38:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000040 	.word	0x20000040
 8001f48:	20000f04 	.word	0x20000f04

08001f4c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000f04 	.word	0x20000f04

08001f7c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <BSP_PSENSOR_Init+0x38>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	20ba      	movs	r0, #186	; 0xba
 8001f88:	4798      	blx	r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2bb1      	cmp	r3, #177	; 0xb1
 8001f8e:	d002      	beq.n	8001f96 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	e009      	b.n	8001faa <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <BSP_PSENSOR_Init+0x3c>)
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <BSP_PSENSOR_Init+0x38>)
 8001f9a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <BSP_PSENSOR_Init+0x3c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	20ba      	movs	r0, #186	; 0xba
 8001fa4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000074 	.word	0x20000074
 8001fb8:	20000f08 	.word	0x20000f08

08001fbc <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <BSP_PSENSOR_ReadPressure+0x18>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	20ba      	movs	r0, #186	; 0xba
 8001fc8:	4798      	blx	r3
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
}
 8001fce:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000f08 	.word	0x20000f08

08001fd8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <BSP_QSPI_Init+0xf8>)
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8001fe4:	4839      	ldr	r0, [pc, #228]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8001fe6:	f002 feeb 	bl	8004dc0 <HAL_OSPI_DeInit>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e067      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001ff4:	f000 f990 	bl	8002318 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8001ff8:	4b34      	ldr	r3, [pc, #208]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002006:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002010:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8002030:	461a      	mov	r2, r3
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002034:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002038:	2201      	movs	r2, #1
 800203a:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800204a:	2204      	movs	r2, #4
 800204c:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <BSP_QSPI_Init+0xf4>)
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002068:	4818      	ldr	r0, [pc, #96]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800206a:	f002 fdff 	bl	8004c6c <HAL_OSPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e025      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8002078:	4814      	ldr	r0, [pc, #80]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800207a:	f000 f98d 	bl	8002398 <QSPI_ResetMemory>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002084:	2304      	movs	r3, #4
 8002086:	e01d      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002088:	2101      	movs	r1, #1
 800208a:	4810      	ldr	r0, [pc, #64]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800208c:	f000 fa72 	bl	8002574 <QSPI_QuadMode>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e014      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800209a:	2101      	movs	r1, #1
 800209c:	480b      	ldr	r0, [pc, #44]	; (80020cc <BSP_QSPI_Init+0xf4>)
 800209e:	f000 fb15 	bl	80026cc <QSPI_HighPerfMode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00b      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <BSP_QSPI_Init+0xf4>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <BSP_QSPI_Init+0xf4>)
 80020b4:	f002 fdda 	bl	8004c6c <HAL_OSPI_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000f0c 	.word	0x20000f0c
 80020d0:	a0001000 	.word	0xa0001000

080020d4 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b098      	sub	sp, #96	; 0x60
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80020e8:	23eb      	movs	r3, #235	; 0xeb
 80020ea:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80020fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800210c:	23aa      	movs	r3, #170	; 0xaa
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8002110:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8002116:	2300      	movs	r3, #0
 8002118:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800211e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800212c:	2304      	movs	r3, #4
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002134:	2300      	movs	r3, #0
 8002136:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4619      	mov	r1, r3
 8002142:	480c      	ldr	r0, [pc, #48]	; (8002174 <BSP_QSPI_Read+0xa0>)
 8002144:	f002 fe63 	bl	8004e0e <HAL_OSPI_Command>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00b      	b.n	800216a <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4806      	ldr	r0, [pc, #24]	; (8002174 <BSP_QSPI_Read+0xa0>)
 800215a:	f002 ff4c 	bl	8004ff6 <HAL_OSPI_Receive>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3760      	adds	r7, #96	; 0x60
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000f0c 	.word	0x20000f0c

08002178 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b09c      	sub	sp, #112	; 0x70
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800218c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800218e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d901      	bls.n	800219a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80021ae:	2338      	movs	r3, #56	; 0x38
 80021b0:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80021be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80021c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80021d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80021e4:	2300      	movs	r3, #0
 80021e6:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80021e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80021ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ee:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80021f0:	4823      	ldr	r0, [pc, #140]	; (8002280 <BSP_QSPI_Write+0x108>)
 80021f2:	f000 f918 	bl	8002426 <QSPI_WriteEnable>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e03b      	b.n	8002278 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4619      	mov	r1, r3
 800220a:	481d      	ldr	r0, [pc, #116]	; (8002280 <BSP_QSPI_Write+0x108>)
 800220c:	f002 fdff 	bl	8004e0e <HAL_OSPI_Command>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e02e      	b.n	8002278 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	4817      	ldr	r0, [pc, #92]	; (8002280 <BSP_QSPI_Write+0x108>)
 8002222:	f002 fe75 	bl	8004f10 <HAL_OSPI_Transmit>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e023      	b.n	8002278 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002230:	f241 3188 	movw	r1, #5000	; 0x1388
 8002234:	4812      	ldr	r0, [pc, #72]	; (8002280 <BSP_QSPI_Write+0x108>)
 8002236:	f000 f952 	bl	80024de <QSPI_AutoPollingMemReady>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e019      	b.n	8002278 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002244:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002248:	4413      	add	r3, r2
 800224a:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	4413      	add	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8002254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002256:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800225a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800225c:	429a      	cmp	r2, r3
 800225e:	d203      	bcs.n	8002268 <BSP_QSPI_Write+0xf0>
 8002260:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	e001      	b.n	800226c <BSP_QSPI_Write+0xf4>
 8002268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226c:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800226e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002272:	429a      	cmp	r2, r3
 8002274:	d3b8      	bcc.n	80021e8 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3770      	adds	r7, #112	; 0x70
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000f0c 	.word	0x20000f0c

08002284 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b096      	sub	sp, #88	; 0x58
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8002294:	23d8      	movs	r3, #216	; 0xd8
 8002296:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80022c8:	2300      	movs	r3, #0
 80022ca:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <BSP_QSPI_Erase_Block+0x90>)
 80022ce:	f000 f8aa 	bl	8002426 <QSPI_WriteEnable>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e017      	b.n	800230c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4619      	mov	r1, r3
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <BSP_QSPI_Erase_Block+0x90>)
 80022e8:	f002 fd91 	bl	8004e0e <HAL_OSPI_Command>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00a      	b.n	800230c <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80022f6:	f640 51ac 	movw	r1, #3500	; 0xdac
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <BSP_QSPI_Erase_Block+0x90>)
 80022fc:	f000 f8ef 	bl	80024de <QSPI_AutoPollingMemReady>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3758      	adds	r7, #88	; 0x58
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000f0c 	.word	0x20000f0c

08002318 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6513      	str	r3, [r2, #80]	; 0x50
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <BSP_QSPI_MspInit+0x78>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8002366:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800236a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002378:	230a      	movs	r3, #10
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4619      	mov	r1, r3
 8002382:	4804      	ldr	r0, [pc, #16]	; (8002394 <BSP_QSPI_MspInit+0x7c>)
 8002384:	f001 fb76 	bl	8003a74 <HAL_GPIO_Init>
}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	48001000 	.word	0x48001000

08002398 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b096      	sub	sp, #88	; 0x58
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80023a8:	2366      	movs	r3, #102	; 0x66
 80023aa:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80023bc:	2300      	movs	r3, #0
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80023cc:	2300      	movs	r3, #0
 80023ce:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f002 fd17 	bl	8004e0e <HAL_OSPI_Command>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e019      	b.n	800241e <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80023ea:	2399      	movs	r3, #153	; 0x99
 80023ec:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f002 fd08 	bl	8004e0e <HAL_OSPI_Command>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e00a      	b.n	800241e <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002408:	f241 3188 	movw	r1, #5000	; 0x1388
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f866 	bl	80024de <QSPI_AutoPollingMemReady>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3758      	adds	r7, #88	; 0x58
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b09c      	sub	sp, #112	; 0x70
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8002436:	2306      	movs	r3, #6
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800243a:	2301      	movs	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800244a:	2300      	movs	r3, #0
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800244e:	2300      	movs	r3, #0
 8002450:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800245a:	2300      	movs	r3, #0
 800245c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f002 fcd0 	bl	8004e0e <HAL_OSPI_Command>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e02e      	b.n	80024d6 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8002478:	2302      	movs	r3, #2
 800247a:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8002484:	2310      	movs	r3, #16
 8002486:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248c:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800248e:	2305      	movs	r3, #5
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8002492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8002498:	2301      	movs	r3, #1
 800249a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f002 fcaf 	bl	8004e0e <HAL_OSPI_Command>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00d      	b.n	80024d6 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f002 fe39 	bl	800513c <HAL_OSPI_AutoPolling>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3770      	adds	r7, #112	; 0x70
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b09c      	sub	sp, #112	; 0x70
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80024f0:	2305      	movs	r3, #5
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002504:	2300      	movs	r3, #0
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800251e:	2300      	movs	r3, #0
 8002520:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8002526:	2301      	movs	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800252e:	2310      	movs	r3, #16
 8002530:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002536:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f002 fc63 	bl	8004e0e <HAL_OSPI_Command>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00c      	b.n	800256c <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f002 fdee 	bl	800513c <HAL_OSPI_AutoPolling>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3770      	adds	r7, #112	; 0x70
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b098      	sub	sp, #96	; 0x60
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002588:	2305      	movs	r3, #5
 800258a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800258c:	2301      	movs	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800259c:	2300      	movs	r3, #0
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80025a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80025b6:	2300      	movs	r3, #0
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f002 fc22 	bl	8004e0e <HAL_OSPI_Command>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e077      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025d4:	f107 030f 	add.w	r3, r7, #15
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f002 fd09 	bl	8004ff6 <HAL_OSPI_Receive>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06a      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff19 	bl	8002426 <QSPI_WriteEnable>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e062      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260a:	b2db      	uxtb	r3, r3
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e004      	b.n	800261a <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002616:	b2db      	uxtb	r3, r3
 8002618:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f002 fbf0 	bl	8004e0e <HAL_OSPI_Command>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e045      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002638:	f107 030f 	add.w	r3, r7, #15
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f002 fc64 	bl	8004f10 <HAL_OSPI_Transmit>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e038      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002652:	f241 3188 	movw	r1, #5000	; 0x1388
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff41 	bl	80024de <QSPI_AutoPollingMemReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e02e      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8002666:	2305      	movs	r3, #5
 8002668:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f002 fbca 	bl	8004e0e <HAL_OSPI_Command>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e01f      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002684:	f107 030f 	add.w	r3, r7, #15
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f002 fcb1 	bl	8004ff6 <HAL_OSPI_Receive>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e012      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <QSPI_QuadMode+0x13a>
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3760      	adds	r7, #96	; 0x60
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b098      	sub	sp, #96	; 0x60
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80026e0:	2305      	movs	r3, #5
 80026e2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80026f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800270e:	2300      	movs	r3, #0
 8002710:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f002 fb76 	bl	8004e0e <HAL_OSPI_Command>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e09a      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f002 fc5d 	bl	8004ff6 <HAL_OSPI_Receive>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08d      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002746:	2315      	movs	r3, #21
 8002748:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800274a:	2302      	movs	r3, #2
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f002 fb58 	bl	8004e0e <HAL_OSPI_Command>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e07c      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	3301      	adds	r3, #1
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f002 fc3e 	bl	8004ff6 <HAL_OSPI_Receive>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e06e      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff fe4e 	bl	8002426 <QSPI_WriteEnable>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e066      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	73bb      	strb	r3, [r7, #14]
 80027a4:	e004      	b.n	80027b0 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	f023 0302 	bic.w	r3, r3, #2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80027b0:	2301      	movs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80027b4:	2303      	movs	r3, #3
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f002 fb23 	bl	8004e0e <HAL_OSPI_Command>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e047      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f002 fb97 	bl	8004f10 <HAL_OSPI_Transmit>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03a      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80027ec:	f241 3188 	movw	r1, #5000	; 0x1388
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fe74 	bl	80024de <QSPI_AutoPollingMemReady>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e030      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002800:	2315      	movs	r3, #21
 8002802:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002804:	2302      	movs	r3, #2
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f002 fafb 	bl	8004e0e <HAL_OSPI_Command>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e01f      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f002 fbe2 	bl	8004ff6 <HAL_OSPI_Receive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e012      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800283c:	7b7b      	ldrb	r3, [r7, #13]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <QSPI_HighPerfMode+0x180>
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3760      	adds	r7, #96	; 0x60
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <BSP_TSENSOR_Init+0x30>)
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <BSP_TSENSOR_Init+0x34>)
 800287a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800287c:	f7ff fa64 	bl	8001d48 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <BSP_TSENSOR_Init+0x30>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	20be      	movs	r0, #190	; 0xbe
 800288a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002890:	79fb      	ldrb	r3, [r7, #7]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000f5c 	.word	0x20000f5c
 80028a0:	20000030 	.word	0x20000030

080028a4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <BSP_TSENSOR_ReadTemp+0x18>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	20be      	movs	r0, #190	; 0xbe
 80028b0:	4798      	blx	r3
 80028b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000f5c 	.word	0x20000f5c

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_MspInit+0x4c>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6613      	str	r3, [r2, #96]	; 0x60
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_MspInit+0x4c>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_MspInit+0x4c>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_MspInit+0x4c>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	210f      	movs	r1, #15
 80028fa:	f06f 0001 	mvn.w	r0, #1
 80028fe:	f001 f88f 	bl	8003a20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ae      	sub	sp, #184	; 0xb8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	2294      	movs	r2, #148	; 0x94
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f008 f948 	bl	800abc6 <memset>
  if(hi2c->Instance==I2C2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_I2C_MspInit+0xb0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d13b      	bne.n	80029b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002944:	2300      	movs	r3, #0
 8002946:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f004 f9d7 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002958:	f7ff f8f8 	bl	8001b4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800297c:	2312      	movs	r3, #18
 800297e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800298e:	2304      	movs	r3, #4
 8002990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002998:	4619      	mov	r1, r3
 800299a:	480b      	ldr	r0, [pc, #44]	; (80029c8 <HAL_I2C_MspInit+0xb8>)
 800299c:	f001 f86a 	bl	8003a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 80029a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_I2C_MspInit+0xb4>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	37b8      	adds	r7, #184	; 0xb8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40005800 	.word	0x40005800
 80029c4:	40021000 	.word	0x40021000
 80029c8:	48000400 	.word	0x48000400

080029cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_I2C_MspDeInit+0x3c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10f      	bne.n	80029fe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_I2C_MspDeInit+0x40>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_I2C_MspDeInit+0x40>)
 80029e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80029ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ee:	4808      	ldr	r0, [pc, #32]	; (8002a10 <HAL_I2C_MspDeInit+0x44>)
 80029f0:	f001 f9d2 	bl	8003d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80029f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_I2C_MspDeInit+0x44>)
 80029fa:	f001 f9cd 	bl	8003d98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40005800 	.word	0x40005800
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	48000400 	.word	0x48000400

08002a14 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0b0      	sub	sp, #192	; 0xc0
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	2294      	movs	r2, #148	; 0x94
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f008 f8c6 	bl	800abc6 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_OSPI_MspInit+0xcc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d149      	bne.n	8002ad8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a50:	f107 0318 	add.w	r3, r7, #24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 f953 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002a60:	f7ff f874 	bl	8001b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6513      	str	r3, [r2, #80]	; 0x50
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_OSPI_MspInit+0xd0>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002aac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002ac6:	230a      	movs	r3, #10
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_OSPI_MspInit+0xd4>)
 8002ad4:	f000 ffce 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	37c0      	adds	r7, #192	; 0xc0
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	a0001000 	.word	0xa0001000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48001000 	.word	0x48001000

08002aec <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_OSPI_MspDeInit+0x3c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d110      	bne.n	8002b20 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_OSPI_MspDeInit+0x40>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_OSPI_MspDeInit+0x40>)
 8002b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_OSPI_MspDeInit+0x40>)
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_OSPI_MspDeInit+0x40>)
 8002b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b14:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002b16:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <HAL_OSPI_MspDeInit+0x44>)
 8002b1c:	f001 f93c 	bl	8003d98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	a0001000 	.word	0xa0001000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	48001000 	.word	0x48001000

08002b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b0b0      	sub	sp, #192	; 0xc0
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b4c:	f107 0318 	add.w	r3, r7, #24
 8002b50:	2294      	movs	r2, #148	; 0x94
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f008 f836 	bl	800abc6 <memset>
  if(huart->Instance==USART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_UART_MspInit+0xf4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d15d      	bne.n	8002c20 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b6c:	f107 0318 	add.w	r3, r7, #24
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f8c5 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b7c:	f7fe ffe6 	bl	8001b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_UART_MspInit+0xf8>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be2:	2307      	movs	r3, #7
 8002be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f000 ff3f 	bl	8003a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bf6:	2340      	movs	r3, #64	; 0x40
 8002bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4805      	ldr	r0, [pc, #20]	; (8002c30 <HAL_UART_MspInit+0xfc>)
 8002c1c:	f000 ff2a 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c20:	bf00      	nop
 8002c22:	37c0      	adds	r7, #192	; 0xc0
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	48000400 	.word	0x48000400

08002c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	; 0x38
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_InitTick+0xe0>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_InitTick+0xe0>)
 8002c48:	f043 0310 	orr.w	r3, r3, #16
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <HAL_InitTick+0xe0>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c5a:	f107 0210 	add.w	r2, r7, #16
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 ff59 	bl	8006b1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c74:	f003 ff26 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 8002c78:	6378      	str	r0, [r7, #52]	; 0x34
 8002c7a:	e004      	b.n	8002c86 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c7c:	f003 ff22 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 8002c80:	4603      	mov	r3, r0
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <HAL_InitTick+0xe4>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9b      	lsrs	r3, r3, #18
 8002c90:	3b01      	subs	r3, #1
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_InitTick+0xe8>)
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_InitTick+0xec>)
 8002c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_InitTick+0xe8>)
 8002c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_InitTick+0xe8>)
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_InitTick+0xe8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_InitTick+0xe8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_InitTick+0xe8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002cba:	4818      	ldr	r0, [pc, #96]	; (8002d1c <HAL_InitTick+0xe8>)
 8002cbc:	f004 fd38 	bl	8007730 <HAL_TIM_Base_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11b      	bne.n	8002d06 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cce:	4813      	ldr	r0, [pc, #76]	; (8002d1c <HAL_InitTick+0xe8>)
 8002cd0:	f004 fd90 	bl	80077f4 <HAL_TIM_Base_Start_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d111      	bne.n	8002d06 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ce2:	2036      	movs	r0, #54	; 0x36
 8002ce4:	f000 feb8 	bl	8003a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	d808      	bhi.n	8002d00 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	2036      	movs	r0, #54	; 0x36
 8002cf4:	f000 fe94 	bl	8003a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_InitTick+0xf0>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e002      	b.n	8002d06 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3738      	adds	r7, #56	; 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	20000f60 	.word	0x20000f60
 8002d20:	40001000 	.word	0x40001000
 8002d24:	200000b4 	.word	0x200000b4

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <NMI_Handler+0x4>

08002d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <HardFault_Handler+0x4>

08002d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <MemManage_Handler+0x4>

08002d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8002d58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d5c:	f001 f926 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <TIM6_DAC_IRQHandler+0x10>)
 8002d6a:	f004 fdb3 	bl	80078d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000f60 	.word	0x20000f60

08002d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return 1;
 8002d7c:	2301      	movs	r3, #1
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_kill>:

int _kill(int pid, int sig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d92:	f007 ff7b 	bl	800ac8c <__errno>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2216      	movs	r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_exit>:

void _exit (int status)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ffe7 	bl	8002d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dba:	e7fe      	b.n	8002dba <_exit+0x12>

08002dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e00a      	b.n	8002de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dce:	f3af 8000 	nop.w
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60ba      	str	r2, [r7, #8]
 8002dda:	b2ca      	uxtb	r2, r1
 8002ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dbf0      	blt.n	8002dce <_read+0x12>
  }

  return len;
 8002dec:	687b      	ldr	r3, [r7, #4]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e009      	b.n	8002e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	60ba      	str	r2, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dbf1      	blt.n	8002e08 <_write+0x12>
  }
  return len;
 8002e24:	687b      	ldr	r3, [r7, #4]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <_close>:

int _close(int file)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e56:	605a      	str	r2, [r3, #4]
  return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_isatty>:

int _isatty(int file)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6e:	2301      	movs	r3, #1
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <_sbrk+0x5c>)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <_sbrk+0x60>)
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <_sbrk+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <_sbrk+0x64>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <_sbrk+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec8:	f007 fee0 	bl	800ac8c <__errno>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e009      	b.n	8002eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <_sbrk+0x64>)
 8002ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200a0000 	.word	0x200a0000
 8002ef8:	00000400 	.word	0x00000400
 8002efc:	20000fac 	.word	0x20000fac
 8002f00:	200025e0 	.word	0x200025e0

08002f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f2c:	f7ff ffea 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f32:	490d      	ldr	r1, [pc, #52]	; (8002f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f34:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <LoopForever+0xe>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <LoopForever+0x16>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f56:	f007 fe9f 	bl	800ac98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f5a:	f7fe f9f1 	bl	8001340 <main>

08002f5e <LoopForever>:

LoopForever:
    b LoopForever
 8002f5e:	e7fe      	b.n	8002f5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8002f6c:	0800d2ec 	.word	0x0800d2ec
  ldr r2, =_sbss
 8002f70:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002f74:	200025dc 	.word	0x200025dc

08002f78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC1_IRQHandler>

08002f7a <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2120      	movs	r1, #32
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe ff00 	bl	8001d90 <SENSOR_IO_Read>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fba:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fec9 	bl	8001d5c <SENSOR_IO_Write>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002fe0:	f7fe feb2 	bl	8001d48 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	210f      	movs	r1, #15
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fed0 	bl	8001d90 <SENSOR_IO_Read>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	b2d8      	uxtb	r0, r3
 800300e:	f107 020c 	add.w	r2, r7, #12
 8003012:	2302      	movs	r3, #2
 8003014:	21b0      	movs	r1, #176	; 0xb0
 8003016:	f7fe fed9 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800301a:	7b3b      	ldrb	r3, [r7, #12]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003022:	7b7b      	ldrb	r3, [r7, #13]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	f107 020c 	add.w	r2, r7, #12
 8003032:	2302      	movs	r3, #2
 8003034:	21b6      	movs	r1, #182	; 0xb6
 8003036:	f7fe fec9 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800303a:	7b7b      	ldrb	r3, [r7, #13]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	b21a      	sxth	r2, r3
 8003040:	7b3b      	ldrb	r3, [r7, #12]
 8003042:	b21b      	sxth	r3, r3
 8003044:	4313      	orrs	r3, r2
 8003046:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	b2d8      	uxtb	r0, r3
 800304c:	f107 020c 	add.w	r2, r7, #12
 8003050:	2302      	movs	r3, #2
 8003052:	21ba      	movs	r1, #186	; 0xba
 8003054:	f7fe feba 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003058:	7b7b      	ldrb	r3, [r7, #13]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b21a      	sxth	r2, r3
 800305e:	7b3b      	ldrb	r3, [r7, #12]
 8003060:	b21b      	sxth	r3, r3
 8003062:	4313      	orrs	r3, r2
 8003064:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2d8      	uxtb	r0, r3
 800306a:	f107 020c 	add.w	r2, r7, #12
 800306e:	2302      	movs	r3, #2
 8003070:	21a8      	movs	r1, #168	; 0xa8
 8003072:	f7fe feab 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003076:	7b7b      	ldrb	r3, [r7, #13]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b21a      	sxth	r2, r3
 800307c:	7b3b      	ldrb	r3, [r7, #12]
 800307e:	b21b      	sxth	r3, r3
 8003080:	4313      	orrs	r3, r2
 8003082:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003084:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003088:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003096:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800309a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e2:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003130 <HTS221_H_ReadHumidity+0x130>
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	dd01      	ble.n	80030fc <HTS221_H_ReadHumidity+0xfc>
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HTS221_H_ReadHumidity+0x134>)
 80030fa:	e00a      	b.n	8003112 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80030fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d502      	bpl.n	8003110 <HTS221_H_ReadHumidity+0x110>
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e000      	b.n	8003112 <HTS221_H_ReadHumidity+0x112>
 8003110:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003112:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003114:	edd7 7a04 	vldr	s15, [r7, #16]
 8003118:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800311c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003120:	eef0 7a66 	vmov.f32	s15, s13
}
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	447a0000 	.word	0x447a0000
 8003134:	447a0000 	.word	0x447a0000

08003138 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2120      	movs	r1, #32
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fe20 	bl	8001d90 <SENSOR_IO_Read>
 8003150:	4603      	mov	r3, r0
 8003152:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800317a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	2120      	movs	r1, #32
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fde9 	bl	8001d5c <SENSOR_IO_Write>
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	f107 0208 	add.w	r2, r7, #8
 80031a4:	2302      	movs	r3, #2
 80031a6:	21b2      	movs	r1, #178	; 0xb2
 80031a8:	f7fe fe10 	bl	8001dcc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2135      	movs	r1, #53	; 0x35
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fdec 	bl	8001d90 <SENSOR_IO_Read>
 80031b8:	4603      	mov	r3, r0
 80031ba:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	7a3b      	ldrb	r3, [r7, #8]
 80031ca:	b21b      	sxth	r3, r3
 80031cc:	4313      	orrs	r3, r2
 80031ce:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	019b      	lsls	r3, r3, #6
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	b21a      	sxth	r2, r3
 80031dc:	7a7b      	ldrb	r3, [r7, #9]
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80031e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031e8:	10db      	asrs	r3, r3, #3
 80031ea:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80031ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031f0:	10db      	asrs	r3, r3, #3
 80031f2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	b2d8      	uxtb	r0, r3
 80031f8:	f107 0208 	add.w	r2, r7, #8
 80031fc:	2304      	movs	r3, #4
 80031fe:	21bc      	movs	r1, #188	; 0xbc
 8003200:	f7fe fde4 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	7a3b      	ldrb	r3, [r7, #8]
 800320c:	b21b      	sxth	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	7abb      	ldrb	r3, [r7, #10]
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	b2d8      	uxtb	r0, r3
 8003224:	f107 0208 	add.w	r2, r7, #8
 8003228:	2302      	movs	r3, #2
 800322a:	21aa      	movs	r1, #170	; 0xaa
 800322c:	f7fe fdce 	bl	8001dcc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003230:	7a7b      	ldrb	r3, [r7, #9]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	b21a      	sxth	r2, r3
 8003236:	7a3b      	ldrb	r3, [r7, #8]
 8003238:	b21b      	sxth	r3, r3
 800323a:	4313      	orrs	r3, r2
 800323c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800323e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003242:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003250:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003254:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003262:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003266:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800326a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003280:	ee07 3a90 	vmov	s15, r3
 8003284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	ee07 3a90 	vmov	s15, r3
}
 8003296:	eeb0 0a67 	vmov.f32	s0, s15
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	463b      	mov	r3, r7
 80032a8:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80032ac:	783b      	ldrb	r3, [r7, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	2120      	movs	r1, #32
 80032b2:	203c      	movs	r0, #60	; 0x3c
 80032b4:	f7fe fd52 	bl	8001d5c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	461a      	mov	r2, r3
 80032bc:	2121      	movs	r1, #33	; 0x21
 80032be:	203c      	movs	r0, #60	; 0x3c
 80032c0:	f7fe fd4c 	bl	8001d5c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80032c4:	78bb      	ldrb	r3, [r7, #2]
 80032c6:	461a      	mov	r2, r3
 80032c8:	2122      	movs	r1, #34	; 0x22
 80032ca:	203c      	movs	r0, #60	; 0x3c
 80032cc:	f7fe fd46 	bl	8001d5c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	461a      	mov	r2, r3
 80032d4:	2123      	movs	r1, #35	; 0x23
 80032d6:	203c      	movs	r0, #60	; 0x3c
 80032d8:	f7fe fd40 	bl	8001d5c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80032dc:	793b      	ldrb	r3, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	2124      	movs	r1, #36	; 0x24
 80032e2:	203c      	movs	r0, #60	; 0x3c
 80032e4:	f7fe fd3a 	bl	8001d5c <SENSOR_IO_Write>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80032f6:	2300      	movs	r3, #0
 80032f8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80032fa:	2122      	movs	r1, #34	; 0x22
 80032fc:	203c      	movs	r0, #60	; 0x3c
 80032fe:	f7fe fd47 	bl	8001d90 <SENSOR_IO_Read>
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f023 0303 	bic.w	r3, r3, #3
 800330c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	f043 0303 	orr.w	r3, r3, #3
 8003314:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	461a      	mov	r2, r3
 800331a:	2122      	movs	r1, #34	; 0x22
 800331c:	203c      	movs	r0, #60	; 0x3c
 800331e:	f7fe fd1d 	bl	8001d5c <SENSOR_IO_Write>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800332e:	f7fe fd0b 	bl	8001d48 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8003332:	210f      	movs	r1, #15
 8003334:	203c      	movs	r0, #60	; 0x3c
 8003336:	f7fe fd2b 	bl	8001d90 <SENSOR_IO_Read>
 800333a:	4603      	mov	r3, r0
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}

08003340 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800334e:	2122      	movs	r1, #34	; 0x22
 8003350:	203c      	movs	r0, #60	; 0x3c
 8003352:	f7fe fd1d 	bl	8001d90 <SENSOR_IO_Read>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	f023 0320 	bic.w	r3, r3, #32
 8003360:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	f043 0320 	orr.w	r3, r3, #32
 800336e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	461a      	mov	r2, r3
 8003374:	2122      	movs	r1, #34	; 0x22
 8003376:	203c      	movs	r0, #60	; 0x3c
 8003378:	f7fe fcf0 	bl	8001d5c <SENSOR_IO_Write>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800339a:	2121      	movs	r1, #33	; 0x21
 800339c:	203c      	movs	r0, #60	; 0x3c
 800339e:	f7fe fcf7 	bl	8001d90 <SENSOR_IO_Read>
 80033a2:	4603      	mov	r3, r0
 80033a4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80033a6:	f107 0208 	add.w	r2, r7, #8
 80033aa:	2306      	movs	r3, #6
 80033ac:	21a8      	movs	r1, #168	; 0xa8
 80033ae:	203c      	movs	r0, #60	; 0x3c
 80033b0:	f7fe fd0c 	bl	8001dcc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e01c      	b.n	80033f4 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	3301      	adds	r3, #1
 80033c0:	3320      	adds	r3, #32
 80033c2:	443b      	add	r3, r7
 80033c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	7ffb      	ldrb	r3, [r7, #31]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	3320      	adds	r3, #32
 80033d4:	443b      	add	r3, r7
 80033d6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4413      	add	r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	b212      	sxth	r2, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	3320      	adds	r3, #32
 80033e8:	443b      	add	r3, r7
 80033ea:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	3301      	adds	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d9df      	bls.n	80033ba <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003400:	2b60      	cmp	r3, #96	; 0x60
 8003402:	d013      	beq.n	800342c <LIS3MDL_MagReadXYZ+0xa8>
 8003404:	2b60      	cmp	r3, #96	; 0x60
 8003406:	dc14      	bgt.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d00c      	beq.n	8003426 <LIS3MDL_MagReadXYZ+0xa2>
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	dc10      	bgt.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <LIS3MDL_MagReadXYZ+0x96>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d003      	beq.n	8003420 <LIS3MDL_MagReadXYZ+0x9c>
 8003418:	e00b      	b.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <LIS3MDL_MagReadXYZ+0xfc>)
 800341c:	61bb      	str	r3, [r7, #24]
    break;
 800341e:	e008      	b.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <LIS3MDL_MagReadXYZ+0x100>)
 8003422:	61bb      	str	r3, [r7, #24]
    break;
 8003424:	e005      	b.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <LIS3MDL_MagReadXYZ+0x104>)
 8003428:	61bb      	str	r3, [r7, #24]
    break;
 800342a:	e002      	b.n	8003432 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <LIS3MDL_MagReadXYZ+0x108>)
 800342e:	61bb      	str	r3, [r7, #24]
    break;    
 8003430:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e01a      	b.n	800346e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003438:	7ffb      	ldrb	r3, [r7, #31]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	3320      	adds	r3, #32
 800343e:	443b      	add	r3, r7
 8003440:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800344c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003454:	7ffb      	ldrb	r3, [r7, #31]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	ee17 2a90 	vmov	r2, s15
 8003464:	b212      	sxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	3301      	adds	r3, #1
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	7ffb      	ldrb	r3, [r7, #31]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d9e1      	bls.n	8003438 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	3e0f5c29 	.word	0x3e0f5c29
 8003484:	3e947ae1 	.word	0x3e947ae1
 8003488:	3edc28f6 	.word	0x3edc28f6
 800348c:	3f147ae1 	.word	0x3f147ae1

08003490 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f879 	bl	8003594 <LPS22HB_Init>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80034b8:	f7fe fc46 	bl	8001d48 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	210f      	movs	r1, #15
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fc64 	bl	8001d90 <SENSOR_IO_Read>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	74fb      	strb	r3, [r7, #19]
 80034ea:	e013      	b.n	8003514 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	3328      	adds	r3, #40	; 0x28
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	7cfc      	ldrb	r4, [r7, #19]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7fe fc48 	bl	8001d90 <SENSOR_IO_Read>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	f104 0318 	add.w	r3, r4, #24
 8003508:	443b      	add	r3, r7
 800350a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	3301      	adds	r3, #1
 8003512:	74fb      	strb	r3, [r7, #19]
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d9e8      	bls.n	80034ec <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800351a:	2300      	movs	r3, #0
 800351c:	74fb      	strb	r3, [r7, #19]
 800351e:	e00f      	b.n	8003540 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	3318      	adds	r3, #24
 8003524:	443b      	add	r3, r7
 8003526:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800352a:	461a      	mov	r2, r3
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	3301      	adds	r3, #1
 800353e:	74fb      	strb	r3, [r7, #19]
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d9ec      	bls.n	8003520 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003556:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2264      	movs	r2, #100	; 0x64
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	da01      	bge.n	800356c <LPS22HB_P_ReadPressure+0x94>
 8003568:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800356c:	131b      	asrs	r3, r3, #12
 800356e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003590 <LPS22HB_P_ReadPressure+0xb8>
 800357e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003582:	eef0 7a66 	vmov.f32	s15, s13
}
 8003586:	eeb0 0a67 	vmov.f32	s0, s15
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	42c80000 	.word	0x42c80000

08003594 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	211a      	movs	r1, #26
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fbf3 	bl	8001d90 <SENSOR_IO_Read>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	211a      	movs	r1, #26
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fbc8 	bl	8001d5c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2110      	movs	r1, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fbdc 	bl	8001d90 <SENSOR_IO_Read>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80035ea:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	f023 0302 	bic.w	r3, r3, #2
 80035f2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	2110      	movs	r1, #16
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fba9 	bl	8001d5c <SENSOR_IO_Write>
}  
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003620:	2110      	movs	r1, #16
 8003622:	20d4      	movs	r0, #212	; 0xd4
 8003624:	f7fe fbb4 	bl	8001d90 <SENSOR_IO_Read>
 8003628:	4603      	mov	r3, r0
 800362a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003638:	7bba      	ldrb	r2, [r7, #14]
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	4313      	orrs	r3, r2
 800363e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	461a      	mov	r2, r3
 8003644:	2110      	movs	r1, #16
 8003646:	20d4      	movs	r0, #212	; 0xd4
 8003648:	f7fe fb88 	bl	8001d5c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800364c:	2112      	movs	r1, #18
 800364e:	20d4      	movs	r0, #212	; 0xd4
 8003650:	f7fe fb9e 	bl	8001d90 <SENSOR_IO_Read>
 8003654:	4603      	mov	r3, r0
 8003656:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003666:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003668:	7bba      	ldrb	r2, [r7, #14]
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	4313      	orrs	r3, r2
 800366e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	461a      	mov	r2, r3
 8003674:	2112      	movs	r1, #18
 8003676:	20d4      	movs	r0, #212	; 0xd4
 8003678:	f7fe fb70 	bl	8001d5c <SENSOR_IO_Write>
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800368a:	2300      	movs	r3, #0
 800368c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800368e:	2110      	movs	r1, #16
 8003690:	20d4      	movs	r0, #212	; 0xd4
 8003692:	f7fe fb7d 	bl	8001d90 <SENSOR_IO_Read>
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	461a      	mov	r2, r3
 80036a6:	2110      	movs	r1, #16
 80036a8:	20d4      	movs	r0, #212	; 0xd4
 80036aa:	f7fe fb57 	bl	8001d5c <SENSOR_IO_Write>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80036ba:	f7fe fb45 	bl	8001d48 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80036be:	210f      	movs	r1, #15
 80036c0:	20d4      	movs	r0, #212	; 0xd4
 80036c2:	f7fe fb65 	bl	8001d90 <SENSOR_IO_Read>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}

080036cc <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80036da:	2115      	movs	r1, #21
 80036dc:	20d4      	movs	r0, #212	; 0xd4
 80036de:	f7fe fb57 	bl	8001d90 <SENSOR_IO_Read>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	f023 0310 	bic.w	r3, r3, #16
 80036ec:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	f043 0310 	orr.w	r3, r3, #16
 80036fa:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	461a      	mov	r2, r3
 8003700:	2115      	movs	r1, #21
 8003702:	20d4      	movs	r0, #212	; 0xd4
 8003704:	f7fe fb2a 	bl	8001d5c <SENSOR_IO_Write>
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003718:	2300      	movs	r3, #0
 800371a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003726:	2110      	movs	r1, #16
 8003728:	20d4      	movs	r0, #212	; 0xd4
 800372a:	f7fe fb31 	bl	8001d90 <SENSOR_IO_Read>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003732:	f107 0208 	add.w	r2, r7, #8
 8003736:	2306      	movs	r3, #6
 8003738:	2128      	movs	r1, #40	; 0x28
 800373a:	20d4      	movs	r0, #212	; 0xd4
 800373c:	f7fe fb46 	bl	8001dcc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003740:	2300      	movs	r3, #0
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e01c      	b.n	8003780 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003746:	7ffb      	ldrb	r3, [r7, #31]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	3301      	adds	r3, #1
 800374c:	3320      	adds	r3, #32
 800374e:	443b      	add	r3, r7
 8003750:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003754:	b29b      	uxth	r3, r3
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	b29a      	uxth	r2, r3
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	3320      	adds	r3, #32
 8003760:	443b      	add	r3, r7
 8003762:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003766:	b29b      	uxth	r3, r3
 8003768:	4413      	add	r3, r2
 800376a:	b29a      	uxth	r2, r3
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	b212      	sxth	r2, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	3320      	adds	r3, #32
 8003774:	443b      	add	r3, r7
 8003776:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	3301      	adds	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	7ffb      	ldrb	r3, [r7, #31]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d9df      	bls.n	8003746 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d829      	bhi.n	80037e4 <LSM6DSL_AccReadXYZ+0xd4>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <LSM6DSL_AccReadXYZ+0x88>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037e5 	.word	0x080037e5
 80037a0:	080037e5 	.word	0x080037e5
 80037a4:	080037e5 	.word	0x080037e5
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037e5 	.word	0x080037e5
 80037b0:	080037e5 	.word	0x080037e5
 80037b4:	080037e5 	.word	0x080037e5
 80037b8:	080037d3 	.word	0x080037d3
 80037bc:	080037e5 	.word	0x080037e5
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	080037e5 	.word	0x080037e5
 80037c8:	080037d9 	.word	0x080037d9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <LSM6DSL_AccReadXYZ+0x120>)
 80037ce:	61bb      	str	r3, [r7, #24]
    break;
 80037d0:	e008      	b.n	80037e4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <LSM6DSL_AccReadXYZ+0x124>)
 80037d4:	61bb      	str	r3, [r7, #24]
    break;
 80037d6:	e005      	b.n	80037e4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <LSM6DSL_AccReadXYZ+0x128>)
 80037da:	61bb      	str	r3, [r7, #24]
    break;
 80037dc:	e002      	b.n	80037e4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <LSM6DSL_AccReadXYZ+0x12c>)
 80037e0:	61bb      	str	r3, [r7, #24]
    break;    
 80037e2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e01a      	b.n	8003820 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	3320      	adds	r3, #32
 80037f0:	443b      	add	r3, r7
 80037f2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003812:	ee17 2a90 	vmov	r2, s15
 8003816:	b212      	sxth	r2, r2
 8003818:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	3301      	adds	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	7ffb      	ldrb	r3, [r7, #31]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d9e1      	bls.n	80037ea <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003826:	bf00      	nop
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	3d79db23 	.word	0x3d79db23
 8003834:	3df9db23 	.word	0x3df9db23
 8003838:	3e79db23 	.word	0x3e79db23
 800383c:	3ef9db23 	.word	0x3ef9db23

08003840 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800384a:	2003      	movs	r0, #3
 800384c:	f000 f8dd 	bl	8003a0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003850:	200f      	movs	r0, #15
 8003852:	f7ff f9ef 	bl	8002c34 <HAL_InitTick>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	e001      	b.n	8003866 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003862:	f7ff f82d 	bl	80028c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003866:	79fb      	ldrb	r3, [r7, #7]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_IncTick+0x20>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x24>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4413      	add	r3, r2
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_IncTick+0x24>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	200000b8 	.word	0x200000b8
 8003894:	20000fb0 	.word	0x20000fb0

08003898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return uwTick;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_GetTick+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000fb0 	.word	0x20000fb0

080038b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038cc:	4013      	ands	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <__NVIC_GetPriorityGrouping+0x18>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	f003 0307 	and.w	r3, r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0b      	blt.n	800393e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <__NVIC_EnableIRQ+0x38>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000e100 	.word	0xe000e100

08003950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	db0a      	blt.n	800397a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	490c      	ldr	r1, [pc, #48]	; (800399c <__NVIC_SetPriority+0x4c>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	440b      	add	r3, r1
 8003974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003978:	e00a      	b.n	8003990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <__NVIC_SetPriority+0x50>)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3b04      	subs	r3, #4
 8003988:	0112      	lsls	r2, r2, #4
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	440b      	add	r3, r1
 800398e:	761a      	strb	r2, [r3, #24]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000e100 	.word	0xe000e100
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f1c3 0307 	rsb	r3, r3, #7
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf28      	it	cs
 80039c2:	2304      	movcs	r3, #4
 80039c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d902      	bls.n	80039d4 <NVIC_EncodePriority+0x30>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3b03      	subs	r3, #3
 80039d2:	e000      	b.n	80039d6 <NVIC_EncodePriority+0x32>
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	401a      	ands	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ec:	f04f 31ff 	mov.w	r1, #4294967295
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	43d9      	mvns	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	4313      	orrs	r3, r2
         );
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff4c 	bl	80038b0 <__NVIC_SetPriorityGrouping>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a32:	f7ff ff61 	bl	80038f8 <__NVIC_GetPriorityGrouping>
 8003a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	6978      	ldr	r0, [r7, #20]
 8003a3e:	f7ff ffb1 	bl	80039a4 <NVIC_EncodePriority>
 8003a42:	4602      	mov	r2, r0
 8003a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff80 	bl	8003950 <__NVIC_SetPriority>
}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff54 	bl	8003914 <__NVIC_EnableIRQ>
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e166      	b.n	8003d52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8158 	beq.w	8003d4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d005      	beq.n	8003ab4 <HAL_GPIO_Init+0x40>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d130      	bne.n	8003b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aea:	2201      	movs	r2, #1
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 0201 	and.w	r2, r3, #1
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d017      	beq.n	8003b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d123      	bne.n	8003ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	6939      	ldr	r1, [r7, #16]
 8003ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0203 	and.w	r2, r3, #3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80b2 	beq.w	8003d4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	4a60      	ldr	r2, [pc, #384]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf4:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c00:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	220f      	movs	r2, #15
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c2a:	d02b      	beq.n	8003c84 <HAL_GPIO_Init+0x210>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a52      	ldr	r2, [pc, #328]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d025      	beq.n	8003c80 <HAL_GPIO_Init+0x20c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a51      	ldr	r2, [pc, #324]	; (8003d7c <HAL_GPIO_Init+0x308>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01f      	beq.n	8003c7c <HAL_GPIO_Init+0x208>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a50      	ldr	r2, [pc, #320]	; (8003d80 <HAL_GPIO_Init+0x30c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d019      	beq.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a4f      	ldr	r2, [pc, #316]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_GPIO_Init+0x200>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a4e      	ldr	r2, [pc, #312]	; (8003d88 <HAL_GPIO_Init+0x314>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00d      	beq.n	8003c70 <HAL_GPIO_Init+0x1fc>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a4d      	ldr	r2, [pc, #308]	; (8003d8c <HAL_GPIO_Init+0x318>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_GPIO_Init+0x1f4>
 8003c64:	2307      	movs	r3, #7
 8003c66:	e00e      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	e00c      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	e00a      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c70:	2305      	movs	r3, #5
 8003c72:	e008      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c74:	2304      	movs	r3, #4
 8003c76:	e006      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e004      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e002      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c84:	2300      	movs	r3, #0
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	f002 0203 	and.w	r2, r2, #3
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	4093      	lsls	r3, r2
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c96:	4937      	ldr	r1, [pc, #220]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc8:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf2:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f47f ae91 	bne.w	8003a84 <HAL_GPIO_Init+0x10>
  }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000800 	.word	0x48000800
 8003d80:	48000c00 	.word	0x48000c00
 8003d84:	48001000 	.word	0x48001000
 8003d88:	48001400 	.word	0x48001400
 8003d8c:	48001800 	.word	0x48001800
 8003d90:	48001c00 	.word	0x48001c00
 8003d94:	40010400 	.word	0x40010400

08003d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003da6:	e0c9      	b.n	8003f3c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003da8:	2201      	movs	r2, #1
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80bc 	beq.w	8003f36 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003dbe:	4a66      	ldr	r2, [pc, #408]	; (8003f58 <HAL_GPIO_DeInit+0x1c0>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003de6:	d02b      	beq.n	8003e40 <HAL_GPIO_DeInit+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a5c      	ldr	r2, [pc, #368]	; (8003f5c <HAL_GPIO_DeInit+0x1c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d025      	beq.n	8003e3c <HAL_GPIO_DeInit+0xa4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <HAL_GPIO_DeInit+0x1c8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01f      	beq.n	8003e38 <HAL_GPIO_DeInit+0xa0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a5a      	ldr	r2, [pc, #360]	; (8003f64 <HAL_GPIO_DeInit+0x1cc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d019      	beq.n	8003e34 <HAL_GPIO_DeInit+0x9c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a59      	ldr	r2, [pc, #356]	; (8003f68 <HAL_GPIO_DeInit+0x1d0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_GPIO_DeInit+0x98>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_GPIO_DeInit+0x1d4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00d      	beq.n	8003e2c <HAL_GPIO_DeInit+0x94>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_GPIO_DeInit+0x1d8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <HAL_GPIO_DeInit+0x90>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a56      	ldr	r2, [pc, #344]	; (8003f74 <HAL_GPIO_DeInit+0x1dc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_GPIO_DeInit+0x8c>
 8003e20:	2307      	movs	r3, #7
 8003e22:	e00e      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e24:	2308      	movs	r3, #8
 8003e26:	e00c      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e28:	2306      	movs	r3, #6
 8003e2a:	e00a      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e2c:	2305      	movs	r3, #5
 8003e2e:	e008      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e006      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e004      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e002      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_GPIO_DeInit+0xaa>
 8003e40:	2300      	movs	r3, #0
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	f002 0203 	and.w	r2, r2, #3
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	4093      	lsls	r3, r2
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d132      	bne.n	8003eb8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e52:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	4947      	ldr	r1, [pc, #284]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	4943      	ldr	r1, [pc, #268]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e6e:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	4940      	ldr	r1, [pc, #256]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e7c:	4b3e      	ldr	r3, [pc, #248]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	493c      	ldr	r1, [pc, #240]	; (8003f78 <HAL_GPIO_DeInit+0x1e0>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <HAL_GPIO_DeInit+0x1c0>)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	482b      	ldr	r0, [pc, #172]	; (8003f58 <HAL_GPIO_DeInit+0x1c0>)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2103      	movs	r1, #3
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	08da      	lsrs	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	08d2      	lsrs	r2, r2, #3
 8003eec:	4019      	ands	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3208      	adds	r2, #8
 8003ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2103      	movs	r1, #3
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	2101      	movs	r1, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2103      	movs	r1, #3
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	401a      	ands	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f47f af2f 	bne.w	8003da8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	48000800 	.word	0x48000800
 8003f64:	48000c00 	.word	0x48000c00
 8003f68:	48001000 	.word	0x48001000
 8003f6c:	48001400 	.word	0x48001400
 8003f70:	48001800 	.word	0x48001800
 8003f74:	48001c00 	.word	0x48001c00
 8003f78:	40010400 	.word	0x40010400

08003f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc ff9c 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e08d      	b.n	800410a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fc84 	bl	8002910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800402c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800403c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d107      	bne.n	8004056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	e006      	b.n	8004064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d108      	bne.n	800407e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	e007      	b.n	800408e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69d9      	ldr	r1, [r3, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e021      	b.n	8004168 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fe fc45 	bl	80029cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	817b      	strh	r3, [r7, #10]
 8004182:	460b      	mov	r3, r1
 8004184:	813b      	strh	r3, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 80f9 	bne.w	800438a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_I2C_Mem_Write+0x34>
 800419e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0ed      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_I2C_Mem_Write+0x4e>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e0e6      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041c6:	f7ff fb67 	bl	8003898 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2319      	movs	r3, #25
 80041d2:	2201      	movs	r2, #1
 80041d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fac3 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0d1      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2221      	movs	r2, #33	; 0x21
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004210:	88f8      	ldrh	r0, [r7, #6]
 8004212:	893a      	ldrh	r2, [r7, #8]
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4603      	mov	r3, r0
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f9d3 	bl	80045cc <I2C_RequestMemoryWrite>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0a9      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2bff      	cmp	r3, #255	; 0xff
 8004240:	d90e      	bls.n	8004260 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	22ff      	movs	r2, #255	; 0xff
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	b2da      	uxtb	r2, r3
 800424e:	8979      	ldrh	r1, [r7, #10]
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fc3d 	bl	8004ad8 <I2C_TransferConfig>
 800425e:	e00f      	b.n	8004280 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	b2da      	uxtb	r2, r3
 8004270:	8979      	ldrh	r1, [r7, #10]
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fc2c 	bl	8004ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fabc 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e07b      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d034      	beq.n	8004338 <HAL_I2C_Mem_Write+0x1c8>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d130      	bne.n	8004338 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa3f 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e04d      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2bff      	cmp	r3, #255	; 0xff
 80042f8:	d90e      	bls.n	8004318 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22ff      	movs	r2, #255	; 0xff
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fbe1 	bl	8004ad8 <I2C_TransferConfig>
 8004316:	e00f      	b.n	8004338 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	b2da      	uxtb	r2, r3
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fbd0 	bl	8004ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d19e      	bne.n	8004280 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 faa2 	bl	8004890 <I2C_WaitOnSTOPFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e01a      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2220      	movs	r2, #32
 800435c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_I2C_Mem_Write+0x224>)
 800436a:	400b      	ands	r3, r1
 800436c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	fe00e800 	.word	0xfe00e800

08004398 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	460b      	mov	r3, r1
 80043ac:	813b      	strh	r3, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	f040 80fd 	bne.w	80045ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_I2C_Mem_Read+0x34>
 80043c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0f1      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_I2C_Mem_Read+0x4e>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0ea      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043ee:	f7ff fa53 	bl	8003898 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2319      	movs	r3, #25
 80043fa:	2201      	movs	r2, #1
 80043fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f9af 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0d5      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	; 0x22
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004438:	88f8      	ldrh	r0, [r7, #6]
 800443a:	893a      	ldrh	r2, [r7, #8]
 800443c:	8979      	ldrh	r1, [r7, #10]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4603      	mov	r3, r0
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f913 	bl	8004674 <I2C_RequestMemoryRead>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0ad      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2bff      	cmp	r3, #255	; 0xff
 8004468:	d90e      	bls.n	8004488 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	b2da      	uxtb	r2, r3
 8004476:	8979      	ldrh	r1, [r7, #10]
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_I2C_Mem_Read+0x22c>)
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fb29 	bl	8004ad8 <I2C_TransferConfig>
 8004486:	e00f      	b.n	80044a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	b2da      	uxtb	r2, r3
 8004498:	8979      	ldrh	r1, [r7, #10]
 800449a:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_I2C_Mem_Read+0x22c>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fb18 	bl	8004ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2200      	movs	r2, #0
 80044b0:	2104      	movs	r1, #4
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f956 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07c      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d034      	beq.n	8004568 <HAL_I2C_Mem_Read+0x1d0>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d130      	bne.n	8004568 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f927 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e04d      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2bff      	cmp	r3, #255	; 0xff
 8004528:	d90e      	bls.n	8004548 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	b2da      	uxtb	r2, r3
 8004536:	8979      	ldrh	r1, [r7, #10]
 8004538:	2300      	movs	r3, #0
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fac9 	bl	8004ad8 <I2C_TransferConfig>
 8004546:	e00f      	b.n	8004568 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	b2da      	uxtb	r2, r3
 8004558:	8979      	ldrh	r1, [r7, #10]
 800455a:	2300      	movs	r3, #0
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fab8 	bl	8004ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d19a      	bne.n	80044a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f98a 	bl	8004890 <I2C_WaitOnSTOPFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e01a      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2220      	movs	r2, #32
 800458c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_I2C_Mem_Read+0x230>)
 800459a:	400b      	ands	r3, r1
 800459c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	80002400 	.word	0x80002400
 80045c8:	fe00e800 	.word	0xfe00e800

080045cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	8979      	ldrh	r1, [r7, #10]
 80045ec:	4b20      	ldr	r3, [pc, #128]	; (8004670 <I2C_RequestMemoryWrite+0xa4>)
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fa6f 	bl	8004ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	69b9      	ldr	r1, [r7, #24]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f8ff 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02c      	b.n	8004668 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	629a      	str	r2, [r3, #40]	; 0x28
 800461e:	e015      	b.n	800464c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004620:	893b      	ldrh	r3, [r7, #8]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	b29b      	uxth	r3, r3
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8e5 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e012      	b.n	8004668 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f884 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	80002000 	.word	0x80002000

08004674 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <I2C_RequestMemoryRead+0xa4>)
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa1c 	bl	8004ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	69b9      	ldr	r1, [r7, #24]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8ac 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e02c      	b.n	800470e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
 80046c4:	e015      	b.n	80046f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046c6:	893b      	ldrh	r3, [r7, #8]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f892 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e012      	b.n	800470e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046e8:	893b      	ldrh	r3, [r7, #8]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f831 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	80002000 	.word	0x80002000

0800471c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d103      	bne.n	800473a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d007      	beq.n	8004758 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	619a      	str	r2, [r3, #24]
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	e031      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d02d      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7ff f88b 	bl	8003898 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d122      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d113      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d0be      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800480e:	e033      	b.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f87f 	bl	8004918 <I2C_IsErrorOccurred>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e031      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d025      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7ff f834 	bl	8003898 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11a      	bne.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d013      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e007      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d1c4      	bne.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800489c:	e02f      	b.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f838 	bl	8004918 <I2C_IsErrorOccurred>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e02d      	b.n	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fe fff1 	bl	8003898 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11a      	bne.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d013      	beq.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e007      	b.n	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b20      	cmp	r3, #32
 800490a:	d1c8      	bne.n	800489e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d068      	beq.n	8004a16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800494c:	e049      	b.n	80049e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d045      	beq.n	80049e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fe ff9f 	bl	8003898 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_IsErrorOccurred+0x54>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d13a      	bne.n	80049e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	d121      	bne.n	80049d4 <I2C_IsErrorOccurred+0xbc>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004996:	d01d      	beq.n	80049d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d01a      	beq.n	80049d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049ae:	f7fe ff73 	bl	8003898 <HAL_GetTick>
 80049b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b4:	e00e      	b.n	80049d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049b6:	f7fe ff6f 	bl	8003898 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b19      	cmp	r3, #25
 80049c2:	d907      	bls.n	80049d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f043 0320 	orr.w	r3, r3, #32
 80049ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80049d2:	e006      	b.n	80049e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d1e9      	bne.n	80049b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d003      	beq.n	80049f8 <I2C_IsErrorOccurred+0xe0>
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0aa      	beq.n	800494e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2220      	movs	r2, #32
 8004a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fe45 	bl	800471c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <I2C_IsErrorOccurred+0x1bc>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	; 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	fe00e800 	.word	0xfe00e800

08004ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	817b      	strh	r3, [r7, #10]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004af0:	7a7b      	ldrb	r3, [r7, #9]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004af8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	0d5b      	lsrs	r3, r3, #21
 8004b12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <I2C_TransferConfig+0x60>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	ea02 0103 	and.w	r1, r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	03ff63ff 	.word	0x03ff63ff

08004b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d138      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e032      	b.n	8004bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d139      	bne.n	8004c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e033      	b.n	8004c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2224      	movs	r2, #36	; 0x24
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004c78:	f7fe fe0e 	bl	8003898 <HAL_GetTick>
 8004c7c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e092      	b.n	8004db0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 808b 	bne.w	8004db0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd feba 	bl	8002a14 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004ca0:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fad0 	bl	800524a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_OSPI_Init+0x150>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68d1      	ldr	r1, [r2, #12]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6912      	ldr	r2, [r2, #16]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0412      	lsls	r2, r2, #16
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6952      	ldr	r2, [r2, #20]
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	0212      	lsls	r2, r2, #8
 8004cca:	4311      	orrs	r1, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0412      	lsls	r2, r2, #16
 8004cea:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2120      	movs	r1, #32
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fddc 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d146      	bne.n	8004db0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d58:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d107      	bne.n	8004d98 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0202 	orr.w	r2, r2, #2
 8004d96:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004da0:	d103      	bne.n	8004daa <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	645a      	str	r2, [r3, #68]	; 0x44
 8004da8:	e002      	b.n	8004db0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	f8e0f8f4 	.word	0xf8e0f8f4

08004dc0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	e015      	b.n	8004e04 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0202 	bic.w	r2, r2, #2
 8004df6:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fd fe77 	bl	8002aec <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b08a      	sub	sp, #40	; 0x28
 8004e12:	af02      	add	r7, sp, #8
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004e1a:	f7fe fd3d 	bl	8003898 <HAL_GetTick>
 8004e1e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d104      	bne.n	8004e3c <HAL_OSPI_Command+0x2e>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e3a:	d10d      	bne.n	8004e58 <HAL_OSPI_Command+0x4a>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b14      	cmp	r3, #20
 8004e40:	d103      	bne.n	8004e4a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d006      	beq.n	8004e58 <HAL_OSPI_Command+0x4a>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b24      	cmp	r3, #36	; 0x24
 8004e4e:	d153      	bne.n	8004ef8 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d14f      	bne.n	8004ef8 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2120      	movs	r1, #32
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fd34 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8004e6c:	7ffb      	ldrb	r3, [r7, #31]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d148      	bne.n	8004f04 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fd60 	bl	8005940 <OSPI_ConfigCmd>
 8004e80:	4603      	mov	r3, r0
 8004e82:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004e84:	7ffb      	ldrb	r3, [r7, #31]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d13c      	bne.n	8004f04 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10e      	bne.n	8004eb0 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fd17 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004eae:	e029      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004ebe:	e021      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	2b24      	cmp	r3, #36	; 0x24
 8004ece:	d103      	bne.n	8004ed8 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004ed6:	e015      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2214      	movs	r2, #20
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004ede:	e011      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee4:	2b14      	cmp	r3, #20
 8004ee6:	d103      	bne.n	8004ef0 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004eee:	e009      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2224      	movs	r2, #36	; 0x24
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004ef6:	e005      	b.n	8004f04 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2210      	movs	r2, #16
 8004f00:	649a      	str	r2, [r3, #72]	; 0x48
 8004f02:	e000      	b.n	8004f06 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8004f04:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f1c:	f7fe fcbc 	bl	8003898 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3350      	adds	r3, #80	; 0x50
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2208      	movs	r2, #8
 8004f38:	649a      	str	r2, [r3, #72]	; 0x48
 8004f3a:	e057      	b.n	8004fec <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d14e      	bne.n	8004fe2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f6c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2201      	movs	r2, #1
 8004f76:	2104      	movs	r1, #4
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fca9 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004f82:	7ffb      	ldrb	r3, [r7, #31]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d113      	bne.n	8004fb0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	1e5a      	subs	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1df      	bne.n	8004f6e <HAL_OSPI_Transmit+0x5e>
 8004fae:	e000      	b.n	8004fb2 <HAL_OSPI_Transmit+0xa2>
          break;
 8004fb0:	bf00      	nop

      if (status == HAL_OK)
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d119      	bne.n	8004fec <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fc84 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004fcc:	7ffb      	ldrb	r3, [r7, #31]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	645a      	str	r2, [r3, #68]	; 0x44
 8004fe0:	e004      	b.n	8004fec <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b08c      	sub	sp, #48	; 0x30
 8004ffa:	af02      	add	r7, sp, #8
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005002:	f7fe fc49 	bl	8003898 <HAL_GetTick>
 8005006:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3350      	adds	r3, #80	; 0x50
 800500e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005020:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2208      	movs	r2, #8
 8005032:	649a      	str	r2, [r3, #72]	; 0x48
 8005034:	e07c      	b.n	8005130 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	2b04      	cmp	r3, #4
 800503c:	d172      	bne.n	8005124 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005074:	d104      	bne.n	8005080 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	649a      	str	r2, [r3, #72]	; 0x48
 800507e:	e011      	b.n	80050a4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	649a      	str	r2, [r3, #72]	; 0x48
 8005098:	e004      	b.n	80050a4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2201      	movs	r2, #1
 80050ac:	2106      	movs	r1, #6
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fc0e 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80050ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d114      	bne.n	80050ec <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1dc      	bne.n	80050a4 <HAL_OSPI_Receive+0xae>
 80050ea:	e000      	b.n	80050ee <HAL_OSPI_Receive+0xf8>
          break;
 80050ec:	bf00      	nop

      if (status == HAL_OK)
 80050ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11c      	bne.n	8005130 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2201      	movs	r2, #1
 80050fe:	2102      	movs	r1, #2
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fbe5 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2202      	movs	r2, #2
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2202      	movs	r2, #2
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
 8005122:	e005      	b.n	8005130 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2210      	movs	r2, #16
 800512e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005134:	4618      	mov	r0, r3
 8005136:	3728      	adds	r7, #40	; 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7fe fba6 	bl	8003898 <HAL_GetTick>
 800514c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800515e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	2b04      	cmp	r3, #4
 8005166:	d164      	bne.n	8005232 <HAL_OSPI_AutoPolling+0xf6>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005170:	d15f      	bne.n	8005232 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2200      	movs	r2, #0
 800517a:	2120      	movs	r1, #32
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fba7 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d158      	bne.n	800523e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	6852      	ldr	r2, [r2, #4]
 80051a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	6912      	ldr	r2, [r2, #16]
 80051ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051ce:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d8:	d104      	bne.n	80051e4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	649a      	str	r2, [r3, #72]	; 0x48
 80051e2:	e011      	b.n	8005208 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80051ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	649a      	str	r2, [r3, #72]	; 0x48
 80051fc:	e004      	b.n	8005208 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2201      	movs	r2, #1
 8005210:	2108      	movs	r1, #8
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fb5c 	bl	80058d0 <OSPI_WaitFlagStateUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2208      	movs	r2, #8
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2202      	movs	r2, #2
 800522e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8005230:	e005      	b.n	800523e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2210      	movs	r2, #16
 800523a:	649a      	str	r2, [r3, #72]	; 0x48
 800523c:	e000      	b.n	8005240 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800523e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005240:	7ffb      	ldrb	r3, [r7, #31]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b092      	sub	sp, #72	; 0x48
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <HAL_OSPIM_Config+0x40>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d105      	bne.n	8005296 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005294:	e004      	b.n	80052a0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80052a6:	e01f      	b.n	80052e8 <HAL_OSPIM_Config+0x80>
 80052a8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80052ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052b0:	3301      	adds	r3, #1
 80052b2:	b2d8      	uxtb	r0, r3
 80052b4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80052b8:	f107 0114 	add.w	r1, r7, #20
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	4619      	mov	r1, r3
 80052c8:	f000 fc9c 	bl	8005c04 <OSPIM_GetConfig>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2208      	movs	r2, #8
 80052dc:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80052de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052e2:	3301      	adds	r3, #1
 80052e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80052e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d9dd      	bls.n	80052ac <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80052f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 82de 	bne.w	80058b6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80052fa:	4bc6      	ldr	r3, [pc, #792]	; (8005614 <HAL_OSPIM_Config+0x3ac>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005306:	4bc3      	ldr	r3, [pc, #780]	; (8005614 <HAL_OSPIM_Config+0x3ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4ac2      	ldr	r2, [pc, #776]	; (8005614 <HAL_OSPIM_Config+0x3ac>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005312:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800531e:	4bbe      	ldr	r3, [pc, #760]	; (8005618 <HAL_OSPIM_Config+0x3b0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800532a:	4bbb      	ldr	r3, [pc, #748]	; (8005618 <HAL_OSPIM_Config+0x3b0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4aba      	ldr	r2, [pc, #744]	; (8005618 <HAL_OSPIM_Config+0x3b0>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005336:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800533a:	f043 0302 	orr.w	r3, r3, #2
 800533e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005342:	49b6      	ldr	r1, [pc, #728]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	3348      	adds	r3, #72	; 0x48
 8005350:	443b      	add	r3, r7
 8005352:	3b2c      	subs	r3, #44	; 0x2c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	48af      	ldr	r0, [pc, #700]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3348      	adds	r3, #72	; 0x48
 800536c:	443b      	add	r3, r7
 800536e:	3b2c      	subs	r3, #44	; 0x2c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3b01      	subs	r3, #1
 8005374:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4403      	add	r3, r0
 800537c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800537e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	3348      	adds	r3, #72	; 0x48
 800538a:	443b      	add	r3, r7
 800538c:	3b34      	subs	r3, #52	; 0x34
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a1 	beq.w	80054d8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005396:	49a1      	ldr	r1, [pc, #644]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3348      	adds	r3, #72	; 0x48
 80053a4:	443b      	add	r3, r7
 80053a6:	3b34      	subs	r3, #52	; 0x34
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	489a      	ldr	r0, [pc, #616]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 80053b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	3348      	adds	r3, #72	; 0x48
 80053c0:	443b      	add	r3, r7
 80053c2:	3b34      	subs	r3, #52	; 0x34
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f021 0201 	bic.w	r2, r1, #1
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4403      	add	r3, r0
 80053d0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80053d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	3348      	adds	r3, #72	; 0x48
 80053de:	443b      	add	r3, r7
 80053e0:	3b30      	subs	r3, #48	; 0x30
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01d      	beq.n	8005424 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80053e8:	498c      	ldr	r1, [pc, #560]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 80053ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	3348      	adds	r3, #72	; 0x48
 80053f6:	443b      	add	r3, r7
 80053f8:	3b30      	subs	r3, #48	; 0x30
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	4885      	ldr	r0, [pc, #532]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	3348      	adds	r3, #72	; 0x48
 8005412:	443b      	add	r3, r7
 8005414:	3b30      	subs	r3, #48	; 0x30
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	f021 0210 	bic.w	r2, r1, #16
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4403      	add	r3, r0
 8005422:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3348      	adds	r3, #72	; 0x48
 8005430:	443b      	add	r3, r7
 8005432:	3b28      	subs	r3, #40	; 0x28
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d021      	beq.n	800547e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800543a:	4978      	ldr	r1, [pc, #480]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 800543c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	3348      	adds	r3, #72	; 0x48
 8005448:	443b      	add	r3, r7
 800544a:	3b28      	subs	r3, #40	; 0x28
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	4870      	ldr	r0, [pc, #448]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 800545c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	3348      	adds	r3, #72	; 0x48
 8005468:	443b      	add	r3, r7
 800546a:	3b28      	subs	r3, #40	; 0x28
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3b01      	subs	r3, #1
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4403      	add	r3, r0
 800547c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800547e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	3348      	adds	r3, #72	; 0x48
 800548a:	443b      	add	r3, r7
 800548c:	3b24      	subs	r3, #36	; 0x24
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d021      	beq.n	80054d8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005494:	4961      	ldr	r1, [pc, #388]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	3348      	adds	r3, #72	; 0x48
 80054a2:	443b      	add	r3, r7
 80054a4:	3b24      	subs	r3, #36	; 0x24
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	4859      	ldr	r0, [pc, #356]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	3348      	adds	r3, #72	; 0x48
 80054c2:	443b      	add	r3, r7
 80054c4:	3b24      	subs	r3, #36	; 0x24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4403      	add	r3, r0
 80054d6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	3348      	adds	r3, #72	; 0x48
 80054ea:	443b      	add	r3, r7
 80054ec:	3b34      	subs	r3, #52	; 0x34
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4299      	cmp	r1, r3
 80054f2:	d038      	beq.n	8005566 <HAL_OSPIM_Config+0x2fe>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3348      	adds	r3, #72	; 0x48
 8005506:	443b      	add	r3, r7
 8005508:	3b30      	subs	r3, #48	; 0x30
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4299      	cmp	r1, r3
 800550e:	d02a      	beq.n	8005566 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	3348      	adds	r3, #72	; 0x48
 8005522:	443b      	add	r3, r7
 8005524:	3b2c      	subs	r3, #44	; 0x2c
 8005526:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005528:	4299      	cmp	r1, r3
 800552a:	d01c      	beq.n	8005566 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68d9      	ldr	r1, [r3, #12]
 8005530:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3348      	adds	r3, #72	; 0x48
 800553e:	443b      	add	r3, r7
 8005540:	3b28      	subs	r3, #40	; 0x28
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4299      	cmp	r1, r3
 8005546:	d00e      	beq.n	8005566 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6919      	ldr	r1, [r3, #16]
 800554c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3348      	adds	r3, #72	; 0x48
 800555a:	443b      	add	r3, r7
 800555c:	3b24      	subs	r3, #36	; 0x24
 800555e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005560:	4299      	cmp	r1, r3
 8005562:	f040 80d3 	bne.w	800570c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005568:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	3348      	adds	r3, #72	; 0x48
 8005576:	443b      	add	r3, r7
 8005578:	3b34      	subs	r3, #52	; 0x34
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	4825      	ldr	r0, [pc, #148]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005586:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	3348      	adds	r3, #72	; 0x48
 8005594:	443b      	add	r3, r7
 8005596:	3b34      	subs	r3, #52	; 0x34
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3b01      	subs	r3, #1
 800559c:	f021 0201 	bic.w	r2, r1, #1
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4403      	add	r3, r0
 80055a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80055a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	3348      	adds	r3, #72	; 0x48
 80055b4:	443b      	add	r3, r7
 80055b6:	3b30      	subs	r3, #48	; 0x30
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80055be:	4917      	ldr	r1, [pc, #92]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 80055c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	3348      	adds	r3, #72	; 0x48
 80055ce:	443b      	add	r3, r7
 80055d0:	3b30      	subs	r3, #48	; 0x30
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	480f      	ldr	r0, [pc, #60]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 80055de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	3348      	adds	r3, #72	; 0x48
 80055ec:	443b      	add	r3, r7
 80055ee:	3b30      	subs	r3, #48	; 0x30
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	f021 0210 	bic.w	r2, r1, #16
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4403      	add	r3, r0
 80055fc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80055fe:	4907      	ldr	r1, [pc, #28]	; (800561c <HAL_OSPIM_Config+0x3b4>)
 8005600:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	3348      	adds	r3, #72	; 0x48
 800560e:	443b      	add	r3, r7
 8005610:	3b2c      	subs	r3, #44	; 0x2c
 8005612:	e005      	b.n	8005620 <HAL_OSPIM_Config+0x3b8>
 8005614:	a0001000 	.word	0xa0001000
 8005618:	a0001400 	.word	0xa0001400
 800561c:	50061c00 	.word	0x50061c00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3b01      	subs	r3, #1
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	48a6      	ldr	r0, [pc, #664]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 800562c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	3348      	adds	r3, #72	; 0x48
 800563a:	443b      	add	r3, r7
 800563c:	3b2c      	subs	r3, #44	; 0x2c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3b01      	subs	r3, #1
 8005642:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4403      	add	r3, r0
 800564a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800564c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	3348      	adds	r3, #72	; 0x48
 800565a:	443b      	add	r3, r7
 800565c:	3b28      	subs	r3, #40	; 0x28
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005664:	4997      	ldr	r1, [pc, #604]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005666:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	3348      	adds	r3, #72	; 0x48
 8005674:	443b      	add	r3, r7
 8005676:	3b28      	subs	r3, #40	; 0x28
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3b01      	subs	r3, #1
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	488f      	ldr	r0, [pc, #572]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005688:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	3348      	adds	r3, #72	; 0x48
 8005696:	443b      	add	r3, r7
 8005698:	3b28      	subs	r3, #40	; 0x28
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3b01      	subs	r3, #1
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4403      	add	r3, r0
 80056aa:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80056ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	3348      	adds	r3, #72	; 0x48
 80056ba:	443b      	add	r3, r7
 80056bc:	3b24      	subs	r3, #36	; 0x24
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d023      	beq.n	800570c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80056c4:	497f      	ldr	r1, [pc, #508]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80056c6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3348      	adds	r3, #72	; 0x48
 80056d4:	443b      	add	r3, r7
 80056d6:	3b24      	subs	r3, #36	; 0x24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	4877      	ldr	r0, [pc, #476]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80056e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	3348      	adds	r3, #72	; 0x48
 80056f6:	443b      	add	r3, r7
 80056f8:	3b24      	subs	r3, #36	; 0x24
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4403      	add	r3, r0
 800570a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800570c:	4a6d      	ldr	r2, [pc, #436]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	3b01      	subs	r3, #1
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005720:	025b      	lsls	r3, r3, #9
 8005722:	431a      	orrs	r2, r3
 8005724:	4967      	ldr	r1, [pc, #412]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	3b01      	subs	r3, #1
 800572c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005736:	4a63      	ldr	r2, [pc, #396]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3b01      	subs	r3, #1
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f023 0203 	bic.w	r2, r3, #3
 8005748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	431a      	orrs	r2, r3
 800574e:	495d      	ldr	r1, [pc, #372]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3b01      	subs	r3, #1
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d014      	beq.n	8005792 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005768:	4a56      	ldr	r2, [pc, #344]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800577a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577c:	015b      	lsls	r3, r3, #5
 800577e:	431a      	orrs	r2, r3
 8005780:	4950      	ldr	r1, [pc, #320]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	f042 0210 	orr.w	r2, r2, #16
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d019      	beq.n	80057d2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800579e:	4a49      	ldr	r2, [pc, #292]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b6:	049b      	lsls	r3, r3, #18
 80057b8:	431a      	orrs	r2, r3
 80057ba:	4942      	ldr	r1, [pc, #264]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e01c      	b.n	800580c <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80057da:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f2:	069b      	lsls	r3, r3, #26
 80057f4:	431a      	orrs	r2, r3
 80057f6:	4933      	ldr	r1, [pc, #204]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d019      	beq.n	800584c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005818:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	3b01      	subs	r3, #1
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800582e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005830:	049b      	lsls	r3, r3, #18
 8005832:	431a      	orrs	r2, r3
 8005834:	4923      	ldr	r1, [pc, #140]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	3b01      	subs	r3, #1
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	e01c      	b.n	8005886 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d018      	beq.n	8005886 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005854:	4a1b      	ldr	r2, [pc, #108]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	3b01      	subs	r3, #1
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800586a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586c:	069b      	lsls	r3, r3, #26
 800586e:	431a      	orrs	r2, r3
 8005870:	4914      	ldr	r1, [pc, #80]	; (80058c4 <HAL_OSPIM_Config+0x65c>)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	3b01      	subs	r3, #1
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005886:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_OSPIM_Config+0x660>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <HAL_OSPIM_Config+0x660>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800589e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80058aa:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_OSPIM_Config+0x664>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_OSPIM_Config+0x664>)
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80058b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3748      	adds	r7, #72	; 0x48
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	50061c00 	.word	0x50061c00
 80058c8:	a0001000 	.word	0xa0001000
 80058cc:	a0001400 	.word	0xa0001400

080058d0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80058e0:	e01a      	b.n	8005918 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d016      	beq.n	8005918 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fd ffd5 	bl	8003898 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e00e      	b.n	8005936 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d1d6      	bne.n	80058e2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800595c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d114      	bne.n	80059ae <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800598c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005996:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80059a0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e013      	b.n	80059d6 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80059b6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80059c0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80059ca:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	431a      	orrs	r2, r3
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d012      	beq.n	8005a12 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a04:	4319      	orrs	r1, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 021f 	bic.w	r2, r3, #31
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d009      	beq.n	8005a40 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8099 	beq.w	8005b7c <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d055      	beq.n	8005afe <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01e      	beq.n	8005a98 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b68      	ldr	r3, [pc, #416]	; (8005c00 <OSPI_ConfigCmd+0x2c0>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68d1      	ldr	r1, [r2, #12]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	6952      	ldr	r2, [r2, #20]
 8005a6a:	4311      	orrs	r1, r2
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6912      	ldr	r2, [r2, #16]
 8005a70:	4311      	orrs	r1, r2
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	69d2      	ldr	r2, [r2, #28]
 8005a76:	4311      	orrs	r1, r2
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	6a12      	ldr	r2, [r2, #32]
 8005a82:	4311      	orrs	r1, r2
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	431a      	orrs	r2, r3
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e028      	b.n	8005aea <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	68d1      	ldr	r1, [r2, #12]
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	6952      	ldr	r2, [r2, #20]
 8005aac:	4311      	orrs	r1, r2
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	6912      	ldr	r2, [r2, #16]
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	69d2      	ldr	r2, [r2, #28]
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	6a12      	ldr	r2, [r2, #32]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ad4:	d109      	bne.n	8005aea <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d105      	bne.n	8005aea <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	6992      	ldr	r2, [r2, #24]
 8005afa:	649a      	str	r2, [r3, #72]	; 0x48
 8005afc:	e078      	b.n	8005bf0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005b0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	68d1      	ldr	r1, [r2, #12]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6952      	ldr	r2, [r2, #20]
 8005b1a:	4311      	orrs	r1, r2
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	6912      	ldr	r2, [r2, #16]
 8005b20:	4311      	orrs	r1, r2
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b26:	4311      	orrs	r1, r2
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e01d      	b.n	8005b72 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68d9      	ldr	r1, [r3, #12]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4319      	orrs	r1, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5c:	d109      	bne.n	8005b72 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d105      	bne.n	8005b72 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e039      	b.n	8005bf0 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d030      	beq.n	8005be6 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005b94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	69d1      	ldr	r1, [r2, #28]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba0:	4311      	orrs	r1, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	6a12      	ldr	r2, [r2, #32]
 8005ba6:	4311      	orrs	r1, r2
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bac:	4311      	orrs	r1, r2
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e00e      	b.n	8005bda <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	4319      	orrs	r1, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	6992      	ldr	r2, [r2, #24]
 8005be2:	649a      	str	r2, [r3, #72]	; 0x48
 8005be4:	e004      	b.n	8005bf0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2208      	movs	r2, #8
 8005bee:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3724      	adds	r7, #36	; 0x24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	f0ffc0c0 	.word	0xf0ffc0c0

08005c04 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <OSPIM_GetConfig+0x26>
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d802      	bhi.n	8005c2a <OSPIM_GetConfig+0x26>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
 8005c2e:	e08e      	b.n	8005d4e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d101      	bne.n	8005c58 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005c54:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <OSPIM_GetConfig+0x158>)
 8005c56:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e074      	b.n	8005d48 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005c5e:	4a40      	ldr	r2, [pc, #256]	; (8005d60 <OSPIM_GetConfig+0x15c>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4053      	eors	r3, r2
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4053      	eors	r3, r2
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4053      	eors	r3, r2
 8005cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d018      	beq.n	8005d06 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4053      	eors	r3, r2
 8005cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d111      	bne.n	8005d06 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e005      	b.n	8005d06 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d018      	beq.n	8005d42 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4053      	eors	r3, r2
 8005d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d111      	bne.n	8005d42 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	611a      	str	r2, [r3, #16]
 8005d34:	e005      	b.n	8005d42 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d987      	bls.n	8005c5e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	04040222 	.word	0x04040222
 8005d60:	50061c00 	.word	0x50061c00

08005d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d102      	bne.n	8005d7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7a:	e00b      	b.n	8005d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005d7c:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8a:	d102      	bne.n	8005d92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d90:	e000      	b.n	8005d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005d92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40007000 	.word	0x40007000

08005da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d141      	bne.n	8005e36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005db2:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbe:	d131      	bne.n	8005e24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dc0:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc6:	4a46      	ldr	r2, [pc, #280]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dd0:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dd8:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005de0:	4b40      	ldr	r3, [pc, #256]	; (8005ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2232      	movs	r2, #50	; 0x32
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	0c9b      	lsrs	r3, r3, #18
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df6:	e002      	b.n	8005dfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d102      	bne.n	8005e12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f2      	bne.n	8005df8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e12:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1e:	d158      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e057      	b.n	8005ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e34:	e04d      	b.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3c:	d141      	bne.n	8005ec2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e3e:	4b28      	ldr	r3, [pc, #160]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d131      	bne.n	8005eb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e4c:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e52:	4a23      	ldr	r2, [pc, #140]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e5c:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e64:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2232      	movs	r2, #50	; 0x32
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	0c9b      	lsrs	r3, r3, #18
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e82:	e002      	b.n	8005e8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e96:	d102      	bne.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f2      	bne.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d112      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e011      	b.n	8005ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ec0:	e007      	b.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ed0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40007000 	.word	0x40007000
 8005ee4:	20000020 	.word	0x20000020
 8005ee8:	431bde83 	.word	0x431bde83

08005eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f000 bc08 	b.w	8006710 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f00:	4b96      	ldr	r3, [pc, #600]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 030c 	and.w	r3, r3, #12
 8005f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f0a:	4b94      	ldr	r3, [pc, #592]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80e4 	beq.w	80060ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <HAL_RCC_OscConfig+0x4c>
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	f040 808b 	bne.w	8006046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f040 8087 	bne.w	8006046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f38:	4b88      	ldr	r3, [pc, #544]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_RCC_OscConfig+0x64>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e3df      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	4b81      	ldr	r3, [pc, #516]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_RCC_OscConfig+0x7e>
 8005f60:	4b7e      	ldr	r3, [pc, #504]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f68:	e005      	b.n	8005f76 <HAL_RCC_OscConfig+0x8a>
 8005f6a:	4b7c      	ldr	r3, [pc, #496]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d223      	bcs.n	8005fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fdfe 	bl	8006b80 <RCC_SetFlashLatencyFromMSIRange>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e3c0      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f8e:	4b73      	ldr	r3, [pc, #460]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a72      	ldr	r2, [pc, #456]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f94:	f043 0308 	orr.w	r3, r3, #8
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	4b70      	ldr	r3, [pc, #448]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	496d      	ldr	r1, [pc, #436]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fac:	4b6b      	ldr	r3, [pc, #428]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4968      	ldr	r1, [pc, #416]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
 8005fc0:	e025      	b.n	800600e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fc2:	4b66      	ldr	r3, [pc, #408]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a65      	ldr	r2, [pc, #404]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	4960      	ldr	r1, [pc, #384]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fe0:	4b5e      	ldr	r3, [pc, #376]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	495b      	ldr	r1, [pc, #364]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fdbe 	bl	8006b80 <RCC_SetFlashLatencyFromMSIRange>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e380      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800600e:	f000 fcc1 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 8006012:	4602      	mov	r2, r0
 8006014:	4b51      	ldr	r3, [pc, #324]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	4950      	ldr	r1, [pc, #320]	; (8006160 <HAL_RCC_OscConfig+0x274>)
 8006020:	5ccb      	ldrb	r3, [r1, r3]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	fa22 f303 	lsr.w	r3, r2, r3
 800602a:	4a4e      	ldr	r2, [pc, #312]	; (8006164 <HAL_RCC_OscConfig+0x278>)
 800602c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800602e:	4b4e      	ldr	r3, [pc, #312]	; (8006168 <HAL_RCC_OscConfig+0x27c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fc fdfe 	bl	8002c34 <HAL_InitTick>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d052      	beq.n	80060e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	e364      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d032      	beq.n	80060b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800604e:	4b43      	ldr	r3, [pc, #268]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a42      	ldr	r2, [pc, #264]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800605a:	f7fd fc1d 	bl	8003898 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006062:	f7fd fc19 	bl	8003898 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e34d      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a35      	ldr	r2, [pc, #212]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b33      	ldr	r3, [pc, #204]	; (800615c <HAL_RCC_OscConfig+0x270>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4930      	ldr	r1, [pc, #192]	; (800615c <HAL_RCC_OscConfig+0x270>)
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800609e:	4b2f      	ldr	r3, [pc, #188]	; (800615c <HAL_RCC_OscConfig+0x270>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	492b      	ldr	r1, [pc, #172]	; (800615c <HAL_RCC_OscConfig+0x270>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	604b      	str	r3, [r1, #4]
 80060b2:	e01a      	b.n	80060ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060b4:	4b29      	ldr	r3, [pc, #164]	; (800615c <HAL_RCC_OscConfig+0x270>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a28      	ldr	r2, [pc, #160]	; (800615c <HAL_RCC_OscConfig+0x270>)
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060c0:	f7fd fbea 	bl	8003898 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060c8:	f7fd fbe6 	bl	8003898 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e31a      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060da:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCC_OscConfig+0x270>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x1dc>
 80060e6:	e000      	b.n	80060ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d073      	beq.n	80061de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_OscConfig+0x21c>
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b0c      	cmp	r3, #12
 8006100:	d10e      	bne.n	8006120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d10b      	bne.n	8006120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	4b14      	ldr	r3, [pc, #80]	; (800615c <HAL_RCC_OscConfig+0x270>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d063      	beq.n	80061dc <HAL_RCC_OscConfig+0x2f0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d15f      	bne.n	80061dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e2f7      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d106      	bne.n	8006138 <HAL_RCC_OscConfig+0x24c>
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <HAL_RCC_OscConfig+0x270>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a0b      	ldr	r2, [pc, #44]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e025      	b.n	8006184 <HAL_RCC_OscConfig+0x298>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006140:	d114      	bne.n	800616c <HAL_RCC_OscConfig+0x280>
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a05      	ldr	r2, [pc, #20]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a02      	ldr	r2, [pc, #8]	; (800615c <HAL_RCC_OscConfig+0x270>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e013      	b.n	8006184 <HAL_RCC_OscConfig+0x298>
 800615c:	40021000 	.word	0x40021000
 8006160:	0800cefc 	.word	0x0800cefc
 8006164:	20000020 	.word	0x20000020
 8006168:	200000b4 	.word	0x200000b4
 800616c:	4ba0      	ldr	r3, [pc, #640]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a9f      	ldr	r2, [pc, #636]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	4b9d      	ldr	r3, [pc, #628]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a9c      	ldr	r2, [pc, #624]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800617e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d013      	beq.n	80061b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fd fb84 	bl	8003898 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006194:	f7fd fb80 	bl	8003898 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e2b4      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061a6:	4b92      	ldr	r3, [pc, #584]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0x2a8>
 80061b2:	e014      	b.n	80061de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fd fb70 	bl	8003898 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061bc:	f7fd fb6c 	bl	8003898 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b64      	cmp	r3, #100	; 0x64
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e2a0      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061ce:	4b88      	ldr	r3, [pc, #544]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x2d0>
 80061da:	e000      	b.n	80061de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d060      	beq.n	80062ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_OscConfig+0x310>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b0c      	cmp	r3, #12
 80061f4:	d119      	bne.n	800622a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d116      	bne.n	800622a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061fc:	4b7c      	ldr	r3, [pc, #496]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_RCC_OscConfig+0x328>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e27d      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006214:	4b76      	ldr	r3, [pc, #472]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	4973      	ldr	r1, [pc, #460]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006228:	e040      	b.n	80062ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d023      	beq.n	800627a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006232:	4b6f      	ldr	r3, [pc, #444]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6e      	ldr	r2, [pc, #440]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623e:	f7fd fb2b 	bl	8003898 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006246:	f7fd fb27 	bl	8003898 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e25b      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006258:	4b65      	ldr	r3, [pc, #404]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006264:	4b62      	ldr	r3, [pc, #392]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	495f      	ldr	r1, [pc, #380]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006274:	4313      	orrs	r3, r2
 8006276:	604b      	str	r3, [r1, #4]
 8006278:	e018      	b.n	80062ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627a:	4b5d      	ldr	r3, [pc, #372]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a5c      	ldr	r2, [pc, #368]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fd fb07 	bl	8003898 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800628e:	f7fd fb03 	bl	8003898 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e237      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062a0:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d03c      	beq.n	8006332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01c      	beq.n	80062fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c0:	4b4b      	ldr	r3, [pc, #300]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80062c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c6:	4a4a      	ldr	r2, [pc, #296]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fd fae2 	bl	8003898 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d8:	f7fd fade 	bl	8003898 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e212      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ea:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80062ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ef      	beq.n	80062d8 <HAL_RCC_OscConfig+0x3ec>
 80062f8:	e01b      	b.n	8006332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fa:	4b3d      	ldr	r3, [pc, #244]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80062fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006300:	4a3b      	ldr	r2, [pc, #236]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fd fac5 	bl	8003898 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006312:	f7fd fac1 	bl	8003898 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e1f5      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006324:	4b32      	ldr	r3, [pc, #200]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1ef      	bne.n	8006312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80a6 	beq.w	800648c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006340:	2300      	movs	r3, #0
 8006342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006344:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	4a26      	ldr	r2, [pc, #152]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635a:	6593      	str	r3, [r2, #88]	; 0x58
 800635c:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006368:	2301      	movs	r3, #1
 800636a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <HAL_RCC_OscConfig+0x508>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d118      	bne.n	80063aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <HAL_RCC_OscConfig+0x508>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <HAL_RCC_OscConfig+0x508>)
 800637e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006384:	f7fd fa88 	bl	8003898 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638c:	f7fd fa84 	bl	8003898 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e1b8      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_RCC_OscConfig+0x508>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d108      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4d8>
 80063b2:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	4a0d      	ldr	r2, [pc, #52]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063c2:	e029      	b.n	8006418 <HAL_RCC_OscConfig+0x52c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d115      	bne.n	80063f8 <HAL_RCC_OscConfig+0x50c>
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063d4:	f043 0304 	orr.w	r3, r3, #4
 80063d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	4a03      	ldr	r2, [pc, #12]	; (80063f0 <HAL_RCC_OscConfig+0x504>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063ec:	e014      	b.n	8006418 <HAL_RCC_OscConfig+0x52c>
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40007000 	.word	0x40007000
 80063f8:	4b9d      	ldr	r3, [pc, #628]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	4a9c      	ldr	r2, [pc, #624]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006408:	4b99      	ldr	r3, [pc, #612]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	4a98      	ldr	r2, [pc, #608]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006410:	f023 0304 	bic.w	r3, r3, #4
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d016      	beq.n	800644e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fd fa3a 	bl	8003898 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006426:	e00a      	b.n	800643e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006428:	f7fd fa36 	bl	8003898 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e168      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800643e:	4b8c      	ldr	r3, [pc, #560]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0ed      	beq.n	8006428 <HAL_RCC_OscConfig+0x53c>
 800644c:	e015      	b.n	800647a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644e:	f7fd fa23 	bl	8003898 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006454:	e00a      	b.n	800646c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006456:	f7fd fa1f 	bl	8003898 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	f241 3288 	movw	r2, #5000	; 0x1388
 8006464:	4293      	cmp	r3, r2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e151      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800646c:	4b80      	ldr	r3, [pc, #512]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800646e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1ed      	bne.n	8006456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800647a:	7ffb      	ldrb	r3, [r7, #31]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d105      	bne.n	800648c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006480:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	4a7a      	ldr	r2, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d03c      	beq.n	8006512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01c      	beq.n	80064da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064a0:	4b73      	ldr	r3, [pc, #460]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80064a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064a6:	4a72      	ldr	r2, [pc, #456]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fd f9f2 	bl	8003898 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064b8:	f7fd f9ee 	bl	8003898 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e122      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064ca:	4b69      	ldr	r3, [pc, #420]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80064cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0ef      	beq.n	80064b8 <HAL_RCC_OscConfig+0x5cc>
 80064d8:	e01b      	b.n	8006512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064da:	4b65      	ldr	r3, [pc, #404]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80064dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064e0:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7fd f9d5 	bl	8003898 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064f2:	f7fd f9d1 	bl	8003898 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e105      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006504:	4b5a      	ldr	r3, [pc, #360]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ef      	bne.n	80064f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80f9 	beq.w	800670e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	2b02      	cmp	r3, #2
 8006522:	f040 80cf 	bne.w	80066c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006526:	4b52      	ldr	r3, [pc, #328]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0203 	and.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d12c      	bne.n	8006594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	3b01      	subs	r3, #1
 8006546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d123      	bne.n	8006594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d11b      	bne.n	8006594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d113      	bne.n	8006594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	3b01      	subs	r3, #1
 800657a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800657c:	429a      	cmp	r2, r3
 800657e:	d109      	bne.n	8006594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	3b01      	subs	r3, #1
 800658e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d071      	beq.n	8006678 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d068      	beq.n	800666c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800659a:	4b35      	ldr	r3, [pc, #212]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80065a6:	4b32      	ldr	r3, [pc, #200]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0ac      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065b6:	4b2e      	ldr	r3, [pc, #184]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80065bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065c2:	f7fd f969 	bl	8003898 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ca:	f7fd f965 	bl	8003898 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e099      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065dc:	4b24      	ldr	r3, [pc, #144]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065e8:	4b21      	ldr	r3, [pc, #132]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	4b21      	ldr	r3, [pc, #132]	; (8006674 <HAL_RCC_OscConfig+0x788>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065f8:	3a01      	subs	r2, #1
 80065fa:	0112      	lsls	r2, r2, #4
 80065fc:	4311      	orrs	r1, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006602:	0212      	lsls	r2, r2, #8
 8006604:	4311      	orrs	r1, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800660a:	0852      	lsrs	r2, r2, #1
 800660c:	3a01      	subs	r2, #1
 800660e:	0552      	lsls	r2, r2, #21
 8006610:	4311      	orrs	r1, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006616:	0852      	lsrs	r2, r2, #1
 8006618:	3a01      	subs	r2, #1
 800661a:	0652      	lsls	r2, r2, #25
 800661c:	4311      	orrs	r1, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006622:	06d2      	lsls	r2, r2, #27
 8006624:	430a      	orrs	r2, r1
 8006626:	4912      	ldr	r1, [pc, #72]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006628:	4313      	orrs	r3, r2
 800662a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 800663e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006644:	f7fd f928 	bl	8003898 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664c:	f7fd f924 	bl	8003898 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e058      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <HAL_RCC_OscConfig+0x784>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800666a:	e050      	b.n	800670e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e04f      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
 8006670:	40021000 	.word	0x40021000
 8006674:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006678:	4b27      	ldr	r3, [pc, #156]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d144      	bne.n	800670e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006684:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 800668a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800668e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006690:	4b21      	ldr	r3, [pc, #132]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 8006696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800669a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800669c:	f7fd f8fc 	bl	8003898 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a4:	f7fd f8f8 	bl	8003898 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e02c      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0x7b8>
 80066c2:	e024      	b.n	800670e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d01f      	beq.n	800670a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ca:	4b13      	ldr	r3, [pc, #76]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 80066d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d6:	f7fd f8df 	bl	8003898 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066de:	f7fd f8db 	bl	8003898 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e00f      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	4905      	ldr	r1, [pc, #20]	; (8006718 <HAL_RCC_OscConfig+0x82c>)
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <HAL_RCC_OscConfig+0x830>)
 8006704:	4013      	ands	r3, r2
 8006706:	60cb      	str	r3, [r1, #12]
 8006708:	e001      	b.n	800670e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40021000 	.word	0x40021000
 800671c:	feeefffc 	.word	0xfeeefffc

08006720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e11d      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006738:	4b90      	ldr	r3, [pc, #576]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d910      	bls.n	8006768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006746:	4b8d      	ldr	r3, [pc, #564]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 020f 	bic.w	r2, r3, #15
 800674e:	498b      	ldr	r1, [pc, #556]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e105      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	4b81      	ldr	r3, [pc, #516]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006780:	429a      	cmp	r2, r3
 8006782:	d908      	bls.n	8006796 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006784:	4b7e      	ldr	r3, [pc, #504]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	497b      	ldr	r1, [pc, #492]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d079      	beq.n	8006896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d11e      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067aa:	4b75      	ldr	r3, [pc, #468]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e0dc      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80067ba:	f000 fa3b 	bl	8006c34 <RCC_GetSysClockFreqFromPLLSource>
 80067be:	4603      	mov	r3, r0
 80067c0:	4a70      	ldr	r2, [pc, #448]	; (8006984 <HAL_RCC_ClockConfig+0x264>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d946      	bls.n	8006854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80067c6:	4b6e      	ldr	r3, [pc, #440]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d140      	bne.n	8006854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067d2:	4b6b      	ldr	r3, [pc, #428]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067da:	4a69      	ldr	r2, [pc, #420]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e035      	b.n	8006854 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d107      	bne.n	8006800 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f0:	4b63      	ldr	r3, [pc, #396]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d115      	bne.n	8006828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0b9      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d107      	bne.n	8006818 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006808:	4b5d      	ldr	r3, [pc, #372]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e0ad      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006818:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0a5      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006828:	f000 f8b4 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 800682c:	4603      	mov	r3, r0
 800682e:	4a55      	ldr	r2, [pc, #340]	; (8006984 <HAL_RCC_ClockConfig+0x264>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d90f      	bls.n	8006854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006834:	4b52      	ldr	r3, [pc, #328]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006840:	4b4f      	ldr	r3, [pc, #316]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006848:	4a4d      	ldr	r2, [pc, #308]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006854:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f023 0203 	bic.w	r2, r3, #3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4947      	ldr	r1, [pc, #284]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006862:	4313      	orrs	r3, r2
 8006864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006866:	f7fd f817 	bl	8003898 <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686c:	e00a      	b.n	8006884 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686e:	f7fd f813 	bl	8003898 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	; 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e077      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 020c 	and.w	r2, r3, #12
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	429a      	cmp	r2, r3
 8006894:	d1eb      	bne.n	800686e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d105      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800689c:	4b38      	ldr	r3, [pc, #224]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a37      	ldr	r2, [pc, #220]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d208      	bcs.n	80068d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c4:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	492b      	ldr	r1, [pc, #172]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d6:	4b29      	ldr	r3, [pc, #164]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d210      	bcs.n	8006906 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f023 020f 	bic.w	r2, r3, #15
 80068ec:	4923      	ldr	r1, [pc, #140]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f4:	4b21      	ldr	r3, [pc, #132]	; (800697c <HAL_RCC_ClockConfig+0x25c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d001      	beq.n	8006906 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e036      	b.n	8006974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4918      	ldr	r1, [pc, #96]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4910      	ldr	r1, [pc, #64]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 8006940:	4313      	orrs	r3, r2
 8006942:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006944:	f000 f826 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 8006948:	4602      	mov	r2, r0
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <HAL_RCC_ClockConfig+0x260>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	490c      	ldr	r1, [pc, #48]	; (8006988 <HAL_RCC_ClockConfig+0x268>)
 8006956:	5ccb      	ldrb	r3, [r1, r3]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <HAL_RCC_ClockConfig+0x26c>)
 8006962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006964:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_RCC_ClockConfig+0x270>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fc f963 	bl	8002c34 <HAL_InitTick>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]

  return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40022000 	.word	0x40022000
 8006980:	40021000 	.word	0x40021000
 8006984:	04c4b400 	.word	0x04c4b400
 8006988:	0800cefc 	.word	0x0800cefc
 800698c:	20000020 	.word	0x20000020
 8006990:	200000b4 	.word	0x200000b4

08006994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006994:	b480      	push	{r7}
 8006996:	b089      	sub	sp, #36	; 0x24
 8006998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069a2:	4b3e      	ldr	r3, [pc, #248]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ac:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_RCC_GetSysClockFreq+0x34>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b0c      	cmp	r3, #12
 80069c0:	d121      	bne.n	8006a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d11e      	bne.n	8006a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069d4:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80069d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e005      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069e4:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069f0:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10d      	bne.n	8006a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a04:	e00a      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a0c:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	e004      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d101      	bne.n	8006a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a18:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b0c      	cmp	r3, #12
 8006a20:	d134      	bne.n	8006a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d003      	beq.n	8006a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d003      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0xac>
 8006a38:	e005      	b.n	8006a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a3c:	617b      	str	r3, [r7, #20]
      break;
 8006a3e:	e005      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a40:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a42:	617b      	str	r3, [r7, #20]
      break;
 8006a44:	e002      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	617b      	str	r3, [r7, #20]
      break;
 8006a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	3301      	adds	r3, #1
 8006a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a5a:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	fb03 f202 	mul.w	r2, r3, r2
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	0e5b      	lsrs	r3, r3, #25
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3724      	adds	r7, #36	; 0x24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	0800cf14 	.word	0x0800cf14
 8006aa4:	00f42400 	.word	0x00f42400
 8006aa8:	007a1200 	.word	0x007a1200

08006aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000020 	.word	0x20000020

08006ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ac8:	f7ff fff0 	bl	8006aac <HAL_RCC_GetHCLKFreq>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	4904      	ldr	r1, [pc, #16]	; (8006aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ada:	5ccb      	ldrb	r3, [r1, r3]
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	0800cf0c 	.word	0x0800cf0c

08006af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006af4:	f7ff ffda 	bl	8006aac <HAL_RCC_GetHCLKFreq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0adb      	lsrs	r3, r3, #11
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	4904      	ldr	r1, [pc, #16]	; (8006b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b06:	5ccb      	ldrb	r3, [r1, r3]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000
 8006b18:	0800cf0c 	.word	0x0800cf0c

08006b1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	220f      	movs	r2, #15
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <HAL_RCC_GetClockConfig+0x5c>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0203 	and.w	r2, r3, #3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <HAL_RCC_GetClockConfig+0x5c>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <HAL_RCC_GetClockConfig+0x5c>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <HAL_RCC_GetClockConfig+0x5c>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	08db      	lsrs	r3, r3, #3
 8006b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <HAL_RCC_GetClockConfig+0x60>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 020f 	and.w	r2, r3, #15
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	601a      	str	r2, [r3, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40022000 	.word	0x40022000

08006b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b8c:	4b27      	ldr	r3, [pc, #156]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b98:	f7ff f8e4 	bl	8005d64 <HAL_PWREx_GetVoltageRange>
 8006b9c:	6178      	str	r0, [r7, #20]
 8006b9e:	e014      	b.n	8006bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba0:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
 8006bac:	4b1f      	ldr	r3, [pc, #124]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006bb8:	f7ff f8d4 	bl	8005d64 <HAL_PWREx_GetVoltageRange>
 8006bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d10b      	bne.n	8006bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b80      	cmp	r3, #128	; 0x80
 8006bd6:	d913      	bls.n	8006c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2ba0      	cmp	r3, #160	; 0xa0
 8006bdc:	d902      	bls.n	8006be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bde:	2302      	movs	r3, #2
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	e00d      	b.n	8006c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006be4:	2301      	movs	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	e00a      	b.n	8006c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b7f      	cmp	r3, #127	; 0x7f
 8006bee:	d902      	bls.n	8006bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	e004      	b.n	8006c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b70      	cmp	r3, #112	; 0x70
 8006bfa:	d101      	bne.n	8006c00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 020f 	bic.w	r2, r3, #15
 8006c08:	4909      	ldr	r1, [pc, #36]	; (8006c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d001      	beq.n	8006c22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	40022000 	.word	0x40022000

08006c34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d00b      	beq.n	8006c62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d825      	bhi.n	8006c9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d008      	beq.n	8006c68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d11f      	bne.n	8006c9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006c5e:	613b      	str	r3, [r7, #16]
    break;
 8006c60:	e01f      	b.n	8006ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006c62:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006c64:	613b      	str	r3, [r7, #16]
    break;
 8006c66:	e01c      	b.n	8006ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c68:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d107      	bne.n	8006c84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e005      	b.n	8006c90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006c90:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	613b      	str	r3, [r7, #16]
    break;
 8006c9a:	e002      	b.n	8006ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
    break;
 8006ca0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	3301      	adds	r3, #1
 8006cae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	fb03 f202 	mul.w	r2, r3, r2
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	0e5b      	lsrs	r3, r3, #25
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006ce2:	683b      	ldr	r3, [r7, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	00f42400 	.word	0x00f42400
 8006cf8:	007a1200 	.word	0x007a1200
 8006cfc:	0800cf14 	.word	0x0800cf14

08006d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d08:	2300      	movs	r3, #0
 8006d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d040      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d02a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d825      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d026      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d2c:	2b60      	cmp	r3, #96	; 0x60
 8006d2e:	d821      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d006      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d81d      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d010      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006d40:	e018      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d42:	4b89      	ldr	r3, [pc, #548]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	4a88      	ldr	r2, [pc, #544]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d4e:	e015      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fb02 	bl	8007360 <RCCEx_PLLSAI1_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d60:	e00c      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3320      	adds	r3, #32
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fbed 	bl	8007548 <RCCEx_PLLSAI2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d72:	e003      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	74fb      	strb	r3, [r7, #19]
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7c:	7cfb      	ldrb	r3, [r7, #19]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d82:	4b79      	ldr	r3, [pc, #484]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	4975      	ldr	r1, [pc, #468]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006d98:	e001      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	7cfb      	ldrb	r3, [r7, #19]
 8006d9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d047      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db2:	d030      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db8:	d82a      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dbe:	d02a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc4:	d824      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dca:	d008      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd0:	d81e      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dda:	d010      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ddc:	e018      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006dde:	4b62      	ldr	r3, [pc, #392]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	4a61      	ldr	r2, [pc, #388]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006dea:	e015      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fab4 	bl	8007360 <RCCEx_PLLSAI1_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3320      	adds	r3, #32
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fb9f 	bl	8007548 <RCCEx_PLLSAI2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	74fb      	strb	r3, [r7, #19]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7cfb      	ldrb	r3, [r7, #19]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e1e:	4b52      	ldr	r3, [pc, #328]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	494e      	ldr	r1, [pc, #312]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006e34:	e001      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	7cfb      	ldrb	r3, [r7, #19]
 8006e38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 809f 	beq.w	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e4c:	4b46      	ldr	r3, [pc, #280]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e62:	4b41      	ldr	r3, [pc, #260]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	4a40      	ldr	r2, [pc, #256]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006e6e:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e7e:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a3a      	ldr	r2, [pc, #232]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e8a:	f7fc fd05 	bl	8003898 <HAL_GetTick>
 8006e8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e90:	e009      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e92:	f7fc fd01 	bl	8003898 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d902      	bls.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ea4:	e005      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ea6:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0ef      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006eb2:	7cfb      	ldrb	r3, [r7, #19]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d15b      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01f      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d019      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ed6:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ee2:	4b21      	ldr	r3, [pc, #132]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee8:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d016      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fc fcc0 	bl	8003898 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f1a:	e00b      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1c:	f7fc fcbc 	bl	8003898 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d902      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	74fb      	strb	r3, [r7, #19]
            break;
 8006f32:	e006      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ec      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006f42:	7cfb      	ldrb	r3, [r7, #19]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f58:	4903      	ldr	r1, [pc, #12]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f60:	e008      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	74bb      	strb	r3, [r7, #18]
 8006f66:	e005      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f74:	7c7b      	ldrb	r3, [r7, #17]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d105      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f7a:	4ba0      	ldr	r3, [pc, #640]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	4a9f      	ldr	r2, [pc, #636]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f92:	4b9a      	ldr	r3, [pc, #616]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f023 0203 	bic.w	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	4996      	ldr	r1, [pc, #600]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fb4:	4b91      	ldr	r3, [pc, #580]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f023 020c 	bic.w	r2, r3, #12
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	498e      	ldr	r1, [pc, #568]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006fd6:	4b89      	ldr	r3, [pc, #548]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe4:	4985      	ldr	r1, [pc, #532]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ff8:	4b80      	ldr	r3, [pc, #512]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007006:	497d      	ldr	r1, [pc, #500]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0310 	and.w	r3, r3, #16
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800701a:	4b78      	ldr	r3, [pc, #480]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	4974      	ldr	r1, [pc, #464]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	496c      	ldr	r1, [pc, #432]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800705e:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	4963      	ldr	r1, [pc, #396]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007080:	4b5e      	ldr	r3, [pc, #376]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800708e:	495b      	ldr	r1, [pc, #364]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070a2:	4b56      	ldr	r3, [pc, #344]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	4952      	ldr	r1, [pc, #328]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070c4:	4b4d      	ldr	r3, [pc, #308]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d2:	494a      	ldr	r1, [pc, #296]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070e6:	4b45      	ldr	r3, [pc, #276]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f4:	4941      	ldr	r1, [pc, #260]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007108:	4b3c      	ldr	r3, [pc, #240]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800710a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800710e:	f023 0203 	bic.w	r2, r3, #3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007116:	4939      	ldr	r1, [pc, #228]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d028      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800712a:	4b34      	ldr	r3, [pc, #208]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800712c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007138:	4930      	ldr	r1, [pc, #192]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007148:	d106      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800714a:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007154:	60d3      	str	r3, [r2, #12]
 8007156:	e011      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007160:	d10c      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	2101      	movs	r1, #1
 8007168:	4618      	mov	r0, r3
 800716a:	f000 f8f9 	bl	8007360 <RCCEx_PLLSAI1_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007172:	7cfb      	ldrb	r3, [r7, #19]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007178:	7cfb      	ldrb	r3, [r7, #19]
 800717a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d04d      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800718c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007190:	d108      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007198:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800719a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800719e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80071a2:	e012      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80071a4:	4b15      	ldr	r3, [pc, #84]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071aa:	4a14      	ldr	r2, [pc, #80]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80071b4:	4b11      	ldr	r3, [pc, #68]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c2:	490e      	ldr	r1, [pc, #56]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a08      	ldr	r2, [pc, #32]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071de:	60d3      	str	r3, [r2, #12]
 80071e0:	e020      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ea:	d109      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071ec:	4b03      	ldr	r3, [pc, #12]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4a02      	ldr	r2, [pc, #8]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f6:	60d3      	str	r3, [r2, #12]
 80071f8:	e014      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007208:	d10c      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2101      	movs	r1, #1
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f8a5 	bl	8007360 <RCCEx_PLLSAI1_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800721a:	7cfb      	ldrb	r3, [r7, #19]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d028      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007230:	4b4a      	ldr	r3, [pc, #296]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723e:	4947      	ldr	r1, [pc, #284]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800724a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724e:	d106      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007250:	4b42      	ldr	r3, [pc, #264]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a41      	ldr	r2, [pc, #260]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725a:	60d3      	str	r3, [r2, #12]
 800725c:	e011      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007266:	d10c      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	2101      	movs	r1, #1
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f876 	bl	8007360 <RCCEx_PLLSAI1_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800727e:	7cfb      	ldrb	r3, [r7, #19]
 8007280:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01e      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800728e:	4b33      	ldr	r3, [pc, #204]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729e:	492f      	ldr	r1, [pc, #188]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b0:	d10c      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	2102      	movs	r1, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 f851 	bl	8007360 <RCCEx_PLLSAI1_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072c2:	7cfb      	ldrb	r3, [r7, #19]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80072c8:	7cfb      	ldrb	r3, [r7, #19]
 80072ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072d8:	4b20      	ldr	r3, [pc, #128]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072de:	f023 0204 	bic.w	r2, r3, #4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e8:	491c      	ldr	r1, [pc, #112]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007302:	f023 0218 	bic.w	r2, r3, #24
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730c:	4913      	ldr	r1, [pc, #76]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d017      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007330:	490a      	ldr	r1, [pc, #40]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800733e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007342:	d105      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a04      	ldr	r2, [pc, #16]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800734a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800734e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007350:	7cbb      	ldrb	r3, [r7, #18]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000

08007360 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800736e:	4b72      	ldr	r3, [pc, #456]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800737a:	4b6f      	ldr	r3, [pc, #444]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0203 	and.w	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d103      	bne.n	8007392 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
       ||
 800738e:	2b00      	cmp	r3, #0
 8007390:	d142      	bne.n	8007418 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e03f      	b.n	8007418 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d018      	beq.n	80073d2 <RCCEx_PLLSAI1_Config+0x72>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d825      	bhi.n	80073f0 <RCCEx_PLLSAI1_Config+0x90>
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d002      	beq.n	80073ae <RCCEx_PLLSAI1_Config+0x4e>
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d009      	beq.n	80073c0 <RCCEx_PLLSAI1_Config+0x60>
 80073ac:	e020      	b.n	80073f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073ae:	4b62      	ldr	r3, [pc, #392]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d11d      	bne.n	80073f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073be:	e01a      	b.n	80073f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073c0:	4b5d      	ldr	r3, [pc, #372]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d116      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d0:	e013      	b.n	80073fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073d2:	4b59      	ldr	r3, [pc, #356]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073de:	4b56      	ldr	r3, [pc, #344]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ee:	e006      	b.n	80073fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
      break;
 80073f4:	e004      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80073fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d108      	bne.n	8007418 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007406:	4b4c      	ldr	r3, [pc, #304]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f023 0203 	bic.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4949      	ldr	r1, [pc, #292]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007414:	4313      	orrs	r3, r2
 8007416:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8086 	bne.w	800752c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007420:	4b45      	ldr	r3, [pc, #276]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a44      	ldr	r2, [pc, #272]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800742a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742c:	f7fc fa34 	bl	8003898 <HAL_GetTick>
 8007430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007432:	e009      	b.n	8007448 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007434:	f7fc fa30 	bl	8003898 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d902      	bls.n	8007448 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
        break;
 8007446:	e005      	b.n	8007454 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007448:	4b3b      	ldr	r3, [pc, #236]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ef      	bne.n	8007434 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d168      	bne.n	800752c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d113      	bne.n	8007488 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007460:	4b35      	ldr	r3, [pc, #212]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	4b35      	ldr	r3, [pc, #212]	; (800753c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6892      	ldr	r2, [r2, #8]
 800746c:	0211      	lsls	r1, r2, #8
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68d2      	ldr	r2, [r2, #12]
 8007472:	06d2      	lsls	r2, r2, #27
 8007474:	4311      	orrs	r1, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6852      	ldr	r2, [r2, #4]
 800747a:	3a01      	subs	r2, #1
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	430a      	orrs	r2, r1
 8007480:	492d      	ldr	r1, [pc, #180]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
 8007486:	e02d      	b.n	80074e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d115      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800748e:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6892      	ldr	r2, [r2, #8]
 800749a:	0211      	lsls	r1, r2, #8
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6912      	ldr	r2, [r2, #16]
 80074a0:	0852      	lsrs	r2, r2, #1
 80074a2:	3a01      	subs	r2, #1
 80074a4:	0552      	lsls	r2, r2, #21
 80074a6:	4311      	orrs	r1, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6852      	ldr	r2, [r2, #4]
 80074ac:	3a01      	subs	r2, #1
 80074ae:	0112      	lsls	r2, r2, #4
 80074b0:	430a      	orrs	r2, r1
 80074b2:	4921      	ldr	r1, [pc, #132]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	610b      	str	r3, [r1, #16]
 80074b8:	e014      	b.n	80074e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ba:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	4b21      	ldr	r3, [pc, #132]	; (8007544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6892      	ldr	r2, [r2, #8]
 80074c6:	0211      	lsls	r1, r2, #8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6952      	ldr	r2, [r2, #20]
 80074cc:	0852      	lsrs	r2, r2, #1
 80074ce:	3a01      	subs	r2, #1
 80074d0:	0652      	lsls	r2, r2, #25
 80074d2:	4311      	orrs	r1, r2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6852      	ldr	r2, [r2, #4]
 80074d8:	3a01      	subs	r2, #1
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	430a      	orrs	r2, r1
 80074de:	4916      	ldr	r1, [pc, #88]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fc f9d2 	bl	8003898 <HAL_GetTick>
 80074f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074f6:	e009      	b.n	800750c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074f8:	f7fc f9ce 	bl	8003898 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
          break;
 800750a:	e005      	b.n	8007518 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ef      	beq.n	80074f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40021000 	.word	0x40021000
 800753c:	07ff800f 	.word	0x07ff800f
 8007540:	ff9f800f 	.word	0xff9f800f
 8007544:	f9ff800f 	.word	0xf9ff800f

08007548 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007556:	4b72      	ldr	r3, [pc, #456]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007562:	4b6f      	ldr	r3, [pc, #444]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0203 	and.w	r2, r3, #3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d103      	bne.n	800757a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
       ||
 8007576:	2b00      	cmp	r3, #0
 8007578:	d142      	bne.n	8007600 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]
 800757e:	e03f      	b.n	8007600 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d018      	beq.n	80075ba <RCCEx_PLLSAI2_Config+0x72>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d825      	bhi.n	80075d8 <RCCEx_PLLSAI2_Config+0x90>
 800758c:	2b01      	cmp	r3, #1
 800758e:	d002      	beq.n	8007596 <RCCEx_PLLSAI2_Config+0x4e>
 8007590:	2b02      	cmp	r3, #2
 8007592:	d009      	beq.n	80075a8 <RCCEx_PLLSAI2_Config+0x60>
 8007594:	e020      	b.n	80075d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007596:	4b62      	ldr	r3, [pc, #392]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d11d      	bne.n	80075de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075a6:	e01a      	b.n	80075de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075a8:	4b5d      	ldr	r3, [pc, #372]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d116      	bne.n	80075e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b8:	e013      	b.n	80075e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075ba:	4b59      	ldr	r3, [pc, #356]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10f      	bne.n	80075e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075c6:	4b56      	ldr	r3, [pc, #344]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075d6:	e006      	b.n	80075e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	e004      	b.n	80075e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80075de:	bf00      	nop
 80075e0:	e002      	b.n	80075e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80075e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80075ee:	4b4c      	ldr	r3, [pc, #304]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f023 0203 	bic.w	r2, r3, #3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4949      	ldr	r1, [pc, #292]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 8086 	bne.w	8007714 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007608:	4b45      	ldr	r3, [pc, #276]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a44      	ldr	r2, [pc, #272]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 800760e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007614:	f7fc f940 	bl	8003898 <HAL_GetTick>
 8007618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800761a:	e009      	b.n	8007630 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800761c:	f7fc f93c 	bl	8003898 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d902      	bls.n	8007630 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	73fb      	strb	r3, [r7, #15]
        break;
 800762e:	e005      	b.n	800763c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007630:	4b3b      	ldr	r3, [pc, #236]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1ef      	bne.n	800761c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d168      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d113      	bne.n	8007670 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007648:	4b35      	ldr	r3, [pc, #212]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <RCCEx_PLLSAI2_Config+0x1dc>)
 800764e:	4013      	ands	r3, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6892      	ldr	r2, [r2, #8]
 8007654:	0211      	lsls	r1, r2, #8
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68d2      	ldr	r2, [r2, #12]
 800765a:	06d2      	lsls	r2, r2, #27
 800765c:	4311      	orrs	r1, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6852      	ldr	r2, [r2, #4]
 8007662:	3a01      	subs	r2, #1
 8007664:	0112      	lsls	r2, r2, #4
 8007666:	430a      	orrs	r2, r1
 8007668:	492d      	ldr	r1, [pc, #180]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 800766a:	4313      	orrs	r3, r2
 800766c:	614b      	str	r3, [r1, #20]
 800766e:	e02d      	b.n	80076cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d115      	bne.n	80076a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007676:	4b2a      	ldr	r3, [pc, #168]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <RCCEx_PLLSAI2_Config+0x1e0>)
 800767c:	4013      	ands	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6892      	ldr	r2, [r2, #8]
 8007682:	0211      	lsls	r1, r2, #8
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6912      	ldr	r2, [r2, #16]
 8007688:	0852      	lsrs	r2, r2, #1
 800768a:	3a01      	subs	r2, #1
 800768c:	0552      	lsls	r2, r2, #21
 800768e:	4311      	orrs	r1, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6852      	ldr	r2, [r2, #4]
 8007694:	3a01      	subs	r2, #1
 8007696:	0112      	lsls	r2, r2, #4
 8007698:	430a      	orrs	r2, r1
 800769a:	4921      	ldr	r1, [pc, #132]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 800769c:	4313      	orrs	r3, r2
 800769e:	614b      	str	r3, [r1, #20]
 80076a0:	e014      	b.n	80076cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076a2:	4b1f      	ldr	r3, [pc, #124]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <RCCEx_PLLSAI2_Config+0x1e4>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6892      	ldr	r2, [r2, #8]
 80076ae:	0211      	lsls	r1, r2, #8
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6952      	ldr	r2, [r2, #20]
 80076b4:	0852      	lsrs	r2, r2, #1
 80076b6:	3a01      	subs	r2, #1
 80076b8:	0652      	lsls	r2, r2, #25
 80076ba:	4311      	orrs	r1, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6852      	ldr	r2, [r2, #4]
 80076c0:	3a01      	subs	r2, #1
 80076c2:	0112      	lsls	r2, r2, #4
 80076c4:	430a      	orrs	r2, r1
 80076c6:	4916      	ldr	r1, [pc, #88]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80076cc:	4b14      	ldr	r3, [pc, #80]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d8:	f7fc f8de 	bl	8003898 <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076de:	e009      	b.n	80076f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076e0:	f7fc f8da 	bl	8003898 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
          break;
 80076f2:	e005      	b.n	8007700 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0ef      	beq.n	80076e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007706:	4b06      	ldr	r3, [pc, #24]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	4904      	ldr	r1, [pc, #16]	; (8007720 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007710:	4313      	orrs	r3, r2
 8007712:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000
 8007724:	07ff800f 	.word	0x07ff800f
 8007728:	ff9f800f 	.word	0xff9f800f
 800772c:	f9ff800f 	.word	0xf9ff800f

08007730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e049      	b.n	80077d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f841 	bl	80077de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f000 f9da 	bl	8007b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d001      	beq.n	800780c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e04f      	b.n	80078ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a23      	ldr	r2, [pc, #140]	; (80078b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01d      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007836:	d018      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <HAL_TIM_Base_Start_IT+0xc8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1c      	ldr	r2, [pc, #112]	; (80078c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1b      	ldr	r2, [pc, #108]	; (80078c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIM_Base_Start_IT+0x76>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d115      	bne.n	8007896 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007872:	4013      	ands	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b06      	cmp	r3, #6
 800787a:	d015      	beq.n	80078a8 <HAL_TIM_Base_Start_IT+0xb4>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007882:	d011      	beq.n	80078a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007894:	e008      	b.n	80078a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e000      	b.n	80078aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	40012c00 	.word	0x40012c00
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800
 80078c4:	40000c00 	.word	0x40000c00
 80078c8:	40013400 	.word	0x40013400
 80078cc:	40014000 	.word	0x40014000
 80078d0:	00010007 	.word	0x00010007

080078d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d020      	beq.n	8007938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01b      	beq.n	8007938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0202 	mvn.w	r2, #2
 8007908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8e4 	bl	8007aec <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8d6 	bl	8007ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8e7 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d020      	beq.n	8007984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01b      	beq.n	8007984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0204 	mvn.w	r2, #4
 8007954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8be 	bl	8007aec <HAL_TIM_IC_CaptureCallback>
 8007970:	e005      	b.n	800797e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8b0 	bl	8007ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8c1 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d020      	beq.n	80079d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0208 	mvn.w	r2, #8
 80079a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2204      	movs	r2, #4
 80079a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f898 	bl	8007aec <HAL_TIM_IC_CaptureCallback>
 80079bc:	e005      	b.n	80079ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f88a 	bl	8007ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f89b 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d020      	beq.n	8007a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01b      	beq.n	8007a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0210 	mvn.w	r2, #16
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2208      	movs	r2, #8
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f872 	bl	8007aec <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f864 	bl	8007ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f875 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00c      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d007      	beq.n	8007a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0201 	mvn.w	r2, #1
 8007a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fa f874 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00c      	beq.n	8007a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f906 	bl	8007c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8fe 	bl	8007c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00c      	beq.n	8007aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f834 	bl	8007b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00c      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0220 	mvn.w	r2, #32
 8007ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8c6 	bl	8007c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a40      	ldr	r2, [pc, #256]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b46:	d00f      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3d      	ldr	r2, [pc, #244]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3c      	ldr	r2, [pc, #240]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a3b      	ldr	r2, [pc, #236]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3a      	ldr	r2, [pc, #232]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2f      	ldr	r2, [pc, #188]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01f      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d01b      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d017      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00f      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00b      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a28      	ldr	r2, [pc, #160]	; (8007c50 <TIM_Base_SetConfig+0x128>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d007      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	; (8007c54 <TIM_Base_SetConfig+0x12c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_Base_SetConfig+0x9a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a26      	ldr	r2, [pc, #152]	; (8007c58 <TIM_Base_SetConfig+0x130>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d108      	bne.n	8007bd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00f      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a12      	ldr	r2, [pc, #72]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00b      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <TIM_Base_SetConfig+0x128>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d007      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a10      	ldr	r2, [pc, #64]	; (8007c54 <TIM_Base_SetConfig+0x12c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a0f      	ldr	r2, [pc, #60]	; (8007c58 <TIM_Base_SetConfig+0x130>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d103      	bne.n	8007c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	615a      	str	r2, [r3, #20]
}
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40013400 	.word	0x40013400
 8007c50:	40014000 	.word	0x40014000
 8007c54:	40014400 	.word	0x40014400
 8007c58:	40014800 	.word	0x40014800

08007c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e042      	b.n	8007d30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fa ff39 	bl	8002b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2224      	movs	r2, #36	; 0x24
 8007cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fbb4 	bl	8008450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f8b5 	bl	8007e58 <UART_SetConfig>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e01b      	b.n	8007d30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc33 	bl	8008594 <UART_CheckIdleState>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d17c      	bne.n	8007e4c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_UART_Transmit+0x26>
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e075      	b.n	8007e4e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2221      	movs	r2, #33	; 0x21
 8007d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d72:	f7fb fd91 	bl	8003898 <HAL_GetTick>
 8007d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d90:	d108      	bne.n	8007da4 <HAL_UART_Transmit+0x6c>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e003      	b.n	8007dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dac:	e031      	b.n	8007e12 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fc95 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03e      	b.n	8007e4e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	881a      	ldrh	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de2:	b292      	uxth	r2, r2
 8007de4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3302      	adds	r3, #2
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e008      	b.n	8007e00 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	b292      	uxth	r2, r2
 8007df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1c7      	bne.n	8007dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2140      	movs	r1, #64	; 0x40
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fc5d 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e006      	b.n	8007e4e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e000      	b.n	8007e4e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e5c:	b08c      	sub	sp, #48	; 0x30
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	431a      	orrs	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4baa      	ldr	r3, [pc, #680]	; (8008130 <UART_SetConfig+0x2d8>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a9f      	ldr	r2, [pc, #636]	; (8008134 <UART_SetConfig+0x2dc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ece:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	f023 010f 	bic.w	r1, r3, #15
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a90      	ldr	r2, [pc, #576]	; (8008138 <UART_SetConfig+0x2e0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d125      	bne.n	8007f48 <UART_SetConfig+0xf0>
 8007efc:	4b8f      	ldr	r3, [pc, #572]	; (800813c <UART_SetConfig+0x2e4>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d81a      	bhi.n	8007f40 <UART_SetConfig+0xe8>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0xb8>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f31 	.word	0x08007f31
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f26:	e116      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2e:	e112      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e10e      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e10a      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f46:	e106      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a7c      	ldr	r2, [pc, #496]	; (8008140 <UART_SetConfig+0x2e8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d138      	bne.n	8007fc4 <UART_SetConfig+0x16c>
 8007f52:	4b7a      	ldr	r3, [pc, #488]	; (800813c <UART_SetConfig+0x2e4>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	f003 030c 	and.w	r3, r3, #12
 8007f5c:	2b0c      	cmp	r3, #12
 8007f5e:	d82d      	bhi.n	8007fbc <UART_SetConfig+0x164>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0x110>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007f9d 	.word	0x08007f9d
 8007f6c:	08007fbd 	.word	0x08007fbd
 8007f70:	08007fbd 	.word	0x08007fbd
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fbd 	.word	0x08007fbd
 8007f80:	08007fbd 	.word	0x08007fbd
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fb5 	.word	0x08007fb5
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa2:	e0d8      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e0d4      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007fac:	2304      	movs	r3, #4
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e0d0      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007fb4:	2308      	movs	r3, #8
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e0cc      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e0c8      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a5e      	ldr	r2, [pc, #376]	; (8008144 <UART_SetConfig+0x2ec>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d125      	bne.n	800801a <UART_SetConfig+0x1c2>
 8007fce:	4b5b      	ldr	r3, [pc, #364]	; (800813c <UART_SetConfig+0x2e4>)
 8007fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fd8:	2b30      	cmp	r3, #48	; 0x30
 8007fda:	d016      	beq.n	800800a <UART_SetConfig+0x1b2>
 8007fdc:	2b30      	cmp	r3, #48	; 0x30
 8007fde:	d818      	bhi.n	8008012 <UART_SetConfig+0x1ba>
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d00a      	beq.n	8007ffa <UART_SetConfig+0x1a2>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d814      	bhi.n	8008012 <UART_SetConfig+0x1ba>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <UART_SetConfig+0x19a>
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d008      	beq.n	8008002 <UART_SetConfig+0x1aa>
 8007ff0:	e00f      	b.n	8008012 <UART_SetConfig+0x1ba>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff8:	e0ad      	b.n	8008156 <UART_SetConfig+0x2fe>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008000:	e0a9      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008002:	2304      	movs	r3, #4
 8008004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008008:	e0a5      	b.n	8008156 <UART_SetConfig+0x2fe>
 800800a:	2308      	movs	r3, #8
 800800c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008010:	e0a1      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008012:	2310      	movs	r3, #16
 8008014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008018:	e09d      	b.n	8008156 <UART_SetConfig+0x2fe>
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a4a      	ldr	r2, [pc, #296]	; (8008148 <UART_SetConfig+0x2f0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d125      	bne.n	8008070 <UART_SetConfig+0x218>
 8008024:	4b45      	ldr	r3, [pc, #276]	; (800813c <UART_SetConfig+0x2e4>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800802e:	2bc0      	cmp	r3, #192	; 0xc0
 8008030:	d016      	beq.n	8008060 <UART_SetConfig+0x208>
 8008032:	2bc0      	cmp	r3, #192	; 0xc0
 8008034:	d818      	bhi.n	8008068 <UART_SetConfig+0x210>
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d00a      	beq.n	8008050 <UART_SetConfig+0x1f8>
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d814      	bhi.n	8008068 <UART_SetConfig+0x210>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <UART_SetConfig+0x1f0>
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d008      	beq.n	8008058 <UART_SetConfig+0x200>
 8008046:	e00f      	b.n	8008068 <UART_SetConfig+0x210>
 8008048:	2300      	movs	r3, #0
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804e:	e082      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008050:	2302      	movs	r3, #2
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008056:	e07e      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e07a      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e076      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e072      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a35      	ldr	r2, [pc, #212]	; (800814c <UART_SetConfig+0x2f4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d12a      	bne.n	80080d0 <UART_SetConfig+0x278>
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <UART_SetConfig+0x2e4>)
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008088:	d01a      	beq.n	80080c0 <UART_SetConfig+0x268>
 800808a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808e:	d81b      	bhi.n	80080c8 <UART_SetConfig+0x270>
 8008090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008094:	d00c      	beq.n	80080b0 <UART_SetConfig+0x258>
 8008096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809a:	d815      	bhi.n	80080c8 <UART_SetConfig+0x270>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <UART_SetConfig+0x250>
 80080a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a4:	d008      	beq.n	80080b8 <UART_SetConfig+0x260>
 80080a6:	e00f      	b.n	80080c8 <UART_SetConfig+0x270>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e052      	b.n	8008156 <UART_SetConfig+0x2fe>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e04e      	b.n	8008156 <UART_SetConfig+0x2fe>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e04a      	b.n	8008156 <UART_SetConfig+0x2fe>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e046      	b.n	8008156 <UART_SetConfig+0x2fe>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e042      	b.n	8008156 <UART_SetConfig+0x2fe>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a17      	ldr	r2, [pc, #92]	; (8008134 <UART_SetConfig+0x2dc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d13a      	bne.n	8008150 <UART_SetConfig+0x2f8>
 80080da:	4b18      	ldr	r3, [pc, #96]	; (800813c <UART_SetConfig+0x2e4>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080e8:	d01a      	beq.n	8008120 <UART_SetConfig+0x2c8>
 80080ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ee:	d81b      	bhi.n	8008128 <UART_SetConfig+0x2d0>
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f4:	d00c      	beq.n	8008110 <UART_SetConfig+0x2b8>
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fa:	d815      	bhi.n	8008128 <UART_SetConfig+0x2d0>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <UART_SetConfig+0x2b0>
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008104:	d008      	beq.n	8008118 <UART_SetConfig+0x2c0>
 8008106:	e00f      	b.n	8008128 <UART_SetConfig+0x2d0>
 8008108:	2300      	movs	r3, #0
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810e:	e022      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008110:	2302      	movs	r3, #2
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008116:	e01e      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e01a      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e016      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e012      	b.n	8008156 <UART_SetConfig+0x2fe>
 8008130:	cfff69f3 	.word	0xcfff69f3
 8008134:	40008000 	.word	0x40008000
 8008138:	40013800 	.word	0x40013800
 800813c:	40021000 	.word	0x40021000
 8008140:	40004400 	.word	0x40004400
 8008144:	40004800 	.word	0x40004800
 8008148:	40004c00 	.word	0x40004c00
 800814c:	40005000 	.word	0x40005000
 8008150:	2310      	movs	r3, #16
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4aae      	ldr	r2, [pc, #696]	; (8008414 <UART_SetConfig+0x5bc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	f040 8097 	bne.w	8008290 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008166:	2b08      	cmp	r3, #8
 8008168:	d823      	bhi.n	80081b2 <UART_SetConfig+0x35a>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <UART_SetConfig+0x318>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008195 	.word	0x08008195
 8008174:	080081b3 	.word	0x080081b3
 8008178:	0800819d 	.word	0x0800819d
 800817c:	080081b3 	.word	0x080081b3
 8008180:	080081a3 	.word	0x080081a3
 8008184:	080081b3 	.word	0x080081b3
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081b3 	.word	0x080081b3
 8008190:	080081ab 	.word	0x080081ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fe fc96 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 8008198:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800819a:	e010      	b.n	80081be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800819c:	4b9e      	ldr	r3, [pc, #632]	; (8008418 <UART_SetConfig+0x5c0>)
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081a0:	e00d      	b.n	80081be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a2:	f7fe fbf7 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081a8:	e009      	b.n	80081be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081b0:	e005      	b.n	80081be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8130 	beq.w	8008426 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	4a94      	ldr	r2, [pc, #592]	; (800841c <UART_SetConfig+0x5c4>)
 80081cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d305      	bcc.n	80081f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d903      	bls.n	80081fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081fc:	e113      	b.n	8008426 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2200      	movs	r2, #0
 8008202:	60bb      	str	r3, [r7, #8]
 8008204:	60fa      	str	r2, [r7, #12]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	4a84      	ldr	r2, [pc, #528]	; (800841c <UART_SetConfig+0x5c4>)
 800820c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008210:	b29b      	uxth	r3, r3
 8008212:	2200      	movs	r2, #0
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008220:	f7f8 fcda 	bl	8000bd8 <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4610      	mov	r0, r2
 800822a:	4619      	mov	r1, r3
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	020b      	lsls	r3, r1, #8
 8008236:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800823a:	0202      	lsls	r2, r0, #8
 800823c:	6979      	ldr	r1, [r7, #20]
 800823e:	6849      	ldr	r1, [r1, #4]
 8008240:	0849      	lsrs	r1, r1, #1
 8008242:	2000      	movs	r0, #0
 8008244:	460c      	mov	r4, r1
 8008246:	4605      	mov	r5, r0
 8008248:	eb12 0804 	adds.w	r8, r2, r4
 800824c:	eb43 0905 	adc.w	r9, r3, r5
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	469a      	mov	sl, r3
 8008258:	4693      	mov	fp, r2
 800825a:	4652      	mov	r2, sl
 800825c:	465b      	mov	r3, fp
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	f7f8 fcb9 	bl	8000bd8 <__aeabi_uldivmod>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4613      	mov	r3, r2
 800826c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008274:	d308      	bcc.n	8008288 <UART_SetConfig+0x430>
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800827c:	d204      	bcs.n	8008288 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	60da      	str	r2, [r3, #12]
 8008286:	e0ce      	b.n	8008426 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800828e:	e0ca      	b.n	8008426 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d166      	bne.n	8008368 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800829a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d827      	bhi.n	80082f2 <UART_SetConfig+0x49a>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x450>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082f3 	.word	0x080082f3
 80082b8:	080082e3 	.word	0x080082e3
 80082bc:	080082f3 	.word	0x080082f3
 80082c0:	080082f3 	.word	0x080082f3
 80082c4:	080082f3 	.word	0x080082f3
 80082c8:	080082eb 	.word	0x080082eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fe fbfa 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 80082d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082d2:	e014      	b.n	80082fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d4:	f7fe fc0c 	bl	8006af0 <HAL_RCC_GetPCLK2Freq>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082da:	e010      	b.n	80082fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082dc:	4b4e      	ldr	r3, [pc, #312]	; (8008418 <UART_SetConfig+0x5c0>)
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082e0:	e00d      	b.n	80082fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e2:	f7fe fb57 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 80082e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082e8:	e009      	b.n	80082fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082f0:	e005      	b.n	80082fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8090 	beq.w	8008426 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	4a44      	ldr	r2, [pc, #272]	; (800841c <UART_SetConfig+0x5c4>)
 800830c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008310:	461a      	mov	r2, r3
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	fbb3 f3f2 	udiv	r3, r3, r2
 8008318:	005a      	lsls	r2, r3, #1
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	441a      	add	r2, r3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	fbb2 f3f3 	udiv	r3, r2, r3
 800832a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2b0f      	cmp	r3, #15
 8008330:	d916      	bls.n	8008360 <UART_SetConfig+0x508>
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008338:	d212      	bcs.n	8008360 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f023 030f 	bic.w	r3, r3, #15
 8008342:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	b29a      	uxth	r2, r3
 8008350:	8bfb      	ldrh	r3, [r7, #30]
 8008352:	4313      	orrs	r3, r2
 8008354:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	8bfa      	ldrh	r2, [r7, #30]
 800835c:	60da      	str	r2, [r3, #12]
 800835e:	e062      	b.n	8008426 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008366:	e05e      	b.n	8008426 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800836c:	2b08      	cmp	r3, #8
 800836e:	d828      	bhi.n	80083c2 <UART_SetConfig+0x56a>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x520>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083a5 	.word	0x080083a5
 8008380:	080083ad 	.word	0x080083ad
 8008384:	080083c3 	.word	0x080083c3
 8008388:	080083b3 	.word	0x080083b3
 800838c:	080083c3 	.word	0x080083c3
 8008390:	080083c3 	.word	0x080083c3
 8008394:	080083c3 	.word	0x080083c3
 8008398:	080083bb 	.word	0x080083bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fe fb92 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083a2:	e014      	b.n	80083ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a4:	f7fe fba4 	bl	8006af0 <HAL_RCC_GetPCLK2Freq>
 80083a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083aa:	e010      	b.n	80083ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <UART_SetConfig+0x5c0>)
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083b0:	e00d      	b.n	80083ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b2:	f7fe faef 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 80083b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083b8:	e009      	b.n	80083ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083c0:	e005      	b.n	80083ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083cc:	bf00      	nop
    }

    if (pclk != 0U)
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d028      	beq.n	8008426 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	4a10      	ldr	r2, [pc, #64]	; (800841c <UART_SetConfig+0x5c4>)
 80083da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083de:	461a      	mov	r2, r3
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	085b      	lsrs	r3, r3, #1
 80083ec:	441a      	add	r2, r3
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2b0f      	cmp	r3, #15
 80083fc:	d910      	bls.n	8008420 <UART_SetConfig+0x5c8>
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008404:	d20c      	bcs.n	8008420 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	b29a      	uxth	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	e009      	b.n	8008426 <UART_SetConfig+0x5ce>
 8008412:	bf00      	nop
 8008414:	40008000 	.word	0x40008000
 8008418:	00f42400 	.word	0x00f42400
 800841c:	0800cf44 	.word	0x0800cf44
      }
      else
      {
        ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2201      	movs	r2, #1
 800842a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2201      	movs	r2, #1
 8008432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2200      	movs	r2, #0
 8008440:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008442:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008446:	4618      	mov	r0, r3
 8008448:	3730      	adds	r7, #48	; 0x30
 800844a:	46bd      	mov	sp, r7
 800844c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01a      	beq.n	8008566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854e:	d10a      	bne.n	8008566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b098      	sub	sp, #96	; 0x60
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a4:	f7fb f978 	bl	8003898 <HAL_GetTick>
 80085a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d12f      	bne.n	8008618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f88e 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d022      	beq.n	8008618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e6:	653b      	str	r3, [r7, #80]	; 0x50
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f0:	647b      	str	r3, [r7, #68]	; 0x44
 80085f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e063      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b04      	cmp	r3, #4
 8008624:	d149      	bne.n	80086ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f857 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d03c      	beq.n	80086ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	623b      	str	r3, [r7, #32]
   return(result);
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865e:	633b      	str	r3, [r7, #48]	; 0x30
 8008660:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	60fb      	str	r3, [r7, #12]
   return(result);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	64bb      	str	r3, [r7, #72]	; 0x48
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008692:	61fa      	str	r2, [r7, #28]
 8008694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	69b9      	ldr	r1, [r7, #24]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	617b      	str	r3, [r7, #20]
   return(result);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e012      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3758      	adds	r7, #88	; 0x58
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f8:	e049      	b.n	800878e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d045      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fb f8c9 	bl	8003898 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <UART_WaitOnFlagUntilTimeout+0x30>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e048      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d031      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b08      	cmp	r3, #8
 8008736:	d110      	bne.n	800875a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2208      	movs	r2, #8
 800873e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f838 	bl	80087b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2208      	movs	r2, #8
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e029      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008768:	d111      	bne.n	800878e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f81e 	bl	80087b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e00f      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69da      	ldr	r2, [r3, #28]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4013      	ands	r3, r2
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	bf0c      	ite	eq
 800879e:	2301      	moveq	r3, #1
 80087a0:	2300      	movne	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d0a6      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b095      	sub	sp, #84	; 0x54
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087dc:	643b      	str	r3, [r7, #64]	; 0x40
 80087de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008806:	f023 0301 	bic.w	r3, r3, #1
 800880a:	64bb      	str	r3, [r7, #72]	; 0x48
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008814:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800881a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e3      	bne.n	80087f0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882c:	2b01      	cmp	r3, #1
 800882e:	d118      	bne.n	8008862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	60bb      	str	r3, [r7, #8]
   return(result);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f023 0310 	bic.w	r3, r3, #16
 8008844:	647b      	str	r3, [r7, #68]	; 0x44
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6979      	ldr	r1, [r7, #20]
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	613b      	str	r3, [r7, #16]
   return(result);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e6      	bne.n	8008830 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008876:	bf00      	nop
 8008878:	3754      	adds	r7, #84	; 0x54
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_UARTEx_DisableFifoMode+0x16>
 8008894:	2302      	movs	r3, #2
 8008896:	e027      	b.n	80088e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2224      	movs	r2, #36	; 0x24
 80088a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0201 	bic.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2220      	movs	r2, #32
 80088da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e02d      	b.n	8008968 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	; 0x24
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f84f 	bl	80089ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008984:	2302      	movs	r3, #2
 8008986:	e02d      	b.n	80089e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2224      	movs	r2, #36	; 0x24
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f811 	bl	80089ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d108      	bne.n	8008a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a0c:	e031      	b.n	8008a72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a0e:	2308      	movs	r3, #8
 8008a10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a12:	2308      	movs	r3, #8
 8008a14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	0e5b      	lsrs	r3, r3, #25
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	0f5b      	lsrs	r3, r3, #29
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	7b3a      	ldrb	r2, [r7, #12]
 8008a3a:	4911      	ldr	r1, [pc, #68]	; (8008a80 <UARTEx_SetNbDataToProcess+0x94>)
 8008a3c:	5c8a      	ldrb	r2, [r1, r2]
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a42:	7b3a      	ldrb	r2, [r7, #12]
 8008a44:	490f      	ldr	r1, [pc, #60]	; (8008a84 <UARTEx_SetNbDataToProcess+0x98>)
 8008a46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	7b7a      	ldrb	r2, [r7, #13]
 8008a58:	4909      	ldr	r1, [pc, #36]	; (8008a80 <UARTEx_SetNbDataToProcess+0x94>)
 8008a5a:	5c8a      	ldrb	r2, [r1, r2]
 8008a5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a60:	7b7a      	ldrb	r2, [r7, #13]
 8008a62:	4908      	ldr	r1, [pc, #32]	; (8008a84 <UARTEx_SetNbDataToProcess+0x98>)
 8008a64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	0800cf5c 	.word	0x0800cf5c
 8008a84:	0800cf64 	.word	0x0800cf64

08008a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a9a:	2b84      	cmp	r3, #132	; 0x84
 8008a9c:	d005      	beq.n	8008aaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3303      	adds	r3, #3
 8008aa8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008abc:	f000 fade 	bl	800907c <vTaskStartScheduler>
  
  return osOK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac8:	b089      	sub	sp, #36	; 0x24
 8008aca:	af04      	add	r7, sp, #16
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d020      	beq.n	8008b1a <osThreadCreate+0x54>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01c      	beq.n	8008b1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685c      	ldr	r4, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691e      	ldr	r6, [r3, #16]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff ffc8 	bl	8008a88 <makeFreeRtosPriority>
 8008af8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b02:	9202      	str	r2, [sp, #8]
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	9100      	str	r1, [sp, #0]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f8ed 	bl	8008cee <xTaskCreateStatic>
 8008b14:	4603      	mov	r3, r0
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e01c      	b.n	8008b54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685c      	ldr	r4, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b26:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff ffaa 	bl	8008a88 <makeFreeRtosPriority>
 8008b34:	4602      	mov	r2, r0
 8008b36:	f107 030c 	add.w	r3, r7, #12
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	9200      	str	r2, [sp, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	4632      	mov	r2, r6
 8008b42:	4629      	mov	r1, r5
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 f92f 	bl	8008da8 <xTaskCreate>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d001      	beq.n	8008b54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <osDelay+0x16>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	e000      	b.n	8008b76 <osDelay+0x18>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fa4c 	bl	8009014 <vTaskDelay>
  
  return osOK;
 8008b7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f103 0208 	add.w	r2, r3, #8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f103 0208 	add.w	r2, r3, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f103 0208 	add.w	r2, r3, #8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d103      	bne.n	8008c48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	e00c      	b.n	8008c62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e002      	b.n	8008c56 <vListInsert+0x2e>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d2f6      	bcs.n	8008c50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6892      	ldr	r2, [r2, #8]
 8008cb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6852      	ldr	r2, [r2, #4]
 8008cba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d103      	bne.n	8008cce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1e5a      	subs	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b08e      	sub	sp, #56	; 0x38
 8008cf2:	af04      	add	r7, sp, #16
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10a      	bne.n	8008d18 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	61fb      	str	r3, [r7, #28]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d34:	2354      	movs	r3, #84	; 0x54
 8008d36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b54      	cmp	r3, #84	; 0x54
 8008d3c:	d00a      	beq.n	8008d54 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	61bb      	str	r3, [r7, #24]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01e      	beq.n	8008d9a <xTaskCreateStatic+0xac>
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01b      	beq.n	8008d9a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d74:	2300      	movs	r3, #0
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	9302      	str	r3, [sp, #8]
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f850 	bl	8008e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d94:	f000 f8d4 	bl	8008f40 <prvAddNewTaskToReadyList>
 8008d98:	e001      	b.n	8008d9e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d9e:	697b      	ldr	r3, [r7, #20]
	}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3728      	adds	r7, #40	; 0x28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08c      	sub	sp, #48	; 0x30
 8008dac:	af04      	add	r7, sp, #16
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fec3 	bl	8009b48 <pvPortMalloc>
 8008dc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00e      	beq.n	8008de8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dca:	2054      	movs	r0, #84	; 0x54
 8008dcc:	f000 febc 	bl	8009b48 <pvPortMalloc>
 8008dd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8008dde:	e005      	b.n	8008dec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008de0:	6978      	ldr	r0, [r7, #20]
 8008de2:	f000 ff7d 	bl	8009ce0 <vPortFree>
 8008de6:	e001      	b.n	8008dec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d017      	beq.n	8008e22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dfa:	88fa      	ldrh	r2, [r7, #6]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9303      	str	r3, [sp, #12]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f80e 	bl	8008e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e16:	69f8      	ldr	r0, [r7, #28]
 8008e18:	f000 f892 	bl	8008f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e002      	b.n	8008e28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e22:	f04f 33ff 	mov.w	r3, #4294967295
 8008e26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e28:	69bb      	ldr	r3, [r7, #24]
	}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b088      	sub	sp, #32
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f023 0307 	bic.w	r3, r3, #7
 8008e58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <prvInitialiseNewTask+0x48>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	617b      	str	r3, [r7, #20]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01f      	beq.n	8008ec0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e012      	b.n	8008eac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	7819      	ldrb	r1, [r3, #0]
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	3334      	adds	r3, #52	; 0x34
 8008e96:	460a      	mov	r2, r1
 8008e98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d006      	beq.n	8008eb4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	d9e9      	bls.n	8008e86 <prvInitialiseNewTask+0x54>
 8008eb2:	e000      	b.n	8008eb6 <prvInitialiseNewTask+0x84>
			{
				break;
 8008eb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ebe:	e003      	b.n	8008ec8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d901      	bls.n	8008ed2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ece:	2306      	movs	r3, #6
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008edc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fe6c 	bl	8008bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff fe67 	bl	8008bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	f1c3 0207 	rsb	r2, r3, #7
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	69b8      	ldr	r0, [r7, #24]
 8008f22:	f000 fc05 	bl	8009730 <pxPortInitialiseStack>
 8008f26:	4602      	mov	r2, r0
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f38:	bf00      	nop
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f48:	f000 fd1c 	bl	8009984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f4c:	4b2a      	ldr	r3, [pc, #168]	; (8008ff8 <prvAddNewTaskToReadyList+0xb8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	4a29      	ldr	r2, [pc, #164]	; (8008ff8 <prvAddNewTaskToReadyList+0xb8>)
 8008f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f56:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <prvAddNewTaskToReadyList+0xbc>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f5e:	4a27      	ldr	r2, [pc, #156]	; (8008ffc <prvAddNewTaskToReadyList+0xbc>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <prvAddNewTaskToReadyList+0xb8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d110      	bne.n	8008f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f6c:	f000 fabc 	bl	80094e8 <prvInitialiseTaskLists>
 8008f70:	e00d      	b.n	8008f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f72:	4b23      	ldr	r3, [pc, #140]	; (8009000 <prvAddNewTaskToReadyList+0xc0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f7a:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <prvAddNewTaskToReadyList+0xbc>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d802      	bhi.n	8008f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f88:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <prvAddNewTaskToReadyList+0xbc>)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f8e:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <prvAddNewTaskToReadyList+0xc4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3301      	adds	r3, #1
 8008f94:	4a1b      	ldr	r2, [pc, #108]	; (8009004 <prvAddNewTaskToReadyList+0xc4>)
 8008f96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	4b19      	ldr	r3, [pc, #100]	; (8009008 <prvAddNewTaskToReadyList+0xc8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	4a18      	ldr	r2, [pc, #96]	; (8009008 <prvAddNewTaskToReadyList+0xc8>)
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a15      	ldr	r2, [pc, #84]	; (800900c <prvAddNewTaskToReadyList+0xcc>)
 8008fb8:	441a      	add	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f7ff fe0d 	bl	8008be0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fc6:	f000 fd0d 	bl	80099e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <prvAddNewTaskToReadyList+0xc0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00e      	beq.n	8008ff0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddNewTaskToReadyList+0xbc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d207      	bcs.n	8008ff0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <prvAddNewTaskToReadyList+0xd0>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	200010b4 	.word	0x200010b4
 8008ffc:	20000fb4 	.word	0x20000fb4
 8009000:	200010c0 	.word	0x200010c0
 8009004:	200010d0 	.word	0x200010d0
 8009008:	200010bc 	.word	0x200010bc
 800900c:	20000fb8 	.word	0x20000fb8
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d017      	beq.n	8009056 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <vTaskDelay+0x60>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <vTaskDelay+0x30>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009044:	f000 f87a 	bl	800913c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009048:	2100      	movs	r1, #0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb0a 	bl	8009664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009050:	f000 f882 	bl	8009158 <xTaskResumeAll>
 8009054:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d107      	bne.n	800906c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <vTaskDelay+0x64>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200010dc 	.word	0x200010dc
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908a:	463a      	mov	r2, r7
 800908c:	1d39      	adds	r1, r7, #4
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f7f7 ff1e 	bl	8000ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	9202      	str	r2, [sp, #8]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2300      	movs	r3, #0
 80090a8:	460a      	mov	r2, r1
 80090aa:	491e      	ldr	r1, [pc, #120]	; (8009124 <vTaskStartScheduler+0xa8>)
 80090ac:	481e      	ldr	r0, [pc, #120]	; (8009128 <vTaskStartScheduler+0xac>)
 80090ae:	f7ff fe1e 	bl	8008cee <xTaskCreateStatic>
 80090b2:	4603      	mov	r3, r0
 80090b4:	4a1d      	ldr	r2, [pc, #116]	; (800912c <vTaskStartScheduler+0xb0>)
 80090b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090b8:	4b1c      	ldr	r3, [pc, #112]	; (800912c <vTaskStartScheduler+0xb0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e001      	b.n	80090ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d116      	bne.n	80090fe <vTaskStartScheduler+0x82>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	613b      	str	r3, [r7, #16]
}
 80090e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090e4:	4b12      	ldr	r3, [pc, #72]	; (8009130 <vTaskStartScheduler+0xb4>)
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <vTaskStartScheduler+0xb8>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <vTaskStartScheduler+0xbc>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090f8:	f000 fba2 	bl	8009840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090fc:	e00e      	b.n	800911c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009104:	d10a      	bne.n	800911c <vTaskStartScheduler+0xa0>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <vTaskStartScheduler+0x9e>
}
 800911c:	bf00      	nop
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	0800cef4 	.word	0x0800cef4
 8009128:	080094b9 	.word	0x080094b9
 800912c:	200010d8 	.word	0x200010d8
 8009130:	200010d4 	.word	0x200010d4
 8009134:	200010c0 	.word	0x200010c0
 8009138:	200010b8 	.word	0x200010b8

0800913c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <vTaskSuspendAll+0x18>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3301      	adds	r3, #1
 8009146:	4a03      	ldr	r2, [pc, #12]	; (8009154 <vTaskSuspendAll+0x18>)
 8009148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800914a:	bf00      	nop
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	200010dc 	.word	0x200010dc

08009158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009162:	2300      	movs	r3, #0
 8009164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009166:	4b41      	ldr	r3, [pc, #260]	; (800926c <xTaskResumeAll+0x114>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10a      	bne.n	8009184 <xTaskResumeAll+0x2c>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	603b      	str	r3, [r7, #0]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009184:	f000 fbfe 	bl	8009984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009188:	4b38      	ldr	r3, [pc, #224]	; (800926c <xTaskResumeAll+0x114>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3b01      	subs	r3, #1
 800918e:	4a37      	ldr	r2, [pc, #220]	; (800926c <xTaskResumeAll+0x114>)
 8009190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009192:	4b36      	ldr	r3, [pc, #216]	; (800926c <xTaskResumeAll+0x114>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d161      	bne.n	800925e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800919a:	4b35      	ldr	r3, [pc, #212]	; (8009270 <xTaskResumeAll+0x118>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d05d      	beq.n	800925e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091a2:	e02e      	b.n	8009202 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a4:	4b33      	ldr	r3, [pc, #204]	; (8009274 <xTaskResumeAll+0x11c>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3318      	adds	r3, #24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fd72 	bl	8008c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3304      	adds	r3, #4
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff fd6d 	bl	8008c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	2201      	movs	r2, #1
 80091c6:	409a      	lsls	r2, r3
 80091c8:	4b2b      	ldr	r3, [pc, #172]	; (8009278 <xTaskResumeAll+0x120>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	4a2a      	ldr	r2, [pc, #168]	; (8009278 <xTaskResumeAll+0x120>)
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4a27      	ldr	r2, [pc, #156]	; (800927c <xTaskResumeAll+0x124>)
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7ff fcf9 	bl	8008be0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f2:	4b23      	ldr	r3, [pc, #140]	; (8009280 <xTaskResumeAll+0x128>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d302      	bcc.n	8009202 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80091fc:	4b21      	ldr	r3, [pc, #132]	; (8009284 <xTaskResumeAll+0x12c>)
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009202:	4b1c      	ldr	r3, [pc, #112]	; (8009274 <xTaskResumeAll+0x11c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1cc      	bne.n	80091a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009210:	f000 fa08 	bl	8009624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009214:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <xTaskResumeAll+0x130>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d010      	beq.n	8009242 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009220:	f000 f836 	bl	8009290 <xTaskIncrementTick>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800922a:	4b16      	ldr	r3, [pc, #88]	; (8009284 <xTaskResumeAll+0x12c>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3b01      	subs	r3, #1
 8009234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1f1      	bne.n	8009220 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800923c:	4b12      	ldr	r3, [pc, #72]	; (8009288 <xTaskResumeAll+0x130>)
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <xTaskResumeAll+0x12c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <xTaskResumeAll+0x134>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800925e:	f000 fbc1 	bl	80099e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009262:	68bb      	ldr	r3, [r7, #8]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200010dc 	.word	0x200010dc
 8009270:	200010b4 	.word	0x200010b4
 8009274:	20001074 	.word	0x20001074
 8009278:	200010bc 	.word	0x200010bc
 800927c:	20000fb8 	.word	0x20000fb8
 8009280:	20000fb4 	.word	0x20000fb4
 8009284:	200010c8 	.word	0x200010c8
 8009288:	200010c4 	.word	0x200010c4
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929a:	4b4e      	ldr	r3, [pc, #312]	; (80093d4 <xTaskIncrementTick+0x144>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 808e 	bne.w	80093c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092a4:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <xTaskIncrementTick+0x148>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3301      	adds	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092ac:	4a4a      	ldr	r2, [pc, #296]	; (80093d8 <xTaskIncrementTick+0x148>)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d120      	bne.n	80092fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092b8:	4b48      	ldr	r3, [pc, #288]	; (80093dc <xTaskIncrementTick+0x14c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	603b      	str	r3, [r7, #0]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xTaskIncrementTick+0x46>
 80092d8:	4b40      	ldr	r3, [pc, #256]	; (80093dc <xTaskIncrementTick+0x14c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	4b40      	ldr	r3, [pc, #256]	; (80093e0 <xTaskIncrementTick+0x150>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a3e      	ldr	r2, [pc, #248]	; (80093dc <xTaskIncrementTick+0x14c>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4a3e      	ldr	r2, [pc, #248]	; (80093e0 <xTaskIncrementTick+0x150>)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	4b3d      	ldr	r3, [pc, #244]	; (80093e4 <xTaskIncrementTick+0x154>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	4a3c      	ldr	r2, [pc, #240]	; (80093e4 <xTaskIncrementTick+0x154>)
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	f000 f995 	bl	8009624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092fa:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <xTaskIncrementTick+0x158>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	429a      	cmp	r2, r3
 8009302:	d348      	bcc.n	8009396 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009304:	4b35      	ldr	r3, [pc, #212]	; (80093dc <xTaskIncrementTick+0x14c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800930e:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <xTaskIncrementTick+0x158>)
 8009310:	f04f 32ff 	mov.w	r2, #4294967295
 8009314:	601a      	str	r2, [r3, #0]
					break;
 8009316:	e03e      	b.n	8009396 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009318:	4b30      	ldr	r3, [pc, #192]	; (80093dc <xTaskIncrementTick+0x14c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d203      	bcs.n	8009338 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009330:	4a2d      	ldr	r2, [pc, #180]	; (80093e8 <xTaskIncrementTick+0x158>)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009336:	e02e      	b.n	8009396 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fcac 	bl	8008c9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	3318      	adds	r3, #24
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fca3 	bl	8008c9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	2201      	movs	r2, #1
 800935a:	409a      	lsls	r2, r3
 800935c:	4b23      	ldr	r3, [pc, #140]	; (80093ec <xTaskIncrementTick+0x15c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4313      	orrs	r3, r2
 8009362:	4a22      	ldr	r2, [pc, #136]	; (80093ec <xTaskIncrementTick+0x15c>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <xTaskIncrementTick+0x160>)
 8009374:	441a      	add	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f7ff fc2f 	bl	8008be0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009386:	4b1b      	ldr	r3, [pc, #108]	; (80093f4 <xTaskIncrementTick+0x164>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	429a      	cmp	r2, r3
 800938e:	d3b9      	bcc.n	8009304 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009394:	e7b6      	b.n	8009304 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009396:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <xTaskIncrementTick+0x164>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4914      	ldr	r1, [pc, #80]	; (80093f0 <xTaskIncrementTick+0x160>)
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	440b      	add	r3, r1
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d901      	bls.n	80093b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093b2:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <xTaskIncrementTick+0x168>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80093ba:	2301      	movs	r3, #1
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e004      	b.n	80093ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093c0:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <xTaskIncrementTick+0x16c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3301      	adds	r3, #1
 80093c6:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <xTaskIncrementTick+0x16c>)
 80093c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093ca:	697b      	ldr	r3, [r7, #20]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	200010dc 	.word	0x200010dc
 80093d8:	200010b8 	.word	0x200010b8
 80093dc:	2000106c 	.word	0x2000106c
 80093e0:	20001070 	.word	0x20001070
 80093e4:	200010cc 	.word	0x200010cc
 80093e8:	200010d4 	.word	0x200010d4
 80093ec:	200010bc 	.word	0x200010bc
 80093f0:	20000fb8 	.word	0x20000fb8
 80093f4:	20000fb4 	.word	0x20000fb4
 80093f8:	200010c8 	.word	0x200010c8
 80093fc:	200010c4 	.word	0x200010c4

08009400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009406:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <vTaskSwitchContext+0xa4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800940e:	4b26      	ldr	r3, [pc, #152]	; (80094a8 <vTaskSwitchContext+0xa8>)
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009414:	e03f      	b.n	8009496 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009416:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <vTaskSwitchContext+0xa8>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941c:	4b23      	ldr	r3, [pc, #140]	; (80094ac <vTaskSwitchContext+0xac>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	fab3 f383 	clz	r3, r3
 8009428:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	f1c3 031f 	rsb	r3, r3, #31
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	491f      	ldr	r1, [pc, #124]	; (80094b0 <vTaskSwitchContext+0xb0>)
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	607b      	str	r3, [r7, #4]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <vTaskSwitchContext+0x5a>
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4a12      	ldr	r2, [pc, #72]	; (80094b0 <vTaskSwitchContext+0xb0>)
 8009468:	4413      	add	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3308      	adds	r3, #8
 800947e:	429a      	cmp	r2, r3
 8009480:	d104      	bne.n	800948c <vTaskSwitchContext+0x8c>
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	605a      	str	r2, [r3, #4]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	4a08      	ldr	r2, [pc, #32]	; (80094b4 <vTaskSwitchContext+0xb4>)
 8009494:	6013      	str	r3, [r2, #0]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	200010dc 	.word	0x200010dc
 80094a8:	200010c8 	.word	0x200010c8
 80094ac:	200010bc 	.word	0x200010bc
 80094b0:	20000fb8 	.word	0x20000fb8
 80094b4:	20000fb4 	.word	0x20000fb4

080094b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094c0:	f000 f852 	bl	8009568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094c4:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <prvIdleTask+0x28>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d9f9      	bls.n	80094c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <prvIdleTask+0x2c>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094dc:	e7f0      	b.n	80094c0 <prvIdleTask+0x8>
 80094de:	bf00      	nop
 80094e0:	20000fb8 	.word	0x20000fb8
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094ee:	2300      	movs	r3, #0
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	e00c      	b.n	800950e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4a12      	ldr	r2, [pc, #72]	; (8009548 <prvInitialiseTaskLists+0x60>)
 8009500:	4413      	add	r3, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff fb3f 	bl	8008b86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3301      	adds	r3, #1
 800950c:	607b      	str	r3, [r7, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b06      	cmp	r3, #6
 8009512:	d9ef      	bls.n	80094f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009514:	480d      	ldr	r0, [pc, #52]	; (800954c <prvInitialiseTaskLists+0x64>)
 8009516:	f7ff fb36 	bl	8008b86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800951a:	480d      	ldr	r0, [pc, #52]	; (8009550 <prvInitialiseTaskLists+0x68>)
 800951c:	f7ff fb33 	bl	8008b86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009520:	480c      	ldr	r0, [pc, #48]	; (8009554 <prvInitialiseTaskLists+0x6c>)
 8009522:	f7ff fb30 	bl	8008b86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009526:	480c      	ldr	r0, [pc, #48]	; (8009558 <prvInitialiseTaskLists+0x70>)
 8009528:	f7ff fb2d 	bl	8008b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800952c:	480b      	ldr	r0, [pc, #44]	; (800955c <prvInitialiseTaskLists+0x74>)
 800952e:	f7ff fb2a 	bl	8008b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <prvInitialiseTaskLists+0x78>)
 8009534:	4a05      	ldr	r2, [pc, #20]	; (800954c <prvInitialiseTaskLists+0x64>)
 8009536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <prvInitialiseTaskLists+0x7c>)
 800953a:	4a05      	ldr	r2, [pc, #20]	; (8009550 <prvInitialiseTaskLists+0x68>)
 800953c:	601a      	str	r2, [r3, #0]
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000fb8 	.word	0x20000fb8
 800954c:	20001044 	.word	0x20001044
 8009550:	20001058 	.word	0x20001058
 8009554:	20001074 	.word	0x20001074
 8009558:	20001088 	.word	0x20001088
 800955c:	200010a0 	.word	0x200010a0
 8009560:	2000106c 	.word	0x2000106c
 8009564:	20001070 	.word	0x20001070

08009568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800956e:	e019      	b.n	80095a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009570:	f000 fa08 	bl	8009984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009574:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <prvCheckTasksWaitingTermination+0x50>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff fb8a 	bl	8008c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <prvCheckTasksWaitingTermination+0x54>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3b01      	subs	r3, #1
 800958c:	4a0b      	ldr	r2, [pc, #44]	; (80095bc <prvCheckTasksWaitingTermination+0x54>)
 800958e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3b01      	subs	r3, #1
 8009596:	4a0a      	ldr	r2, [pc, #40]	; (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 8009598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800959a:	f000 fa23 	bl	80099e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f810 	bl	80095c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095a4:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e1      	bne.n	8009570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20001088 	.word	0x20001088
 80095bc:	200010b4 	.word	0x200010b4
 80095c0:	2000109c 	.word	0x2000109c

080095c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d108      	bne.n	80095e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fb80 	bl	8009ce0 <vPortFree>
				vPortFree( pxTCB );
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fb7d 	bl	8009ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095e6:	e018      	b.n	800961a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d103      	bne.n	80095fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb74 	bl	8009ce0 <vPortFree>
	}
 80095f8:	e00f      	b.n	800961a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009600:	2b02      	cmp	r3, #2
 8009602:	d00a      	beq.n	800961a <prvDeleteTCB+0x56>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <prvDeleteTCB+0x54>
	}
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <prvResetNextTaskUnblockTime+0x38>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <prvResetNextTaskUnblockTime+0x3c>)
 8009636:	f04f 32ff 	mov.w	r2, #4294967295
 800963a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800963c:	e008      	b.n	8009650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963e:	4b07      	ldr	r3, [pc, #28]	; (800965c <prvResetNextTaskUnblockTime+0x38>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	4a04      	ldr	r2, [pc, #16]	; (8009660 <prvResetNextTaskUnblockTime+0x3c>)
 800964e:	6013      	str	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	2000106c 	.word	0x2000106c
 8009660:	200010d4 	.word	0x200010d4

08009664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800966e:	4b29      	ldr	r3, [pc, #164]	; (8009714 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009674:	4b28      	ldr	r3, [pc, #160]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3304      	adds	r3, #4
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fb0d 	bl	8008c9a <uxListRemove>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009686:	4b24      	ldr	r3, [pc, #144]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	2201      	movs	r2, #1
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	43da      	mvns	r2, r3
 8009694:	4b21      	ldr	r3, [pc, #132]	; (800971c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4013      	ands	r3, r2
 800969a:	4a20      	ldr	r2, [pc, #128]	; (800971c <prvAddCurrentTaskToDelayedList+0xb8>)
 800969c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a4:	d10a      	bne.n	80096bc <prvAddCurrentTaskToDelayedList+0x58>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ac:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	481a      	ldr	r0, [pc, #104]	; (8009720 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096b6:	f7ff fa93 	bl	8008be0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ba:	e026      	b.n	800970a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4413      	add	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d209      	bcs.n	80096e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d4:	4b13      	ldr	r3, [pc, #76]	; (8009724 <prvAddCurrentTaskToDelayedList+0xc0>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3304      	adds	r3, #4
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f7ff faa1 	bl	8008c28 <vListInsert>
}
 80096e6:	e010      	b.n	800970a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e8:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7ff fa97 	bl	8008c28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <prvAddCurrentTaskToDelayedList+0xc8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	429a      	cmp	r2, r3
 8009702:	d202      	bcs.n	800970a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009704:	4a09      	ldr	r2, [pc, #36]	; (800972c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6013      	str	r3, [r2, #0]
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200010b8 	.word	0x200010b8
 8009718:	20000fb4 	.word	0x20000fb4
 800971c:	200010bc 	.word	0x200010bc
 8009720:	200010a0 	.word	0x200010a0
 8009724:	20001070 	.word	0x20001070
 8009728:	2000106c 	.word	0x2000106c
 800972c:	200010d4 	.word	0x200010d4

08009730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3b04      	subs	r3, #4
 8009740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3b04      	subs	r3, #4
 800974e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f023 0201 	bic.w	r2, r3, #1
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b04      	subs	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009760:	4a0c      	ldr	r2, [pc, #48]	; (8009794 <pxPortInitialiseStack+0x64>)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b14      	subs	r3, #20
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3b04      	subs	r3, #4
 8009776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f06f 0202 	mvn.w	r2, #2
 800977e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b20      	subs	r3, #32
 8009784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009786:	68fb      	ldr	r3, [r7, #12]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	08009799 	.word	0x08009799

08009798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097a2:	4b12      	ldr	r3, [pc, #72]	; (80097ec <prvTaskExitError+0x54>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d00a      	beq.n	80097c2 <prvTaskExitError+0x2a>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <prvTaskExitError+0x28>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097d6:	bf00      	nop
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0fc      	beq.n	80097d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	200000bc 	.word	0x200000bc

080097f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097f0:	4b07      	ldr	r3, [pc, #28]	; (8009810 <pxCurrentTCBConst2>)
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6808      	ldr	r0, [r1, #0]
 80097f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f380 8809 	msr	PSP, r0
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8811 	msr	BASEPRI, r0
 800980a:	4770      	bx	lr
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst2>:
 8009810:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009818:	4808      	ldr	r0, [pc, #32]	; (800983c <prvPortStartFirstTask+0x24>)
 800981a:	6800      	ldr	r0, [r0, #0]
 800981c:	6800      	ldr	r0, [r0, #0]
 800981e:	f380 8808 	msr	MSP, r0
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8814 	msr	CONTROL, r0
 800982a:	b662      	cpsie	i
 800982c:	b661      	cpsie	f
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	df00      	svc	0
 8009838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800983a:	bf00      	nop
 800983c:	e000ed08 	.word	0xe000ed08

08009840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009846:	4b46      	ldr	r3, [pc, #280]	; (8009960 <xPortStartScheduler+0x120>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a46      	ldr	r2, [pc, #280]	; (8009964 <xPortStartScheduler+0x124>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d10a      	bne.n	8009866 <xPortStartScheduler+0x26>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009866:	4b3e      	ldr	r3, [pc, #248]	; (8009960 <xPortStartScheduler+0x120>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a3f      	ldr	r2, [pc, #252]	; (8009968 <xPortStartScheduler+0x128>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d10a      	bne.n	8009886 <xPortStartScheduler+0x46>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	60fb      	str	r3, [r7, #12]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009886:	4b39      	ldr	r3, [pc, #228]	; (800996c <xPortStartScheduler+0x12c>)
 8009888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	4b31      	ldr	r3, [pc, #196]	; (8009970 <xPortStartScheduler+0x130>)
 80098ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098ae:	4b31      	ldr	r3, [pc, #196]	; (8009974 <xPortStartScheduler+0x134>)
 80098b0:	2207      	movs	r2, #7
 80098b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098b4:	e009      	b.n	80098ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098b6:	4b2f      	ldr	r3, [pc, #188]	; (8009974 <xPortStartScheduler+0x134>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	4a2d      	ldr	r2, [pc, #180]	; (8009974 <xPortStartScheduler+0x134>)
 80098be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d2:	2b80      	cmp	r3, #128	; 0x80
 80098d4:	d0ef      	beq.n	80098b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098d6:	4b27      	ldr	r3, [pc, #156]	; (8009974 <xPortStartScheduler+0x134>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f1c3 0307 	rsb	r3, r3, #7
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d00a      	beq.n	80098f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60bb      	str	r3, [r7, #8]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098f8:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <xPortStartScheduler+0x134>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	4a1d      	ldr	r2, [pc, #116]	; (8009974 <xPortStartScheduler+0x134>)
 8009900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009902:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <xPortStartScheduler+0x134>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800990a:	4a1a      	ldr	r2, [pc, #104]	; (8009974 <xPortStartScheduler+0x134>)
 800990c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	b2da      	uxtb	r2, r3
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009916:	4b18      	ldr	r3, [pc, #96]	; (8009978 <xPortStartScheduler+0x138>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a17      	ldr	r2, [pc, #92]	; (8009978 <xPortStartScheduler+0x138>)
 800991c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009922:	4b15      	ldr	r3, [pc, #84]	; (8009978 <xPortStartScheduler+0x138>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a14      	ldr	r2, [pc, #80]	; (8009978 <xPortStartScheduler+0x138>)
 8009928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800992c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800992e:	f000 f8dd 	bl	8009aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009932:	4b12      	ldr	r3, [pc, #72]	; (800997c <xPortStartScheduler+0x13c>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009938:	f000 f8fc 	bl	8009b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800993c:	4b10      	ldr	r3, [pc, #64]	; (8009980 <xPortStartScheduler+0x140>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a0f      	ldr	r2, [pc, #60]	; (8009980 <xPortStartScheduler+0x140>)
 8009942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009948:	f7ff ff66 	bl	8009818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800994c:	f7ff fd58 	bl	8009400 <vTaskSwitchContext>
	prvTaskExitError();
 8009950:	f7ff ff22 	bl	8009798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	e000ed00 	.word	0xe000ed00
 8009964:	410fc271 	.word	0x410fc271
 8009968:	410fc270 	.word	0x410fc270
 800996c:	e000e400 	.word	0xe000e400
 8009970:	200010e0 	.word	0x200010e0
 8009974:	200010e4 	.word	0x200010e4
 8009978:	e000ed20 	.word	0xe000ed20
 800997c:	200000bc 	.word	0x200000bc
 8009980:	e000ef34 	.word	0xe000ef34

08009984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	607b      	str	r3, [r7, #4]
}
 800999c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <vPortEnterCritical+0x58>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	4a0d      	ldr	r2, [pc, #52]	; (80099dc <vPortEnterCritical+0x58>)
 80099a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099a8:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <vPortEnterCritical+0x58>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10f      	bne.n	80099d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099b0:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <vPortEnterCritical+0x5c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	603b      	str	r3, [r7, #0]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <vPortEnterCritical+0x4a>
	}
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	200000bc 	.word	0x200000bc
 80099e0:	e000ed04 	.word	0xe000ed04

080099e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <vPortExitCritical+0x50>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <vPortExitCritical+0x24>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	607b      	str	r3, [r7, #4]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <vPortExitCritical+0x50>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <vPortExitCritical+0x50>)
 8009a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a12:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <vPortExitCritical+0x50>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <vPortExitCritical+0x42>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200000bc 	.word	0x200000bc
	...

08009a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a40:	f3ef 8009 	mrs	r0, PSP
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <pxCurrentTCBConst>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	f01e 0f10 	tst.w	lr, #16
 8009a50:	bf08      	it	eq
 8009a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a64:	f380 8811 	msr	BASEPRI, r0
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f7ff fcc6 	bl	8009400 <vTaskSwitchContext>
 8009a74:	f04f 0000 	mov.w	r0, #0
 8009a78:	f380 8811 	msr	BASEPRI, r0
 8009a7c:	bc09      	pop	{r0, r3}
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	6808      	ldr	r0, [r1, #0]
 8009a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	f01e 0f10 	tst.w	lr, #16
 8009a8a:	bf08      	it	eq
 8009a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a90:	f380 8809 	msr	PSP, r0
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	607b      	str	r3, [r7, #4]
}
 8009ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ac2:	f7ff fbe5 	bl	8009290 <xTaskIncrementTick>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009acc:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <SysTick_Handler+0x40>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f383 8811 	msr	BASEPRI, r3
}
 8009ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009af0:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <vPortSetupTimerInterrupt+0x34>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009af6:	4b0b      	ldr	r3, [pc, #44]	; (8009b24 <vPortSetupTimerInterrupt+0x38>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <vPortSetupTimerInterrupt+0x3c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a0a      	ldr	r2, [pc, #40]	; (8009b2c <vPortSetupTimerInterrupt+0x40>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	099b      	lsrs	r3, r3, #6
 8009b08:	4a09      	ldr	r2, [pc, #36]	; (8009b30 <vPortSetupTimerInterrupt+0x44>)
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <vPortSetupTimerInterrupt+0x34>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	e000e010 	.word	0xe000e010
 8009b24:	e000e018 	.word	0xe000e018
 8009b28:	20000020 	.word	0x20000020
 8009b2c:	10624dd3 	.word	0x10624dd3
 8009b30:	e000e014 	.word	0xe000e014

08009b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b44 <vPortEnableVFP+0x10>
 8009b38:	6801      	ldr	r1, [r0, #0]
 8009b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b3e:	6001      	str	r1, [r0, #0]
 8009b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b42:	bf00      	nop
 8009b44:	e000ed88 	.word	0xe000ed88

08009b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b54:	f7ff faf2 	bl	800913c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b58:	4b5b      	ldr	r3, [pc, #364]	; (8009cc8 <pvPortMalloc+0x180>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b60:	f000 f920 	bl	8009da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b64:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <pvPortMalloc+0x184>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 8093 	bne.w	8009c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01d      	beq.n	8009bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b78:	2208      	movs	r2, #8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d014      	beq.n	8009bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	3308      	adds	r3, #8
 8009b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	617b      	str	r3, [r7, #20]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d06e      	beq.n	8009c98 <pvPortMalloc+0x150>
 8009bba:	4b45      	ldr	r3, [pc, #276]	; (8009cd0 <pvPortMalloc+0x188>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d869      	bhi.n	8009c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bc4:	4b43      	ldr	r3, [pc, #268]	; (8009cd4 <pvPortMalloc+0x18c>)
 8009bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bc8:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <pvPortMalloc+0x18c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bce:	e004      	b.n	8009bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d903      	bls.n	8009bec <pvPortMalloc+0xa4>
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f1      	bne.n	8009bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bec:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <pvPortMalloc+0x180>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d050      	beq.n	8009c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	4413      	add	r3, r2
 8009bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	2308      	movs	r3, #8
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d91f      	bls.n	8009c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <pvPortMalloc+0xf8>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	613b      	str	r3, [r7, #16]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	1ad2      	subs	r2, r2, r3
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c52:	69b8      	ldr	r0, [r7, #24]
 8009c54:	f000 f908 	bl	8009e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	4a1b      	ldr	r2, [pc, #108]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c66:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <pvPortMalloc+0x190>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d203      	bcs.n	8009c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c72:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <pvPortMalloc+0x188>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a18      	ldr	r2, [pc, #96]	; (8009cd8 <pvPortMalloc+0x190>)
 8009c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <pvPortMalloc+0x184>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <pvPortMalloc+0x194>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <pvPortMalloc+0x194>)
 8009c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c98:	f7ff fa5e 	bl	8009158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <pvPortMalloc+0x174>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60fb      	str	r3, [r7, #12]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <pvPortMalloc+0x172>
	return pvReturn;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3728      	adds	r7, #40	; 0x28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20002478 	.word	0x20002478
 8009ccc:	2000248c 	.word	0x2000248c
 8009cd0:	2000247c 	.word	0x2000247c
 8009cd4:	20002470 	.word	0x20002470
 8009cd8:	20002480 	.word	0x20002480
 8009cdc:	20002484 	.word	0x20002484

08009ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04d      	beq.n	8009d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	425b      	negs	r3, r3
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <vPortFree+0xb8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <vPortFree+0x44>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00a      	beq.n	8009d42 <vPortFree+0x62>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60bb      	str	r3, [r7, #8]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <vPortFree+0xb8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01e      	beq.n	8009d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d11a      	bne.n	8009d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <vPortFree+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	401a      	ands	r2, r3
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d68:	f7ff f9e8 	bl	800913c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <vPortFree+0xbc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <vPortFree+0xbc>)
 8009d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d7a:	6938      	ldr	r0, [r7, #16]
 8009d7c:	f000 f874 	bl	8009e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <vPortFree+0xc0>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	4a06      	ldr	r2, [pc, #24]	; (8009da0 <vPortFree+0xc0>)
 8009d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d8a:	f7ff f9e5 	bl	8009158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d8e:	bf00      	nop
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	2000248c 	.word	0x2000248c
 8009d9c:	2000247c 	.word	0x2000247c
 8009da0:	20002488 	.word	0x20002488

08009da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8009dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009db0:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <prvHeapInit+0xac>)
 8009db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3307      	adds	r3, #7
 8009dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0307 	bic.w	r3, r3, #7
 8009dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	4a1f      	ldr	r2, [pc, #124]	; (8009e50 <prvHeapInit+0xac>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ddc:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <prvHeapInit+0xb0>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <prvHeapInit+0xb0>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009df0:	2208      	movs	r2, #8
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <prvHeapInit+0xb4>)
 8009e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <prvHeapInit+0xb4>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e0e:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <prvHeapInit+0xb4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <prvHeapInit+0xb4>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <prvHeapInit+0xb8>)
 8009e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <prvHeapInit+0xbc>)
 8009e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <prvHeapInit+0xc0>)
 8009e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	200010e8 	.word	0x200010e8
 8009e54:	20002470 	.word	0x20002470
 8009e58:	20002478 	.word	0x20002478
 8009e5c:	20002480 	.word	0x20002480
 8009e60:	2000247c 	.word	0x2000247c
 8009e64:	2000248c 	.word	0x2000248c

08009e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e70:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <prvInsertBlockIntoFreeList+0xac>)
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e002      	b.n	8009e7c <prvInsertBlockIntoFreeList+0x14>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d8f7      	bhi.n	8009e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d108      	bne.n	8009eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d118      	bne.n	8009ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d00d      	beq.n	8009ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	e008      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e003      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d002      	beq.n	8009f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20002470 	.word	0x20002470
 8009f18:	20002478 	.word	0x20002478

08009f1c <calloc>:
 8009f1c:	4b02      	ldr	r3, [pc, #8]	; (8009f28 <calloc+0xc>)
 8009f1e:	460a      	mov	r2, r1
 8009f20:	4601      	mov	r1, r0
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	f000 b802 	b.w	8009f2c <_calloc_r>
 8009f28:	20000118 	.word	0x20000118

08009f2c <_calloc_r>:
 8009f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f2e:	fba1 2402 	umull	r2, r4, r1, r2
 8009f32:	b94c      	cbnz	r4, 8009f48 <_calloc_r+0x1c>
 8009f34:	4611      	mov	r1, r2
 8009f36:	9201      	str	r2, [sp, #4]
 8009f38:	f000 f82e 	bl	8009f98 <_malloc_r>
 8009f3c:	9a01      	ldr	r2, [sp, #4]
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b930      	cbnz	r0, 8009f50 <_calloc_r+0x24>
 8009f42:	4628      	mov	r0, r5
 8009f44:	b003      	add	sp, #12
 8009f46:	bd30      	pop	{r4, r5, pc}
 8009f48:	220c      	movs	r2, #12
 8009f4a:	6002      	str	r2, [r0, #0]
 8009f4c:	2500      	movs	r5, #0
 8009f4e:	e7f8      	b.n	8009f42 <_calloc_r+0x16>
 8009f50:	4621      	mov	r1, r4
 8009f52:	f000 fe38 	bl	800abc6 <memset>
 8009f56:	e7f4      	b.n	8009f42 <_calloc_r+0x16>

08009f58 <sbrk_aligned>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4e0e      	ldr	r6, [pc, #56]	; (8009f94 <sbrk_aligned+0x3c>)
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	6831      	ldr	r1, [r6, #0]
 8009f60:	4605      	mov	r5, r0
 8009f62:	b911      	cbnz	r1, 8009f6a <sbrk_aligned+0x12>
 8009f64:	f000 fe70 	bl	800ac48 <_sbrk_r>
 8009f68:	6030      	str	r0, [r6, #0]
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 fe6b 	bl	800ac48 <_sbrk_r>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d00a      	beq.n	8009f8c <sbrk_aligned+0x34>
 8009f76:	1cc4      	adds	r4, r0, #3
 8009f78:	f024 0403 	bic.w	r4, r4, #3
 8009f7c:	42a0      	cmp	r0, r4
 8009f7e:	d007      	beq.n	8009f90 <sbrk_aligned+0x38>
 8009f80:	1a21      	subs	r1, r4, r0
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 fe60 	bl	800ac48 <_sbrk_r>
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d101      	bne.n	8009f90 <sbrk_aligned+0x38>
 8009f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f90:	4620      	mov	r0, r4
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	20002494 	.word	0x20002494

08009f98 <_malloc_r>:
 8009f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f9c:	1ccd      	adds	r5, r1, #3
 8009f9e:	f025 0503 	bic.w	r5, r5, #3
 8009fa2:	3508      	adds	r5, #8
 8009fa4:	2d0c      	cmp	r5, #12
 8009fa6:	bf38      	it	cc
 8009fa8:	250c      	movcc	r5, #12
 8009faa:	2d00      	cmp	r5, #0
 8009fac:	4607      	mov	r7, r0
 8009fae:	db01      	blt.n	8009fb4 <_malloc_r+0x1c>
 8009fb0:	42a9      	cmp	r1, r5
 8009fb2:	d905      	bls.n	8009fc0 <_malloc_r+0x28>
 8009fb4:	230c      	movs	r3, #12
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	2600      	movs	r6, #0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a094 <_malloc_r+0xfc>
 8009fc4:	f000 f868 	bl	800a098 <__malloc_lock>
 8009fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009fcc:	461c      	mov	r4, r3
 8009fce:	bb5c      	cbnz	r4, 800a028 <_malloc_r+0x90>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f7ff ffc0 	bl	8009f58 <sbrk_aligned>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	4604      	mov	r4, r0
 8009fdc:	d155      	bne.n	800a08a <_malloc_r+0xf2>
 8009fde:	f8d8 4000 	ldr.w	r4, [r8]
 8009fe2:	4626      	mov	r6, r4
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	d145      	bne.n	800a074 <_malloc_r+0xdc>
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	d048      	beq.n	800a07e <_malloc_r+0xe6>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	eb04 0903 	add.w	r9, r4, r3
 8009ff6:	f000 fe27 	bl	800ac48 <_sbrk_r>
 8009ffa:	4581      	cmp	r9, r0
 8009ffc:	d13f      	bne.n	800a07e <_malloc_r+0xe6>
 8009ffe:	6821      	ldr	r1, [r4, #0]
 800a000:	1a6d      	subs	r5, r5, r1
 800a002:	4629      	mov	r1, r5
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff ffa7 	bl	8009f58 <sbrk_aligned>
 800a00a:	3001      	adds	r0, #1
 800a00c:	d037      	beq.n	800a07e <_malloc_r+0xe6>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	442b      	add	r3, r5
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	f8d8 3000 	ldr.w	r3, [r8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d038      	beq.n	800a08e <_malloc_r+0xf6>
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	42a2      	cmp	r2, r4
 800a020:	d12b      	bne.n	800a07a <_malloc_r+0xe2>
 800a022:	2200      	movs	r2, #0
 800a024:	605a      	str	r2, [r3, #4]
 800a026:	e00f      	b.n	800a048 <_malloc_r+0xb0>
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	1b52      	subs	r2, r2, r5
 800a02c:	d41f      	bmi.n	800a06e <_malloc_r+0xd6>
 800a02e:	2a0b      	cmp	r2, #11
 800a030:	d917      	bls.n	800a062 <_malloc_r+0xca>
 800a032:	1961      	adds	r1, r4, r5
 800a034:	42a3      	cmp	r3, r4
 800a036:	6025      	str	r5, [r4, #0]
 800a038:	bf18      	it	ne
 800a03a:	6059      	strne	r1, [r3, #4]
 800a03c:	6863      	ldr	r3, [r4, #4]
 800a03e:	bf08      	it	eq
 800a040:	f8c8 1000 	streq.w	r1, [r8]
 800a044:	5162      	str	r2, [r4, r5]
 800a046:	604b      	str	r3, [r1, #4]
 800a048:	4638      	mov	r0, r7
 800a04a:	f104 060b 	add.w	r6, r4, #11
 800a04e:	f000 f829 	bl	800a0a4 <__malloc_unlock>
 800a052:	f026 0607 	bic.w	r6, r6, #7
 800a056:	1d23      	adds	r3, r4, #4
 800a058:	1af2      	subs	r2, r6, r3
 800a05a:	d0ae      	beq.n	8009fba <_malloc_r+0x22>
 800a05c:	1b9b      	subs	r3, r3, r6
 800a05e:	50a3      	str	r3, [r4, r2]
 800a060:	e7ab      	b.n	8009fba <_malloc_r+0x22>
 800a062:	42a3      	cmp	r3, r4
 800a064:	6862      	ldr	r2, [r4, #4]
 800a066:	d1dd      	bne.n	800a024 <_malloc_r+0x8c>
 800a068:	f8c8 2000 	str.w	r2, [r8]
 800a06c:	e7ec      	b.n	800a048 <_malloc_r+0xb0>
 800a06e:	4623      	mov	r3, r4
 800a070:	6864      	ldr	r4, [r4, #4]
 800a072:	e7ac      	b.n	8009fce <_malloc_r+0x36>
 800a074:	4634      	mov	r4, r6
 800a076:	6876      	ldr	r6, [r6, #4]
 800a078:	e7b4      	b.n	8009fe4 <_malloc_r+0x4c>
 800a07a:	4613      	mov	r3, r2
 800a07c:	e7cc      	b.n	800a018 <_malloc_r+0x80>
 800a07e:	230c      	movs	r3, #12
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	4638      	mov	r0, r7
 800a084:	f000 f80e 	bl	800a0a4 <__malloc_unlock>
 800a088:	e797      	b.n	8009fba <_malloc_r+0x22>
 800a08a:	6025      	str	r5, [r4, #0]
 800a08c:	e7dc      	b.n	800a048 <_malloc_r+0xb0>
 800a08e:	605b      	str	r3, [r3, #4]
 800a090:	deff      	udf	#255	; 0xff
 800a092:	bf00      	nop
 800a094:	20002490 	.word	0x20002490

0800a098 <__malloc_lock>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__malloc_lock+0x8>)
 800a09a:	f000 be22 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800a09e:	bf00      	nop
 800a0a0:	200025d8 	.word	0x200025d8

0800a0a4 <__malloc_unlock>:
 800a0a4:	4801      	ldr	r0, [pc, #4]	; (800a0ac <__malloc_unlock+0x8>)
 800a0a6:	f000 be1d 	b.w	800ace4 <__retarget_lock_release_recursive>
 800a0aa:	bf00      	nop
 800a0ac:	200025d8 	.word	0x200025d8

0800a0b0 <__cvt>:
 800a0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b4:	ec55 4b10 	vmov	r4, r5, d0
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	460e      	mov	r6, r1
 800a0bc:	4619      	mov	r1, r3
 800a0be:	462b      	mov	r3, r5
 800a0c0:	bfbb      	ittet	lt
 800a0c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0c6:	461d      	movlt	r5, r3
 800a0c8:	2300      	movge	r3, #0
 800a0ca:	232d      	movlt	r3, #45	; 0x2d
 800a0cc:	700b      	strb	r3, [r1, #0]
 800a0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0d4:	4691      	mov	r9, r2
 800a0d6:	f023 0820 	bic.w	r8, r3, #32
 800a0da:	bfbc      	itt	lt
 800a0dc:	4622      	movlt	r2, r4
 800a0de:	4614      	movlt	r4, r2
 800a0e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0e4:	d005      	beq.n	800a0f2 <__cvt+0x42>
 800a0e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0ea:	d100      	bne.n	800a0ee <__cvt+0x3e>
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	2102      	movs	r1, #2
 800a0f0:	e000      	b.n	800a0f4 <__cvt+0x44>
 800a0f2:	2103      	movs	r1, #3
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	ab02      	add	r3, sp, #8
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	ec45 4b10 	vmov	d0, r4, r5
 800a100:	4653      	mov	r3, sl
 800a102:	4632      	mov	r2, r6
 800a104:	f000 fe88 	bl	800ae18 <_dtoa_r>
 800a108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a10c:	4607      	mov	r7, r0
 800a10e:	d102      	bne.n	800a116 <__cvt+0x66>
 800a110:	f019 0f01 	tst.w	r9, #1
 800a114:	d022      	beq.n	800a15c <__cvt+0xac>
 800a116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a11a:	eb07 0906 	add.w	r9, r7, r6
 800a11e:	d110      	bne.n	800a142 <__cvt+0x92>
 800a120:	783b      	ldrb	r3, [r7, #0]
 800a122:	2b30      	cmp	r3, #48	; 0x30
 800a124:	d10a      	bne.n	800a13c <__cvt+0x8c>
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 fce3 	bl	8000af8 <__aeabi_dcmpeq>
 800a132:	b918      	cbnz	r0, 800a13c <__cvt+0x8c>
 800a134:	f1c6 0601 	rsb	r6, r6, #1
 800a138:	f8ca 6000 	str.w	r6, [sl]
 800a13c:	f8da 3000 	ldr.w	r3, [sl]
 800a140:	4499      	add	r9, r3
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	4620      	mov	r0, r4
 800a148:	4629      	mov	r1, r5
 800a14a:	f7f6 fcd5 	bl	8000af8 <__aeabi_dcmpeq>
 800a14e:	b108      	cbz	r0, 800a154 <__cvt+0xa4>
 800a150:	f8cd 900c 	str.w	r9, [sp, #12]
 800a154:	2230      	movs	r2, #48	; 0x30
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	454b      	cmp	r3, r9
 800a15a:	d307      	bcc.n	800a16c <__cvt+0xbc>
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a160:	1bdb      	subs	r3, r3, r7
 800a162:	4638      	mov	r0, r7
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	b004      	add	sp, #16
 800a168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16c:	1c59      	adds	r1, r3, #1
 800a16e:	9103      	str	r1, [sp, #12]
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	e7f0      	b.n	800a156 <__cvt+0xa6>

0800a174 <__exponent>:
 800a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a176:	4603      	mov	r3, r0
 800a178:	2900      	cmp	r1, #0
 800a17a:	bfb8      	it	lt
 800a17c:	4249      	neglt	r1, r1
 800a17e:	f803 2b02 	strb.w	r2, [r3], #2
 800a182:	bfb4      	ite	lt
 800a184:	222d      	movlt	r2, #45	; 0x2d
 800a186:	222b      	movge	r2, #43	; 0x2b
 800a188:	2909      	cmp	r1, #9
 800a18a:	7042      	strb	r2, [r0, #1]
 800a18c:	dd2a      	ble.n	800a1e4 <__exponent+0x70>
 800a18e:	f10d 0207 	add.w	r2, sp, #7
 800a192:	4617      	mov	r7, r2
 800a194:	260a      	movs	r6, #10
 800a196:	4694      	mov	ip, r2
 800a198:	fb91 f5f6 	sdiv	r5, r1, r6
 800a19c:	fb06 1415 	mls	r4, r6, r5, r1
 800a1a0:	3430      	adds	r4, #48	; 0x30
 800a1a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	2c63      	cmp	r4, #99	; 0x63
 800a1aa:	f102 32ff 	add.w	r2, r2, #4294967295
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	dcf1      	bgt.n	800a196 <__exponent+0x22>
 800a1b2:	3130      	adds	r1, #48	; 0x30
 800a1b4:	f1ac 0402 	sub.w	r4, ip, #2
 800a1b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1bc:	1c41      	adds	r1, r0, #1
 800a1be:	4622      	mov	r2, r4
 800a1c0:	42ba      	cmp	r2, r7
 800a1c2:	d30a      	bcc.n	800a1da <__exponent+0x66>
 800a1c4:	f10d 0209 	add.w	r2, sp, #9
 800a1c8:	eba2 020c 	sub.w	r2, r2, ip
 800a1cc:	42bc      	cmp	r4, r7
 800a1ce:	bf88      	it	hi
 800a1d0:	2200      	movhi	r2, #0
 800a1d2:	4413      	add	r3, r2
 800a1d4:	1a18      	subs	r0, r3, r0
 800a1d6:	b003      	add	sp, #12
 800a1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1da:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1de:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a1e2:	e7ed      	b.n	800a1c0 <__exponent+0x4c>
 800a1e4:	2330      	movs	r3, #48	; 0x30
 800a1e6:	3130      	adds	r1, #48	; 0x30
 800a1e8:	7083      	strb	r3, [r0, #2]
 800a1ea:	70c1      	strb	r1, [r0, #3]
 800a1ec:	1d03      	adds	r3, r0, #4
 800a1ee:	e7f1      	b.n	800a1d4 <__exponent+0x60>

0800a1f0 <_printf_float>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	ed2d 8b02 	vpush	{d8}
 800a1f8:	b08d      	sub	sp, #52	; 0x34
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a200:	4616      	mov	r6, r2
 800a202:	461f      	mov	r7, r3
 800a204:	4605      	mov	r5, r0
 800a206:	f000 fce7 	bl	800abd8 <_localeconv_r>
 800a20a:	f8d0 a000 	ldr.w	sl, [r0]
 800a20e:	4650      	mov	r0, sl
 800a210:	f7f6 f846 	bl	80002a0 <strlen>
 800a214:	2300      	movs	r3, #0
 800a216:	930a      	str	r3, [sp, #40]	; 0x28
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	9305      	str	r3, [sp, #20]
 800a21c:	f8d8 3000 	ldr.w	r3, [r8]
 800a220:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a224:	3307      	adds	r3, #7
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	f103 0208 	add.w	r2, r3, #8
 800a22e:	f8c8 2000 	str.w	r2, [r8]
 800a232:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a23a:	9307      	str	r3, [sp, #28]
 800a23c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a240:	ee08 0a10 	vmov	s16, r0
 800a244:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a24c:	4b9e      	ldr	r3, [pc, #632]	; (800a4c8 <_printf_float+0x2d8>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	f7f6 fc83 	bl	8000b5c <__aeabi_dcmpun>
 800a256:	bb88      	cbnz	r0, 800a2bc <_printf_float+0xcc>
 800a258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a25c:	4b9a      	ldr	r3, [pc, #616]	; (800a4c8 <_printf_float+0x2d8>)
 800a25e:	f04f 32ff 	mov.w	r2, #4294967295
 800a262:	f7f6 fc5d 	bl	8000b20 <__aeabi_dcmple>
 800a266:	bb48      	cbnz	r0, 800a2bc <_printf_float+0xcc>
 800a268:	2200      	movs	r2, #0
 800a26a:	2300      	movs	r3, #0
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 fc4c 	bl	8000b0c <__aeabi_dcmplt>
 800a274:	b110      	cbz	r0, 800a27c <_printf_float+0x8c>
 800a276:	232d      	movs	r3, #45	; 0x2d
 800a278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27c:	4a93      	ldr	r2, [pc, #588]	; (800a4cc <_printf_float+0x2dc>)
 800a27e:	4b94      	ldr	r3, [pc, #592]	; (800a4d0 <_printf_float+0x2e0>)
 800a280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a284:	bf94      	ite	ls
 800a286:	4690      	movls	r8, r2
 800a288:	4698      	movhi	r8, r3
 800a28a:	2303      	movs	r3, #3
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	9b05      	ldr	r3, [sp, #20]
 800a290:	f023 0304 	bic.w	r3, r3, #4
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	f04f 0900 	mov.w	r9, #0
 800a29a:	9700      	str	r7, [sp, #0]
 800a29c:	4633      	mov	r3, r6
 800a29e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 f9da 	bl	800a65c <_printf_common>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f040 8090 	bne.w	800a3ce <_printf_float+0x1de>
 800a2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b2:	b00d      	add	sp, #52	; 0x34
 800a2b4:	ecbd 8b02 	vpop	{d8}
 800a2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2bc:	4642      	mov	r2, r8
 800a2be:	464b      	mov	r3, r9
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	f7f6 fc4a 	bl	8000b5c <__aeabi_dcmpun>
 800a2c8:	b140      	cbz	r0, 800a2dc <_printf_float+0xec>
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfbc      	itt	lt
 800a2d0:	232d      	movlt	r3, #45	; 0x2d
 800a2d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2d6:	4a7f      	ldr	r2, [pc, #508]	; (800a4d4 <_printf_float+0x2e4>)
 800a2d8:	4b7f      	ldr	r3, [pc, #508]	; (800a4d8 <_printf_float+0x2e8>)
 800a2da:	e7d1      	b.n	800a280 <_printf_float+0x90>
 800a2dc:	6863      	ldr	r3, [r4, #4]
 800a2de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2e2:	9206      	str	r2, [sp, #24]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	d13f      	bne.n	800a368 <_printf_float+0x178>
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	9b05      	ldr	r3, [sp, #20]
 800a2ee:	6861      	ldr	r1, [r4, #4]
 800a2f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	ab0a      	add	r3, sp, #40	; 0x28
 800a2fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2fe:	ab09      	add	r3, sp, #36	; 0x24
 800a300:	ec49 8b10 	vmov	d0, r8, r9
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7ff fecf 	bl	800a0b0 <__cvt>
 800a312:	9b06      	ldr	r3, [sp, #24]
 800a314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a316:	2b47      	cmp	r3, #71	; 0x47
 800a318:	4680      	mov	r8, r0
 800a31a:	d108      	bne.n	800a32e <_printf_float+0x13e>
 800a31c:	1cc8      	adds	r0, r1, #3
 800a31e:	db02      	blt.n	800a326 <_printf_float+0x136>
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	4299      	cmp	r1, r3
 800a324:	dd41      	ble.n	800a3aa <_printf_float+0x1ba>
 800a326:	f1ab 0302 	sub.w	r3, fp, #2
 800a32a:	fa5f fb83 	uxtb.w	fp, r3
 800a32e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a332:	d820      	bhi.n	800a376 <_printf_float+0x186>
 800a334:	3901      	subs	r1, #1
 800a336:	465a      	mov	r2, fp
 800a338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a33c:	9109      	str	r1, [sp, #36]	; 0x24
 800a33e:	f7ff ff19 	bl	800a174 <__exponent>
 800a342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a344:	1813      	adds	r3, r2, r0
 800a346:	2a01      	cmp	r2, #1
 800a348:	4681      	mov	r9, r0
 800a34a:	6123      	str	r3, [r4, #16]
 800a34c:	dc02      	bgt.n	800a354 <_printf_float+0x164>
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	07d2      	lsls	r2, r2, #31
 800a352:	d501      	bpl.n	800a358 <_printf_float+0x168>
 800a354:	3301      	adds	r3, #1
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d09c      	beq.n	800a29a <_printf_float+0xaa>
 800a360:	232d      	movs	r3, #45	; 0x2d
 800a362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a366:	e798      	b.n	800a29a <_printf_float+0xaa>
 800a368:	9a06      	ldr	r2, [sp, #24]
 800a36a:	2a47      	cmp	r2, #71	; 0x47
 800a36c:	d1be      	bne.n	800a2ec <_printf_float+0xfc>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1bc      	bne.n	800a2ec <_printf_float+0xfc>
 800a372:	2301      	movs	r3, #1
 800a374:	e7b9      	b.n	800a2ea <_printf_float+0xfa>
 800a376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a37a:	d118      	bne.n	800a3ae <_printf_float+0x1be>
 800a37c:	2900      	cmp	r1, #0
 800a37e:	6863      	ldr	r3, [r4, #4]
 800a380:	dd0b      	ble.n	800a39a <_printf_float+0x1aa>
 800a382:	6121      	str	r1, [r4, #16]
 800a384:	b913      	cbnz	r3, 800a38c <_printf_float+0x19c>
 800a386:	6822      	ldr	r2, [r4, #0]
 800a388:	07d0      	lsls	r0, r2, #31
 800a38a:	d502      	bpl.n	800a392 <_printf_float+0x1a2>
 800a38c:	3301      	adds	r3, #1
 800a38e:	440b      	add	r3, r1
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	65a1      	str	r1, [r4, #88]	; 0x58
 800a394:	f04f 0900 	mov.w	r9, #0
 800a398:	e7de      	b.n	800a358 <_printf_float+0x168>
 800a39a:	b913      	cbnz	r3, 800a3a2 <_printf_float+0x1b2>
 800a39c:	6822      	ldr	r2, [r4, #0]
 800a39e:	07d2      	lsls	r2, r2, #31
 800a3a0:	d501      	bpl.n	800a3a6 <_printf_float+0x1b6>
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	e7f4      	b.n	800a390 <_printf_float+0x1a0>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e7f2      	b.n	800a390 <_printf_float+0x1a0>
 800a3aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	db05      	blt.n	800a3c0 <_printf_float+0x1d0>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	6121      	str	r1, [r4, #16]
 800a3b8:	07d8      	lsls	r0, r3, #31
 800a3ba:	d5ea      	bpl.n	800a392 <_printf_float+0x1a2>
 800a3bc:	1c4b      	adds	r3, r1, #1
 800a3be:	e7e7      	b.n	800a390 <_printf_float+0x1a0>
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	bfd4      	ite	le
 800a3c4:	f1c1 0202 	rsble	r2, r1, #2
 800a3c8:	2201      	movgt	r2, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	e7e0      	b.n	800a390 <_printf_float+0x1a0>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	055a      	lsls	r2, r3, #21
 800a3d2:	d407      	bmi.n	800a3e4 <_printf_float+0x1f4>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d12c      	bne.n	800a43c <_printf_float+0x24c>
 800a3e2:	e764      	b.n	800a2ae <_printf_float+0xbe>
 800a3e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3e8:	f240 80e0 	bls.w	800a5ac <_printf_float+0x3bc>
 800a3ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f7f6 fb80 	bl	8000af8 <__aeabi_dcmpeq>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d034      	beq.n	800a466 <_printf_float+0x276>
 800a3fc:	4a37      	ldr	r2, [pc, #220]	; (800a4dc <_printf_float+0x2ec>)
 800a3fe:	2301      	movs	r3, #1
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	f43f af51 	beq.w	800a2ae <_printf_float+0xbe>
 800a40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a410:	429a      	cmp	r2, r3
 800a412:	db02      	blt.n	800a41a <_printf_float+0x22a>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	07d8      	lsls	r0, r3, #31
 800a418:	d510      	bpl.n	800a43c <_printf_float+0x24c>
 800a41a:	ee18 3a10 	vmov	r3, s16
 800a41e:	4652      	mov	r2, sl
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	47b8      	blx	r7
 800a426:	3001      	adds	r0, #1
 800a428:	f43f af41 	beq.w	800a2ae <_printf_float+0xbe>
 800a42c:	f04f 0800 	mov.w	r8, #0
 800a430:	f104 091a 	add.w	r9, r4, #26
 800a434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a436:	3b01      	subs	r3, #1
 800a438:	4543      	cmp	r3, r8
 800a43a:	dc09      	bgt.n	800a450 <_printf_float+0x260>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	079b      	lsls	r3, r3, #30
 800a440:	f100 8107 	bmi.w	800a652 <_printf_float+0x462>
 800a444:	68e0      	ldr	r0, [r4, #12]
 800a446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a448:	4298      	cmp	r0, r3
 800a44a:	bfb8      	it	lt
 800a44c:	4618      	movlt	r0, r3
 800a44e:	e730      	b.n	800a2b2 <_printf_float+0xc2>
 800a450:	2301      	movs	r3, #1
 800a452:	464a      	mov	r2, r9
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	f43f af27 	beq.w	800a2ae <_printf_float+0xbe>
 800a460:	f108 0801 	add.w	r8, r8, #1
 800a464:	e7e6      	b.n	800a434 <_printf_float+0x244>
 800a466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dc39      	bgt.n	800a4e0 <_printf_float+0x2f0>
 800a46c:	4a1b      	ldr	r2, [pc, #108]	; (800a4dc <_printf_float+0x2ec>)
 800a46e:	2301      	movs	r3, #1
 800a470:	4631      	mov	r1, r6
 800a472:	4628      	mov	r0, r5
 800a474:	47b8      	blx	r7
 800a476:	3001      	adds	r0, #1
 800a478:	f43f af19 	beq.w	800a2ae <_printf_float+0xbe>
 800a47c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a480:	4313      	orrs	r3, r2
 800a482:	d102      	bne.n	800a48a <_printf_float+0x29a>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	d5d8      	bpl.n	800a43c <_printf_float+0x24c>
 800a48a:	ee18 3a10 	vmov	r3, s16
 800a48e:	4652      	mov	r2, sl
 800a490:	4631      	mov	r1, r6
 800a492:	4628      	mov	r0, r5
 800a494:	47b8      	blx	r7
 800a496:	3001      	adds	r0, #1
 800a498:	f43f af09 	beq.w	800a2ae <_printf_float+0xbe>
 800a49c:	f04f 0900 	mov.w	r9, #0
 800a4a0:	f104 0a1a 	add.w	sl, r4, #26
 800a4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a6:	425b      	negs	r3, r3
 800a4a8:	454b      	cmp	r3, r9
 800a4aa:	dc01      	bgt.n	800a4b0 <_printf_float+0x2c0>
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ae:	e792      	b.n	800a3d6 <_printf_float+0x1e6>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f aef7 	beq.w	800a2ae <_printf_float+0xbe>
 800a4c0:	f109 0901 	add.w	r9, r9, #1
 800a4c4:	e7ee      	b.n	800a4a4 <_printf_float+0x2b4>
 800a4c6:	bf00      	nop
 800a4c8:	7fefffff 	.word	0x7fefffff
 800a4cc:	0800cf6c 	.word	0x0800cf6c
 800a4d0:	0800cf70 	.word	0x0800cf70
 800a4d4:	0800cf74 	.word	0x0800cf74
 800a4d8:	0800cf78 	.word	0x0800cf78
 800a4dc:	0800cf7c 	.word	0x0800cf7c
 800a4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	bfa8      	it	ge
 800a4e8:	461a      	movge	r2, r3
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	4691      	mov	r9, r2
 800a4ee:	dc37      	bgt.n	800a560 <_printf_float+0x370>
 800a4f0:	f04f 0b00 	mov.w	fp, #0
 800a4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4f8:	f104 021a 	add.w	r2, r4, #26
 800a4fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	eba3 0309 	sub.w	r3, r3, r9
 800a504:	455b      	cmp	r3, fp
 800a506:	dc33      	bgt.n	800a570 <_printf_float+0x380>
 800a508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a50c:	429a      	cmp	r2, r3
 800a50e:	db3b      	blt.n	800a588 <_printf_float+0x398>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	07da      	lsls	r2, r3, #31
 800a514:	d438      	bmi.n	800a588 <_printf_float+0x398>
 800a516:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a51a:	eba2 0903 	sub.w	r9, r2, r3
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	1ad2      	subs	r2, r2, r3
 800a522:	4591      	cmp	r9, r2
 800a524:	bfa8      	it	ge
 800a526:	4691      	movge	r9, r2
 800a528:	f1b9 0f00 	cmp.w	r9, #0
 800a52c:	dc35      	bgt.n	800a59a <_printf_float+0x3aa>
 800a52e:	f04f 0800 	mov.w	r8, #0
 800a532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a536:	f104 0a1a 	add.w	sl, r4, #26
 800a53a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	eba3 0309 	sub.w	r3, r3, r9
 800a544:	4543      	cmp	r3, r8
 800a546:	f77f af79 	ble.w	800a43c <_printf_float+0x24c>
 800a54a:	2301      	movs	r3, #1
 800a54c:	4652      	mov	r2, sl
 800a54e:	4631      	mov	r1, r6
 800a550:	4628      	mov	r0, r5
 800a552:	47b8      	blx	r7
 800a554:	3001      	adds	r0, #1
 800a556:	f43f aeaa 	beq.w	800a2ae <_printf_float+0xbe>
 800a55a:	f108 0801 	add.w	r8, r8, #1
 800a55e:	e7ec      	b.n	800a53a <_printf_float+0x34a>
 800a560:	4613      	mov	r3, r2
 800a562:	4631      	mov	r1, r6
 800a564:	4642      	mov	r2, r8
 800a566:	4628      	mov	r0, r5
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	d1c0      	bne.n	800a4f0 <_printf_float+0x300>
 800a56e:	e69e      	b.n	800a2ae <_printf_float+0xbe>
 800a570:	2301      	movs	r3, #1
 800a572:	4631      	mov	r1, r6
 800a574:	4628      	mov	r0, r5
 800a576:	9205      	str	r2, [sp, #20]
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f ae97 	beq.w	800a2ae <_printf_float+0xbe>
 800a580:	9a05      	ldr	r2, [sp, #20]
 800a582:	f10b 0b01 	add.w	fp, fp, #1
 800a586:	e7b9      	b.n	800a4fc <_printf_float+0x30c>
 800a588:	ee18 3a10 	vmov	r3, s16
 800a58c:	4652      	mov	r2, sl
 800a58e:	4631      	mov	r1, r6
 800a590:	4628      	mov	r0, r5
 800a592:	47b8      	blx	r7
 800a594:	3001      	adds	r0, #1
 800a596:	d1be      	bne.n	800a516 <_printf_float+0x326>
 800a598:	e689      	b.n	800a2ae <_printf_float+0xbe>
 800a59a:	9a05      	ldr	r2, [sp, #20]
 800a59c:	464b      	mov	r3, r9
 800a59e:	4442      	add	r2, r8
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d1c1      	bne.n	800a52e <_printf_float+0x33e>
 800a5aa:	e680      	b.n	800a2ae <_printf_float+0xbe>
 800a5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ae:	2a01      	cmp	r2, #1
 800a5b0:	dc01      	bgt.n	800a5b6 <_printf_float+0x3c6>
 800a5b2:	07db      	lsls	r3, r3, #31
 800a5b4:	d53a      	bpl.n	800a62c <_printf_float+0x43c>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f43f ae74 	beq.w	800a2ae <_printf_float+0xbe>
 800a5c6:	ee18 3a10 	vmov	r3, s16
 800a5ca:	4652      	mov	r2, sl
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b8      	blx	r7
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	f43f ae6b 	beq.w	800a2ae <_printf_float+0xbe>
 800a5d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a5e4:	f7f6 fa88 	bl	8000af8 <__aeabi_dcmpeq>
 800a5e8:	b9d8      	cbnz	r0, 800a622 <_printf_float+0x432>
 800a5ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5ee:	f108 0201 	add.w	r2, r8, #1
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b8      	blx	r7
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d10e      	bne.n	800a61a <_printf_float+0x42a>
 800a5fc:	e657      	b.n	800a2ae <_printf_float+0xbe>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4652      	mov	r2, sl
 800a602:	4631      	mov	r1, r6
 800a604:	4628      	mov	r0, r5
 800a606:	47b8      	blx	r7
 800a608:	3001      	adds	r0, #1
 800a60a:	f43f ae50 	beq.w	800a2ae <_printf_float+0xbe>
 800a60e:	f108 0801 	add.w	r8, r8, #1
 800a612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a614:	3b01      	subs	r3, #1
 800a616:	4543      	cmp	r3, r8
 800a618:	dcf1      	bgt.n	800a5fe <_printf_float+0x40e>
 800a61a:	464b      	mov	r3, r9
 800a61c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a620:	e6da      	b.n	800a3d8 <_printf_float+0x1e8>
 800a622:	f04f 0800 	mov.w	r8, #0
 800a626:	f104 0a1a 	add.w	sl, r4, #26
 800a62a:	e7f2      	b.n	800a612 <_printf_float+0x422>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4642      	mov	r2, r8
 800a630:	e7df      	b.n	800a5f2 <_printf_float+0x402>
 800a632:	2301      	movs	r3, #1
 800a634:	464a      	mov	r2, r9
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	f43f ae36 	beq.w	800a2ae <_printf_float+0xbe>
 800a642:	f108 0801 	add.w	r8, r8, #1
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a64a:	1a5b      	subs	r3, r3, r1
 800a64c:	4543      	cmp	r3, r8
 800a64e:	dcf0      	bgt.n	800a632 <_printf_float+0x442>
 800a650:	e6f8      	b.n	800a444 <_printf_float+0x254>
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	f104 0919 	add.w	r9, r4, #25
 800a65a:	e7f4      	b.n	800a646 <_printf_float+0x456>

0800a65c <_printf_common>:
 800a65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	4616      	mov	r6, r2
 800a662:	4699      	mov	r9, r3
 800a664:	688a      	ldr	r2, [r1, #8]
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a66c:	4293      	cmp	r3, r2
 800a66e:	bfb8      	it	lt
 800a670:	4613      	movlt	r3, r2
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a678:	4607      	mov	r7, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	b10a      	cbz	r2, 800a682 <_printf_common+0x26>
 800a67e:	3301      	adds	r3, #1
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	0699      	lsls	r1, r3, #26
 800a686:	bf42      	ittt	mi
 800a688:	6833      	ldrmi	r3, [r6, #0]
 800a68a:	3302      	addmi	r3, #2
 800a68c:	6033      	strmi	r3, [r6, #0]
 800a68e:	6825      	ldr	r5, [r4, #0]
 800a690:	f015 0506 	ands.w	r5, r5, #6
 800a694:	d106      	bne.n	800a6a4 <_printf_common+0x48>
 800a696:	f104 0a19 	add.w	sl, r4, #25
 800a69a:	68e3      	ldr	r3, [r4, #12]
 800a69c:	6832      	ldr	r2, [r6, #0]
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	42ab      	cmp	r3, r5
 800a6a2:	dc26      	bgt.n	800a6f2 <_printf_common+0x96>
 800a6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a8:	1e13      	subs	r3, r2, #0
 800a6aa:	6822      	ldr	r2, [r4, #0]
 800a6ac:	bf18      	it	ne
 800a6ae:	2301      	movne	r3, #1
 800a6b0:	0692      	lsls	r2, r2, #26
 800a6b2:	d42b      	bmi.n	800a70c <_printf_common+0xb0>
 800a6b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	47c0      	blx	r8
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d01e      	beq.n	800a700 <_printf_common+0xa4>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	6922      	ldr	r2, [r4, #16]
 800a6c6:	f003 0306 	and.w	r3, r3, #6
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	bf02      	ittt	eq
 800a6ce:	68e5      	ldreq	r5, [r4, #12]
 800a6d0:	6833      	ldreq	r3, [r6, #0]
 800a6d2:	1aed      	subeq	r5, r5, r3
 800a6d4:	68a3      	ldr	r3, [r4, #8]
 800a6d6:	bf0c      	ite	eq
 800a6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6dc:	2500      	movne	r5, #0
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	bfc4      	itt	gt
 800a6e2:	1a9b      	subgt	r3, r3, r2
 800a6e4:	18ed      	addgt	r5, r5, r3
 800a6e6:	2600      	movs	r6, #0
 800a6e8:	341a      	adds	r4, #26
 800a6ea:	42b5      	cmp	r5, r6
 800a6ec:	d11a      	bne.n	800a724 <_printf_common+0xc8>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e008      	b.n	800a704 <_printf_common+0xa8>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4652      	mov	r2, sl
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	47c0      	blx	r8
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	d103      	bne.n	800a708 <_printf_common+0xac>
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a708:	3501      	adds	r5, #1
 800a70a:	e7c6      	b.n	800a69a <_printf_common+0x3e>
 800a70c:	18e1      	adds	r1, r4, r3
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	2030      	movs	r0, #48	; 0x30
 800a712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a716:	4422      	add	r2, r4
 800a718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a71c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a720:	3302      	adds	r3, #2
 800a722:	e7c7      	b.n	800a6b4 <_printf_common+0x58>
 800a724:	2301      	movs	r3, #1
 800a726:	4622      	mov	r2, r4
 800a728:	4649      	mov	r1, r9
 800a72a:	4638      	mov	r0, r7
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d0e6      	beq.n	800a700 <_printf_common+0xa4>
 800a732:	3601      	adds	r6, #1
 800a734:	e7d9      	b.n	800a6ea <_printf_common+0x8e>
	...

0800a738 <_printf_i>:
 800a738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	7e0f      	ldrb	r7, [r1, #24]
 800a73e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a740:	2f78      	cmp	r7, #120	; 0x78
 800a742:	4691      	mov	r9, r2
 800a744:	4680      	mov	r8, r0
 800a746:	460c      	mov	r4, r1
 800a748:	469a      	mov	sl, r3
 800a74a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a74e:	d807      	bhi.n	800a760 <_printf_i+0x28>
 800a750:	2f62      	cmp	r7, #98	; 0x62
 800a752:	d80a      	bhi.n	800a76a <_printf_i+0x32>
 800a754:	2f00      	cmp	r7, #0
 800a756:	f000 80d4 	beq.w	800a902 <_printf_i+0x1ca>
 800a75a:	2f58      	cmp	r7, #88	; 0x58
 800a75c:	f000 80c0 	beq.w	800a8e0 <_printf_i+0x1a8>
 800a760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a768:	e03a      	b.n	800a7e0 <_printf_i+0xa8>
 800a76a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a76e:	2b15      	cmp	r3, #21
 800a770:	d8f6      	bhi.n	800a760 <_printf_i+0x28>
 800a772:	a101      	add	r1, pc, #4	; (adr r1, 800a778 <_printf_i+0x40>)
 800a774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a7e5 	.word	0x0800a7e5
 800a780:	0800a761 	.word	0x0800a761
 800a784:	0800a761 	.word	0x0800a761
 800a788:	0800a761 	.word	0x0800a761
 800a78c:	0800a761 	.word	0x0800a761
 800a790:	0800a7e5 	.word	0x0800a7e5
 800a794:	0800a761 	.word	0x0800a761
 800a798:	0800a761 	.word	0x0800a761
 800a79c:	0800a761 	.word	0x0800a761
 800a7a0:	0800a761 	.word	0x0800a761
 800a7a4:	0800a8e9 	.word	0x0800a8e9
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a8a3 	.word	0x0800a8a3
 800a7b0:	0800a761 	.word	0x0800a761
 800a7b4:	0800a761 	.word	0x0800a761
 800a7b8:	0800a90b 	.word	0x0800a90b
 800a7bc:	0800a761 	.word	0x0800a761
 800a7c0:	0800a811 	.word	0x0800a811
 800a7c4:	0800a761 	.word	0x0800a761
 800a7c8:	0800a761 	.word	0x0800a761
 800a7cc:	0800a8ab 	.word	0x0800a8ab
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	602a      	str	r2, [r5, #0]
 800a7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e09f      	b.n	800a924 <_printf_i+0x1ec>
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	0607      	lsls	r7, r0, #24
 800a7ea:	f103 0104 	add.w	r1, r3, #4
 800a7ee:	6029      	str	r1, [r5, #0]
 800a7f0:	d501      	bpl.n	800a7f6 <_printf_i+0xbe>
 800a7f2:	681e      	ldr	r6, [r3, #0]
 800a7f4:	e003      	b.n	800a7fe <_printf_i+0xc6>
 800a7f6:	0646      	lsls	r6, r0, #25
 800a7f8:	d5fb      	bpl.n	800a7f2 <_printf_i+0xba>
 800a7fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	da03      	bge.n	800a80a <_printf_i+0xd2>
 800a802:	232d      	movs	r3, #45	; 0x2d
 800a804:	4276      	negs	r6, r6
 800a806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a80a:	485a      	ldr	r0, [pc, #360]	; (800a974 <_printf_i+0x23c>)
 800a80c:	230a      	movs	r3, #10
 800a80e:	e012      	b.n	800a836 <_printf_i+0xfe>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	6820      	ldr	r0, [r4, #0]
 800a814:	1d19      	adds	r1, r3, #4
 800a816:	6029      	str	r1, [r5, #0]
 800a818:	0605      	lsls	r5, r0, #24
 800a81a:	d501      	bpl.n	800a820 <_printf_i+0xe8>
 800a81c:	681e      	ldr	r6, [r3, #0]
 800a81e:	e002      	b.n	800a826 <_printf_i+0xee>
 800a820:	0641      	lsls	r1, r0, #25
 800a822:	d5fb      	bpl.n	800a81c <_printf_i+0xe4>
 800a824:	881e      	ldrh	r6, [r3, #0]
 800a826:	4853      	ldr	r0, [pc, #332]	; (800a974 <_printf_i+0x23c>)
 800a828:	2f6f      	cmp	r7, #111	; 0x6f
 800a82a:	bf0c      	ite	eq
 800a82c:	2308      	moveq	r3, #8
 800a82e:	230a      	movne	r3, #10
 800a830:	2100      	movs	r1, #0
 800a832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a836:	6865      	ldr	r5, [r4, #4]
 800a838:	60a5      	str	r5, [r4, #8]
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	bfa2      	ittt	ge
 800a83e:	6821      	ldrge	r1, [r4, #0]
 800a840:	f021 0104 	bicge.w	r1, r1, #4
 800a844:	6021      	strge	r1, [r4, #0]
 800a846:	b90e      	cbnz	r6, 800a84c <_printf_i+0x114>
 800a848:	2d00      	cmp	r5, #0
 800a84a:	d04b      	beq.n	800a8e4 <_printf_i+0x1ac>
 800a84c:	4615      	mov	r5, r2
 800a84e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a852:	fb03 6711 	mls	r7, r3, r1, r6
 800a856:	5dc7      	ldrb	r7, [r0, r7]
 800a858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a85c:	4637      	mov	r7, r6
 800a85e:	42bb      	cmp	r3, r7
 800a860:	460e      	mov	r6, r1
 800a862:	d9f4      	bls.n	800a84e <_printf_i+0x116>
 800a864:	2b08      	cmp	r3, #8
 800a866:	d10b      	bne.n	800a880 <_printf_i+0x148>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07de      	lsls	r6, r3, #31
 800a86c:	d508      	bpl.n	800a880 <_printf_i+0x148>
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	6861      	ldr	r1, [r4, #4]
 800a872:	4299      	cmp	r1, r3
 800a874:	bfde      	ittt	le
 800a876:	2330      	movle	r3, #48	; 0x30
 800a878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a87c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a880:	1b52      	subs	r2, r2, r5
 800a882:	6122      	str	r2, [r4, #16]
 800a884:	f8cd a000 	str.w	sl, [sp]
 800a888:	464b      	mov	r3, r9
 800a88a:	aa03      	add	r2, sp, #12
 800a88c:	4621      	mov	r1, r4
 800a88e:	4640      	mov	r0, r8
 800a890:	f7ff fee4 	bl	800a65c <_printf_common>
 800a894:	3001      	adds	r0, #1
 800a896:	d14a      	bne.n	800a92e <_printf_i+0x1f6>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	b004      	add	sp, #16
 800a89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	f043 0320 	orr.w	r3, r3, #32
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	4833      	ldr	r0, [pc, #204]	; (800a978 <_printf_i+0x240>)
 800a8ac:	2778      	movs	r7, #120	; 0x78
 800a8ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	6829      	ldr	r1, [r5, #0]
 800a8b6:	061f      	lsls	r7, r3, #24
 800a8b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8bc:	d402      	bmi.n	800a8c4 <_printf_i+0x18c>
 800a8be:	065f      	lsls	r7, r3, #25
 800a8c0:	bf48      	it	mi
 800a8c2:	b2b6      	uxthmi	r6, r6
 800a8c4:	07df      	lsls	r7, r3, #31
 800a8c6:	bf48      	it	mi
 800a8c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a8cc:	6029      	str	r1, [r5, #0]
 800a8ce:	bf48      	it	mi
 800a8d0:	6023      	strmi	r3, [r4, #0]
 800a8d2:	b91e      	cbnz	r6, 800a8dc <_printf_i+0x1a4>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	f023 0320 	bic.w	r3, r3, #32
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	2310      	movs	r3, #16
 800a8de:	e7a7      	b.n	800a830 <_printf_i+0xf8>
 800a8e0:	4824      	ldr	r0, [pc, #144]	; (800a974 <_printf_i+0x23c>)
 800a8e2:	e7e4      	b.n	800a8ae <_printf_i+0x176>
 800a8e4:	4615      	mov	r5, r2
 800a8e6:	e7bd      	b.n	800a864 <_printf_i+0x12c>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	6826      	ldr	r6, [r4, #0]
 800a8ec:	6961      	ldr	r1, [r4, #20]
 800a8ee:	1d18      	adds	r0, r3, #4
 800a8f0:	6028      	str	r0, [r5, #0]
 800a8f2:	0635      	lsls	r5, r6, #24
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0x1c4>
 800a8f8:	6019      	str	r1, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0x1ca>
 800a8fc:	0670      	lsls	r0, r6, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0x1c0>
 800a900:	8019      	strh	r1, [r3, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	4615      	mov	r5, r2
 800a908:	e7bc      	b.n	800a884 <_printf_i+0x14c>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	602a      	str	r2, [r5, #0]
 800a910:	681d      	ldr	r5, [r3, #0]
 800a912:	6862      	ldr	r2, [r4, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	4628      	mov	r0, r5
 800a918:	f7f5 fc72 	bl	8000200 <memchr>
 800a91c:	b108      	cbz	r0, 800a922 <_printf_i+0x1ea>
 800a91e:	1b40      	subs	r0, r0, r5
 800a920:	6060      	str	r0, [r4, #4]
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92c:	e7aa      	b.n	800a884 <_printf_i+0x14c>
 800a92e:	6923      	ldr	r3, [r4, #16]
 800a930:	462a      	mov	r2, r5
 800a932:	4649      	mov	r1, r9
 800a934:	4640      	mov	r0, r8
 800a936:	47d0      	blx	sl
 800a938:	3001      	adds	r0, #1
 800a93a:	d0ad      	beq.n	800a898 <_printf_i+0x160>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	d413      	bmi.n	800a96a <_printf_i+0x232>
 800a942:	68e0      	ldr	r0, [r4, #12]
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	4298      	cmp	r0, r3
 800a948:	bfb8      	it	lt
 800a94a:	4618      	movlt	r0, r3
 800a94c:	e7a6      	b.n	800a89c <_printf_i+0x164>
 800a94e:	2301      	movs	r3, #1
 800a950:	4632      	mov	r2, r6
 800a952:	4649      	mov	r1, r9
 800a954:	4640      	mov	r0, r8
 800a956:	47d0      	blx	sl
 800a958:	3001      	adds	r0, #1
 800a95a:	d09d      	beq.n	800a898 <_printf_i+0x160>
 800a95c:	3501      	adds	r5, #1
 800a95e:	68e3      	ldr	r3, [r4, #12]
 800a960:	9903      	ldr	r1, [sp, #12]
 800a962:	1a5b      	subs	r3, r3, r1
 800a964:	42ab      	cmp	r3, r5
 800a966:	dcf2      	bgt.n	800a94e <_printf_i+0x216>
 800a968:	e7eb      	b.n	800a942 <_printf_i+0x20a>
 800a96a:	2500      	movs	r5, #0
 800a96c:	f104 0619 	add.w	r6, r4, #25
 800a970:	e7f5      	b.n	800a95e <_printf_i+0x226>
 800a972:	bf00      	nop
 800a974:	0800cf7e 	.word	0x0800cf7e
 800a978:	0800cf8f 	.word	0x0800cf8f

0800a97c <std>:
 800a97c:	2300      	movs	r3, #0
 800a97e:	b510      	push	{r4, lr}
 800a980:	4604      	mov	r4, r0
 800a982:	e9c0 3300 	strd	r3, r3, [r0]
 800a986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a98a:	6083      	str	r3, [r0, #8]
 800a98c:	8181      	strh	r1, [r0, #12]
 800a98e:	6643      	str	r3, [r0, #100]	; 0x64
 800a990:	81c2      	strh	r2, [r0, #14]
 800a992:	6183      	str	r3, [r0, #24]
 800a994:	4619      	mov	r1, r3
 800a996:	2208      	movs	r2, #8
 800a998:	305c      	adds	r0, #92	; 0x5c
 800a99a:	f000 f914 	bl	800abc6 <memset>
 800a99e:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <std+0x58>)
 800a9a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <std+0x5c>)
 800a9a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <std+0x60>)
 800a9a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9aa:	4b0d      	ldr	r3, [pc, #52]	; (800a9e0 <std+0x64>)
 800a9ac:	6323      	str	r3, [r4, #48]	; 0x30
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <std+0x68>)
 800a9b0:	6224      	str	r4, [r4, #32]
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d006      	beq.n	800a9c4 <std+0x48>
 800a9b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a9ba:	4294      	cmp	r4, r2
 800a9bc:	d002      	beq.n	800a9c4 <std+0x48>
 800a9be:	33d0      	adds	r3, #208	; 0xd0
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	d105      	bne.n	800a9d0 <std+0x54>
 800a9c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9cc:	f000 b988 	b.w	800ace0 <__retarget_lock_init_recursive>
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800ab41 	.word	0x0800ab41
 800a9d8:	0800ab63 	.word	0x0800ab63
 800a9dc:	0800ab9b 	.word	0x0800ab9b
 800a9e0:	0800abbf 	.word	0x0800abbf
 800a9e4:	20002498 	.word	0x20002498

0800a9e8 <stdio_exit_handler>:
 800a9e8:	4a02      	ldr	r2, [pc, #8]	; (800a9f4 <stdio_exit_handler+0xc>)
 800a9ea:	4903      	ldr	r1, [pc, #12]	; (800a9f8 <stdio_exit_handler+0x10>)
 800a9ec:	4803      	ldr	r0, [pc, #12]	; (800a9fc <stdio_exit_handler+0x14>)
 800a9ee:	f000 b869 	b.w	800aac4 <_fwalk_sglue>
 800a9f2:	bf00      	nop
 800a9f4:	200000c0 	.word	0x200000c0
 800a9f8:	0800c559 	.word	0x0800c559
 800a9fc:	200000cc 	.word	0x200000cc

0800aa00 <cleanup_stdio>:
 800aa00:	6841      	ldr	r1, [r0, #4]
 800aa02:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <cleanup_stdio+0x34>)
 800aa04:	4299      	cmp	r1, r3
 800aa06:	b510      	push	{r4, lr}
 800aa08:	4604      	mov	r4, r0
 800aa0a:	d001      	beq.n	800aa10 <cleanup_stdio+0x10>
 800aa0c:	f001 fda4 	bl	800c558 <_fflush_r>
 800aa10:	68a1      	ldr	r1, [r4, #8]
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <cleanup_stdio+0x38>)
 800aa14:	4299      	cmp	r1, r3
 800aa16:	d002      	beq.n	800aa1e <cleanup_stdio+0x1e>
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f001 fd9d 	bl	800c558 <_fflush_r>
 800aa1e:	68e1      	ldr	r1, [r4, #12]
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <cleanup_stdio+0x3c>)
 800aa22:	4299      	cmp	r1, r3
 800aa24:	d004      	beq.n	800aa30 <cleanup_stdio+0x30>
 800aa26:	4620      	mov	r0, r4
 800aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2c:	f001 bd94 	b.w	800c558 <_fflush_r>
 800aa30:	bd10      	pop	{r4, pc}
 800aa32:	bf00      	nop
 800aa34:	20002498 	.word	0x20002498
 800aa38:	20002500 	.word	0x20002500
 800aa3c:	20002568 	.word	0x20002568

0800aa40 <global_stdio_init.part.0>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <global_stdio_init.part.0+0x30>)
 800aa44:	4c0b      	ldr	r4, [pc, #44]	; (800aa74 <global_stdio_init.part.0+0x34>)
 800aa46:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <global_stdio_init.part.0+0x38>)
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2104      	movs	r1, #4
 800aa50:	f7ff ff94 	bl	800a97c <std>
 800aa54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa58:	2201      	movs	r2, #1
 800aa5a:	2109      	movs	r1, #9
 800aa5c:	f7ff ff8e 	bl	800a97c <std>
 800aa60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa64:	2202      	movs	r2, #2
 800aa66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa6a:	2112      	movs	r1, #18
 800aa6c:	f7ff bf86 	b.w	800a97c <std>
 800aa70:	200025d0 	.word	0x200025d0
 800aa74:	20002498 	.word	0x20002498
 800aa78:	0800a9e9 	.word	0x0800a9e9

0800aa7c <__sfp_lock_acquire>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__sfp_lock_acquire+0x8>)
 800aa7e:	f000 b930 	b.w	800ace2 <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	200025d9 	.word	0x200025d9

0800aa88 <__sfp_lock_release>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__sfp_lock_release+0x8>)
 800aa8a:	f000 b92b 	b.w	800ace4 <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	200025d9 	.word	0x200025d9

0800aa94 <__sinit>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	4604      	mov	r4, r0
 800aa98:	f7ff fff0 	bl	800aa7c <__sfp_lock_acquire>
 800aa9c:	6a23      	ldr	r3, [r4, #32]
 800aa9e:	b11b      	cbz	r3, 800aaa8 <__sinit+0x14>
 800aaa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa4:	f7ff bff0 	b.w	800aa88 <__sfp_lock_release>
 800aaa8:	4b04      	ldr	r3, [pc, #16]	; (800aabc <__sinit+0x28>)
 800aaaa:	6223      	str	r3, [r4, #32]
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <__sinit+0x2c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1f5      	bne.n	800aaa0 <__sinit+0xc>
 800aab4:	f7ff ffc4 	bl	800aa40 <global_stdio_init.part.0>
 800aab8:	e7f2      	b.n	800aaa0 <__sinit+0xc>
 800aaba:	bf00      	nop
 800aabc:	0800aa01 	.word	0x0800aa01
 800aac0:	200025d0 	.word	0x200025d0

0800aac4 <_fwalk_sglue>:
 800aac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac8:	4607      	mov	r7, r0
 800aaca:	4688      	mov	r8, r1
 800aacc:	4614      	mov	r4, r2
 800aace:	2600      	movs	r6, #0
 800aad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aad4:	f1b9 0901 	subs.w	r9, r9, #1
 800aad8:	d505      	bpl.n	800aae6 <_fwalk_sglue+0x22>
 800aada:	6824      	ldr	r4, [r4, #0]
 800aadc:	2c00      	cmp	r4, #0
 800aade:	d1f7      	bne.n	800aad0 <_fwalk_sglue+0xc>
 800aae0:	4630      	mov	r0, r6
 800aae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d907      	bls.n	800aafc <_fwalk_sglue+0x38>
 800aaec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	d003      	beq.n	800aafc <_fwalk_sglue+0x38>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	47c0      	blx	r8
 800aafa:	4306      	orrs	r6, r0
 800aafc:	3568      	adds	r5, #104	; 0x68
 800aafe:	e7e9      	b.n	800aad4 <_fwalk_sglue+0x10>

0800ab00 <siprintf>:
 800ab00:	b40e      	push	{r1, r2, r3}
 800ab02:	b500      	push	{lr}
 800ab04:	b09c      	sub	sp, #112	; 0x70
 800ab06:	ab1d      	add	r3, sp, #116	; 0x74
 800ab08:	9002      	str	r0, [sp, #8]
 800ab0a:	9006      	str	r0, [sp, #24]
 800ab0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab10:	4809      	ldr	r0, [pc, #36]	; (800ab38 <siprintf+0x38>)
 800ab12:	9107      	str	r1, [sp, #28]
 800ab14:	9104      	str	r1, [sp, #16]
 800ab16:	4909      	ldr	r1, [pc, #36]	; (800ab3c <siprintf+0x3c>)
 800ab18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1c:	9105      	str	r1, [sp, #20]
 800ab1e:	6800      	ldr	r0, [r0, #0]
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	a902      	add	r1, sp, #8
 800ab24:	f001 fb94 	bl	800c250 <_svfiprintf_r>
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	b01c      	add	sp, #112	; 0x70
 800ab30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab34:	b003      	add	sp, #12
 800ab36:	4770      	bx	lr
 800ab38:	20000118 	.word	0x20000118
 800ab3c:	ffff0208 	.word	0xffff0208

0800ab40 <__sread>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	460c      	mov	r4, r1
 800ab44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab48:	f000 f86c 	bl	800ac24 <_read_r>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	bfab      	itete	ge
 800ab50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab52:	89a3      	ldrhlt	r3, [r4, #12]
 800ab54:	181b      	addge	r3, r3, r0
 800ab56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab5a:	bfac      	ite	ge
 800ab5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab5e:	81a3      	strhlt	r3, [r4, #12]
 800ab60:	bd10      	pop	{r4, pc}

0800ab62 <__swrite>:
 800ab62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab66:	461f      	mov	r7, r3
 800ab68:	898b      	ldrh	r3, [r1, #12]
 800ab6a:	05db      	lsls	r3, r3, #23
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	4616      	mov	r6, r2
 800ab72:	d505      	bpl.n	800ab80 <__swrite+0x1e>
 800ab74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab78:	2302      	movs	r3, #2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f000 f840 	bl	800ac00 <_lseek_r>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	463b      	mov	r3, r7
 800ab90:	4628      	mov	r0, r5
 800ab92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab96:	f000 b867 	b.w	800ac68 <_write_r>

0800ab9a <__sseek>:
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba2:	f000 f82d 	bl	800ac00 <_lseek_r>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	bf15      	itete	ne
 800abac:	6560      	strne	r0, [r4, #84]	; 0x54
 800abae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abb6:	81a3      	strheq	r3, [r4, #12]
 800abb8:	bf18      	it	ne
 800abba:	81a3      	strhne	r3, [r4, #12]
 800abbc:	bd10      	pop	{r4, pc}

0800abbe <__sclose>:
 800abbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc2:	f000 b80d 	b.w	800abe0 <_close_r>

0800abc6 <memset>:
 800abc6:	4402      	add	r2, r0
 800abc8:	4603      	mov	r3, r0
 800abca:	4293      	cmp	r3, r2
 800abcc:	d100      	bne.n	800abd0 <memset+0xa>
 800abce:	4770      	bx	lr
 800abd0:	f803 1b01 	strb.w	r1, [r3], #1
 800abd4:	e7f9      	b.n	800abca <memset+0x4>
	...

0800abd8 <_localeconv_r>:
 800abd8:	4800      	ldr	r0, [pc, #0]	; (800abdc <_localeconv_r+0x4>)
 800abda:	4770      	bx	lr
 800abdc:	2000020c 	.word	0x2000020c

0800abe0 <_close_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d06      	ldr	r5, [pc, #24]	; (800abfc <_close_r+0x1c>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	602b      	str	r3, [r5, #0]
 800abec:	f7f8 f91f 	bl	8002e2e <_close>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_close_r+0x1a>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_close_r+0x1a>
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	200025d4 	.word	0x200025d4

0800ac00 <_lseek_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_lseek_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f8 f934 	bl	8002e7c <_lseek>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_lseek_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_lseek_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	200025d4 	.word	0x200025d4

0800ac24 <_read_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_read_r+0x20>)
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f7f8 f8c2 	bl	8002dbc <_read>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_read_r+0x1e>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_read_r+0x1e>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	200025d4 	.word	0x200025d4

0800ac48 <_sbrk_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d06      	ldr	r5, [pc, #24]	; (800ac64 <_sbrk_r+0x1c>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	f7f8 f920 	bl	8002e98 <_sbrk>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_sbrk_r+0x1a>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_sbrk_r+0x1a>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	200025d4 	.word	0x200025d4

0800ac68 <_write_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	; (800ac88 <_write_r+0x20>)
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4611      	mov	r1, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f7f8 f8bd 	bl	8002df6 <_write>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_write_r+0x1e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_write_r+0x1e>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	200025d4 	.word	0x200025d4

0800ac8c <__errno>:
 800ac8c:	4b01      	ldr	r3, [pc, #4]	; (800ac94 <__errno+0x8>)
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000118 	.word	0x20000118

0800ac98 <__libc_init_array>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4d0d      	ldr	r5, [pc, #52]	; (800acd0 <__libc_init_array+0x38>)
 800ac9c:	4c0d      	ldr	r4, [pc, #52]	; (800acd4 <__libc_init_array+0x3c>)
 800ac9e:	1b64      	subs	r4, r4, r5
 800aca0:	10a4      	asrs	r4, r4, #2
 800aca2:	2600      	movs	r6, #0
 800aca4:	42a6      	cmp	r6, r4
 800aca6:	d109      	bne.n	800acbc <__libc_init_array+0x24>
 800aca8:	4d0b      	ldr	r5, [pc, #44]	; (800acd8 <__libc_init_array+0x40>)
 800acaa:	4c0c      	ldr	r4, [pc, #48]	; (800acdc <__libc_init_array+0x44>)
 800acac:	f001 ffc4 	bl	800cc38 <_init>
 800acb0:	1b64      	subs	r4, r4, r5
 800acb2:	10a4      	asrs	r4, r4, #2
 800acb4:	2600      	movs	r6, #0
 800acb6:	42a6      	cmp	r6, r4
 800acb8:	d105      	bne.n	800acc6 <__libc_init_array+0x2e>
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc0:	4798      	blx	r3
 800acc2:	3601      	adds	r6, #1
 800acc4:	e7ee      	b.n	800aca4 <__libc_init_array+0xc>
 800acc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acca:	4798      	blx	r3
 800accc:	3601      	adds	r6, #1
 800acce:	e7f2      	b.n	800acb6 <__libc_init_array+0x1e>
 800acd0:	0800d2e4 	.word	0x0800d2e4
 800acd4:	0800d2e4 	.word	0x0800d2e4
 800acd8:	0800d2e4 	.word	0x0800d2e4
 800acdc:	0800d2e8 	.word	0x0800d2e8

0800ace0 <__retarget_lock_init_recursive>:
 800ace0:	4770      	bx	lr

0800ace2 <__retarget_lock_acquire_recursive>:
 800ace2:	4770      	bx	lr

0800ace4 <__retarget_lock_release_recursive>:
 800ace4:	4770      	bx	lr

0800ace6 <memcpy>:
 800ace6:	440a      	add	r2, r1
 800ace8:	4291      	cmp	r1, r2
 800acea:	f100 33ff 	add.w	r3, r0, #4294967295
 800acee:	d100      	bne.n	800acf2 <memcpy+0xc>
 800acf0:	4770      	bx	lr
 800acf2:	b510      	push	{r4, lr}
 800acf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfc:	4291      	cmp	r1, r2
 800acfe:	d1f9      	bne.n	800acf4 <memcpy+0xe>
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <quorem>:
 800ad02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad06:	6903      	ldr	r3, [r0, #16]
 800ad08:	690c      	ldr	r4, [r1, #16]
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	db7e      	blt.n	800ae0e <quorem+0x10c>
 800ad10:	3c01      	subs	r4, #1
 800ad12:	f101 0814 	add.w	r8, r1, #20
 800ad16:	f100 0514 	add.w	r5, r0, #20
 800ad1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad34:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad38:	d331      	bcc.n	800ad9e <quorem+0x9c>
 800ad3a:	f04f 0e00 	mov.w	lr, #0
 800ad3e:	4640      	mov	r0, r8
 800ad40:	46ac      	mov	ip, r5
 800ad42:	46f2      	mov	sl, lr
 800ad44:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad48:	b293      	uxth	r3, r2
 800ad4a:	fb06 e303 	mla	r3, r6, r3, lr
 800ad4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad52:	0c1a      	lsrs	r2, r3, #16
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	ebaa 0303 	sub.w	r3, sl, r3
 800ad5a:	f8dc a000 	ldr.w	sl, [ip]
 800ad5e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad62:	fb06 220e 	mla	r2, r6, lr, r2
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	9b00      	ldr	r3, [sp, #0]
 800ad6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad6e:	b292      	uxth	r2, r2
 800ad70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad78:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad7c:	4581      	cmp	r9, r0
 800ad7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad82:	f84c 3b04 	str.w	r3, [ip], #4
 800ad86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad8a:	d2db      	bcs.n	800ad44 <quorem+0x42>
 800ad8c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad90:	b92b      	cbnz	r3, 800ad9e <quorem+0x9c>
 800ad92:	9b01      	ldr	r3, [sp, #4]
 800ad94:	3b04      	subs	r3, #4
 800ad96:	429d      	cmp	r5, r3
 800ad98:	461a      	mov	r2, r3
 800ad9a:	d32c      	bcc.n	800adf6 <quorem+0xf4>
 800ad9c:	613c      	str	r4, [r7, #16]
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f001 f8fc 	bl	800bf9c <__mcmp>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	db22      	blt.n	800adee <quorem+0xec>
 800ada8:	3601      	adds	r6, #1
 800adaa:	4629      	mov	r1, r5
 800adac:	2000      	movs	r0, #0
 800adae:	f858 2b04 	ldr.w	r2, [r8], #4
 800adb2:	f8d1 c000 	ldr.w	ip, [r1]
 800adb6:	b293      	uxth	r3, r2
 800adb8:	1ac3      	subs	r3, r0, r3
 800adba:	0c12      	lsrs	r2, r2, #16
 800adbc:	fa13 f38c 	uxtah	r3, r3, ip
 800adc0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800adc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adc8:	b29b      	uxth	r3, r3
 800adca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adce:	45c1      	cmp	r9, r8
 800add0:	f841 3b04 	str.w	r3, [r1], #4
 800add4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800add8:	d2e9      	bcs.n	800adae <quorem+0xac>
 800adda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ade2:	b922      	cbnz	r2, 800adee <quorem+0xec>
 800ade4:	3b04      	subs	r3, #4
 800ade6:	429d      	cmp	r5, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	d30a      	bcc.n	800ae02 <quorem+0x100>
 800adec:	613c      	str	r4, [r7, #16]
 800adee:	4630      	mov	r0, r6
 800adf0:	b003      	add	sp, #12
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	6812      	ldr	r2, [r2, #0]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	d1ce      	bne.n	800ad9c <quorem+0x9a>
 800adfe:	3c01      	subs	r4, #1
 800ae00:	e7c9      	b.n	800ad96 <quorem+0x94>
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	3b04      	subs	r3, #4
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	d1f0      	bne.n	800adec <quorem+0xea>
 800ae0a:	3c01      	subs	r4, #1
 800ae0c:	e7eb      	b.n	800ade6 <quorem+0xe4>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e7ee      	b.n	800adf0 <quorem+0xee>
 800ae12:	0000      	movs	r0, r0
 800ae14:	0000      	movs	r0, r0
	...

0800ae18 <_dtoa_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	ed2d 8b04 	vpush	{d8-d9}
 800ae20:	69c5      	ldr	r5, [r0, #28]
 800ae22:	b093      	sub	sp, #76	; 0x4c
 800ae24:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae28:	ec57 6b10 	vmov	r6, r7, d0
 800ae2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae30:	9107      	str	r1, [sp, #28]
 800ae32:	4604      	mov	r4, r0
 800ae34:	920a      	str	r2, [sp, #40]	; 0x28
 800ae36:	930d      	str	r3, [sp, #52]	; 0x34
 800ae38:	b975      	cbnz	r5, 800ae58 <_dtoa_r+0x40>
 800ae3a:	2010      	movs	r0, #16
 800ae3c:	f000 fe2a 	bl	800ba94 <malloc>
 800ae40:	4602      	mov	r2, r0
 800ae42:	61e0      	str	r0, [r4, #28]
 800ae44:	b920      	cbnz	r0, 800ae50 <_dtoa_r+0x38>
 800ae46:	4bae      	ldr	r3, [pc, #696]	; (800b100 <_dtoa_r+0x2e8>)
 800ae48:	21ef      	movs	r1, #239	; 0xef
 800ae4a:	48ae      	ldr	r0, [pc, #696]	; (800b104 <_dtoa_r+0x2ec>)
 800ae4c:	f001 fbc6 	bl	800c5dc <__assert_func>
 800ae50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae54:	6005      	str	r5, [r0, #0]
 800ae56:	60c5      	str	r5, [r0, #12]
 800ae58:	69e3      	ldr	r3, [r4, #28]
 800ae5a:	6819      	ldr	r1, [r3, #0]
 800ae5c:	b151      	cbz	r1, 800ae74 <_dtoa_r+0x5c>
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	604a      	str	r2, [r1, #4]
 800ae62:	2301      	movs	r3, #1
 800ae64:	4093      	lsls	r3, r2
 800ae66:	608b      	str	r3, [r1, #8]
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 fe5b 	bl	800bb24 <_Bfree>
 800ae6e:	69e3      	ldr	r3, [r4, #28]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	1e3b      	subs	r3, r7, #0
 800ae76:	bfbb      	ittet	lt
 800ae78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae7c:	9303      	strlt	r3, [sp, #12]
 800ae7e:	2300      	movge	r3, #0
 800ae80:	2201      	movlt	r2, #1
 800ae82:	bfac      	ite	ge
 800ae84:	f8c8 3000 	strge.w	r3, [r8]
 800ae88:	f8c8 2000 	strlt.w	r2, [r8]
 800ae8c:	4b9e      	ldr	r3, [pc, #632]	; (800b108 <_dtoa_r+0x2f0>)
 800ae8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae92:	ea33 0308 	bics.w	r3, r3, r8
 800ae96:	d11b      	bne.n	800aed0 <_dtoa_r+0xb8>
 800ae98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae9a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aea4:	4333      	orrs	r3, r6
 800aea6:	f000 8593 	beq.w	800b9d0 <_dtoa_r+0xbb8>
 800aeaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeac:	b963      	cbnz	r3, 800aec8 <_dtoa_r+0xb0>
 800aeae:	4b97      	ldr	r3, [pc, #604]	; (800b10c <_dtoa_r+0x2f4>)
 800aeb0:	e027      	b.n	800af02 <_dtoa_r+0xea>
 800aeb2:	4b97      	ldr	r3, [pc, #604]	; (800b110 <_dtoa_r+0x2f8>)
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	9800      	ldr	r0, [sp, #0]
 800aebe:	b013      	add	sp, #76	; 0x4c
 800aec0:	ecbd 8b04 	vpop	{d8-d9}
 800aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec8:	4b90      	ldr	r3, [pc, #576]	; (800b10c <_dtoa_r+0x2f4>)
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	3303      	adds	r3, #3
 800aece:	e7f3      	b.n	800aeb8 <_dtoa_r+0xa0>
 800aed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aed4:	2200      	movs	r2, #0
 800aed6:	ec51 0b17 	vmov	r0, r1, d7
 800aeda:	eeb0 8a47 	vmov.f32	s16, s14
 800aede:	eef0 8a67 	vmov.f32	s17, s15
 800aee2:	2300      	movs	r3, #0
 800aee4:	f7f5 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 800aee8:	4681      	mov	r9, r0
 800aeea:	b160      	cbz	r0, 800af06 <_dtoa_r+0xee>
 800aeec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeee:	2301      	movs	r3, #1
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 8568 	beq.w	800b9ca <_dtoa_r+0xbb2>
 800aefa:	4b86      	ldr	r3, [pc, #536]	; (800b114 <_dtoa_r+0x2fc>)
 800aefc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	3b01      	subs	r3, #1
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	e7da      	b.n	800aebc <_dtoa_r+0xa4>
 800af06:	aa10      	add	r2, sp, #64	; 0x40
 800af08:	a911      	add	r1, sp, #68	; 0x44
 800af0a:	4620      	mov	r0, r4
 800af0c:	eeb0 0a48 	vmov.f32	s0, s16
 800af10:	eef0 0a68 	vmov.f32	s1, s17
 800af14:	f001 f8e8 	bl	800c0e8 <__d2b>
 800af18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af1c:	4682      	mov	sl, r0
 800af1e:	2d00      	cmp	r5, #0
 800af20:	d07f      	beq.n	800b022 <_dtoa_r+0x20a>
 800af22:	ee18 3a90 	vmov	r3, s17
 800af26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800af2e:	ec51 0b18 	vmov	r0, r1, d8
 800af32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800af3e:	4619      	mov	r1, r3
 800af40:	2200      	movs	r2, #0
 800af42:	4b75      	ldr	r3, [pc, #468]	; (800b118 <_dtoa_r+0x300>)
 800af44:	f7f5 f9b8 	bl	80002b8 <__aeabi_dsub>
 800af48:	a367      	add	r3, pc, #412	; (adr r3, 800b0e8 <_dtoa_r+0x2d0>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 fb6b 	bl	8000628 <__aeabi_dmul>
 800af52:	a367      	add	r3, pc, #412	; (adr r3, 800b0f0 <_dtoa_r+0x2d8>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f9b0 	bl	80002bc <__adddf3>
 800af5c:	4606      	mov	r6, r0
 800af5e:	4628      	mov	r0, r5
 800af60:	460f      	mov	r7, r1
 800af62:	f7f5 faf7 	bl	8000554 <__aeabi_i2d>
 800af66:	a364      	add	r3, pc, #400	; (adr r3, 800b0f8 <_dtoa_r+0x2e0>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fb5c 	bl	8000628 <__aeabi_dmul>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f9a0 	bl	80002bc <__adddf3>
 800af7c:	4606      	mov	r6, r0
 800af7e:	460f      	mov	r7, r1
 800af80:	f7f5 fe02 	bl	8000b88 <__aeabi_d2iz>
 800af84:	2200      	movs	r2, #0
 800af86:	4683      	mov	fp, r0
 800af88:	2300      	movs	r3, #0
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 fdbd 	bl	8000b0c <__aeabi_dcmplt>
 800af92:	b148      	cbz	r0, 800afa8 <_dtoa_r+0x190>
 800af94:	4658      	mov	r0, fp
 800af96:	f7f5 fadd 	bl	8000554 <__aeabi_i2d>
 800af9a:	4632      	mov	r2, r6
 800af9c:	463b      	mov	r3, r7
 800af9e:	f7f5 fdab 	bl	8000af8 <__aeabi_dcmpeq>
 800afa2:	b908      	cbnz	r0, 800afa8 <_dtoa_r+0x190>
 800afa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afa8:	f1bb 0f16 	cmp.w	fp, #22
 800afac:	d857      	bhi.n	800b05e <_dtoa_r+0x246>
 800afae:	4b5b      	ldr	r3, [pc, #364]	; (800b11c <_dtoa_r+0x304>)
 800afb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	ec51 0b18 	vmov	r0, r1, d8
 800afbc:	f7f5 fda6 	bl	8000b0c <__aeabi_dcmplt>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d04e      	beq.n	800b062 <_dtoa_r+0x24a>
 800afc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afc8:	2300      	movs	r3, #0
 800afca:	930c      	str	r3, [sp, #48]	; 0x30
 800afcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afce:	1b5b      	subs	r3, r3, r5
 800afd0:	1e5a      	subs	r2, r3, #1
 800afd2:	bf45      	ittet	mi
 800afd4:	f1c3 0301 	rsbmi	r3, r3, #1
 800afd8:	9305      	strmi	r3, [sp, #20]
 800afda:	2300      	movpl	r3, #0
 800afdc:	2300      	movmi	r3, #0
 800afde:	9206      	str	r2, [sp, #24]
 800afe0:	bf54      	ite	pl
 800afe2:	9305      	strpl	r3, [sp, #20]
 800afe4:	9306      	strmi	r3, [sp, #24]
 800afe6:	f1bb 0f00 	cmp.w	fp, #0
 800afea:	db3c      	blt.n	800b066 <_dtoa_r+0x24e>
 800afec:	9b06      	ldr	r3, [sp, #24]
 800afee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aff2:	445b      	add	r3, fp
 800aff4:	9306      	str	r3, [sp, #24]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9308      	str	r3, [sp, #32]
 800affa:	9b07      	ldr	r3, [sp, #28]
 800affc:	2b09      	cmp	r3, #9
 800affe:	d868      	bhi.n	800b0d2 <_dtoa_r+0x2ba>
 800b000:	2b05      	cmp	r3, #5
 800b002:	bfc4      	itt	gt
 800b004:	3b04      	subgt	r3, #4
 800b006:	9307      	strgt	r3, [sp, #28]
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	f1a3 0302 	sub.w	r3, r3, #2
 800b00e:	bfcc      	ite	gt
 800b010:	2500      	movgt	r5, #0
 800b012:	2501      	movle	r5, #1
 800b014:	2b03      	cmp	r3, #3
 800b016:	f200 8085 	bhi.w	800b124 <_dtoa_r+0x30c>
 800b01a:	e8df f003 	tbb	[pc, r3]
 800b01e:	3b2e      	.short	0x3b2e
 800b020:	5839      	.short	0x5839
 800b022:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b026:	441d      	add	r5, r3
 800b028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	bfc1      	itttt	gt
 800b030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b034:	fa08 f803 	lslgt.w	r8, r8, r3
 800b038:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b03c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b040:	bfd6      	itet	le
 800b042:	f1c3 0320 	rsble	r3, r3, #32
 800b046:	ea48 0003 	orrgt.w	r0, r8, r3
 800b04a:	fa06 f003 	lslle.w	r0, r6, r3
 800b04e:	f7f5 fa71 	bl	8000534 <__aeabi_ui2d>
 800b052:	2201      	movs	r2, #1
 800b054:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b058:	3d01      	subs	r5, #1
 800b05a:	920e      	str	r2, [sp, #56]	; 0x38
 800b05c:	e76f      	b.n	800af3e <_dtoa_r+0x126>
 800b05e:	2301      	movs	r3, #1
 800b060:	e7b3      	b.n	800afca <_dtoa_r+0x1b2>
 800b062:	900c      	str	r0, [sp, #48]	; 0x30
 800b064:	e7b2      	b.n	800afcc <_dtoa_r+0x1b4>
 800b066:	9b05      	ldr	r3, [sp, #20]
 800b068:	eba3 030b 	sub.w	r3, r3, fp
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	f1cb 0300 	rsb	r3, fp, #0
 800b072:	9308      	str	r3, [sp, #32]
 800b074:	2300      	movs	r3, #0
 800b076:	930b      	str	r3, [sp, #44]	; 0x2c
 800b078:	e7bf      	b.n	800affa <_dtoa_r+0x1e2>
 800b07a:	2300      	movs	r3, #0
 800b07c:	9309      	str	r3, [sp, #36]	; 0x24
 800b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b080:	2b00      	cmp	r3, #0
 800b082:	dc52      	bgt.n	800b12a <_dtoa_r+0x312>
 800b084:	2301      	movs	r3, #1
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	461a      	mov	r2, r3
 800b08c:	920a      	str	r2, [sp, #40]	; 0x28
 800b08e:	e00b      	b.n	800b0a8 <_dtoa_r+0x290>
 800b090:	2301      	movs	r3, #1
 800b092:	e7f3      	b.n	800b07c <_dtoa_r+0x264>
 800b094:	2300      	movs	r3, #0
 800b096:	9309      	str	r3, [sp, #36]	; 0x24
 800b098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b09a:	445b      	add	r3, fp
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	bfb8      	it	lt
 800b0a6:	2301      	movlt	r3, #1
 800b0a8:	69e0      	ldr	r0, [r4, #28]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	f102 0614 	add.w	r6, r2, #20
 800b0b2:	429e      	cmp	r6, r3
 800b0b4:	d93d      	bls.n	800b132 <_dtoa_r+0x31a>
 800b0b6:	6041      	str	r1, [r0, #4]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fcf3 	bl	800baa4 <_Balloc>
 800b0be:	9000      	str	r0, [sp, #0]
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d139      	bne.n	800b138 <_dtoa_r+0x320>
 800b0c4:	4b16      	ldr	r3, [pc, #88]	; (800b120 <_dtoa_r+0x308>)
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	f240 11af 	movw	r1, #431	; 0x1af
 800b0cc:	e6bd      	b.n	800ae4a <_dtoa_r+0x32>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e7e1      	b.n	800b096 <_dtoa_r+0x27e>
 800b0d2:	2501      	movs	r5, #1
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	9509      	str	r5, [sp, #36]	; 0x24
 800b0da:	f04f 33ff 	mov.w	r3, #4294967295
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2312      	movs	r3, #18
 800b0e6:	e7d1      	b.n	800b08c <_dtoa_r+0x274>
 800b0e8:	636f4361 	.word	0x636f4361
 800b0ec:	3fd287a7 	.word	0x3fd287a7
 800b0f0:	8b60c8b3 	.word	0x8b60c8b3
 800b0f4:	3fc68a28 	.word	0x3fc68a28
 800b0f8:	509f79fb 	.word	0x509f79fb
 800b0fc:	3fd34413 	.word	0x3fd34413
 800b100:	0800cfad 	.word	0x0800cfad
 800b104:	0800cfc4 	.word	0x0800cfc4
 800b108:	7ff00000 	.word	0x7ff00000
 800b10c:	0800cfa9 	.word	0x0800cfa9
 800b110:	0800cfa0 	.word	0x0800cfa0
 800b114:	0800cf7d 	.word	0x0800cf7d
 800b118:	3ff80000 	.word	0x3ff80000
 800b11c:	0800d0b0 	.word	0x0800d0b0
 800b120:	0800d01c 	.word	0x0800d01c
 800b124:	2301      	movs	r3, #1
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	e7d7      	b.n	800b0da <_dtoa_r+0x2c2>
 800b12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	e7ba      	b.n	800b0a8 <_dtoa_r+0x290>
 800b132:	3101      	adds	r1, #1
 800b134:	0052      	lsls	r2, r2, #1
 800b136:	e7ba      	b.n	800b0ae <_dtoa_r+0x296>
 800b138:	69e3      	ldr	r3, [r4, #28]
 800b13a:	9a00      	ldr	r2, [sp, #0]
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	2b0e      	cmp	r3, #14
 800b142:	f200 80a8 	bhi.w	800b296 <_dtoa_r+0x47e>
 800b146:	2d00      	cmp	r5, #0
 800b148:	f000 80a5 	beq.w	800b296 <_dtoa_r+0x47e>
 800b14c:	f1bb 0f00 	cmp.w	fp, #0
 800b150:	dd38      	ble.n	800b1c4 <_dtoa_r+0x3ac>
 800b152:	4bc0      	ldr	r3, [pc, #768]	; (800b454 <_dtoa_r+0x63c>)
 800b154:	f00b 020f 	and.w	r2, fp, #15
 800b158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b15c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b160:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b164:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b168:	d019      	beq.n	800b19e <_dtoa_r+0x386>
 800b16a:	4bbb      	ldr	r3, [pc, #748]	; (800b458 <_dtoa_r+0x640>)
 800b16c:	ec51 0b18 	vmov	r0, r1, d8
 800b170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b174:	f7f5 fb82 	bl	800087c <__aeabi_ddiv>
 800b178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b17c:	f008 080f 	and.w	r8, r8, #15
 800b180:	2503      	movs	r5, #3
 800b182:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b458 <_dtoa_r+0x640>
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	d10a      	bne.n	800b1a2 <_dtoa_r+0x38a>
 800b18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b190:	4632      	mov	r2, r6
 800b192:	463b      	mov	r3, r7
 800b194:	f7f5 fb72 	bl	800087c <__aeabi_ddiv>
 800b198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b19c:	e02b      	b.n	800b1f6 <_dtoa_r+0x3de>
 800b19e:	2502      	movs	r5, #2
 800b1a0:	e7ef      	b.n	800b182 <_dtoa_r+0x36a>
 800b1a2:	f018 0f01 	tst.w	r8, #1
 800b1a6:	d008      	beq.n	800b1ba <_dtoa_r+0x3a2>
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b1b0:	f7f5 fa3a 	bl	8000628 <__aeabi_dmul>
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b1be:	f109 0908 	add.w	r9, r9, #8
 800b1c2:	e7e0      	b.n	800b186 <_dtoa_r+0x36e>
 800b1c4:	f000 809f 	beq.w	800b306 <_dtoa_r+0x4ee>
 800b1c8:	f1cb 0600 	rsb	r6, fp, #0
 800b1cc:	4ba1      	ldr	r3, [pc, #644]	; (800b454 <_dtoa_r+0x63c>)
 800b1ce:	4fa2      	ldr	r7, [pc, #648]	; (800b458 <_dtoa_r+0x640>)
 800b1d0:	f006 020f 	and.w	r2, r6, #15
 800b1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	ec51 0b18 	vmov	r0, r1, d8
 800b1e0:	f7f5 fa22 	bl	8000628 <__aeabi_dmul>
 800b1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1e8:	1136      	asrs	r6, r6, #4
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	2502      	movs	r5, #2
 800b1ee:	2e00      	cmp	r6, #0
 800b1f0:	d17e      	bne.n	800b2f0 <_dtoa_r+0x4d8>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1d0      	bne.n	800b198 <_dtoa_r+0x380>
 800b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8084 	beq.w	800b30a <_dtoa_r+0x4f2>
 800b202:	4b96      	ldr	r3, [pc, #600]	; (800b45c <_dtoa_r+0x644>)
 800b204:	2200      	movs	r2, #0
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d07b      	beq.n	800b30a <_dtoa_r+0x4f2>
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d078      	beq.n	800b30a <_dtoa_r+0x4f2>
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dd39      	ble.n	800b292 <_dtoa_r+0x47a>
 800b21e:	4b90      	ldr	r3, [pc, #576]	; (800b460 <_dtoa_r+0x648>)
 800b220:	2200      	movs	r2, #0
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	f7f5 f9ff 	bl	8000628 <__aeabi_dmul>
 800b22a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b22e:	9e01      	ldr	r6, [sp, #4]
 800b230:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b234:	3501      	adds	r5, #1
 800b236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b23a:	4628      	mov	r0, r5
 800b23c:	f7f5 f98a 	bl	8000554 <__aeabi_i2d>
 800b240:	4642      	mov	r2, r8
 800b242:	464b      	mov	r3, r9
 800b244:	f7f5 f9f0 	bl	8000628 <__aeabi_dmul>
 800b248:	4b86      	ldr	r3, [pc, #536]	; (800b464 <_dtoa_r+0x64c>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	f7f5 f836 	bl	80002bc <__adddf3>
 800b250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	2e00      	cmp	r6, #0
 800b25c:	d158      	bne.n	800b310 <_dtoa_r+0x4f8>
 800b25e:	4b82      	ldr	r3, [pc, #520]	; (800b468 <_dtoa_r+0x650>)
 800b260:	2200      	movs	r2, #0
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f5 f827 	bl	80002b8 <__aeabi_dsub>
 800b26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b26e:	4680      	mov	r8, r0
 800b270:	4689      	mov	r9, r1
 800b272:	f7f5 fc69 	bl	8000b48 <__aeabi_dcmpgt>
 800b276:	2800      	cmp	r0, #0
 800b278:	f040 8296 	bne.w	800b7a8 <_dtoa_r+0x990>
 800b27c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b280:	4640      	mov	r0, r8
 800b282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b286:	4649      	mov	r1, r9
 800b288:	f7f5 fc40 	bl	8000b0c <__aeabi_dcmplt>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f040 8289 	bne.w	800b7a4 <_dtoa_r+0x98c>
 800b292:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f2c0 814e 	blt.w	800b53a <_dtoa_r+0x722>
 800b29e:	f1bb 0f0e 	cmp.w	fp, #14
 800b2a2:	f300 814a 	bgt.w	800b53a <_dtoa_r+0x722>
 800b2a6:	4b6b      	ldr	r3, [pc, #428]	; (800b454 <_dtoa_r+0x63c>)
 800b2a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f280 80dc 	bge.w	800b470 <_dtoa_r+0x658>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f300 80d8 	bgt.w	800b470 <_dtoa_r+0x658>
 800b2c0:	f040 826f 	bne.w	800b7a2 <_dtoa_r+0x98a>
 800b2c4:	4b68      	ldr	r3, [pc, #416]	; (800b468 <_dtoa_r+0x650>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	f7f5 f9ac 	bl	8000628 <__aeabi_dmul>
 800b2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2d4:	f7f5 fc2e 	bl	8000b34 <__aeabi_dcmpge>
 800b2d8:	9e04      	ldr	r6, [sp, #16]
 800b2da:	4637      	mov	r7, r6
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f040 8245 	bne.w	800b76c <_dtoa_r+0x954>
 800b2e2:	9d00      	ldr	r5, [sp, #0]
 800b2e4:	2331      	movs	r3, #49	; 0x31
 800b2e6:	f805 3b01 	strb.w	r3, [r5], #1
 800b2ea:	f10b 0b01 	add.w	fp, fp, #1
 800b2ee:	e241      	b.n	800b774 <_dtoa_r+0x95c>
 800b2f0:	07f2      	lsls	r2, r6, #31
 800b2f2:	d505      	bpl.n	800b300 <_dtoa_r+0x4e8>
 800b2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f8:	f7f5 f996 	bl	8000628 <__aeabi_dmul>
 800b2fc:	3501      	adds	r5, #1
 800b2fe:	2301      	movs	r3, #1
 800b300:	1076      	asrs	r6, r6, #1
 800b302:	3708      	adds	r7, #8
 800b304:	e773      	b.n	800b1ee <_dtoa_r+0x3d6>
 800b306:	2502      	movs	r5, #2
 800b308:	e775      	b.n	800b1f6 <_dtoa_r+0x3de>
 800b30a:	9e04      	ldr	r6, [sp, #16]
 800b30c:	465f      	mov	r7, fp
 800b30e:	e792      	b.n	800b236 <_dtoa_r+0x41e>
 800b310:	9900      	ldr	r1, [sp, #0]
 800b312:	4b50      	ldr	r3, [pc, #320]	; (800b454 <_dtoa_r+0x63c>)
 800b314:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b318:	4431      	add	r1, r6
 800b31a:	9102      	str	r1, [sp, #8]
 800b31c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b31e:	eeb0 9a47 	vmov.f32	s18, s14
 800b322:	eef0 9a67 	vmov.f32	s19, s15
 800b326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b32a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b32e:	2900      	cmp	r1, #0
 800b330:	d044      	beq.n	800b3bc <_dtoa_r+0x5a4>
 800b332:	494e      	ldr	r1, [pc, #312]	; (800b46c <_dtoa_r+0x654>)
 800b334:	2000      	movs	r0, #0
 800b336:	f7f5 faa1 	bl	800087c <__aeabi_ddiv>
 800b33a:	ec53 2b19 	vmov	r2, r3, d9
 800b33e:	f7f4 ffbb 	bl	80002b8 <__aeabi_dsub>
 800b342:	9d00      	ldr	r5, [sp, #0]
 800b344:	ec41 0b19 	vmov	d9, r0, r1
 800b348:	4649      	mov	r1, r9
 800b34a:	4640      	mov	r0, r8
 800b34c:	f7f5 fc1c 	bl	8000b88 <__aeabi_d2iz>
 800b350:	4606      	mov	r6, r0
 800b352:	f7f5 f8ff 	bl	8000554 <__aeabi_i2d>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4640      	mov	r0, r8
 800b35c:	4649      	mov	r1, r9
 800b35e:	f7f4 ffab 	bl	80002b8 <__aeabi_dsub>
 800b362:	3630      	adds	r6, #48	; 0x30
 800b364:	f805 6b01 	strb.w	r6, [r5], #1
 800b368:	ec53 2b19 	vmov	r2, r3, d9
 800b36c:	4680      	mov	r8, r0
 800b36e:	4689      	mov	r9, r1
 800b370:	f7f5 fbcc 	bl	8000b0c <__aeabi_dcmplt>
 800b374:	2800      	cmp	r0, #0
 800b376:	d164      	bne.n	800b442 <_dtoa_r+0x62a>
 800b378:	4642      	mov	r2, r8
 800b37a:	464b      	mov	r3, r9
 800b37c:	4937      	ldr	r1, [pc, #220]	; (800b45c <_dtoa_r+0x644>)
 800b37e:	2000      	movs	r0, #0
 800b380:	f7f4 ff9a 	bl	80002b8 <__aeabi_dsub>
 800b384:	ec53 2b19 	vmov	r2, r3, d9
 800b388:	f7f5 fbc0 	bl	8000b0c <__aeabi_dcmplt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f040 80b6 	bne.w	800b4fe <_dtoa_r+0x6e6>
 800b392:	9b02      	ldr	r3, [sp, #8]
 800b394:	429d      	cmp	r5, r3
 800b396:	f43f af7c 	beq.w	800b292 <_dtoa_r+0x47a>
 800b39a:	4b31      	ldr	r3, [pc, #196]	; (800b460 <_dtoa_r+0x648>)
 800b39c:	ec51 0b19 	vmov	r0, r1, d9
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f7f5 f941 	bl	8000628 <__aeabi_dmul>
 800b3a6:	4b2e      	ldr	r3, [pc, #184]	; (800b460 <_dtoa_r+0x648>)
 800b3a8:	ec41 0b19 	vmov	d9, r0, r1
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	f7f5 f939 	bl	8000628 <__aeabi_dmul>
 800b3b6:	4680      	mov	r8, r0
 800b3b8:	4689      	mov	r9, r1
 800b3ba:	e7c5      	b.n	800b348 <_dtoa_r+0x530>
 800b3bc:	ec51 0b17 	vmov	r0, r1, d7
 800b3c0:	f7f5 f932 	bl	8000628 <__aeabi_dmul>
 800b3c4:	9b02      	ldr	r3, [sp, #8]
 800b3c6:	9d00      	ldr	r5, [sp, #0]
 800b3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ca:	ec41 0b19 	vmov	d9, r0, r1
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	4640      	mov	r0, r8
 800b3d2:	f7f5 fbd9 	bl	8000b88 <__aeabi_d2iz>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	f7f5 f8bc 	bl	8000554 <__aeabi_i2d>
 800b3dc:	3630      	adds	r6, #48	; 0x30
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	f7f4 ff67 	bl	80002b8 <__aeabi_dsub>
 800b3ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b3ee:	9b02      	ldr	r3, [sp, #8]
 800b3f0:	429d      	cmp	r5, r3
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	f04f 0200 	mov.w	r2, #0
 800b3fa:	d124      	bne.n	800b446 <_dtoa_r+0x62e>
 800b3fc:	4b1b      	ldr	r3, [pc, #108]	; (800b46c <_dtoa_r+0x654>)
 800b3fe:	ec51 0b19 	vmov	r0, r1, d9
 800b402:	f7f4 ff5b 	bl	80002bc <__adddf3>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4640      	mov	r0, r8
 800b40c:	4649      	mov	r1, r9
 800b40e:	f7f5 fb9b 	bl	8000b48 <__aeabi_dcmpgt>
 800b412:	2800      	cmp	r0, #0
 800b414:	d173      	bne.n	800b4fe <_dtoa_r+0x6e6>
 800b416:	ec53 2b19 	vmov	r2, r3, d9
 800b41a:	4914      	ldr	r1, [pc, #80]	; (800b46c <_dtoa_r+0x654>)
 800b41c:	2000      	movs	r0, #0
 800b41e:	f7f4 ff4b 	bl	80002b8 <__aeabi_dsub>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f5 fb6f 	bl	8000b0c <__aeabi_dcmplt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f43f af2f 	beq.w	800b292 <_dtoa_r+0x47a>
 800b434:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b436:	1e6b      	subs	r3, r5, #1
 800b438:	930f      	str	r3, [sp, #60]	; 0x3c
 800b43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b43e:	2b30      	cmp	r3, #48	; 0x30
 800b440:	d0f8      	beq.n	800b434 <_dtoa_r+0x61c>
 800b442:	46bb      	mov	fp, r7
 800b444:	e04a      	b.n	800b4dc <_dtoa_r+0x6c4>
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <_dtoa_r+0x648>)
 800b448:	f7f5 f8ee 	bl	8000628 <__aeabi_dmul>
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	e7bd      	b.n	800b3ce <_dtoa_r+0x5b6>
 800b452:	bf00      	nop
 800b454:	0800d0b0 	.word	0x0800d0b0
 800b458:	0800d088 	.word	0x0800d088
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	40240000 	.word	0x40240000
 800b464:	401c0000 	.word	0x401c0000
 800b468:	40140000 	.word	0x40140000
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b474:	9d00      	ldr	r5, [sp, #0]
 800b476:	4642      	mov	r2, r8
 800b478:	464b      	mov	r3, r9
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f5 f9fd 	bl	800087c <__aeabi_ddiv>
 800b482:	f7f5 fb81 	bl	8000b88 <__aeabi_d2iz>
 800b486:	9001      	str	r0, [sp, #4]
 800b488:	f7f5 f864 	bl	8000554 <__aeabi_i2d>
 800b48c:	4642      	mov	r2, r8
 800b48e:	464b      	mov	r3, r9
 800b490:	f7f5 f8ca 	bl	8000628 <__aeabi_dmul>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f4 ff0c 	bl	80002b8 <__aeabi_dsub>
 800b4a0:	9e01      	ldr	r6, [sp, #4]
 800b4a2:	9f04      	ldr	r7, [sp, #16]
 800b4a4:	3630      	adds	r6, #48	; 0x30
 800b4a6:	f805 6b01 	strb.w	r6, [r5], #1
 800b4aa:	9e00      	ldr	r6, [sp, #0]
 800b4ac:	1bae      	subs	r6, r5, r6
 800b4ae:	42b7      	cmp	r7, r6
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	d134      	bne.n	800b520 <_dtoa_r+0x708>
 800b4b6:	f7f4 ff01 	bl	80002bc <__adddf3>
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	464b      	mov	r3, r9
 800b4be:	4606      	mov	r6, r0
 800b4c0:	460f      	mov	r7, r1
 800b4c2:	f7f5 fb41 	bl	8000b48 <__aeabi_dcmpgt>
 800b4c6:	b9c8      	cbnz	r0, 800b4fc <_dtoa_r+0x6e4>
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 fb12 	bl	8000af8 <__aeabi_dcmpeq>
 800b4d4:	b110      	cbz	r0, 800b4dc <_dtoa_r+0x6c4>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	07db      	lsls	r3, r3, #31
 800b4da:	d40f      	bmi.n	800b4fc <_dtoa_r+0x6e4>
 800b4dc:	4651      	mov	r1, sl
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f000 fb20 	bl	800bb24 <_Bfree>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4e8:	702b      	strb	r3, [r5, #0]
 800b4ea:	f10b 0301 	add.w	r3, fp, #1
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f43f ace2 	beq.w	800aebc <_dtoa_r+0xa4>
 800b4f8:	601d      	str	r5, [r3, #0]
 800b4fa:	e4df      	b.n	800aebc <_dtoa_r+0xa4>
 800b4fc:	465f      	mov	r7, fp
 800b4fe:	462b      	mov	r3, r5
 800b500:	461d      	mov	r5, r3
 800b502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b506:	2a39      	cmp	r2, #57	; 0x39
 800b508:	d106      	bne.n	800b518 <_dtoa_r+0x700>
 800b50a:	9a00      	ldr	r2, [sp, #0]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d1f7      	bne.n	800b500 <_dtoa_r+0x6e8>
 800b510:	9900      	ldr	r1, [sp, #0]
 800b512:	2230      	movs	r2, #48	; 0x30
 800b514:	3701      	adds	r7, #1
 800b516:	700a      	strb	r2, [r1, #0]
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	3201      	adds	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e790      	b.n	800b442 <_dtoa_r+0x62a>
 800b520:	4ba3      	ldr	r3, [pc, #652]	; (800b7b0 <_dtoa_r+0x998>)
 800b522:	2200      	movs	r2, #0
 800b524:	f7f5 f880 	bl	8000628 <__aeabi_dmul>
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	f7f5 fae2 	bl	8000af8 <__aeabi_dcmpeq>
 800b534:	2800      	cmp	r0, #0
 800b536:	d09e      	beq.n	800b476 <_dtoa_r+0x65e>
 800b538:	e7d0      	b.n	800b4dc <_dtoa_r+0x6c4>
 800b53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	f000 80ca 	beq.w	800b6d6 <_dtoa_r+0x8be>
 800b542:	9a07      	ldr	r2, [sp, #28]
 800b544:	2a01      	cmp	r2, #1
 800b546:	f300 80ad 	bgt.w	800b6a4 <_dtoa_r+0x88c>
 800b54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	f000 80a5 	beq.w	800b69c <_dtoa_r+0x884>
 800b552:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b556:	9e08      	ldr	r6, [sp, #32]
 800b558:	9d05      	ldr	r5, [sp, #20]
 800b55a:	9a05      	ldr	r2, [sp, #20]
 800b55c:	441a      	add	r2, r3
 800b55e:	9205      	str	r2, [sp, #20]
 800b560:	9a06      	ldr	r2, [sp, #24]
 800b562:	2101      	movs	r1, #1
 800b564:	441a      	add	r2, r3
 800b566:	4620      	mov	r0, r4
 800b568:	9206      	str	r2, [sp, #24]
 800b56a:	f000 fb91 	bl	800bc90 <__i2b>
 800b56e:	4607      	mov	r7, r0
 800b570:	b165      	cbz	r5, 800b58c <_dtoa_r+0x774>
 800b572:	9b06      	ldr	r3, [sp, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	dd09      	ble.n	800b58c <_dtoa_r+0x774>
 800b578:	42ab      	cmp	r3, r5
 800b57a:	9a05      	ldr	r2, [sp, #20]
 800b57c:	bfa8      	it	ge
 800b57e:	462b      	movge	r3, r5
 800b580:	1ad2      	subs	r2, r2, r3
 800b582:	9205      	str	r2, [sp, #20]
 800b584:	9a06      	ldr	r2, [sp, #24]
 800b586:	1aed      	subs	r5, r5, r3
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	9306      	str	r3, [sp, #24]
 800b58c:	9b08      	ldr	r3, [sp, #32]
 800b58e:	b1f3      	cbz	r3, 800b5ce <_dtoa_r+0x7b6>
 800b590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 80a3 	beq.w	800b6de <_dtoa_r+0x8c6>
 800b598:	2e00      	cmp	r6, #0
 800b59a:	dd10      	ble.n	800b5be <_dtoa_r+0x7a6>
 800b59c:	4639      	mov	r1, r7
 800b59e:	4632      	mov	r2, r6
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fc35 	bl	800be10 <__pow5mult>
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	4607      	mov	r7, r0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 fb85 	bl	800bcbc <__multiply>
 800b5b2:	4651      	mov	r1, sl
 800b5b4:	4680      	mov	r8, r0
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f000 fab4 	bl	800bb24 <_Bfree>
 800b5bc:	46c2      	mov	sl, r8
 800b5be:	9b08      	ldr	r3, [sp, #32]
 800b5c0:	1b9a      	subs	r2, r3, r6
 800b5c2:	d004      	beq.n	800b5ce <_dtoa_r+0x7b6>
 800b5c4:	4651      	mov	r1, sl
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fc22 	bl	800be10 <__pow5mult>
 800b5cc:	4682      	mov	sl, r0
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 fb5d 	bl	800bc90 <__i2b>
 800b5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	4606      	mov	r6, r0
 800b5dc:	f340 8081 	ble.w	800b6e2 <_dtoa_r+0x8ca>
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4601      	mov	r1, r0
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 fc13 	bl	800be10 <__pow5mult>
 800b5ea:	9b07      	ldr	r3, [sp, #28]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	dd7a      	ble.n	800b6e8 <_dtoa_r+0x8d0>
 800b5f2:	f04f 0800 	mov.w	r8, #0
 800b5f6:	6933      	ldr	r3, [r6, #16]
 800b5f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5fc:	6918      	ldr	r0, [r3, #16]
 800b5fe:	f000 faf9 	bl	800bbf4 <__hi0bits>
 800b602:	f1c0 0020 	rsb	r0, r0, #32
 800b606:	9b06      	ldr	r3, [sp, #24]
 800b608:	4418      	add	r0, r3
 800b60a:	f010 001f 	ands.w	r0, r0, #31
 800b60e:	f000 8094 	beq.w	800b73a <_dtoa_r+0x922>
 800b612:	f1c0 0320 	rsb	r3, r0, #32
 800b616:	2b04      	cmp	r3, #4
 800b618:	f340 8085 	ble.w	800b726 <_dtoa_r+0x90e>
 800b61c:	9b05      	ldr	r3, [sp, #20]
 800b61e:	f1c0 001c 	rsb	r0, r0, #28
 800b622:	4403      	add	r3, r0
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	9b06      	ldr	r3, [sp, #24]
 800b628:	4403      	add	r3, r0
 800b62a:	4405      	add	r5, r0
 800b62c:	9306      	str	r3, [sp, #24]
 800b62e:	9b05      	ldr	r3, [sp, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	dd05      	ble.n	800b640 <_dtoa_r+0x828>
 800b634:	4651      	mov	r1, sl
 800b636:	461a      	mov	r2, r3
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fc43 	bl	800bec4 <__lshift>
 800b63e:	4682      	mov	sl, r0
 800b640:	9b06      	ldr	r3, [sp, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	dd05      	ble.n	800b652 <_dtoa_r+0x83a>
 800b646:	4631      	mov	r1, r6
 800b648:	461a      	mov	r2, r3
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fc3a 	bl	800bec4 <__lshift>
 800b650:	4606      	mov	r6, r0
 800b652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b654:	2b00      	cmp	r3, #0
 800b656:	d072      	beq.n	800b73e <_dtoa_r+0x926>
 800b658:	4631      	mov	r1, r6
 800b65a:	4650      	mov	r0, sl
 800b65c:	f000 fc9e 	bl	800bf9c <__mcmp>
 800b660:	2800      	cmp	r0, #0
 800b662:	da6c      	bge.n	800b73e <_dtoa_r+0x926>
 800b664:	2300      	movs	r3, #0
 800b666:	4651      	mov	r1, sl
 800b668:	220a      	movs	r2, #10
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 fa7c 	bl	800bb68 <__multadd>
 800b670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b672:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b676:	4682      	mov	sl, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 81b0 	beq.w	800b9de <_dtoa_r+0xbc6>
 800b67e:	2300      	movs	r3, #0
 800b680:	4639      	mov	r1, r7
 800b682:	220a      	movs	r2, #10
 800b684:	4620      	mov	r0, r4
 800b686:	f000 fa6f 	bl	800bb68 <__multadd>
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	4607      	mov	r7, r0
 800b690:	f300 8096 	bgt.w	800b7c0 <_dtoa_r+0x9a8>
 800b694:	9b07      	ldr	r3, [sp, #28]
 800b696:	2b02      	cmp	r3, #2
 800b698:	dc59      	bgt.n	800b74e <_dtoa_r+0x936>
 800b69a:	e091      	b.n	800b7c0 <_dtoa_r+0x9a8>
 800b69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b69e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6a2:	e758      	b.n	800b556 <_dtoa_r+0x73e>
 800b6a4:	9b04      	ldr	r3, [sp, #16]
 800b6a6:	1e5e      	subs	r6, r3, #1
 800b6a8:	9b08      	ldr	r3, [sp, #32]
 800b6aa:	42b3      	cmp	r3, r6
 800b6ac:	bfbf      	itttt	lt
 800b6ae:	9b08      	ldrlt	r3, [sp, #32]
 800b6b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b6b2:	9608      	strlt	r6, [sp, #32]
 800b6b4:	1af3      	sublt	r3, r6, r3
 800b6b6:	bfb4      	ite	lt
 800b6b8:	18d2      	addlt	r2, r2, r3
 800b6ba:	1b9e      	subge	r6, r3, r6
 800b6bc:	9b04      	ldr	r3, [sp, #16]
 800b6be:	bfbc      	itt	lt
 800b6c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b6c2:	2600      	movlt	r6, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfb7      	itett	lt
 800b6c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b6cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b6d0:	1a9d      	sublt	r5, r3, r2
 800b6d2:	2300      	movlt	r3, #0
 800b6d4:	e741      	b.n	800b55a <_dtoa_r+0x742>
 800b6d6:	9e08      	ldr	r6, [sp, #32]
 800b6d8:	9d05      	ldr	r5, [sp, #20]
 800b6da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b6dc:	e748      	b.n	800b570 <_dtoa_r+0x758>
 800b6de:	9a08      	ldr	r2, [sp, #32]
 800b6e0:	e770      	b.n	800b5c4 <_dtoa_r+0x7ac>
 800b6e2:	9b07      	ldr	r3, [sp, #28]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	dc19      	bgt.n	800b71c <_dtoa_r+0x904>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	b9bb      	cbnz	r3, 800b71c <_dtoa_r+0x904>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f2:	b99b      	cbnz	r3, 800b71c <_dtoa_r+0x904>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6fa:	0d1b      	lsrs	r3, r3, #20
 800b6fc:	051b      	lsls	r3, r3, #20
 800b6fe:	b183      	cbz	r3, 800b722 <_dtoa_r+0x90a>
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	3301      	adds	r3, #1
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	9b06      	ldr	r3, [sp, #24]
 800b708:	3301      	adds	r3, #1
 800b70a:	9306      	str	r3, [sp, #24]
 800b70c:	f04f 0801 	mov.w	r8, #1
 800b710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b712:	2b00      	cmp	r3, #0
 800b714:	f47f af6f 	bne.w	800b5f6 <_dtoa_r+0x7de>
 800b718:	2001      	movs	r0, #1
 800b71a:	e774      	b.n	800b606 <_dtoa_r+0x7ee>
 800b71c:	f04f 0800 	mov.w	r8, #0
 800b720:	e7f6      	b.n	800b710 <_dtoa_r+0x8f8>
 800b722:	4698      	mov	r8, r3
 800b724:	e7f4      	b.n	800b710 <_dtoa_r+0x8f8>
 800b726:	d082      	beq.n	800b62e <_dtoa_r+0x816>
 800b728:	9a05      	ldr	r2, [sp, #20]
 800b72a:	331c      	adds	r3, #28
 800b72c:	441a      	add	r2, r3
 800b72e:	9205      	str	r2, [sp, #20]
 800b730:	9a06      	ldr	r2, [sp, #24]
 800b732:	441a      	add	r2, r3
 800b734:	441d      	add	r5, r3
 800b736:	9206      	str	r2, [sp, #24]
 800b738:	e779      	b.n	800b62e <_dtoa_r+0x816>
 800b73a:	4603      	mov	r3, r0
 800b73c:	e7f4      	b.n	800b728 <_dtoa_r+0x910>
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	dc37      	bgt.n	800b7b4 <_dtoa_r+0x99c>
 800b744:	9b07      	ldr	r3, [sp, #28]
 800b746:	2b02      	cmp	r3, #2
 800b748:	dd34      	ble.n	800b7b4 <_dtoa_r+0x99c>
 800b74a:	9b04      	ldr	r3, [sp, #16]
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	b963      	cbnz	r3, 800b76c <_dtoa_r+0x954>
 800b752:	4631      	mov	r1, r6
 800b754:	2205      	movs	r2, #5
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fa06 	bl	800bb68 <__multadd>
 800b75c:	4601      	mov	r1, r0
 800b75e:	4606      	mov	r6, r0
 800b760:	4650      	mov	r0, sl
 800b762:	f000 fc1b 	bl	800bf9c <__mcmp>
 800b766:	2800      	cmp	r0, #0
 800b768:	f73f adbb 	bgt.w	800b2e2 <_dtoa_r+0x4ca>
 800b76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76e:	9d00      	ldr	r5, [sp, #0]
 800b770:	ea6f 0b03 	mvn.w	fp, r3
 800b774:	f04f 0800 	mov.w	r8, #0
 800b778:	4631      	mov	r1, r6
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f9d2 	bl	800bb24 <_Bfree>
 800b780:	2f00      	cmp	r7, #0
 800b782:	f43f aeab 	beq.w	800b4dc <_dtoa_r+0x6c4>
 800b786:	f1b8 0f00 	cmp.w	r8, #0
 800b78a:	d005      	beq.n	800b798 <_dtoa_r+0x980>
 800b78c:	45b8      	cmp	r8, r7
 800b78e:	d003      	beq.n	800b798 <_dtoa_r+0x980>
 800b790:	4641      	mov	r1, r8
 800b792:	4620      	mov	r0, r4
 800b794:	f000 f9c6 	bl	800bb24 <_Bfree>
 800b798:	4639      	mov	r1, r7
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f9c2 	bl	800bb24 <_Bfree>
 800b7a0:	e69c      	b.n	800b4dc <_dtoa_r+0x6c4>
 800b7a2:	2600      	movs	r6, #0
 800b7a4:	4637      	mov	r7, r6
 800b7a6:	e7e1      	b.n	800b76c <_dtoa_r+0x954>
 800b7a8:	46bb      	mov	fp, r7
 800b7aa:	4637      	mov	r7, r6
 800b7ac:	e599      	b.n	800b2e2 <_dtoa_r+0x4ca>
 800b7ae:	bf00      	nop
 800b7b0:	40240000 	.word	0x40240000
 800b7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 80c8 	beq.w	800b94c <_dtoa_r+0xb34>
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	dd05      	ble.n	800b7d0 <_dtoa_r+0x9b8>
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fb7b 	bl	800bec4 <__lshift>
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	f1b8 0f00 	cmp.w	r8, #0
 800b7d4:	d05b      	beq.n	800b88e <_dtoa_r+0xa76>
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 f963 	bl	800baa4 <_Balloc>
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b928      	cbnz	r0, 800b7ee <_dtoa_r+0x9d6>
 800b7e2:	4b83      	ldr	r3, [pc, #524]	; (800b9f0 <_dtoa_r+0xbd8>)
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b7ea:	f7ff bb2e 	b.w	800ae4a <_dtoa_r+0x32>
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	3202      	adds	r2, #2
 800b7f2:	0092      	lsls	r2, r2, #2
 800b7f4:	f107 010c 	add.w	r1, r7, #12
 800b7f8:	300c      	adds	r0, #12
 800b7fa:	f7ff fa74 	bl	800ace6 <memcpy>
 800b7fe:	2201      	movs	r2, #1
 800b800:	4629      	mov	r1, r5
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fb5e 	bl	800bec4 <__lshift>
 800b808:	9b00      	ldr	r3, [sp, #0]
 800b80a:	3301      	adds	r3, #1
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b812:	4413      	add	r3, r2
 800b814:	9308      	str	r3, [sp, #32]
 800b816:	9b02      	ldr	r3, [sp, #8]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	46b8      	mov	r8, r7
 800b81e:	9306      	str	r3, [sp, #24]
 800b820:	4607      	mov	r7, r0
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	4631      	mov	r1, r6
 800b826:	3b01      	subs	r3, #1
 800b828:	4650      	mov	r0, sl
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	f7ff fa69 	bl	800ad02 <quorem>
 800b830:	4641      	mov	r1, r8
 800b832:	9002      	str	r0, [sp, #8]
 800b834:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b838:	4650      	mov	r0, sl
 800b83a:	f000 fbaf 	bl	800bf9c <__mcmp>
 800b83e:	463a      	mov	r2, r7
 800b840:	9005      	str	r0, [sp, #20]
 800b842:	4631      	mov	r1, r6
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fbc5 	bl	800bfd4 <__mdiff>
 800b84a:	68c2      	ldr	r2, [r0, #12]
 800b84c:	4605      	mov	r5, r0
 800b84e:	bb02      	cbnz	r2, 800b892 <_dtoa_r+0xa7a>
 800b850:	4601      	mov	r1, r0
 800b852:	4650      	mov	r0, sl
 800b854:	f000 fba2 	bl	800bf9c <__mcmp>
 800b858:	4602      	mov	r2, r0
 800b85a:	4629      	mov	r1, r5
 800b85c:	4620      	mov	r0, r4
 800b85e:	9209      	str	r2, [sp, #36]	; 0x24
 800b860:	f000 f960 	bl	800bb24 <_Bfree>
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b868:	9d04      	ldr	r5, [sp, #16]
 800b86a:	ea43 0102 	orr.w	r1, r3, r2
 800b86e:	9b06      	ldr	r3, [sp, #24]
 800b870:	4319      	orrs	r1, r3
 800b872:	d110      	bne.n	800b896 <_dtoa_r+0xa7e>
 800b874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b878:	d029      	beq.n	800b8ce <_dtoa_r+0xab6>
 800b87a:	9b05      	ldr	r3, [sp, #20]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dd02      	ble.n	800b886 <_dtoa_r+0xa6e>
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	f883 9000 	strb.w	r9, [r3]
 800b88c:	e774      	b.n	800b778 <_dtoa_r+0x960>
 800b88e:	4638      	mov	r0, r7
 800b890:	e7ba      	b.n	800b808 <_dtoa_r+0x9f0>
 800b892:	2201      	movs	r2, #1
 800b894:	e7e1      	b.n	800b85a <_dtoa_r+0xa42>
 800b896:	9b05      	ldr	r3, [sp, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db04      	blt.n	800b8a6 <_dtoa_r+0xa8e>
 800b89c:	9907      	ldr	r1, [sp, #28]
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	9906      	ldr	r1, [sp, #24]
 800b8a2:	430b      	orrs	r3, r1
 800b8a4:	d120      	bne.n	800b8e8 <_dtoa_r+0xad0>
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	dded      	ble.n	800b886 <_dtoa_r+0xa6e>
 800b8aa:	4651      	mov	r1, sl
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fb08 	bl	800bec4 <__lshift>
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4682      	mov	sl, r0
 800b8b8:	f000 fb70 	bl	800bf9c <__mcmp>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	dc03      	bgt.n	800b8c8 <_dtoa_r+0xab0>
 800b8c0:	d1e1      	bne.n	800b886 <_dtoa_r+0xa6e>
 800b8c2:	f019 0f01 	tst.w	r9, #1
 800b8c6:	d0de      	beq.n	800b886 <_dtoa_r+0xa6e>
 800b8c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8cc:	d1d8      	bne.n	800b880 <_dtoa_r+0xa68>
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	2339      	movs	r3, #57	; 0x39
 800b8d2:	7013      	strb	r3, [r2, #0]
 800b8d4:	462b      	mov	r3, r5
 800b8d6:	461d      	mov	r5, r3
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8de:	2a39      	cmp	r2, #57	; 0x39
 800b8e0:	d06c      	beq.n	800b9bc <_dtoa_r+0xba4>
 800b8e2:	3201      	adds	r2, #1
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	e747      	b.n	800b778 <_dtoa_r+0x960>
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	dd07      	ble.n	800b8fc <_dtoa_r+0xae4>
 800b8ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8f0:	d0ed      	beq.n	800b8ce <_dtoa_r+0xab6>
 800b8f2:	9a01      	ldr	r2, [sp, #4]
 800b8f4:	f109 0301 	add.w	r3, r9, #1
 800b8f8:	7013      	strb	r3, [r2, #0]
 800b8fa:	e73d      	b.n	800b778 <_dtoa_r+0x960>
 800b8fc:	9b04      	ldr	r3, [sp, #16]
 800b8fe:	9a08      	ldr	r2, [sp, #32]
 800b900:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b904:	4293      	cmp	r3, r2
 800b906:	d043      	beq.n	800b990 <_dtoa_r+0xb78>
 800b908:	4651      	mov	r1, sl
 800b90a:	2300      	movs	r3, #0
 800b90c:	220a      	movs	r2, #10
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f92a 	bl	800bb68 <__multadd>
 800b914:	45b8      	cmp	r8, r7
 800b916:	4682      	mov	sl, r0
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	f04f 020a 	mov.w	r2, #10
 800b920:	4641      	mov	r1, r8
 800b922:	4620      	mov	r0, r4
 800b924:	d107      	bne.n	800b936 <_dtoa_r+0xb1e>
 800b926:	f000 f91f 	bl	800bb68 <__multadd>
 800b92a:	4680      	mov	r8, r0
 800b92c:	4607      	mov	r7, r0
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	e775      	b.n	800b822 <_dtoa_r+0xa0a>
 800b936:	f000 f917 	bl	800bb68 <__multadd>
 800b93a:	4639      	mov	r1, r7
 800b93c:	4680      	mov	r8, r0
 800b93e:	2300      	movs	r3, #0
 800b940:	220a      	movs	r2, #10
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f910 	bl	800bb68 <__multadd>
 800b948:	4607      	mov	r7, r0
 800b94a:	e7f0      	b.n	800b92e <_dtoa_r+0xb16>
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	9d00      	ldr	r5, [sp, #0]
 800b952:	4631      	mov	r1, r6
 800b954:	4650      	mov	r0, sl
 800b956:	f7ff f9d4 	bl	800ad02 <quorem>
 800b95a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b95e:	9b00      	ldr	r3, [sp, #0]
 800b960:	f805 9b01 	strb.w	r9, [r5], #1
 800b964:	1aea      	subs	r2, r5, r3
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	4293      	cmp	r3, r2
 800b96a:	dd07      	ble.n	800b97c <_dtoa_r+0xb64>
 800b96c:	4651      	mov	r1, sl
 800b96e:	2300      	movs	r3, #0
 800b970:	220a      	movs	r2, #10
 800b972:	4620      	mov	r0, r4
 800b974:	f000 f8f8 	bl	800bb68 <__multadd>
 800b978:	4682      	mov	sl, r0
 800b97a:	e7ea      	b.n	800b952 <_dtoa_r+0xb3a>
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfc8      	it	gt
 800b982:	461d      	movgt	r5, r3
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	bfd8      	it	le
 800b988:	2501      	movle	r5, #1
 800b98a:	441d      	add	r5, r3
 800b98c:	f04f 0800 	mov.w	r8, #0
 800b990:	4651      	mov	r1, sl
 800b992:	2201      	movs	r2, #1
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fa95 	bl	800bec4 <__lshift>
 800b99a:	4631      	mov	r1, r6
 800b99c:	4682      	mov	sl, r0
 800b99e:	f000 fafd 	bl	800bf9c <__mcmp>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	dc96      	bgt.n	800b8d4 <_dtoa_r+0xabc>
 800b9a6:	d102      	bne.n	800b9ae <_dtoa_r+0xb96>
 800b9a8:	f019 0f01 	tst.w	r9, #1
 800b9ac:	d192      	bne.n	800b8d4 <_dtoa_r+0xabc>
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	461d      	mov	r5, r3
 800b9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b6:	2a30      	cmp	r2, #48	; 0x30
 800b9b8:	d0fa      	beq.n	800b9b0 <_dtoa_r+0xb98>
 800b9ba:	e6dd      	b.n	800b778 <_dtoa_r+0x960>
 800b9bc:	9a00      	ldr	r2, [sp, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d189      	bne.n	800b8d6 <_dtoa_r+0xabe>
 800b9c2:	f10b 0b01 	add.w	fp, fp, #1
 800b9c6:	2331      	movs	r3, #49	; 0x31
 800b9c8:	e796      	b.n	800b8f8 <_dtoa_r+0xae0>
 800b9ca:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <_dtoa_r+0xbdc>)
 800b9cc:	f7ff ba99 	b.w	800af02 <_dtoa_r+0xea>
 800b9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f47f aa6d 	bne.w	800aeb2 <_dtoa_r+0x9a>
 800b9d8:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <_dtoa_r+0xbe0>)
 800b9da:	f7ff ba92 	b.w	800af02 <_dtoa_r+0xea>
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dcb5      	bgt.n	800b950 <_dtoa_r+0xb38>
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	f73f aeb1 	bgt.w	800b74e <_dtoa_r+0x936>
 800b9ec:	e7b0      	b.n	800b950 <_dtoa_r+0xb38>
 800b9ee:	bf00      	nop
 800b9f0:	0800d01c 	.word	0x0800d01c
 800b9f4:	0800cf7c 	.word	0x0800cf7c
 800b9f8:	0800cfa0 	.word	0x0800cfa0

0800b9fc <_free_r>:
 800b9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	d044      	beq.n	800ba8c <_free_r+0x90>
 800ba02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba06:	9001      	str	r0, [sp, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba0e:	bfb8      	it	lt
 800ba10:	18e4      	addlt	r4, r4, r3
 800ba12:	f7fe fb41 	bl	800a098 <__malloc_lock>
 800ba16:	4a1e      	ldr	r2, [pc, #120]	; (800ba90 <_free_r+0x94>)
 800ba18:	9801      	ldr	r0, [sp, #4]
 800ba1a:	6813      	ldr	r3, [r2, #0]
 800ba1c:	b933      	cbnz	r3, 800ba2c <_free_r+0x30>
 800ba1e:	6063      	str	r3, [r4, #4]
 800ba20:	6014      	str	r4, [r2, #0]
 800ba22:	b003      	add	sp, #12
 800ba24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba28:	f7fe bb3c 	b.w	800a0a4 <__malloc_unlock>
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	d908      	bls.n	800ba42 <_free_r+0x46>
 800ba30:	6825      	ldr	r5, [r4, #0]
 800ba32:	1961      	adds	r1, r4, r5
 800ba34:	428b      	cmp	r3, r1
 800ba36:	bf01      	itttt	eq
 800ba38:	6819      	ldreq	r1, [r3, #0]
 800ba3a:	685b      	ldreq	r3, [r3, #4]
 800ba3c:	1949      	addeq	r1, r1, r5
 800ba3e:	6021      	streq	r1, [r4, #0]
 800ba40:	e7ed      	b.n	800ba1e <_free_r+0x22>
 800ba42:	461a      	mov	r2, r3
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	b10b      	cbz	r3, 800ba4c <_free_r+0x50>
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	d9fa      	bls.n	800ba42 <_free_r+0x46>
 800ba4c:	6811      	ldr	r1, [r2, #0]
 800ba4e:	1855      	adds	r5, r2, r1
 800ba50:	42a5      	cmp	r5, r4
 800ba52:	d10b      	bne.n	800ba6c <_free_r+0x70>
 800ba54:	6824      	ldr	r4, [r4, #0]
 800ba56:	4421      	add	r1, r4
 800ba58:	1854      	adds	r4, r2, r1
 800ba5a:	42a3      	cmp	r3, r4
 800ba5c:	6011      	str	r1, [r2, #0]
 800ba5e:	d1e0      	bne.n	800ba22 <_free_r+0x26>
 800ba60:	681c      	ldr	r4, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	6053      	str	r3, [r2, #4]
 800ba66:	440c      	add	r4, r1
 800ba68:	6014      	str	r4, [r2, #0]
 800ba6a:	e7da      	b.n	800ba22 <_free_r+0x26>
 800ba6c:	d902      	bls.n	800ba74 <_free_r+0x78>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	6003      	str	r3, [r0, #0]
 800ba72:	e7d6      	b.n	800ba22 <_free_r+0x26>
 800ba74:	6825      	ldr	r5, [r4, #0]
 800ba76:	1961      	adds	r1, r4, r5
 800ba78:	428b      	cmp	r3, r1
 800ba7a:	bf04      	itt	eq
 800ba7c:	6819      	ldreq	r1, [r3, #0]
 800ba7e:	685b      	ldreq	r3, [r3, #4]
 800ba80:	6063      	str	r3, [r4, #4]
 800ba82:	bf04      	itt	eq
 800ba84:	1949      	addeq	r1, r1, r5
 800ba86:	6021      	streq	r1, [r4, #0]
 800ba88:	6054      	str	r4, [r2, #4]
 800ba8a:	e7ca      	b.n	800ba22 <_free_r+0x26>
 800ba8c:	b003      	add	sp, #12
 800ba8e:	bd30      	pop	{r4, r5, pc}
 800ba90:	20002490 	.word	0x20002490

0800ba94 <malloc>:
 800ba94:	4b02      	ldr	r3, [pc, #8]	; (800baa0 <malloc+0xc>)
 800ba96:	4601      	mov	r1, r0
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	f7fe ba7d 	b.w	8009f98 <_malloc_r>
 800ba9e:	bf00      	nop
 800baa0:	20000118 	.word	0x20000118

0800baa4 <_Balloc>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	69c6      	ldr	r6, [r0, #28]
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	b976      	cbnz	r6, 800bacc <_Balloc+0x28>
 800baae:	2010      	movs	r0, #16
 800bab0:	f7ff fff0 	bl	800ba94 <malloc>
 800bab4:	4602      	mov	r2, r0
 800bab6:	61e0      	str	r0, [r4, #28]
 800bab8:	b920      	cbnz	r0, 800bac4 <_Balloc+0x20>
 800baba:	4b18      	ldr	r3, [pc, #96]	; (800bb1c <_Balloc+0x78>)
 800babc:	4818      	ldr	r0, [pc, #96]	; (800bb20 <_Balloc+0x7c>)
 800babe:	216b      	movs	r1, #107	; 0x6b
 800bac0:	f000 fd8c 	bl	800c5dc <__assert_func>
 800bac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac8:	6006      	str	r6, [r0, #0]
 800baca:	60c6      	str	r6, [r0, #12]
 800bacc:	69e6      	ldr	r6, [r4, #28]
 800bace:	68f3      	ldr	r3, [r6, #12]
 800bad0:	b183      	cbz	r3, 800baf4 <_Balloc+0x50>
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bada:	b9b8      	cbnz	r0, 800bb0c <_Balloc+0x68>
 800badc:	2101      	movs	r1, #1
 800bade:	fa01 f605 	lsl.w	r6, r1, r5
 800bae2:	1d72      	adds	r2, r6, #5
 800bae4:	0092      	lsls	r2, r2, #2
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7fe fa20 	bl	8009f2c <_calloc_r>
 800baec:	b160      	cbz	r0, 800bb08 <_Balloc+0x64>
 800baee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baf2:	e00e      	b.n	800bb12 <_Balloc+0x6e>
 800baf4:	2221      	movs	r2, #33	; 0x21
 800baf6:	2104      	movs	r1, #4
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7fe fa17 	bl	8009f2c <_calloc_r>
 800bafe:	69e3      	ldr	r3, [r4, #28]
 800bb00:	60f0      	str	r0, [r6, #12]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e4      	bne.n	800bad2 <_Balloc+0x2e>
 800bb08:	2000      	movs	r0, #0
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	6802      	ldr	r2, [r0, #0]
 800bb0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb12:	2300      	movs	r3, #0
 800bb14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb18:	e7f7      	b.n	800bb0a <_Balloc+0x66>
 800bb1a:	bf00      	nop
 800bb1c:	0800cfad 	.word	0x0800cfad
 800bb20:	0800d02d 	.word	0x0800d02d

0800bb24 <_Bfree>:
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	69c6      	ldr	r6, [r0, #28]
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	b976      	cbnz	r6, 800bb4c <_Bfree+0x28>
 800bb2e:	2010      	movs	r0, #16
 800bb30:	f7ff ffb0 	bl	800ba94 <malloc>
 800bb34:	4602      	mov	r2, r0
 800bb36:	61e8      	str	r0, [r5, #28]
 800bb38:	b920      	cbnz	r0, 800bb44 <_Bfree+0x20>
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <_Bfree+0x3c>)
 800bb3c:	4809      	ldr	r0, [pc, #36]	; (800bb64 <_Bfree+0x40>)
 800bb3e:	218f      	movs	r1, #143	; 0x8f
 800bb40:	f000 fd4c 	bl	800c5dc <__assert_func>
 800bb44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb48:	6006      	str	r6, [r0, #0]
 800bb4a:	60c6      	str	r6, [r0, #12]
 800bb4c:	b13c      	cbz	r4, 800bb5e <_Bfree+0x3a>
 800bb4e:	69eb      	ldr	r3, [r5, #28]
 800bb50:	6862      	ldr	r2, [r4, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb58:	6021      	str	r1, [r4, #0]
 800bb5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	0800cfad 	.word	0x0800cfad
 800bb64:	0800d02d 	.word	0x0800d02d

0800bb68 <__multadd>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	690d      	ldr	r5, [r1, #16]
 800bb6e:	4607      	mov	r7, r0
 800bb70:	460c      	mov	r4, r1
 800bb72:	461e      	mov	r6, r3
 800bb74:	f101 0c14 	add.w	ip, r1, #20
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb7e:	b299      	uxth	r1, r3
 800bb80:	fb02 6101 	mla	r1, r2, r1, r6
 800bb84:	0c1e      	lsrs	r6, r3, #16
 800bb86:	0c0b      	lsrs	r3, r1, #16
 800bb88:	fb02 3306 	mla	r3, r2, r6, r3
 800bb8c:	b289      	uxth	r1, r1
 800bb8e:	3001      	adds	r0, #1
 800bb90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb94:	4285      	cmp	r5, r0
 800bb96:	f84c 1b04 	str.w	r1, [ip], #4
 800bb9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb9e:	dcec      	bgt.n	800bb7a <__multadd+0x12>
 800bba0:	b30e      	cbz	r6, 800bbe6 <__multadd+0x7e>
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	42ab      	cmp	r3, r5
 800bba6:	dc19      	bgt.n	800bbdc <__multadd+0x74>
 800bba8:	6861      	ldr	r1, [r4, #4]
 800bbaa:	4638      	mov	r0, r7
 800bbac:	3101      	adds	r1, #1
 800bbae:	f7ff ff79 	bl	800baa4 <_Balloc>
 800bbb2:	4680      	mov	r8, r0
 800bbb4:	b928      	cbnz	r0, 800bbc2 <__multadd+0x5a>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	4b0c      	ldr	r3, [pc, #48]	; (800bbec <__multadd+0x84>)
 800bbba:	480d      	ldr	r0, [pc, #52]	; (800bbf0 <__multadd+0x88>)
 800bbbc:	21ba      	movs	r1, #186	; 0xba
 800bbbe:	f000 fd0d 	bl	800c5dc <__assert_func>
 800bbc2:	6922      	ldr	r2, [r4, #16]
 800bbc4:	3202      	adds	r2, #2
 800bbc6:	f104 010c 	add.w	r1, r4, #12
 800bbca:	0092      	lsls	r2, r2, #2
 800bbcc:	300c      	adds	r0, #12
 800bbce:	f7ff f88a 	bl	800ace6 <memcpy>
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ffa5 	bl	800bb24 <_Bfree>
 800bbda:	4644      	mov	r4, r8
 800bbdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	615e      	str	r6, [r3, #20]
 800bbe4:	6125      	str	r5, [r4, #16]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbec:	0800d01c 	.word	0x0800d01c
 800bbf0:	0800d02d 	.word	0x0800d02d

0800bbf4 <__hi0bits>:
 800bbf4:	0c03      	lsrs	r3, r0, #16
 800bbf6:	041b      	lsls	r3, r3, #16
 800bbf8:	b9d3      	cbnz	r3, 800bc30 <__hi0bits+0x3c>
 800bbfa:	0400      	lsls	r0, r0, #16
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc02:	bf04      	itt	eq
 800bc04:	0200      	lsleq	r0, r0, #8
 800bc06:	3308      	addeq	r3, #8
 800bc08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc0c:	bf04      	itt	eq
 800bc0e:	0100      	lsleq	r0, r0, #4
 800bc10:	3304      	addeq	r3, #4
 800bc12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc16:	bf04      	itt	eq
 800bc18:	0080      	lsleq	r0, r0, #2
 800bc1a:	3302      	addeq	r3, #2
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	db05      	blt.n	800bc2c <__hi0bits+0x38>
 800bc20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc24:	f103 0301 	add.w	r3, r3, #1
 800bc28:	bf08      	it	eq
 800bc2a:	2320      	moveq	r3, #32
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	4770      	bx	lr
 800bc30:	2300      	movs	r3, #0
 800bc32:	e7e4      	b.n	800bbfe <__hi0bits+0xa>

0800bc34 <__lo0bits>:
 800bc34:	6803      	ldr	r3, [r0, #0]
 800bc36:	f013 0207 	ands.w	r2, r3, #7
 800bc3a:	d00c      	beq.n	800bc56 <__lo0bits+0x22>
 800bc3c:	07d9      	lsls	r1, r3, #31
 800bc3e:	d422      	bmi.n	800bc86 <__lo0bits+0x52>
 800bc40:	079a      	lsls	r2, r3, #30
 800bc42:	bf49      	itett	mi
 800bc44:	085b      	lsrmi	r3, r3, #1
 800bc46:	089b      	lsrpl	r3, r3, #2
 800bc48:	6003      	strmi	r3, [r0, #0]
 800bc4a:	2201      	movmi	r2, #1
 800bc4c:	bf5c      	itt	pl
 800bc4e:	6003      	strpl	r3, [r0, #0]
 800bc50:	2202      	movpl	r2, #2
 800bc52:	4610      	mov	r0, r2
 800bc54:	4770      	bx	lr
 800bc56:	b299      	uxth	r1, r3
 800bc58:	b909      	cbnz	r1, 800bc5e <__lo0bits+0x2a>
 800bc5a:	0c1b      	lsrs	r3, r3, #16
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	b2d9      	uxtb	r1, r3
 800bc60:	b909      	cbnz	r1, 800bc66 <__lo0bits+0x32>
 800bc62:	3208      	adds	r2, #8
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	0719      	lsls	r1, r3, #28
 800bc68:	bf04      	itt	eq
 800bc6a:	091b      	lsreq	r3, r3, #4
 800bc6c:	3204      	addeq	r2, #4
 800bc6e:	0799      	lsls	r1, r3, #30
 800bc70:	bf04      	itt	eq
 800bc72:	089b      	lsreq	r3, r3, #2
 800bc74:	3202      	addeq	r2, #2
 800bc76:	07d9      	lsls	r1, r3, #31
 800bc78:	d403      	bmi.n	800bc82 <__lo0bits+0x4e>
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	f102 0201 	add.w	r2, r2, #1
 800bc80:	d003      	beq.n	800bc8a <__lo0bits+0x56>
 800bc82:	6003      	str	r3, [r0, #0]
 800bc84:	e7e5      	b.n	800bc52 <__lo0bits+0x1e>
 800bc86:	2200      	movs	r2, #0
 800bc88:	e7e3      	b.n	800bc52 <__lo0bits+0x1e>
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	e7e1      	b.n	800bc52 <__lo0bits+0x1e>
	...

0800bc90 <__i2b>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	2101      	movs	r1, #1
 800bc96:	f7ff ff05 	bl	800baa4 <_Balloc>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <__i2b+0x1a>
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <__i2b+0x24>)
 800bca0:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <__i2b+0x28>)
 800bca2:	f240 1145 	movw	r1, #325	; 0x145
 800bca6:	f000 fc99 	bl	800c5dc <__assert_func>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	6144      	str	r4, [r0, #20]
 800bcae:	6103      	str	r3, [r0, #16]
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800d01c 	.word	0x0800d01c
 800bcb8:	0800d02d 	.word	0x0800d02d

0800bcbc <__multiply>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4691      	mov	r9, r2
 800bcc2:	690a      	ldr	r2, [r1, #16]
 800bcc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bfb8      	it	lt
 800bccc:	460b      	movlt	r3, r1
 800bcce:	460c      	mov	r4, r1
 800bcd0:	bfbc      	itt	lt
 800bcd2:	464c      	movlt	r4, r9
 800bcd4:	4699      	movlt	r9, r3
 800bcd6:	6927      	ldr	r7, [r4, #16]
 800bcd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	6861      	ldr	r1, [r4, #4]
 800bce0:	eb07 060a 	add.w	r6, r7, sl
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	b085      	sub	sp, #20
 800bce8:	bfb8      	it	lt
 800bcea:	3101      	addlt	r1, #1
 800bcec:	f7ff feda 	bl	800baa4 <_Balloc>
 800bcf0:	b930      	cbnz	r0, 800bd00 <__multiply+0x44>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b44      	ldr	r3, [pc, #272]	; (800be08 <__multiply+0x14c>)
 800bcf6:	4845      	ldr	r0, [pc, #276]	; (800be0c <__multiply+0x150>)
 800bcf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bcfc:	f000 fc6e 	bl	800c5dc <__assert_func>
 800bd00:	f100 0514 	add.w	r5, r0, #20
 800bd04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd08:	462b      	mov	r3, r5
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4543      	cmp	r3, r8
 800bd0e:	d321      	bcc.n	800bd54 <__multiply+0x98>
 800bd10:	f104 0314 	add.w	r3, r4, #20
 800bd14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd18:	f109 0314 	add.w	r3, r9, #20
 800bd1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd20:	9202      	str	r2, [sp, #8]
 800bd22:	1b3a      	subs	r2, r7, r4
 800bd24:	3a15      	subs	r2, #21
 800bd26:	f022 0203 	bic.w	r2, r2, #3
 800bd2a:	3204      	adds	r2, #4
 800bd2c:	f104 0115 	add.w	r1, r4, #21
 800bd30:	428f      	cmp	r7, r1
 800bd32:	bf38      	it	cc
 800bd34:	2204      	movcc	r2, #4
 800bd36:	9201      	str	r2, [sp, #4]
 800bd38:	9a02      	ldr	r2, [sp, #8]
 800bd3a:	9303      	str	r3, [sp, #12]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d80c      	bhi.n	800bd5a <__multiply+0x9e>
 800bd40:	2e00      	cmp	r6, #0
 800bd42:	dd03      	ble.n	800bd4c <__multiply+0x90>
 800bd44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d05b      	beq.n	800be04 <__multiply+0x148>
 800bd4c:	6106      	str	r6, [r0, #16]
 800bd4e:	b005      	add	sp, #20
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	f843 2b04 	str.w	r2, [r3], #4
 800bd58:	e7d8      	b.n	800bd0c <__multiply+0x50>
 800bd5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd5e:	f1ba 0f00 	cmp.w	sl, #0
 800bd62:	d024      	beq.n	800bdae <__multiply+0xf2>
 800bd64:	f104 0e14 	add.w	lr, r4, #20
 800bd68:	46a9      	mov	r9, r5
 800bd6a:	f04f 0c00 	mov.w	ip, #0
 800bd6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd72:	f8d9 1000 	ldr.w	r1, [r9]
 800bd76:	fa1f fb82 	uxth.w	fp, r2
 800bd7a:	b289      	uxth	r1, r1
 800bd7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd84:	f8d9 2000 	ldr.w	r2, [r9]
 800bd88:	4461      	add	r1, ip
 800bd8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd96:	b289      	uxth	r1, r1
 800bd98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd9c:	4577      	cmp	r7, lr
 800bd9e:	f849 1b04 	str.w	r1, [r9], #4
 800bda2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bda6:	d8e2      	bhi.n	800bd6e <__multiply+0xb2>
 800bda8:	9a01      	ldr	r2, [sp, #4]
 800bdaa:	f845 c002 	str.w	ip, [r5, r2]
 800bdae:	9a03      	ldr	r2, [sp, #12]
 800bdb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	f1b9 0f00 	cmp.w	r9, #0
 800bdba:	d021      	beq.n	800be00 <__multiply+0x144>
 800bdbc:	6829      	ldr	r1, [r5, #0]
 800bdbe:	f104 0c14 	add.w	ip, r4, #20
 800bdc2:	46ae      	mov	lr, r5
 800bdc4:	f04f 0a00 	mov.w	sl, #0
 800bdc8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdd0:	fb09 220b 	mla	r2, r9, fp, r2
 800bdd4:	4452      	add	r2, sl
 800bdd6:	b289      	uxth	r1, r1
 800bdd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bddc:	f84e 1b04 	str.w	r1, [lr], #4
 800bde0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bde4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bde8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdec:	fb09 110a 	mla	r1, r9, sl, r1
 800bdf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bdf4:	4567      	cmp	r7, ip
 800bdf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdfa:	d8e5      	bhi.n	800bdc8 <__multiply+0x10c>
 800bdfc:	9a01      	ldr	r2, [sp, #4]
 800bdfe:	50a9      	str	r1, [r5, r2]
 800be00:	3504      	adds	r5, #4
 800be02:	e799      	b.n	800bd38 <__multiply+0x7c>
 800be04:	3e01      	subs	r6, #1
 800be06:	e79b      	b.n	800bd40 <__multiply+0x84>
 800be08:	0800d01c 	.word	0x0800d01c
 800be0c:	0800d02d 	.word	0x0800d02d

0800be10 <__pow5mult>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	4615      	mov	r5, r2
 800be16:	f012 0203 	ands.w	r2, r2, #3
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	d007      	beq.n	800be30 <__pow5mult+0x20>
 800be20:	4c25      	ldr	r4, [pc, #148]	; (800beb8 <__pow5mult+0xa8>)
 800be22:	3a01      	subs	r2, #1
 800be24:	2300      	movs	r3, #0
 800be26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be2a:	f7ff fe9d 	bl	800bb68 <__multadd>
 800be2e:	4607      	mov	r7, r0
 800be30:	10ad      	asrs	r5, r5, #2
 800be32:	d03d      	beq.n	800beb0 <__pow5mult+0xa0>
 800be34:	69f4      	ldr	r4, [r6, #28]
 800be36:	b97c      	cbnz	r4, 800be58 <__pow5mult+0x48>
 800be38:	2010      	movs	r0, #16
 800be3a:	f7ff fe2b 	bl	800ba94 <malloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	61f0      	str	r0, [r6, #28]
 800be42:	b928      	cbnz	r0, 800be50 <__pow5mult+0x40>
 800be44:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <__pow5mult+0xac>)
 800be46:	481e      	ldr	r0, [pc, #120]	; (800bec0 <__pow5mult+0xb0>)
 800be48:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be4c:	f000 fbc6 	bl	800c5dc <__assert_func>
 800be50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be54:	6004      	str	r4, [r0, #0]
 800be56:	60c4      	str	r4, [r0, #12]
 800be58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be60:	b94c      	cbnz	r4, 800be76 <__pow5mult+0x66>
 800be62:	f240 2171 	movw	r1, #625	; 0x271
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff12 	bl	800bc90 <__i2b>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be72:	4604      	mov	r4, r0
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	07eb      	lsls	r3, r5, #31
 800be7c:	d50a      	bpl.n	800be94 <__pow5mult+0x84>
 800be7e:	4639      	mov	r1, r7
 800be80:	4622      	mov	r2, r4
 800be82:	4630      	mov	r0, r6
 800be84:	f7ff ff1a 	bl	800bcbc <__multiply>
 800be88:	4639      	mov	r1, r7
 800be8a:	4680      	mov	r8, r0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fe49 	bl	800bb24 <_Bfree>
 800be92:	4647      	mov	r7, r8
 800be94:	106d      	asrs	r5, r5, #1
 800be96:	d00b      	beq.n	800beb0 <__pow5mult+0xa0>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	b938      	cbnz	r0, 800beac <__pow5mult+0x9c>
 800be9c:	4622      	mov	r2, r4
 800be9e:	4621      	mov	r1, r4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff ff0b 	bl	800bcbc <__multiply>
 800bea6:	6020      	str	r0, [r4, #0]
 800bea8:	f8c0 9000 	str.w	r9, [r0]
 800beac:	4604      	mov	r4, r0
 800beae:	e7e4      	b.n	800be7a <__pow5mult+0x6a>
 800beb0:	4638      	mov	r0, r7
 800beb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb6:	bf00      	nop
 800beb8:	0800d178 	.word	0x0800d178
 800bebc:	0800cfad 	.word	0x0800cfad
 800bec0:	0800d02d 	.word	0x0800d02d

0800bec4 <__lshift>:
 800bec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	6849      	ldr	r1, [r1, #4]
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	4607      	mov	r7, r0
 800bed6:	4691      	mov	r9, r2
 800bed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bedc:	f108 0601 	add.w	r6, r8, #1
 800bee0:	42b3      	cmp	r3, r6
 800bee2:	db0b      	blt.n	800befc <__lshift+0x38>
 800bee4:	4638      	mov	r0, r7
 800bee6:	f7ff fddd 	bl	800baa4 <_Balloc>
 800beea:	4605      	mov	r5, r0
 800beec:	b948      	cbnz	r0, 800bf02 <__lshift+0x3e>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <__lshift+0xd0>)
 800bef2:	4829      	ldr	r0, [pc, #164]	; (800bf98 <__lshift+0xd4>)
 800bef4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bef8:	f000 fb70 	bl	800c5dc <__assert_func>
 800befc:	3101      	adds	r1, #1
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	e7ee      	b.n	800bee0 <__lshift+0x1c>
 800bf02:	2300      	movs	r3, #0
 800bf04:	f100 0114 	add.w	r1, r0, #20
 800bf08:	f100 0210 	add.w	r2, r0, #16
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	4553      	cmp	r3, sl
 800bf10:	db33      	blt.n	800bf7a <__lshift+0xb6>
 800bf12:	6920      	ldr	r0, [r4, #16]
 800bf14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf18:	f104 0314 	add.w	r3, r4, #20
 800bf1c:	f019 091f 	ands.w	r9, r9, #31
 800bf20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf28:	d02b      	beq.n	800bf82 <__lshift+0xbe>
 800bf2a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf2e:	468a      	mov	sl, r1
 800bf30:	2200      	movs	r2, #0
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	fa00 f009 	lsl.w	r0, r0, r9
 800bf38:	4310      	orrs	r0, r2
 800bf3a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	459c      	cmp	ip, r3
 800bf44:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf48:	d8f3      	bhi.n	800bf32 <__lshift+0x6e>
 800bf4a:	ebac 0304 	sub.w	r3, ip, r4
 800bf4e:	3b15      	subs	r3, #21
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	3304      	adds	r3, #4
 800bf56:	f104 0015 	add.w	r0, r4, #21
 800bf5a:	4584      	cmp	ip, r0
 800bf5c:	bf38      	it	cc
 800bf5e:	2304      	movcc	r3, #4
 800bf60:	50ca      	str	r2, [r1, r3]
 800bf62:	b10a      	cbz	r2, 800bf68 <__lshift+0xa4>
 800bf64:	f108 0602 	add.w	r6, r8, #2
 800bf68:	3e01      	subs	r6, #1
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	612e      	str	r6, [r5, #16]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	f7ff fdd8 	bl	800bb24 <_Bfree>
 800bf74:	4628      	mov	r0, r5
 800bf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf7e:	3301      	adds	r3, #1
 800bf80:	e7c5      	b.n	800bf0e <__lshift+0x4a>
 800bf82:	3904      	subs	r1, #4
 800bf84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf88:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf8c:	459c      	cmp	ip, r3
 800bf8e:	d8f9      	bhi.n	800bf84 <__lshift+0xc0>
 800bf90:	e7ea      	b.n	800bf68 <__lshift+0xa4>
 800bf92:	bf00      	nop
 800bf94:	0800d01c 	.word	0x0800d01c
 800bf98:	0800d02d 	.word	0x0800d02d

0800bf9c <__mcmp>:
 800bf9c:	b530      	push	{r4, r5, lr}
 800bf9e:	6902      	ldr	r2, [r0, #16]
 800bfa0:	690c      	ldr	r4, [r1, #16]
 800bfa2:	1b12      	subs	r2, r2, r4
 800bfa4:	d10e      	bne.n	800bfc4 <__mcmp+0x28>
 800bfa6:	f100 0314 	add.w	r3, r0, #20
 800bfaa:	3114      	adds	r1, #20
 800bfac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfbc:	42a5      	cmp	r5, r4
 800bfbe:	d003      	beq.n	800bfc8 <__mcmp+0x2c>
 800bfc0:	d305      	bcc.n	800bfce <__mcmp+0x32>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	bd30      	pop	{r4, r5, pc}
 800bfc8:	4283      	cmp	r3, r0
 800bfca:	d3f3      	bcc.n	800bfb4 <__mcmp+0x18>
 800bfcc:	e7fa      	b.n	800bfc4 <__mcmp+0x28>
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd2:	e7f7      	b.n	800bfc4 <__mcmp+0x28>

0800bfd4 <__mdiff>:
 800bfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	460c      	mov	r4, r1
 800bfda:	4606      	mov	r6, r0
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	f7ff ffdb 	bl	800bf9c <__mcmp>
 800bfe6:	1e05      	subs	r5, r0, #0
 800bfe8:	d110      	bne.n	800c00c <__mdiff+0x38>
 800bfea:	4629      	mov	r1, r5
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7ff fd59 	bl	800baa4 <_Balloc>
 800bff2:	b930      	cbnz	r0, 800c002 <__mdiff+0x2e>
 800bff4:	4b3a      	ldr	r3, [pc, #232]	; (800c0e0 <__mdiff+0x10c>)
 800bff6:	4602      	mov	r2, r0
 800bff8:	f240 2137 	movw	r1, #567	; 0x237
 800bffc:	4839      	ldr	r0, [pc, #228]	; (800c0e4 <__mdiff+0x110>)
 800bffe:	f000 faed 	bl	800c5dc <__assert_func>
 800c002:	2301      	movs	r3, #1
 800c004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00c:	bfa4      	itt	ge
 800c00e:	4643      	movge	r3, r8
 800c010:	46a0      	movge	r8, r4
 800c012:	4630      	mov	r0, r6
 800c014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c018:	bfa6      	itte	ge
 800c01a:	461c      	movge	r4, r3
 800c01c:	2500      	movge	r5, #0
 800c01e:	2501      	movlt	r5, #1
 800c020:	f7ff fd40 	bl	800baa4 <_Balloc>
 800c024:	b920      	cbnz	r0, 800c030 <__mdiff+0x5c>
 800c026:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <__mdiff+0x10c>)
 800c028:	4602      	mov	r2, r0
 800c02a:	f240 2145 	movw	r1, #581	; 0x245
 800c02e:	e7e5      	b.n	800bffc <__mdiff+0x28>
 800c030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c034:	6926      	ldr	r6, [r4, #16]
 800c036:	60c5      	str	r5, [r0, #12]
 800c038:	f104 0914 	add.w	r9, r4, #20
 800c03c:	f108 0514 	add.w	r5, r8, #20
 800c040:	f100 0e14 	add.w	lr, r0, #20
 800c044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c04c:	f108 0210 	add.w	r2, r8, #16
 800c050:	46f2      	mov	sl, lr
 800c052:	2100      	movs	r1, #0
 800c054:	f859 3b04 	ldr.w	r3, [r9], #4
 800c058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c05c:	fa11 f88b 	uxtah	r8, r1, fp
 800c060:	b299      	uxth	r1, r3
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	eba8 0801 	sub.w	r8, r8, r1
 800c068:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c06c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c070:	fa1f f888 	uxth.w	r8, r8
 800c074:	1419      	asrs	r1, r3, #16
 800c076:	454e      	cmp	r6, r9
 800c078:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c07c:	f84a 3b04 	str.w	r3, [sl], #4
 800c080:	d8e8      	bhi.n	800c054 <__mdiff+0x80>
 800c082:	1b33      	subs	r3, r6, r4
 800c084:	3b15      	subs	r3, #21
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	3304      	adds	r3, #4
 800c08c:	3415      	adds	r4, #21
 800c08e:	42a6      	cmp	r6, r4
 800c090:	bf38      	it	cc
 800c092:	2304      	movcc	r3, #4
 800c094:	441d      	add	r5, r3
 800c096:	4473      	add	r3, lr
 800c098:	469e      	mov	lr, r3
 800c09a:	462e      	mov	r6, r5
 800c09c:	4566      	cmp	r6, ip
 800c09e:	d30e      	bcc.n	800c0be <__mdiff+0xea>
 800c0a0:	f10c 0203 	add.w	r2, ip, #3
 800c0a4:	1b52      	subs	r2, r2, r5
 800c0a6:	f022 0203 	bic.w	r2, r2, #3
 800c0aa:	3d03      	subs	r5, #3
 800c0ac:	45ac      	cmp	ip, r5
 800c0ae:	bf38      	it	cc
 800c0b0:	2200      	movcc	r2, #0
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0b8:	b17a      	cbz	r2, 800c0da <__mdiff+0x106>
 800c0ba:	6107      	str	r7, [r0, #16]
 800c0bc:	e7a4      	b.n	800c008 <__mdiff+0x34>
 800c0be:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0c2:	fa11 f288 	uxtah	r2, r1, r8
 800c0c6:	1414      	asrs	r4, r2, #16
 800c0c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0cc:	b292      	uxth	r2, r2
 800c0ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0d2:	f84e 2b04 	str.w	r2, [lr], #4
 800c0d6:	1421      	asrs	r1, r4, #16
 800c0d8:	e7e0      	b.n	800c09c <__mdiff+0xc8>
 800c0da:	3f01      	subs	r7, #1
 800c0dc:	e7ea      	b.n	800c0b4 <__mdiff+0xe0>
 800c0de:	bf00      	nop
 800c0e0:	0800d01c 	.word	0x0800d01c
 800c0e4:	0800d02d 	.word	0x0800d02d

0800c0e8 <__d2b>:
 800c0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	ec59 8b10 	vmov	r8, r9, d0
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	f7ff fcd5 	bl	800baa4 <_Balloc>
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	b930      	cbnz	r0, 800c10c <__d2b+0x24>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b24      	ldr	r3, [pc, #144]	; (800c194 <__d2b+0xac>)
 800c102:	4825      	ldr	r0, [pc, #148]	; (800c198 <__d2b+0xb0>)
 800c104:	f240 310f 	movw	r1, #783	; 0x30f
 800c108:	f000 fa68 	bl	800c5dc <__assert_func>
 800c10c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c114:	bb2d      	cbnz	r5, 800c162 <__d2b+0x7a>
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	f1b8 0300 	subs.w	r3, r8, #0
 800c11c:	d026      	beq.n	800c16c <__d2b+0x84>
 800c11e:	4668      	mov	r0, sp
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	f7ff fd87 	bl	800bc34 <__lo0bits>
 800c126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c12a:	b1e8      	cbz	r0, 800c168 <__d2b+0x80>
 800c12c:	f1c0 0320 	rsb	r3, r0, #32
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	430b      	orrs	r3, r1
 800c136:	40c2      	lsrs	r2, r0
 800c138:	6163      	str	r3, [r4, #20]
 800c13a:	9201      	str	r2, [sp, #4]
 800c13c:	9b01      	ldr	r3, [sp, #4]
 800c13e:	61a3      	str	r3, [r4, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bf14      	ite	ne
 800c144:	2202      	movne	r2, #2
 800c146:	2201      	moveq	r2, #1
 800c148:	6122      	str	r2, [r4, #16]
 800c14a:	b1bd      	cbz	r5, 800c17c <__d2b+0x94>
 800c14c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c150:	4405      	add	r5, r0
 800c152:	603d      	str	r5, [r7, #0]
 800c154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c158:	6030      	str	r0, [r6, #0]
 800c15a:	4620      	mov	r0, r4
 800c15c:	b003      	add	sp, #12
 800c15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c166:	e7d6      	b.n	800c116 <__d2b+0x2e>
 800c168:	6161      	str	r1, [r4, #20]
 800c16a:	e7e7      	b.n	800c13c <__d2b+0x54>
 800c16c:	a801      	add	r0, sp, #4
 800c16e:	f7ff fd61 	bl	800bc34 <__lo0bits>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	6163      	str	r3, [r4, #20]
 800c176:	3020      	adds	r0, #32
 800c178:	2201      	movs	r2, #1
 800c17a:	e7e5      	b.n	800c148 <__d2b+0x60>
 800c17c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c184:	6038      	str	r0, [r7, #0]
 800c186:	6918      	ldr	r0, [r3, #16]
 800c188:	f7ff fd34 	bl	800bbf4 <__hi0bits>
 800c18c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c190:	e7e2      	b.n	800c158 <__d2b+0x70>
 800c192:	bf00      	nop
 800c194:	0800d01c 	.word	0x0800d01c
 800c198:	0800d02d 	.word	0x0800d02d

0800c19c <__ssputs_r>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	688e      	ldr	r6, [r1, #8]
 800c1a2:	461f      	mov	r7, r3
 800c1a4:	42be      	cmp	r6, r7
 800c1a6:	680b      	ldr	r3, [r1, #0]
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	d82c      	bhi.n	800c20a <__ssputs_r+0x6e>
 800c1b0:	898a      	ldrh	r2, [r1, #12]
 800c1b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1b6:	d026      	beq.n	800c206 <__ssputs_r+0x6a>
 800c1b8:	6965      	ldr	r5, [r4, #20]
 800c1ba:	6909      	ldr	r1, [r1, #16]
 800c1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c0:	eba3 0901 	sub.w	r9, r3, r1
 800c1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1c8:	1c7b      	adds	r3, r7, #1
 800c1ca:	444b      	add	r3, r9
 800c1cc:	106d      	asrs	r5, r5, #1
 800c1ce:	429d      	cmp	r5, r3
 800c1d0:	bf38      	it	cc
 800c1d2:	461d      	movcc	r5, r3
 800c1d4:	0553      	lsls	r3, r2, #21
 800c1d6:	d527      	bpl.n	800c228 <__ssputs_r+0x8c>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7fd fedd 	bl	8009f98 <_malloc_r>
 800c1de:	4606      	mov	r6, r0
 800c1e0:	b360      	cbz	r0, 800c23c <__ssputs_r+0xa0>
 800c1e2:	6921      	ldr	r1, [r4, #16]
 800c1e4:	464a      	mov	r2, r9
 800c1e6:	f7fe fd7e 	bl	800ace6 <memcpy>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	6126      	str	r6, [r4, #16]
 800c1f8:	6165      	str	r5, [r4, #20]
 800c1fa:	444e      	add	r6, r9
 800c1fc:	eba5 0509 	sub.w	r5, r5, r9
 800c200:	6026      	str	r6, [r4, #0]
 800c202:	60a5      	str	r5, [r4, #8]
 800c204:	463e      	mov	r6, r7
 800c206:	42be      	cmp	r6, r7
 800c208:	d900      	bls.n	800c20c <__ssputs_r+0x70>
 800c20a:	463e      	mov	r6, r7
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	4632      	mov	r2, r6
 800c210:	4641      	mov	r1, r8
 800c212:	f000 f9c9 	bl	800c5a8 <memmove>
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	1b9b      	subs	r3, r3, r6
 800c21a:	60a3      	str	r3, [r4, #8]
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	4433      	add	r3, r6
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	2000      	movs	r0, #0
 800c224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c228:	462a      	mov	r2, r5
 800c22a:	f000 fa07 	bl	800c63c <_realloc_r>
 800c22e:	4606      	mov	r6, r0
 800c230:	2800      	cmp	r0, #0
 800c232:	d1e0      	bne.n	800c1f6 <__ssputs_r+0x5a>
 800c234:	6921      	ldr	r1, [r4, #16]
 800c236:	4650      	mov	r0, sl
 800c238:	f7ff fbe0 	bl	800b9fc <_free_r>
 800c23c:	230c      	movs	r3, #12
 800c23e:	f8ca 3000 	str.w	r3, [sl]
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	e7e9      	b.n	800c224 <__ssputs_r+0x88>

0800c250 <_svfiprintf_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	4698      	mov	r8, r3
 800c256:	898b      	ldrh	r3, [r1, #12]
 800c258:	061b      	lsls	r3, r3, #24
 800c25a:	b09d      	sub	sp, #116	; 0x74
 800c25c:	4607      	mov	r7, r0
 800c25e:	460d      	mov	r5, r1
 800c260:	4614      	mov	r4, r2
 800c262:	d50e      	bpl.n	800c282 <_svfiprintf_r+0x32>
 800c264:	690b      	ldr	r3, [r1, #16]
 800c266:	b963      	cbnz	r3, 800c282 <_svfiprintf_r+0x32>
 800c268:	2140      	movs	r1, #64	; 0x40
 800c26a:	f7fd fe95 	bl	8009f98 <_malloc_r>
 800c26e:	6028      	str	r0, [r5, #0]
 800c270:	6128      	str	r0, [r5, #16]
 800c272:	b920      	cbnz	r0, 800c27e <_svfiprintf_r+0x2e>
 800c274:	230c      	movs	r3, #12
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	e0d0      	b.n	800c420 <_svfiprintf_r+0x1d0>
 800c27e:	2340      	movs	r3, #64	; 0x40
 800c280:	616b      	str	r3, [r5, #20]
 800c282:	2300      	movs	r3, #0
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	2320      	movs	r3, #32
 800c288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c290:	2330      	movs	r3, #48	; 0x30
 800c292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c438 <_svfiprintf_r+0x1e8>
 800c296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29a:	f04f 0901 	mov.w	r9, #1
 800c29e:	4623      	mov	r3, r4
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a6:	b10a      	cbz	r2, 800c2ac <_svfiprintf_r+0x5c>
 800c2a8:	2a25      	cmp	r2, #37	; 0x25
 800c2aa:	d1f9      	bne.n	800c2a0 <_svfiprintf_r+0x50>
 800c2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b0:	d00b      	beq.n	800c2ca <_svfiprintf_r+0x7a>
 800c2b2:	465b      	mov	r3, fp
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ff6f 	bl	800c19c <__ssputs_r>
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f000 80a9 	beq.w	800c416 <_svfiprintf_r+0x1c6>
 800c2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c6:	445a      	add	r2, fp
 800c2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80a1 	beq.w	800c416 <_svfiprintf_r+0x1c6>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2de:	f10a 0a01 	add.w	sl, sl, #1
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	9307      	str	r3, [sp, #28]
 800c2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ec:	4654      	mov	r4, sl
 800c2ee:	2205      	movs	r2, #5
 800c2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f4:	4850      	ldr	r0, [pc, #320]	; (800c438 <_svfiprintf_r+0x1e8>)
 800c2f6:	f7f3 ff83 	bl	8000200 <memchr>
 800c2fa:	9a04      	ldr	r2, [sp, #16]
 800c2fc:	b9d8      	cbnz	r0, 800c336 <_svfiprintf_r+0xe6>
 800c2fe:	06d0      	lsls	r0, r2, #27
 800c300:	bf44      	itt	mi
 800c302:	2320      	movmi	r3, #32
 800c304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c308:	0711      	lsls	r1, r2, #28
 800c30a:	bf44      	itt	mi
 800c30c:	232b      	movmi	r3, #43	; 0x2b
 800c30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c312:	f89a 3000 	ldrb.w	r3, [sl]
 800c316:	2b2a      	cmp	r3, #42	; 0x2a
 800c318:	d015      	beq.n	800c346 <_svfiprintf_r+0xf6>
 800c31a:	9a07      	ldr	r2, [sp, #28]
 800c31c:	4654      	mov	r4, sl
 800c31e:	2000      	movs	r0, #0
 800c320:	f04f 0c0a 	mov.w	ip, #10
 800c324:	4621      	mov	r1, r4
 800c326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32a:	3b30      	subs	r3, #48	; 0x30
 800c32c:	2b09      	cmp	r3, #9
 800c32e:	d94d      	bls.n	800c3cc <_svfiprintf_r+0x17c>
 800c330:	b1b0      	cbz	r0, 800c360 <_svfiprintf_r+0x110>
 800c332:	9207      	str	r2, [sp, #28]
 800c334:	e014      	b.n	800c360 <_svfiprintf_r+0x110>
 800c336:	eba0 0308 	sub.w	r3, r0, r8
 800c33a:	fa09 f303 	lsl.w	r3, r9, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	46a2      	mov	sl, r4
 800c344:	e7d2      	b.n	800c2ec <_svfiprintf_r+0x9c>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	1d19      	adds	r1, r3, #4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	9103      	str	r1, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfbb      	ittet	lt
 800c352:	425b      	neglt	r3, r3
 800c354:	f042 0202 	orrlt.w	r2, r2, #2
 800c358:	9307      	strge	r3, [sp, #28]
 800c35a:	9307      	strlt	r3, [sp, #28]
 800c35c:	bfb8      	it	lt
 800c35e:	9204      	strlt	r2, [sp, #16]
 800c360:	7823      	ldrb	r3, [r4, #0]
 800c362:	2b2e      	cmp	r3, #46	; 0x2e
 800c364:	d10c      	bne.n	800c380 <_svfiprintf_r+0x130>
 800c366:	7863      	ldrb	r3, [r4, #1]
 800c368:	2b2a      	cmp	r3, #42	; 0x2a
 800c36a:	d134      	bne.n	800c3d6 <_svfiprintf_r+0x186>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	1d1a      	adds	r2, r3, #4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	9203      	str	r2, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfb8      	it	lt
 800c378:	f04f 33ff 	movlt.w	r3, #4294967295
 800c37c:	3402      	adds	r4, #2
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c448 <_svfiprintf_r+0x1f8>
 800c384:	7821      	ldrb	r1, [r4, #0]
 800c386:	2203      	movs	r2, #3
 800c388:	4650      	mov	r0, sl
 800c38a:	f7f3 ff39 	bl	8000200 <memchr>
 800c38e:	b138      	cbz	r0, 800c3a0 <_svfiprintf_r+0x150>
 800c390:	9b04      	ldr	r3, [sp, #16]
 800c392:	eba0 000a 	sub.w	r0, r0, sl
 800c396:	2240      	movs	r2, #64	; 0x40
 800c398:	4082      	lsls	r2, r0
 800c39a:	4313      	orrs	r3, r2
 800c39c:	3401      	adds	r4, #1
 800c39e:	9304      	str	r3, [sp, #16]
 800c3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a4:	4825      	ldr	r0, [pc, #148]	; (800c43c <_svfiprintf_r+0x1ec>)
 800c3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	f7f3 ff28 	bl	8000200 <memchr>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d038      	beq.n	800c426 <_svfiprintf_r+0x1d6>
 800c3b4:	4b22      	ldr	r3, [pc, #136]	; (800c440 <_svfiprintf_r+0x1f0>)
 800c3b6:	bb1b      	cbnz	r3, 800c400 <_svfiprintf_r+0x1b0>
 800c3b8:	9b03      	ldr	r3, [sp, #12]
 800c3ba:	3307      	adds	r3, #7
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	4433      	add	r3, r6
 800c3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ca:	e768      	b.n	800c29e <_svfiprintf_r+0x4e>
 800c3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	e7a6      	b.n	800c324 <_svfiprintf_r+0xd4>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	3401      	adds	r4, #1
 800c3da:	9305      	str	r3, [sp, #20]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	f04f 0c0a 	mov.w	ip, #10
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e8:	3a30      	subs	r2, #48	; 0x30
 800c3ea:	2a09      	cmp	r2, #9
 800c3ec:	d903      	bls.n	800c3f6 <_svfiprintf_r+0x1a6>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0c6      	beq.n	800c380 <_svfiprintf_r+0x130>
 800c3f2:	9105      	str	r1, [sp, #20]
 800c3f4:	e7c4      	b.n	800c380 <_svfiprintf_r+0x130>
 800c3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e7f0      	b.n	800c3e2 <_svfiprintf_r+0x192>
 800c400:	ab03      	add	r3, sp, #12
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	462a      	mov	r2, r5
 800c406:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <_svfiprintf_r+0x1f4>)
 800c408:	a904      	add	r1, sp, #16
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7fd fef0 	bl	800a1f0 <_printf_float>
 800c410:	1c42      	adds	r2, r0, #1
 800c412:	4606      	mov	r6, r0
 800c414:	d1d6      	bne.n	800c3c4 <_svfiprintf_r+0x174>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	065b      	lsls	r3, r3, #25
 800c41a:	f53f af2d 	bmi.w	800c278 <_svfiprintf_r+0x28>
 800c41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c420:	b01d      	add	sp, #116	; 0x74
 800c422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c426:	ab03      	add	r3, sp, #12
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	462a      	mov	r2, r5
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <_svfiprintf_r+0x1f4>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	4638      	mov	r0, r7
 800c432:	f7fe f981 	bl	800a738 <_printf_i>
 800c436:	e7eb      	b.n	800c410 <_svfiprintf_r+0x1c0>
 800c438:	0800d184 	.word	0x0800d184
 800c43c:	0800d18e 	.word	0x0800d18e
 800c440:	0800a1f1 	.word	0x0800a1f1
 800c444:	0800c19d 	.word	0x0800c19d
 800c448:	0800d18a 	.word	0x0800d18a

0800c44c <__sflush_r>:
 800c44c:	898a      	ldrh	r2, [r1, #12]
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	4605      	mov	r5, r0
 800c454:	0710      	lsls	r0, r2, #28
 800c456:	460c      	mov	r4, r1
 800c458:	d458      	bmi.n	800c50c <__sflush_r+0xc0>
 800c45a:	684b      	ldr	r3, [r1, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dc05      	bgt.n	800c46c <__sflush_r+0x20>
 800c460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	dc02      	bgt.n	800c46c <__sflush_r+0x20>
 800c466:	2000      	movs	r0, #0
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c46e:	2e00      	cmp	r6, #0
 800c470:	d0f9      	beq.n	800c466 <__sflush_r+0x1a>
 800c472:	2300      	movs	r3, #0
 800c474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c478:	682f      	ldr	r7, [r5, #0]
 800c47a:	6a21      	ldr	r1, [r4, #32]
 800c47c:	602b      	str	r3, [r5, #0]
 800c47e:	d032      	beq.n	800c4e6 <__sflush_r+0x9a>
 800c480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	075a      	lsls	r2, r3, #29
 800c486:	d505      	bpl.n	800c494 <__sflush_r+0x48>
 800c488:	6863      	ldr	r3, [r4, #4]
 800c48a:	1ac0      	subs	r0, r0, r3
 800c48c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c48e:	b10b      	cbz	r3, 800c494 <__sflush_r+0x48>
 800c490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c492:	1ac0      	subs	r0, r0, r3
 800c494:	2300      	movs	r3, #0
 800c496:	4602      	mov	r2, r0
 800c498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c49a:	6a21      	ldr	r1, [r4, #32]
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b0      	blx	r6
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	d106      	bne.n	800c4b4 <__sflush_r+0x68>
 800c4a6:	6829      	ldr	r1, [r5, #0]
 800c4a8:	291d      	cmp	r1, #29
 800c4aa:	d82b      	bhi.n	800c504 <__sflush_r+0xb8>
 800c4ac:	4a29      	ldr	r2, [pc, #164]	; (800c554 <__sflush_r+0x108>)
 800c4ae:	410a      	asrs	r2, r1
 800c4b0:	07d6      	lsls	r6, r2, #31
 800c4b2:	d427      	bmi.n	800c504 <__sflush_r+0xb8>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	6062      	str	r2, [r4, #4]
 800c4b8:	04d9      	lsls	r1, r3, #19
 800c4ba:	6922      	ldr	r2, [r4, #16]
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	d504      	bpl.n	800c4ca <__sflush_r+0x7e>
 800c4c0:	1c42      	adds	r2, r0, #1
 800c4c2:	d101      	bne.n	800c4c8 <__sflush_r+0x7c>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b903      	cbnz	r3, 800c4ca <__sflush_r+0x7e>
 800c4c8:	6560      	str	r0, [r4, #84]	; 0x54
 800c4ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4cc:	602f      	str	r7, [r5, #0]
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	d0c9      	beq.n	800c466 <__sflush_r+0x1a>
 800c4d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4d6:	4299      	cmp	r1, r3
 800c4d8:	d002      	beq.n	800c4e0 <__sflush_r+0x94>
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f7ff fa8e 	bl	800b9fc <_free_r>
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	6360      	str	r0, [r4, #52]	; 0x34
 800c4e4:	e7c0      	b.n	800c468 <__sflush_r+0x1c>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	47b0      	blx	r6
 800c4ec:	1c41      	adds	r1, r0, #1
 800c4ee:	d1c8      	bne.n	800c482 <__sflush_r+0x36>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0c5      	beq.n	800c482 <__sflush_r+0x36>
 800c4f6:	2b1d      	cmp	r3, #29
 800c4f8:	d001      	beq.n	800c4fe <__sflush_r+0xb2>
 800c4fa:	2b16      	cmp	r3, #22
 800c4fc:	d101      	bne.n	800c502 <__sflush_r+0xb6>
 800c4fe:	602f      	str	r7, [r5, #0]
 800c500:	e7b1      	b.n	800c466 <__sflush_r+0x1a>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	e7ad      	b.n	800c468 <__sflush_r+0x1c>
 800c50c:	690f      	ldr	r7, [r1, #16]
 800c50e:	2f00      	cmp	r7, #0
 800c510:	d0a9      	beq.n	800c466 <__sflush_r+0x1a>
 800c512:	0793      	lsls	r3, r2, #30
 800c514:	680e      	ldr	r6, [r1, #0]
 800c516:	bf08      	it	eq
 800c518:	694b      	ldreq	r3, [r1, #20]
 800c51a:	600f      	str	r7, [r1, #0]
 800c51c:	bf18      	it	ne
 800c51e:	2300      	movne	r3, #0
 800c520:	eba6 0807 	sub.w	r8, r6, r7
 800c524:	608b      	str	r3, [r1, #8]
 800c526:	f1b8 0f00 	cmp.w	r8, #0
 800c52a:	dd9c      	ble.n	800c466 <__sflush_r+0x1a>
 800c52c:	6a21      	ldr	r1, [r4, #32]
 800c52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c530:	4643      	mov	r3, r8
 800c532:	463a      	mov	r2, r7
 800c534:	4628      	mov	r0, r5
 800c536:	47b0      	blx	r6
 800c538:	2800      	cmp	r0, #0
 800c53a:	dc06      	bgt.n	800c54a <__sflush_r+0xfe>
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	e78e      	b.n	800c468 <__sflush_r+0x1c>
 800c54a:	4407      	add	r7, r0
 800c54c:	eba8 0800 	sub.w	r8, r8, r0
 800c550:	e7e9      	b.n	800c526 <__sflush_r+0xda>
 800c552:	bf00      	nop
 800c554:	dfbffffe 	.word	0xdfbffffe

0800c558 <_fflush_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	690b      	ldr	r3, [r1, #16]
 800c55c:	4605      	mov	r5, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	b913      	cbnz	r3, 800c568 <_fflush_r+0x10>
 800c562:	2500      	movs	r5, #0
 800c564:	4628      	mov	r0, r5
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	b118      	cbz	r0, 800c572 <_fflush_r+0x1a>
 800c56a:	6a03      	ldr	r3, [r0, #32]
 800c56c:	b90b      	cbnz	r3, 800c572 <_fflush_r+0x1a>
 800c56e:	f7fe fa91 	bl	800aa94 <__sinit>
 800c572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0f3      	beq.n	800c562 <_fflush_r+0xa>
 800c57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c57c:	07d0      	lsls	r0, r2, #31
 800c57e:	d404      	bmi.n	800c58a <_fflush_r+0x32>
 800c580:	0599      	lsls	r1, r3, #22
 800c582:	d402      	bmi.n	800c58a <_fflush_r+0x32>
 800c584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c586:	f7fe fbac 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800c58a:	4628      	mov	r0, r5
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7ff ff5d 	bl	800c44c <__sflush_r>
 800c592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c594:	07da      	lsls	r2, r3, #31
 800c596:	4605      	mov	r5, r0
 800c598:	d4e4      	bmi.n	800c564 <_fflush_r+0xc>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	059b      	lsls	r3, r3, #22
 800c59e:	d4e1      	bmi.n	800c564 <_fflush_r+0xc>
 800c5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a2:	f7fe fb9f 	bl	800ace4 <__retarget_lock_release_recursive>
 800c5a6:	e7dd      	b.n	800c564 <_fflush_r+0xc>

0800c5a8 <memmove>:
 800c5a8:	4288      	cmp	r0, r1
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	eb01 0402 	add.w	r4, r1, r2
 800c5b0:	d902      	bls.n	800c5b8 <memmove+0x10>
 800c5b2:	4284      	cmp	r4, r0
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	d807      	bhi.n	800c5c8 <memmove+0x20>
 800c5b8:	1e43      	subs	r3, r0, #1
 800c5ba:	42a1      	cmp	r1, r4
 800c5bc:	d008      	beq.n	800c5d0 <memmove+0x28>
 800c5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c6:	e7f8      	b.n	800c5ba <memmove+0x12>
 800c5c8:	4402      	add	r2, r0
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	428a      	cmp	r2, r1
 800c5ce:	d100      	bne.n	800c5d2 <memmove+0x2a>
 800c5d0:	bd10      	pop	{r4, pc}
 800c5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5da:	e7f7      	b.n	800c5cc <memmove+0x24>

0800c5dc <__assert_func>:
 800c5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5de:	4614      	mov	r4, r2
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	4b09      	ldr	r3, [pc, #36]	; (800c608 <__assert_func+0x2c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	68d8      	ldr	r0, [r3, #12]
 800c5ea:	b14c      	cbz	r4, 800c600 <__assert_func+0x24>
 800c5ec:	4b07      	ldr	r3, [pc, #28]	; (800c60c <__assert_func+0x30>)
 800c5ee:	9100      	str	r1, [sp, #0]
 800c5f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5f4:	4906      	ldr	r1, [pc, #24]	; (800c610 <__assert_func+0x34>)
 800c5f6:	462b      	mov	r3, r5
 800c5f8:	f000 f85c 	bl	800c6b4 <fiprintf>
 800c5fc:	f000 f86c 	bl	800c6d8 <abort>
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <__assert_func+0x38>)
 800c602:	461c      	mov	r4, r3
 800c604:	e7f3      	b.n	800c5ee <__assert_func+0x12>
 800c606:	bf00      	nop
 800c608:	20000118 	.word	0x20000118
 800c60c:	0800d19f 	.word	0x0800d19f
 800c610:	0800d1ac 	.word	0x0800d1ac
 800c614:	0800d1da 	.word	0x0800d1da

0800c618 <__ascii_mbtowc>:
 800c618:	b082      	sub	sp, #8
 800c61a:	b901      	cbnz	r1, 800c61e <__ascii_mbtowc+0x6>
 800c61c:	a901      	add	r1, sp, #4
 800c61e:	b142      	cbz	r2, 800c632 <__ascii_mbtowc+0x1a>
 800c620:	b14b      	cbz	r3, 800c636 <__ascii_mbtowc+0x1e>
 800c622:	7813      	ldrb	r3, [r2, #0]
 800c624:	600b      	str	r3, [r1, #0]
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	1e10      	subs	r0, r2, #0
 800c62a:	bf18      	it	ne
 800c62c:	2001      	movne	r0, #1
 800c62e:	b002      	add	sp, #8
 800c630:	4770      	bx	lr
 800c632:	4610      	mov	r0, r2
 800c634:	e7fb      	b.n	800c62e <__ascii_mbtowc+0x16>
 800c636:	f06f 0001 	mvn.w	r0, #1
 800c63a:	e7f8      	b.n	800c62e <__ascii_mbtowc+0x16>

0800c63c <_realloc_r>:
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	4680      	mov	r8, r0
 800c642:	4614      	mov	r4, r2
 800c644:	460e      	mov	r6, r1
 800c646:	b921      	cbnz	r1, 800c652 <_realloc_r+0x16>
 800c648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c64c:	4611      	mov	r1, r2
 800c64e:	f7fd bca3 	b.w	8009f98 <_malloc_r>
 800c652:	b92a      	cbnz	r2, 800c660 <_realloc_r+0x24>
 800c654:	f7ff f9d2 	bl	800b9fc <_free_r>
 800c658:	4625      	mov	r5, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c660:	f000 f841 	bl	800c6e6 <_malloc_usable_size_r>
 800c664:	4284      	cmp	r4, r0
 800c666:	4607      	mov	r7, r0
 800c668:	d802      	bhi.n	800c670 <_realloc_r+0x34>
 800c66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c66e:	d812      	bhi.n	800c696 <_realloc_r+0x5a>
 800c670:	4621      	mov	r1, r4
 800c672:	4640      	mov	r0, r8
 800c674:	f7fd fc90 	bl	8009f98 <_malloc_r>
 800c678:	4605      	mov	r5, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0ed      	beq.n	800c65a <_realloc_r+0x1e>
 800c67e:	42bc      	cmp	r4, r7
 800c680:	4622      	mov	r2, r4
 800c682:	4631      	mov	r1, r6
 800c684:	bf28      	it	cs
 800c686:	463a      	movcs	r2, r7
 800c688:	f7fe fb2d 	bl	800ace6 <memcpy>
 800c68c:	4631      	mov	r1, r6
 800c68e:	4640      	mov	r0, r8
 800c690:	f7ff f9b4 	bl	800b9fc <_free_r>
 800c694:	e7e1      	b.n	800c65a <_realloc_r+0x1e>
 800c696:	4635      	mov	r5, r6
 800c698:	e7df      	b.n	800c65a <_realloc_r+0x1e>

0800c69a <__ascii_wctomb>:
 800c69a:	b149      	cbz	r1, 800c6b0 <__ascii_wctomb+0x16>
 800c69c:	2aff      	cmp	r2, #255	; 0xff
 800c69e:	bf85      	ittet	hi
 800c6a0:	238a      	movhi	r3, #138	; 0x8a
 800c6a2:	6003      	strhi	r3, [r0, #0]
 800c6a4:	700a      	strbls	r2, [r1, #0]
 800c6a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6aa:	bf98      	it	ls
 800c6ac:	2001      	movls	r0, #1
 800c6ae:	4770      	bx	lr
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	4770      	bx	lr

0800c6b4 <fiprintf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b503      	push	{r0, r1, lr}
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	ab03      	add	r3, sp, #12
 800c6bc:	4805      	ldr	r0, [pc, #20]	; (800c6d4 <fiprintf+0x20>)
 800c6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c2:	6800      	ldr	r0, [r0, #0]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	f000 f83f 	bl	800c748 <_vfiprintf_r>
 800c6ca:	b002      	add	sp, #8
 800c6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d0:	b003      	add	sp, #12
 800c6d2:	4770      	bx	lr
 800c6d4:	20000118 	.word	0x20000118

0800c6d8 <abort>:
 800c6d8:	b508      	push	{r3, lr}
 800c6da:	2006      	movs	r0, #6
 800c6dc:	f000 fa0c 	bl	800caf8 <raise>
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f7f6 fb61 	bl	8002da8 <_exit>

0800c6e6 <_malloc_usable_size_r>:
 800c6e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ea:	1f18      	subs	r0, r3, #4
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bfbc      	itt	lt
 800c6f0:	580b      	ldrlt	r3, [r1, r0]
 800c6f2:	18c0      	addlt	r0, r0, r3
 800c6f4:	4770      	bx	lr

0800c6f6 <__sfputc_r>:
 800c6f6:	6893      	ldr	r3, [r2, #8]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	b410      	push	{r4}
 800c6fe:	6093      	str	r3, [r2, #8]
 800c700:	da08      	bge.n	800c714 <__sfputc_r+0x1e>
 800c702:	6994      	ldr	r4, [r2, #24]
 800c704:	42a3      	cmp	r3, r4
 800c706:	db01      	blt.n	800c70c <__sfputc_r+0x16>
 800c708:	290a      	cmp	r1, #10
 800c70a:	d103      	bne.n	800c714 <__sfputc_r+0x1e>
 800c70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c710:	f000 b934 	b.w	800c97c <__swbuf_r>
 800c714:	6813      	ldr	r3, [r2, #0]
 800c716:	1c58      	adds	r0, r3, #1
 800c718:	6010      	str	r0, [r2, #0]
 800c71a:	7019      	strb	r1, [r3, #0]
 800c71c:	4608      	mov	r0, r1
 800c71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <__sfputs_r>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	4606      	mov	r6, r0
 800c728:	460f      	mov	r7, r1
 800c72a:	4614      	mov	r4, r2
 800c72c:	18d5      	adds	r5, r2, r3
 800c72e:	42ac      	cmp	r4, r5
 800c730:	d101      	bne.n	800c736 <__sfputs_r+0x12>
 800c732:	2000      	movs	r0, #0
 800c734:	e007      	b.n	800c746 <__sfputs_r+0x22>
 800c736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c73a:	463a      	mov	r2, r7
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7ff ffda 	bl	800c6f6 <__sfputc_r>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	d1f3      	bne.n	800c72e <__sfputs_r+0xa>
 800c746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c748 <_vfiprintf_r>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	460d      	mov	r5, r1
 800c74e:	b09d      	sub	sp, #116	; 0x74
 800c750:	4614      	mov	r4, r2
 800c752:	4698      	mov	r8, r3
 800c754:	4606      	mov	r6, r0
 800c756:	b118      	cbz	r0, 800c760 <_vfiprintf_r+0x18>
 800c758:	6a03      	ldr	r3, [r0, #32]
 800c75a:	b90b      	cbnz	r3, 800c760 <_vfiprintf_r+0x18>
 800c75c:	f7fe f99a 	bl	800aa94 <__sinit>
 800c760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	d405      	bmi.n	800c772 <_vfiprintf_r+0x2a>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d402      	bmi.n	800c772 <_vfiprintf_r+0x2a>
 800c76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c76e:	f7fe fab8 	bl	800ace2 <__retarget_lock_acquire_recursive>
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	071b      	lsls	r3, r3, #28
 800c776:	d501      	bpl.n	800c77c <_vfiprintf_r+0x34>
 800c778:	692b      	ldr	r3, [r5, #16]
 800c77a:	b99b      	cbnz	r3, 800c7a4 <_vfiprintf_r+0x5c>
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 f93a 	bl	800c9f8 <__swsetup_r>
 800c784:	b170      	cbz	r0, 800c7a4 <_vfiprintf_r+0x5c>
 800c786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c788:	07dc      	lsls	r4, r3, #31
 800c78a:	d504      	bpl.n	800c796 <_vfiprintf_r+0x4e>
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	b01d      	add	sp, #116	; 0x74
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	0598      	lsls	r0, r3, #22
 800c79a:	d4f7      	bmi.n	800c78c <_vfiprintf_r+0x44>
 800c79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c79e:	f7fe faa1 	bl	800ace4 <__retarget_lock_release_recursive>
 800c7a2:	e7f3      	b.n	800c78c <_vfiprintf_r+0x44>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b2:	2330      	movs	r3, #48	; 0x30
 800c7b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c968 <_vfiprintf_r+0x220>
 800c7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7bc:	f04f 0901 	mov.w	r9, #1
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	469a      	mov	sl, r3
 800c7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7c8:	b10a      	cbz	r2, 800c7ce <_vfiprintf_r+0x86>
 800c7ca:	2a25      	cmp	r2, #37	; 0x25
 800c7cc:	d1f9      	bne.n	800c7c2 <_vfiprintf_r+0x7a>
 800c7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d2:	d00b      	beq.n	800c7ec <_vfiprintf_r+0xa4>
 800c7d4:	465b      	mov	r3, fp
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f7ff ffa2 	bl	800c724 <__sfputs_r>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f000 80a9 	beq.w	800c938 <_vfiprintf_r+0x1f0>
 800c7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e8:	445a      	add	r2, fp
 800c7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80a1 	beq.w	800c938 <_vfiprintf_r+0x1f0>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c800:	f10a 0a01 	add.w	sl, sl, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c80c:	931a      	str	r3, [sp, #104]	; 0x68
 800c80e:	4654      	mov	r4, sl
 800c810:	2205      	movs	r2, #5
 800c812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c816:	4854      	ldr	r0, [pc, #336]	; (800c968 <_vfiprintf_r+0x220>)
 800c818:	f7f3 fcf2 	bl	8000200 <memchr>
 800c81c:	9a04      	ldr	r2, [sp, #16]
 800c81e:	b9d8      	cbnz	r0, 800c858 <_vfiprintf_r+0x110>
 800c820:	06d1      	lsls	r1, r2, #27
 800c822:	bf44      	itt	mi
 800c824:	2320      	movmi	r3, #32
 800c826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c82a:	0713      	lsls	r3, r2, #28
 800c82c:	bf44      	itt	mi
 800c82e:	232b      	movmi	r3, #43	; 0x2b
 800c830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b2a      	cmp	r3, #42	; 0x2a
 800c83a:	d015      	beq.n	800c868 <_vfiprintf_r+0x120>
 800c83c:	9a07      	ldr	r2, [sp, #28]
 800c83e:	4654      	mov	r4, sl
 800c840:	2000      	movs	r0, #0
 800c842:	f04f 0c0a 	mov.w	ip, #10
 800c846:	4621      	mov	r1, r4
 800c848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c84c:	3b30      	subs	r3, #48	; 0x30
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d94d      	bls.n	800c8ee <_vfiprintf_r+0x1a6>
 800c852:	b1b0      	cbz	r0, 800c882 <_vfiprintf_r+0x13a>
 800c854:	9207      	str	r2, [sp, #28]
 800c856:	e014      	b.n	800c882 <_vfiprintf_r+0x13a>
 800c858:	eba0 0308 	sub.w	r3, r0, r8
 800c85c:	fa09 f303 	lsl.w	r3, r9, r3
 800c860:	4313      	orrs	r3, r2
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	46a2      	mov	sl, r4
 800c866:	e7d2      	b.n	800c80e <_vfiprintf_r+0xc6>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	1d19      	adds	r1, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	9103      	str	r1, [sp, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	bfbb      	ittet	lt
 800c874:	425b      	neglt	r3, r3
 800c876:	f042 0202 	orrlt.w	r2, r2, #2
 800c87a:	9307      	strge	r3, [sp, #28]
 800c87c:	9307      	strlt	r3, [sp, #28]
 800c87e:	bfb8      	it	lt
 800c880:	9204      	strlt	r2, [sp, #16]
 800c882:	7823      	ldrb	r3, [r4, #0]
 800c884:	2b2e      	cmp	r3, #46	; 0x2e
 800c886:	d10c      	bne.n	800c8a2 <_vfiprintf_r+0x15a>
 800c888:	7863      	ldrb	r3, [r4, #1]
 800c88a:	2b2a      	cmp	r3, #42	; 0x2a
 800c88c:	d134      	bne.n	800c8f8 <_vfiprintf_r+0x1b0>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9203      	str	r2, [sp, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfb8      	it	lt
 800c89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c89e:	3402      	adds	r4, #2
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c978 <_vfiprintf_r+0x230>
 800c8a6:	7821      	ldrb	r1, [r4, #0]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	f7f3 fca8 	bl	8000200 <memchr>
 800c8b0:	b138      	cbz	r0, 800c8c2 <_vfiprintf_r+0x17a>
 800c8b2:	9b04      	ldr	r3, [sp, #16]
 800c8b4:	eba0 000a 	sub.w	r0, r0, sl
 800c8b8:	2240      	movs	r2, #64	; 0x40
 800c8ba:	4082      	lsls	r2, r0
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	3401      	adds	r4, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c6:	4829      	ldr	r0, [pc, #164]	; (800c96c <_vfiprintf_r+0x224>)
 800c8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	f7f3 fc97 	bl	8000200 <memchr>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d03f      	beq.n	800c956 <_vfiprintf_r+0x20e>
 800c8d6:	4b26      	ldr	r3, [pc, #152]	; (800c970 <_vfiprintf_r+0x228>)
 800c8d8:	bb1b      	cbnz	r3, 800c922 <_vfiprintf_r+0x1da>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	3307      	adds	r3, #7
 800c8de:	f023 0307 	bic.w	r3, r3, #7
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	9303      	str	r3, [sp, #12]
 800c8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e8:	443b      	add	r3, r7
 800c8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ec:	e768      	b.n	800c7c0 <_vfiprintf_r+0x78>
 800c8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	e7a6      	b.n	800c846 <_vfiprintf_r+0xfe>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	9305      	str	r3, [sp, #20]
 800c8fe:	4619      	mov	r1, r3
 800c900:	f04f 0c0a 	mov.w	ip, #10
 800c904:	4620      	mov	r0, r4
 800c906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c90a:	3a30      	subs	r2, #48	; 0x30
 800c90c:	2a09      	cmp	r2, #9
 800c90e:	d903      	bls.n	800c918 <_vfiprintf_r+0x1d0>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d0c6      	beq.n	800c8a2 <_vfiprintf_r+0x15a>
 800c914:	9105      	str	r1, [sp, #20]
 800c916:	e7c4      	b.n	800c8a2 <_vfiprintf_r+0x15a>
 800c918:	fb0c 2101 	mla	r1, ip, r1, r2
 800c91c:	4604      	mov	r4, r0
 800c91e:	2301      	movs	r3, #1
 800c920:	e7f0      	b.n	800c904 <_vfiprintf_r+0x1bc>
 800c922:	ab03      	add	r3, sp, #12
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	462a      	mov	r2, r5
 800c928:	4b12      	ldr	r3, [pc, #72]	; (800c974 <_vfiprintf_r+0x22c>)
 800c92a:	a904      	add	r1, sp, #16
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7fd fc5f 	bl	800a1f0 <_printf_float>
 800c932:	4607      	mov	r7, r0
 800c934:	1c78      	adds	r0, r7, #1
 800c936:	d1d6      	bne.n	800c8e6 <_vfiprintf_r+0x19e>
 800c938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93a:	07d9      	lsls	r1, r3, #31
 800c93c:	d405      	bmi.n	800c94a <_vfiprintf_r+0x202>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	059a      	lsls	r2, r3, #22
 800c942:	d402      	bmi.n	800c94a <_vfiprintf_r+0x202>
 800c944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c946:	f7fe f9cd 	bl	800ace4 <__retarget_lock_release_recursive>
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	065b      	lsls	r3, r3, #25
 800c94e:	f53f af1d 	bmi.w	800c78c <_vfiprintf_r+0x44>
 800c952:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c954:	e71c      	b.n	800c790 <_vfiprintf_r+0x48>
 800c956:	ab03      	add	r3, sp, #12
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	462a      	mov	r2, r5
 800c95c:	4b05      	ldr	r3, [pc, #20]	; (800c974 <_vfiprintf_r+0x22c>)
 800c95e:	a904      	add	r1, sp, #16
 800c960:	4630      	mov	r0, r6
 800c962:	f7fd fee9 	bl	800a738 <_printf_i>
 800c966:	e7e4      	b.n	800c932 <_vfiprintf_r+0x1ea>
 800c968:	0800d184 	.word	0x0800d184
 800c96c:	0800d18e 	.word	0x0800d18e
 800c970:	0800a1f1 	.word	0x0800a1f1
 800c974:	0800c725 	.word	0x0800c725
 800c978:	0800d18a 	.word	0x0800d18a

0800c97c <__swbuf_r>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	460e      	mov	r6, r1
 800c980:	4614      	mov	r4, r2
 800c982:	4605      	mov	r5, r0
 800c984:	b118      	cbz	r0, 800c98e <__swbuf_r+0x12>
 800c986:	6a03      	ldr	r3, [r0, #32]
 800c988:	b90b      	cbnz	r3, 800c98e <__swbuf_r+0x12>
 800c98a:	f7fe f883 	bl	800aa94 <__sinit>
 800c98e:	69a3      	ldr	r3, [r4, #24]
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	071a      	lsls	r2, r3, #28
 800c996:	d525      	bpl.n	800c9e4 <__swbuf_r+0x68>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	b31b      	cbz	r3, 800c9e4 <__swbuf_r+0x68>
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	6922      	ldr	r2, [r4, #16]
 800c9a0:	1a98      	subs	r0, r3, r2
 800c9a2:	6963      	ldr	r3, [r4, #20]
 800c9a4:	b2f6      	uxtb	r6, r6
 800c9a6:	4283      	cmp	r3, r0
 800c9a8:	4637      	mov	r7, r6
 800c9aa:	dc04      	bgt.n	800c9b6 <__swbuf_r+0x3a>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f7ff fdd2 	bl	800c558 <_fflush_r>
 800c9b4:	b9e0      	cbnz	r0, 800c9f0 <__swbuf_r+0x74>
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	60a3      	str	r3, [r4, #8]
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	6022      	str	r2, [r4, #0]
 800c9c2:	701e      	strb	r6, [r3, #0]
 800c9c4:	6962      	ldr	r2, [r4, #20]
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d004      	beq.n	800c9d6 <__swbuf_r+0x5a>
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	07db      	lsls	r3, r3, #31
 800c9d0:	d506      	bpl.n	800c9e0 <__swbuf_r+0x64>
 800c9d2:	2e0a      	cmp	r6, #10
 800c9d4:	d104      	bne.n	800c9e0 <__swbuf_r+0x64>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f7ff fdbd 	bl	800c558 <_fflush_r>
 800c9de:	b938      	cbnz	r0, 800c9f0 <__swbuf_r+0x74>
 800c9e0:	4638      	mov	r0, r7
 800c9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 f806 	bl	800c9f8 <__swsetup_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d0d5      	beq.n	800c99c <__swbuf_r+0x20>
 800c9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9f4:	e7f4      	b.n	800c9e0 <__swbuf_r+0x64>
	...

0800c9f8 <__swsetup_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4b2a      	ldr	r3, [pc, #168]	; (800caa4 <__swsetup_r+0xac>)
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	6818      	ldr	r0, [r3, #0]
 800ca00:	460c      	mov	r4, r1
 800ca02:	b118      	cbz	r0, 800ca0c <__swsetup_r+0x14>
 800ca04:	6a03      	ldr	r3, [r0, #32]
 800ca06:	b90b      	cbnz	r3, 800ca0c <__swsetup_r+0x14>
 800ca08:	f7fe f844 	bl	800aa94 <__sinit>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca12:	0718      	lsls	r0, r3, #28
 800ca14:	d422      	bmi.n	800ca5c <__swsetup_r+0x64>
 800ca16:	06d9      	lsls	r1, r3, #27
 800ca18:	d407      	bmi.n	800ca2a <__swsetup_r+0x32>
 800ca1a:	2309      	movs	r3, #9
 800ca1c:	602b      	str	r3, [r5, #0]
 800ca1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca22:	81a3      	strh	r3, [r4, #12]
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	e034      	b.n	800ca94 <__swsetup_r+0x9c>
 800ca2a:	0758      	lsls	r0, r3, #29
 800ca2c:	d512      	bpl.n	800ca54 <__swsetup_r+0x5c>
 800ca2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca30:	b141      	cbz	r1, 800ca44 <__swsetup_r+0x4c>
 800ca32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca36:	4299      	cmp	r1, r3
 800ca38:	d002      	beq.n	800ca40 <__swsetup_r+0x48>
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f7fe ffde 	bl	800b9fc <_free_r>
 800ca40:	2300      	movs	r3, #0
 800ca42:	6363      	str	r3, [r4, #52]	; 0x34
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6063      	str	r3, [r4, #4]
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	f043 0308 	orr.w	r3, r3, #8
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	b94b      	cbnz	r3, 800ca74 <__swsetup_r+0x7c>
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6a:	d003      	beq.n	800ca74 <__swsetup_r+0x7c>
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f000 f884 	bl	800cb7c <__smakebuf_r>
 800ca74:	89a0      	ldrh	r0, [r4, #12]
 800ca76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca7a:	f010 0301 	ands.w	r3, r0, #1
 800ca7e:	d00a      	beq.n	800ca96 <__swsetup_r+0x9e>
 800ca80:	2300      	movs	r3, #0
 800ca82:	60a3      	str	r3, [r4, #8]
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	425b      	negs	r3, r3
 800ca88:	61a3      	str	r3, [r4, #24]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	b943      	cbnz	r3, 800caa0 <__swsetup_r+0xa8>
 800ca8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca92:	d1c4      	bne.n	800ca1e <__swsetup_r+0x26>
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	0781      	lsls	r1, r0, #30
 800ca98:	bf58      	it	pl
 800ca9a:	6963      	ldrpl	r3, [r4, #20]
 800ca9c:	60a3      	str	r3, [r4, #8]
 800ca9e:	e7f4      	b.n	800ca8a <__swsetup_r+0x92>
 800caa0:	2000      	movs	r0, #0
 800caa2:	e7f7      	b.n	800ca94 <__swsetup_r+0x9c>
 800caa4:	20000118 	.word	0x20000118

0800caa8 <_raise_r>:
 800caa8:	291f      	cmp	r1, #31
 800caaa:	b538      	push	{r3, r4, r5, lr}
 800caac:	4604      	mov	r4, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	d904      	bls.n	800cabc <_raise_r+0x14>
 800cab2:	2316      	movs	r3, #22
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	f04f 30ff 	mov.w	r0, #4294967295
 800caba:	bd38      	pop	{r3, r4, r5, pc}
 800cabc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cabe:	b112      	cbz	r2, 800cac6 <_raise_r+0x1e>
 800cac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cac4:	b94b      	cbnz	r3, 800cada <_raise_r+0x32>
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f830 	bl	800cb2c <_getpid_r>
 800cacc:	462a      	mov	r2, r5
 800cace:	4601      	mov	r1, r0
 800cad0:	4620      	mov	r0, r4
 800cad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cad6:	f000 b817 	b.w	800cb08 <_kill_r>
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d00a      	beq.n	800caf4 <_raise_r+0x4c>
 800cade:	1c59      	adds	r1, r3, #1
 800cae0:	d103      	bne.n	800caea <_raise_r+0x42>
 800cae2:	2316      	movs	r3, #22
 800cae4:	6003      	str	r3, [r0, #0]
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7e7      	b.n	800caba <_raise_r+0x12>
 800caea:	2400      	movs	r4, #0
 800caec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caf0:	4628      	mov	r0, r5
 800caf2:	4798      	blx	r3
 800caf4:	2000      	movs	r0, #0
 800caf6:	e7e0      	b.n	800caba <_raise_r+0x12>

0800caf8 <raise>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <raise+0xc>)
 800cafa:	4601      	mov	r1, r0
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f7ff bfd3 	b.w	800caa8 <_raise_r>
 800cb02:	bf00      	nop
 800cb04:	20000118 	.word	0x20000118

0800cb08 <_kill_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4d07      	ldr	r5, [pc, #28]	; (800cb28 <_kill_r+0x20>)
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4604      	mov	r4, r0
 800cb10:	4608      	mov	r0, r1
 800cb12:	4611      	mov	r1, r2
 800cb14:	602b      	str	r3, [r5, #0]
 800cb16:	f7f6 f937 	bl	8002d88 <_kill>
 800cb1a:	1c43      	adds	r3, r0, #1
 800cb1c:	d102      	bne.n	800cb24 <_kill_r+0x1c>
 800cb1e:	682b      	ldr	r3, [r5, #0]
 800cb20:	b103      	cbz	r3, 800cb24 <_kill_r+0x1c>
 800cb22:	6023      	str	r3, [r4, #0]
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	bf00      	nop
 800cb28:	200025d4 	.word	0x200025d4

0800cb2c <_getpid_r>:
 800cb2c:	f7f6 b924 	b.w	8002d78 <_getpid>

0800cb30 <__swhatbuf_r>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	460c      	mov	r4, r1
 800cb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	b096      	sub	sp, #88	; 0x58
 800cb3c:	4615      	mov	r5, r2
 800cb3e:	461e      	mov	r6, r3
 800cb40:	da0d      	bge.n	800cb5e <__swhatbuf_r+0x2e>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb48:	f04f 0100 	mov.w	r1, #0
 800cb4c:	bf0c      	ite	eq
 800cb4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb52:	2340      	movne	r3, #64	; 0x40
 800cb54:	2000      	movs	r0, #0
 800cb56:	6031      	str	r1, [r6, #0]
 800cb58:	602b      	str	r3, [r5, #0]
 800cb5a:	b016      	add	sp, #88	; 0x58
 800cb5c:	bd70      	pop	{r4, r5, r6, pc}
 800cb5e:	466a      	mov	r2, sp
 800cb60:	f000 f848 	bl	800cbf4 <_fstat_r>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	dbec      	blt.n	800cb42 <__swhatbuf_r+0x12>
 800cb68:	9901      	ldr	r1, [sp, #4]
 800cb6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb72:	4259      	negs	r1, r3
 800cb74:	4159      	adcs	r1, r3
 800cb76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb7a:	e7eb      	b.n	800cb54 <__swhatbuf_r+0x24>

0800cb7c <__smakebuf_r>:
 800cb7c:	898b      	ldrh	r3, [r1, #12]
 800cb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb80:	079d      	lsls	r5, r3, #30
 800cb82:	4606      	mov	r6, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d507      	bpl.n	800cb98 <__smakebuf_r+0x1c>
 800cb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	2301      	movs	r3, #1
 800cb92:	6163      	str	r3, [r4, #20]
 800cb94:	b002      	add	sp, #8
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	ab01      	add	r3, sp, #4
 800cb9a:	466a      	mov	r2, sp
 800cb9c:	f7ff ffc8 	bl	800cb30 <__swhatbuf_r>
 800cba0:	9900      	ldr	r1, [sp, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7fd f9f7 	bl	8009f98 <_malloc_r>
 800cbaa:	b948      	cbnz	r0, 800cbc0 <__smakebuf_r+0x44>
 800cbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb0:	059a      	lsls	r2, r3, #22
 800cbb2:	d4ef      	bmi.n	800cb94 <__smakebuf_r+0x18>
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	f043 0302 	orr.w	r3, r3, #2
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	e7e3      	b.n	800cb88 <__smakebuf_r+0xc>
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	6020      	str	r0, [r4, #0]
 800cbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	9b00      	ldr	r3, [sp, #0]
 800cbcc:	6163      	str	r3, [r4, #20]
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	6120      	str	r0, [r4, #16]
 800cbd2:	b15b      	cbz	r3, 800cbec <__smakebuf_r+0x70>
 800cbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 f81d 	bl	800cc18 <_isatty_r>
 800cbde:	b128      	cbz	r0, 800cbec <__smakebuf_r+0x70>
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	f023 0303 	bic.w	r3, r3, #3
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	431d      	orrs	r5, r3
 800cbf0:	81a5      	strh	r5, [r4, #12]
 800cbf2:	e7cf      	b.n	800cb94 <__smakebuf_r+0x18>

0800cbf4 <_fstat_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	4d07      	ldr	r5, [pc, #28]	; (800cc14 <_fstat_r+0x20>)
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	4611      	mov	r1, r2
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	f7f6 f920 	bl	8002e46 <_fstat>
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	d102      	bne.n	800cc10 <_fstat_r+0x1c>
 800cc0a:	682b      	ldr	r3, [r5, #0]
 800cc0c:	b103      	cbz	r3, 800cc10 <_fstat_r+0x1c>
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	bd38      	pop	{r3, r4, r5, pc}
 800cc12:	bf00      	nop
 800cc14:	200025d4 	.word	0x200025d4

0800cc18 <_isatty_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4d06      	ldr	r5, [pc, #24]	; (800cc34 <_isatty_r+0x1c>)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	602b      	str	r3, [r5, #0]
 800cc24:	f7f6 f91f 	bl	8002e66 <_isatty>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	d102      	bne.n	800cc32 <_isatty_r+0x1a>
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	b103      	cbz	r3, 800cc32 <_isatty_r+0x1a>
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	200025d4 	.word	0x200025d4

0800cc38 <_init>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	bf00      	nop
 800cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3e:	bc08      	pop	{r3}
 800cc40:	469e      	mov	lr, r3
 800cc42:	4770      	bx	lr

0800cc44 <_fini>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	bf00      	nop
 800cc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4a:	bc08      	pop	{r3}
 800cc4c:	469e      	mov	lr, r3
 800cc4e:	4770      	bx	lr
