
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001718  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080018d4  080018d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080019a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080019a0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000428a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000103c  00000000  00000000  00024359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  00025398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000040c  00000000  00000000  00025930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014b4  00000000  00000000  00025d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061ec  00000000  00000000  000271f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f923f  00000000  00000000  0002d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001740  00000000  00000000  0012661c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00127d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000005c 	.word	0x2000005c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080018bc 	.word	0x080018bc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000060 	.word	0x20000060
 80001f8:	080018bc 	.word	0x080018bc

080001fc <cMax>:
 *  Created on: Sep 11, 2023
 *      Author: Theo
 */
#include "main.h"

void cMax(float *array, uint32_t size, float *max, uint32_t *maxIndex){
 80001fc:	b480      	push	{r7}
 80001fe:	b087      	sub	sp, #28
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
 8000208:	603b      	str	r3, [r7, #0]
	(*max) = array[0];
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
	(*maxIndex) = 0;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]

	// Loop through all elements in array
	for (uint32_t i = 1; i < size; i++) {
 8000218:	2301      	movs	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	e01a      	b.n	8000254 <cMax+0x58>
			// If a new value is greater than max, set it as max
			if (array[i] > (*max)) {
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	4413      	add	r3, r2
 8000226:	ed93 7a00 	vldr	s14, [r3]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	edd3 7a00 	vldr	s15, [r3]
 8000230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000238:	dd09      	ble.n	800024e <cMax+0x52>
				(*max) = array[i];
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	4413      	add	r3, r2
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	601a      	str	r2, [r3, #0]
				(*maxIndex) = i;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	697a      	ldr	r2, [r7, #20]
 800024c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 1; i < size; i++) {
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	3301      	adds	r3, #1
 8000252:	617b      	str	r3, [r7, #20]
 8000254:	697a      	ldr	r2, [r7, #20]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3e0      	bcc.n	800021e <cMax+0x22>
			} // if
		} // for
} //cmax
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	371c      	adds	r7, #28
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b5b0      	push	{r4, r5, r7, lr}
 800026e:	b092      	sub	sp, #72	; 0x48
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 f96c 	bl	800054e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f83b 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f88b 	bl	8000394 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //====================================================
  //first part of lab
  // define our variables and array
  float max = 0;
 800027e:	f04f 0300 	mov.w	r3, #0
 8000282:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t maxIndex;
  // the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <main+0x7c>)
 8000286:	1d3c      	adds	r4, r7, #4
 8000288:	461d      	mov	r5, r3
 800028a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000296:	e884 0003 	stmia.w	r4, {r0, r1}
  //====================================================

  // Assign values to input parameters
  float32_t input = 0.5;
 800029a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800029e:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t omega = 2;
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t phi = 4;
 80002a6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t* output = malloc(sizeof(float32_t));
 80002ac:	2004      	movs	r0, #4
 80002ae:	f001 fa0d 	bl	80016cc <malloc>
 80002b2:	4603      	mov	r3, r0
 80002b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* USER CODE BEGIN 3 */


//=============MAX CMSIS-DSP=======================================
	ITM_Port32(31) = 1;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <main+0x80>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	647b      	str	r3, [r7, #68]	; 0x44
 80002c0:	e00a      	b.n	80002d8 <main+0x6c>
		cMax(&array, 10, &max, &maxIndex);
 80002c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80002ca:	1d38      	adds	r0, r7, #4
 80002cc:	210a      	movs	r1, #10
 80002ce:	f7ff ff95 	bl	80001fc <cMax>
	for (uint32_t i=0; i<1000; i++)
 80002d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002d4:	3301      	adds	r3, #1
 80002d6:	647b      	str	r3, [r7, #68]	; 0x44
 80002d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002de:	d3f0      	bcc.n	80002c2 <main+0x56>
	ITM_Port32(31) = 2;
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <main+0x80>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
	ITM_Port32(31) = 1;
 80002e6:	e7e6      	b.n	80002b6 <main+0x4a>
 80002e8:	080018d4 	.word	0x080018d4
 80002ec:	e000007c 	.word	0xe000007c

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fa98 	bl	8001834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fa96 	bl	8000844 <HAL_PWREx_ControlVoltageScaling>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800031e:	f000 f851 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000322:	2310      	movs	r3, #16
 8000324:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800032e:	2360      	movs	r3, #96	; 0x60
 8000330:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000336:	2301      	movs	r3, #1
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033a:	2301      	movs	r3, #1
 800033c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800033e:	233c      	movs	r3, #60	; 0x3c
 8000340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fb1a 	bl	800098c <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035e:	f000 f831 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	2105      	movs	r1, #5
 800037a:	4618      	mov	r0, r3
 800037c:	f000 ff20 	bl	80011c0 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000386:	f000 f81d 	bl	80003c4 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3758      	adds	r7, #88	; 0x58
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_GPIO_Init+0x2c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <MX_GPIO_Init+0x2c>)
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_GPIO_Init+0x2c>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	f003 0302 	and.w	r3, r3, #2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x44>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6613      	str	r3, [r2, #96]	; 0x60
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x44>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <HAL_MspInit+0x44>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <HAL_MspInit+0x44>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	6593      	str	r3, [r2, #88]	; 0x58
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_MspInit+0x44>)
 80003fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler+0x4>

0800041e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <MemManage_Handler+0x4>

0800042a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler+0x4>

08000436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000464:	f000 f8c8 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <_sbrk+0x5c>)
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <_sbrk+0x60>)
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x64>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <_sbrk+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <_sbrk+0x64>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	429a      	cmp	r2, r3
 800049a:	d207      	bcs.n	80004ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800049c:	f001 f9e2 	bl	8001864 <__errno>
 80004a0:	4603      	mov	r3, r0
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e009      	b.n	80004c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <_sbrk+0x64>)
 80004bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200a0000 	.word	0x200a0000
 80004cc:	00000400 	.word	0x00000400
 80004d0:	20000078 	.word	0x20000078
 80004d4:	200001c8 	.word	0x200001c8

080004d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SystemInit+0x20>)
 80004de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <SystemInit+0x20>)
 80004e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000500:	f7ff ffea 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052a:	f001 f9a1 	bl	8001870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800052e:	f7ff fe9d 	bl	800026c <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000534:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000540:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000544:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000548:	200001c8 	.word	0x200001c8

0800054c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_IRQHandler>

0800054e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f91f 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f80e 	bl	8000580 <HAL_InitTick>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	e001      	b.n	8000574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000570:	f7ff ff2e 	bl	80003d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_InitTick+0x6c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d023      	beq.n	80005dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_InitTick+0x70>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_InitTick+0x6c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f91d 	bl	80007ea <HAL_SYSTICK_Config>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d10f      	bne.n	80005d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d809      	bhi.n	80005d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005bc:	2200      	movs	r2, #0
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f000 f8f5 	bl	80007b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <HAL_InitTick+0x74>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e007      	b.n	80005e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e004      	b.n	80005e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e001      	b.n	80005e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_IncTick+0x20>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x24>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_IncTick+0x24>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008
 800061c:	2000007c 	.word	0x2000007c

08000620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return uwTick;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_GetTick+0x14>)
 8000626:	681b      	ldr	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000007c 	.word	0x2000007c

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff47 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5c 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_PWREx_GetVoltageRange+0x3c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000814:	d102      	bne.n	800081c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	e00b      	b.n	8000834 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_PWREx_GetVoltageRange+0x3c>)
 800081e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800082a:	d102      	bne.n	8000832 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	e000      	b.n	8000834 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000832:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40007000 	.word	0x40007000

08000844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d141      	bne.n	80008d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000852:	4b4b      	ldr	r3, [pc, #300]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800085a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800085e:	d131      	bne.n	80008c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000860:	4b47      	ldr	r3, [pc, #284]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000866:	4a46      	ldr	r2, [pc, #280]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800086c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	4b43      	ldr	r3, [pc, #268]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000878:	4a41      	ldr	r2, [pc, #260]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2232      	movs	r2, #50	; 0x32
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a3f      	ldr	r2, [pc, #252]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800088c:	fba2 2303 	umull	r2, r3, r2, r3
 8000890:	0c9b      	lsrs	r3, r3, #18
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000896:	e002      	b.n	800089e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3b01      	subs	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008aa:	d102      	bne.n	80008b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f2      	bne.n	8000898 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008be:	d158      	bne.n	8000972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80008c0:	2303      	movs	r3, #3
 80008c2:	e057      	b.n	8000974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ca:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80008d4:	e04d      	b.n	8000972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008dc:	d141      	bne.n	8000962 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ea:	d131      	bne.n	8000950 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2232      	movs	r2, #50	; 0x32
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000922:	e002      	b.n	800092a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3b01      	subs	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000936:	d102      	bne.n	800093e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f2      	bne.n	8000924 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094a:	d112      	bne.n	8000972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800094c:	2303      	movs	r3, #3
 800094e:	e011      	b.n	8000974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000960:	e007      	b.n	8000972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800096c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000970:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40007000 	.word	0x40007000
 8000984:	20000000 	.word	0x20000000
 8000988:	431bde83 	.word	0x431bde83

0800098c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f000 bc08 	b.w	80011b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a0:	4b96      	ldr	r3, [pc, #600]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009aa:	4b94      	ldr	r3, [pc, #592]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 80e4 	beq.w	8000b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0x4c>
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2b0c      	cmp	r3, #12
 80009cc:	f040 808b 	bne.w	8000ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	f040 8087 	bne.w	8000ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009d8:	4b88      	ldr	r3, [pc, #544]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d005      	beq.n	80009f0 <HAL_RCC_OscConfig+0x64>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e3df      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a1a      	ldr	r2, [r3, #32]
 80009f4:	4b81      	ldr	r3, [pc, #516]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <HAL_RCC_OscConfig+0x7e>
 8000a00:	4b7e      	ldr	r3, [pc, #504]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a08:	e005      	b.n	8000a16 <HAL_RCC_OscConfig+0x8a>
 8000a0a:	4b7c      	ldr	r3, [pc, #496]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a10:	091b      	lsrs	r3, r3, #4
 8000a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d223      	bcs.n	8000a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fd94 	bl	800154c <RCC_SetFlashLatencyFromMSIRange>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e3c0      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a2e:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a72      	ldr	r2, [pc, #456]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	4b70      	ldr	r3, [pc, #448]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	496d      	ldr	r1, [pc, #436]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a4c:	4b6b      	ldr	r3, [pc, #428]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	4968      	ldr	r1, [pc, #416]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	604b      	str	r3, [r1, #4]
 8000a60:	e025      	b.n	8000aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a62:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a65      	ldr	r2, [pc, #404]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	4960      	ldr	r1, [pc, #384]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a80:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	495b      	ldr	r1, [pc, #364]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d109      	bne.n	8000aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fd54 	bl	800154c <RCC_SetFlashLatencyFromMSIRange>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e380      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000aae:	f000 fcc1 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	4b51      	ldr	r3, [pc, #324]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	091b      	lsrs	r3, r3, #4
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	4950      	ldr	r1, [pc, #320]	; (8000c00 <HAL_RCC_OscConfig+0x274>)
 8000ac0:	5ccb      	ldrb	r3, [r1, r3]
 8000ac2:	f003 031f 	and.w	r3, r3, #31
 8000ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aca:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_RCC_OscConfig+0x278>)
 8000acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ace:	4b4e      	ldr	r3, [pc, #312]	; (8000c08 <HAL_RCC_OscConfig+0x27c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd54 	bl	8000580 <HAL_InitTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d052      	beq.n	8000b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	e364      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d032      	beq.n	8000b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000aee:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a42      	ldr	r2, [pc, #264]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000afa:	f7ff fd91 	bl	8000620 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b02:	f7ff fd8d 	bl	8000620 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e34d      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f0      	beq.n	8000b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a35      	ldr	r2, [pc, #212]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	4930      	ldr	r1, [pc, #192]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	492b      	ldr	r1, [pc, #172]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	604b      	str	r3, [r1, #4]
 8000b52:	e01a      	b.n	8000b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd5e 	bl	8000620 <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b68:	f7ff fd5a 	bl	8000620 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e31a      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x1dc>
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d073      	beq.n	8000c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d005      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x21c>
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2b0c      	cmp	r3, #12
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d063      	beq.n	8000c7c <HAL_RCC_OscConfig+0x2f0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d15f      	bne.n	8000c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e2f7      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d106      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x24c>
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e025      	b.n	8000c24 <HAL_RCC_OscConfig+0x298>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be0:	d114      	bne.n	8000c0c <HAL_RCC_OscConfig+0x280>
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a02      	ldr	r2, [pc, #8]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e013      	b.n	8000c24 <HAL_RCC_OscConfig+0x298>
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	080018fc 	.word	0x080018fc
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	4ba0      	ldr	r3, [pc, #640]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a9f      	ldr	r2, [pc, #636]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b9d      	ldr	r3, [pc, #628]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a9c      	ldr	r2, [pc, #624]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d013      	beq.n	8000c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fcf8 	bl	8000620 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fcf4 	bl	8000620 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e2b4      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c46:	4b92      	ldr	r3, [pc, #584]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f0      	beq.n	8000c34 <HAL_RCC_OscConfig+0x2a8>
 8000c52:	e014      	b.n	8000c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c54:	f7ff fce4 	bl	8000620 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fce0 	bl	8000620 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e2a0      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x2d0>
 8000c7a:	e000      	b.n	8000c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d060      	beq.n	8000d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d005      	beq.n	8000c9c <HAL_RCC_OscConfig+0x310>
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2b0c      	cmp	r3, #12
 8000c94:	d119      	bne.n	8000cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d116      	bne.n	8000cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c9c:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x328>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e27d      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb4:	4b76      	ldr	r3, [pc, #472]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	061b      	lsls	r3, r3, #24
 8000cc2:	4973      	ldr	r1, [pc, #460]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cc8:	e040      	b.n	8000d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d023      	beq.n	8000d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd2:	4b6f      	ldr	r3, [pc, #444]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6e      	ldr	r2, [pc, #440]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cde:	f7ff fc9f 	bl	8000620 <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fc9b 	bl	8000620 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e25b      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cf8:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f0      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d04:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	061b      	lsls	r3, r3, #24
 8000d12:	495f      	ldr	r1, [pc, #380]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	604b      	str	r3, [r1, #4]
 8000d18:	e018      	b.n	8000d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a5c      	ldr	r2, [pc, #368]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d26:	f7ff fc7b 	bl	8000620 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fc77 	bl	8000620 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e237      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d40:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f0      	bne.n	8000d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d03c      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d01c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc56 	bl	8000620 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc52 	bl	8000620 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e212      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0ef      	beq.n	8000d78 <HAL_RCC_OscConfig+0x3ec>
 8000d98:	e01b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000daa:	f7ff fc39 	bl	8000620 <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db2:	f7ff fc35 	bl	8000620 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e1f5      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1ef      	bne.n	8000db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80a6 	beq.w	8000f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10d      	bne.n	8000e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_RCC_OscConfig+0x508>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d118      	bne.n	8000e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_RCC_OscConfig+0x508>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_RCC_OscConfig+0x508>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fbfc 	bl	8000620 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2c:	f7ff fbf8 	bl	8000620 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e1b8      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_RCC_OscConfig+0x508>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <HAL_RCC_OscConfig+0x4d8>
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e62:	e029      	b.n	8000eb8 <HAL_RCC_OscConfig+0x52c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d115      	bne.n	8000e98 <HAL_RCC_OscConfig+0x50c>
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e82:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <HAL_RCC_OscConfig+0x504>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x52c>
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40007000 	.word	0x40007000
 8000e98:	4b9d      	ldr	r3, [pc, #628]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9e:	4a9c      	ldr	r2, [pc, #624]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ea8:	4b99      	ldr	r3, [pc, #612]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eae:	4a98      	ldr	r2, [pc, #608]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d016      	beq.n	8000eee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fbae 	bl	8000620 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ec6:	e00a      	b.n	8000ede <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fbaa 	bl	8000620 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e168      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ede:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0ed      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x53c>
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eee:	f7ff fb97 	bl	8000620 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fb93 	bl	8000620 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e151      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f0c:	4b80      	ldr	r3, [pc, #512]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ed      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d105      	bne.n	8000f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f20:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	4a7a      	ldr	r2, [pc, #488]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0320 	and.w	r3, r3, #32
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d03c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f46:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fb66 	bl	8000620 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f58:	f7ff fb62 	bl	8000620 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e122      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ef      	beq.n	8000f58 <HAL_RCC_OscConfig+0x5cc>
 8000f78:	e01b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f7a:	4b65      	ldr	r3, [pc, #404]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f80:	4a63      	ldr	r2, [pc, #396]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb49 	bl	8000620 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f92:	f7ff fb45 	bl	8000620 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e105      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fa4:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1ef      	bne.n	8000f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80f9 	beq.w	80011ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	f040 80cf 	bne.w	8001164 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d12c      	bne.n	8001034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d123      	bne.n	8001034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d11b      	bne.n	8001034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001008:	429a      	cmp	r2, r3
 800100a:	d113      	bne.n	8001034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001016:	085b      	lsrs	r3, r3, #1
 8001018:	3b01      	subs	r3, #1
 800101a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800101c:	429a      	cmp	r2, r3
 800101e:	d109      	bne.n	8001034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	085b      	lsrs	r3, r3, #1
 800102c:	3b01      	subs	r3, #1
 800102e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001030:	429a      	cmp	r2, r3
 8001032:	d071      	beq.n	8001118 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	d068      	beq.n	800110c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0ac      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 800105c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001060:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001062:	f7ff fadd 	bl	8000620 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fad9 	bl	8000620 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e099      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_RCC_OscConfig+0x788>)
 800108e:	4013      	ands	r3, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001098:	3a01      	subs	r2, #1
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	4311      	orrs	r1, r2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010a2:	0212      	lsls	r2, r2, #8
 80010a4:	4311      	orrs	r1, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010aa:	0852      	lsrs	r2, r2, #1
 80010ac:	3a01      	subs	r2, #1
 80010ae:	0552      	lsls	r2, r2, #21
 80010b0:	4311      	orrs	r1, r2
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010b6:	0852      	lsrs	r2, r2, #1
 80010b8:	3a01      	subs	r2, #1
 80010ba:	0652      	lsls	r2, r2, #25
 80010bc:	4311      	orrs	r1, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010c2:	06d2      	lsls	r2, r2, #27
 80010c4:	430a      	orrs	r2, r1
 80010c6:	4912      	ldr	r1, [pc, #72]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 80010d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 80010de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010e4:	f7ff fa9c 	bl	8000620 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fa98 	bl	8000620 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e058      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_RCC_OscConfig+0x784>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800110a:	e050      	b.n	80011ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e04f      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
 8001110:	40021000 	.word	0x40021000
 8001114:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d144      	bne.n	80011ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 800112a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800112e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800113a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800113c:	f7ff fa70 	bl	8000620 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fa6c 	bl	8000620 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e02c      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x7b8>
 8001162:	e024      	b.n	80011ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b0c      	cmp	r3, #12
 8001168:	d01f      	beq.n	80011aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001176:	f7ff fa53 	bl	8000620 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fa4f 	bl	8000620 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e00f      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	4905      	ldr	r1, [pc, #20]	; (80011b8 <HAL_RCC_OscConfig+0x82c>)
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x830>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
 80011a8:	e001      	b.n	80011ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	feeefffc 	.word	0xfeeefffc

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e11d      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b90      	ldr	r3, [pc, #576]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d910      	bls.n	8001208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b8d      	ldr	r3, [pc, #564]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 020f 	bic.w	r2, r3, #15
 80011ee:	498b      	ldr	r1, [pc, #556]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b89      	ldr	r3, [pc, #548]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e105      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d010      	beq.n	8001236 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001220:	429a      	cmp	r2, r3
 8001222:	d908      	bls.n	8001236 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001224:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	497b      	ldr	r1, [pc, #492]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d079      	beq.n	8001336 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d11e      	bne.n	8001288 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800124a:	4b75      	ldr	r3, [pc, #468]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0dc      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800125a:	f000 f9d1 	bl	8001600 <RCC_GetSysClockFreqFromPLLSource>
 800125e:	4603      	mov	r3, r0
 8001260:	4a70      	ldr	r2, [pc, #448]	; (8001424 <HAL_RCC_ClockConfig+0x264>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d946      	bls.n	80012f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d140      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001272:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127a:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e035      	b.n	80012f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d107      	bne.n	80012a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001290:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d115      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b9      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0ad      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0a5      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80012c8:	f000 f8b4 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_RCC_ClockConfig+0x264>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d90f      	bls.n	80012f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80012d4:	4b52      	ldr	r3, [pc, #328]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012e8:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f023 0203 	bic.w	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4947      	ldr	r1, [pc, #284]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001306:	f7ff f98b 	bl	8000620 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130c:	e00a      	b.n	8001324 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130e:	f7ff f987 	bl	8000620 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e077      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 020c 	and.w	r2, r3, #12
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	429a      	cmp	r2, r3
 8001334:	d1eb      	bne.n	800130e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b80      	cmp	r3, #128	; 0x80
 800133a:	d105      	bne.n	8001348 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a37      	ldr	r2, [pc, #220]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001346:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d010      	beq.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	429a      	cmp	r2, r3
 8001362:	d208      	bcs.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	492b      	ldr	r1, [pc, #172]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d210      	bcs.n	80013a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 020f 	bic.w	r2, r3, #15
 800138c:	4923      	ldr	r1, [pc, #140]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_RCC_ClockConfig+0x25c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e036      	b.n	8001414 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4918      	ldr	r1, [pc, #96]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4910      	ldr	r1, [pc, #64]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013e4:	f000 f826 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_RCC_ClockConfig+0x260>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <HAL_RCC_ClockConfig+0x268>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_RCC_ClockConfig+0x26c>)
 8001402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8b9 	bl	8000580 <HAL_InitTick>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]

  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40022000 	.word	0x40022000
 8001420:	40021000 	.word	0x40021000
 8001424:	04c4b400 	.word	0x04c4b400
 8001428:	080018fc 	.word	0x080018fc
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x34>
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d121      	bne.n	80014a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d11e      	bne.n	80014a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 8001476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	e005      	b.n	8001490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001490:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_RCC_GetSysClockFreq+0x110>)
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	e004      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_RCC_GetSysClockFreq+0x114>)
 80014ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d134      	bne.n	800152c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0xa6>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d003      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0xac>
 80014d8:	e005      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_GetSysClockFreq+0x110>)
 80014dc:	617b      	str	r3, [r7, #20]
      break;
 80014de:	e005      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_RCC_GetSysClockFreq+0x114>)
 80014e2:	617b      	str	r3, [r7, #20]
      break;
 80014e4:	e002      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	617b      	str	r3, [r7, #20]
      break;
 80014ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3301      	adds	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	fb03 f202 	mul.w	r2, r3, r2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_RCC_GetSysClockFreq+0x108>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	0e5b      	lsrs	r3, r3, #25
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	3301      	adds	r3, #1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800152c:	69bb      	ldr	r3, [r7, #24]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	0800190c 	.word	0x0800190c
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200

0800154c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001564:	f7ff f94e 	bl	8000804 <HAL_PWREx_GetVoltageRange>
 8001568:	6178      	str	r0, [r7, #20]
 800156a:	e014      	b.n	8001596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001584:	f7ff f93e 	bl	8000804 <HAL_PWREx_GetVoltageRange>
 8001588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159c:	d10b      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b80      	cmp	r3, #128	; 0x80
 80015a2:	d913      	bls.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2ba0      	cmp	r3, #160	; 0xa0
 80015a8:	d902      	bls.n	80015b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80015aa:	2302      	movs	r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e00d      	b.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e00a      	b.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ba:	d902      	bls.n	80015c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	e004      	b.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b70      	cmp	r3, #112	; 0x70
 80015c6:	d101      	bne.n	80015cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015c8:	2301      	movs	r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 020f 	bic.w	r2, r3, #15
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40022000 	.word	0x40022000

08001600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d00b      	beq.n	800162e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d825      	bhi.n	8001668 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d008      	beq.n	8001634 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d11f      	bne.n	8001668 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800162a:	613b      	str	r3, [r7, #16]
    break;
 800162c:	e01f      	b.n	800166e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001630:	613b      	str	r3, [r7, #16]
    break;
 8001632:	e01c      	b.n	800166e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e005      	b.n	800165c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800165c:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	613b      	str	r3, [r7, #16]
    break;
 8001666:	e002      	b.n	800166e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
    break;
 800166c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	fb03 f202 	mul.w	r2, r3, r2
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0e5b      	lsrs	r3, r3, #25
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	3301      	adds	r3, #1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80016ae:	683b      	ldr	r3, [r7, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	00f42400 	.word	0x00f42400
 80016c4:	007a1200 	.word	0x007a1200
 80016c8:	0800190c 	.word	0x0800190c

080016cc <malloc>:
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <malloc+0xc>)
 80016ce:	4601      	mov	r1, r0
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	f000 b823 	b.w	800171c <_malloc_r>
 80016d6:	bf00      	nop
 80016d8:	20000058 	.word	0x20000058

080016dc <sbrk_aligned>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	4e0e      	ldr	r6, [pc, #56]	; (8001718 <sbrk_aligned+0x3c>)
 80016e0:	460c      	mov	r4, r1
 80016e2:	6831      	ldr	r1, [r6, #0]
 80016e4:	4605      	mov	r5, r0
 80016e6:	b911      	cbnz	r1, 80016ee <sbrk_aligned+0x12>
 80016e8:	f000 f8ac 	bl	8001844 <_sbrk_r>
 80016ec:	6030      	str	r0, [r6, #0]
 80016ee:	4621      	mov	r1, r4
 80016f0:	4628      	mov	r0, r5
 80016f2:	f000 f8a7 	bl	8001844 <_sbrk_r>
 80016f6:	1c43      	adds	r3, r0, #1
 80016f8:	d00a      	beq.n	8001710 <sbrk_aligned+0x34>
 80016fa:	1cc4      	adds	r4, r0, #3
 80016fc:	f024 0403 	bic.w	r4, r4, #3
 8001700:	42a0      	cmp	r0, r4
 8001702:	d007      	beq.n	8001714 <sbrk_aligned+0x38>
 8001704:	1a21      	subs	r1, r4, r0
 8001706:	4628      	mov	r0, r5
 8001708:	f000 f89c 	bl	8001844 <_sbrk_r>
 800170c:	3001      	adds	r0, #1
 800170e:	d101      	bne.n	8001714 <sbrk_aligned+0x38>
 8001710:	f04f 34ff 	mov.w	r4, #4294967295
 8001714:	4620      	mov	r0, r4
 8001716:	bd70      	pop	{r4, r5, r6, pc}
 8001718:	20000084 	.word	0x20000084

0800171c <_malloc_r>:
 800171c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001720:	1ccd      	adds	r5, r1, #3
 8001722:	f025 0503 	bic.w	r5, r5, #3
 8001726:	3508      	adds	r5, #8
 8001728:	2d0c      	cmp	r5, #12
 800172a:	bf38      	it	cc
 800172c:	250c      	movcc	r5, #12
 800172e:	2d00      	cmp	r5, #0
 8001730:	4607      	mov	r7, r0
 8001732:	db01      	blt.n	8001738 <_malloc_r+0x1c>
 8001734:	42a9      	cmp	r1, r5
 8001736:	d905      	bls.n	8001744 <_malloc_r+0x28>
 8001738:	230c      	movs	r3, #12
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	2600      	movs	r6, #0
 800173e:	4630      	mov	r0, r6
 8001740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001818 <_malloc_r+0xfc>
 8001748:	f000 f868 	bl	800181c <__malloc_lock>
 800174c:	f8d8 3000 	ldr.w	r3, [r8]
 8001750:	461c      	mov	r4, r3
 8001752:	bb5c      	cbnz	r4, 80017ac <_malloc_r+0x90>
 8001754:	4629      	mov	r1, r5
 8001756:	4638      	mov	r0, r7
 8001758:	f7ff ffc0 	bl	80016dc <sbrk_aligned>
 800175c:	1c43      	adds	r3, r0, #1
 800175e:	4604      	mov	r4, r0
 8001760:	d155      	bne.n	800180e <_malloc_r+0xf2>
 8001762:	f8d8 4000 	ldr.w	r4, [r8]
 8001766:	4626      	mov	r6, r4
 8001768:	2e00      	cmp	r6, #0
 800176a:	d145      	bne.n	80017f8 <_malloc_r+0xdc>
 800176c:	2c00      	cmp	r4, #0
 800176e:	d048      	beq.n	8001802 <_malloc_r+0xe6>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	4631      	mov	r1, r6
 8001774:	4638      	mov	r0, r7
 8001776:	eb04 0903 	add.w	r9, r4, r3
 800177a:	f000 f863 	bl	8001844 <_sbrk_r>
 800177e:	4581      	cmp	r9, r0
 8001780:	d13f      	bne.n	8001802 <_malloc_r+0xe6>
 8001782:	6821      	ldr	r1, [r4, #0]
 8001784:	1a6d      	subs	r5, r5, r1
 8001786:	4629      	mov	r1, r5
 8001788:	4638      	mov	r0, r7
 800178a:	f7ff ffa7 	bl	80016dc <sbrk_aligned>
 800178e:	3001      	adds	r0, #1
 8001790:	d037      	beq.n	8001802 <_malloc_r+0xe6>
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	442b      	add	r3, r5
 8001796:	6023      	str	r3, [r4, #0]
 8001798:	f8d8 3000 	ldr.w	r3, [r8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d038      	beq.n	8001812 <_malloc_r+0xf6>
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	42a2      	cmp	r2, r4
 80017a4:	d12b      	bne.n	80017fe <_malloc_r+0xe2>
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	e00f      	b.n	80017cc <_malloc_r+0xb0>
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	1b52      	subs	r2, r2, r5
 80017b0:	d41f      	bmi.n	80017f2 <_malloc_r+0xd6>
 80017b2:	2a0b      	cmp	r2, #11
 80017b4:	d917      	bls.n	80017e6 <_malloc_r+0xca>
 80017b6:	1961      	adds	r1, r4, r5
 80017b8:	42a3      	cmp	r3, r4
 80017ba:	6025      	str	r5, [r4, #0]
 80017bc:	bf18      	it	ne
 80017be:	6059      	strne	r1, [r3, #4]
 80017c0:	6863      	ldr	r3, [r4, #4]
 80017c2:	bf08      	it	eq
 80017c4:	f8c8 1000 	streq.w	r1, [r8]
 80017c8:	5162      	str	r2, [r4, r5]
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	4638      	mov	r0, r7
 80017ce:	f104 060b 	add.w	r6, r4, #11
 80017d2:	f000 f829 	bl	8001828 <__malloc_unlock>
 80017d6:	f026 0607 	bic.w	r6, r6, #7
 80017da:	1d23      	adds	r3, r4, #4
 80017dc:	1af2      	subs	r2, r6, r3
 80017de:	d0ae      	beq.n	800173e <_malloc_r+0x22>
 80017e0:	1b9b      	subs	r3, r3, r6
 80017e2:	50a3      	str	r3, [r4, r2]
 80017e4:	e7ab      	b.n	800173e <_malloc_r+0x22>
 80017e6:	42a3      	cmp	r3, r4
 80017e8:	6862      	ldr	r2, [r4, #4]
 80017ea:	d1dd      	bne.n	80017a8 <_malloc_r+0x8c>
 80017ec:	f8c8 2000 	str.w	r2, [r8]
 80017f0:	e7ec      	b.n	80017cc <_malloc_r+0xb0>
 80017f2:	4623      	mov	r3, r4
 80017f4:	6864      	ldr	r4, [r4, #4]
 80017f6:	e7ac      	b.n	8001752 <_malloc_r+0x36>
 80017f8:	4634      	mov	r4, r6
 80017fa:	6876      	ldr	r6, [r6, #4]
 80017fc:	e7b4      	b.n	8001768 <_malloc_r+0x4c>
 80017fe:	4613      	mov	r3, r2
 8001800:	e7cc      	b.n	800179c <_malloc_r+0x80>
 8001802:	230c      	movs	r3, #12
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4638      	mov	r0, r7
 8001808:	f000 f80e 	bl	8001828 <__malloc_unlock>
 800180c:	e797      	b.n	800173e <_malloc_r+0x22>
 800180e:	6025      	str	r5, [r4, #0]
 8001810:	e7dc      	b.n	80017cc <_malloc_r+0xb0>
 8001812:	605b      	str	r3, [r3, #4]
 8001814:	deff      	udf	#255	; 0xff
 8001816:	bf00      	nop
 8001818:	20000080 	.word	0x20000080

0800181c <__malloc_lock>:
 800181c:	4801      	ldr	r0, [pc, #4]	; (8001824 <__malloc_lock+0x8>)
 800181e:	f000 b84b 	b.w	80018b8 <__retarget_lock_acquire_recursive>
 8001822:	bf00      	nop
 8001824:	200001c4 	.word	0x200001c4

08001828 <__malloc_unlock>:
 8001828:	4801      	ldr	r0, [pc, #4]	; (8001830 <__malloc_unlock+0x8>)
 800182a:	f000 b846 	b.w	80018ba <__retarget_lock_release_recursive>
 800182e:	bf00      	nop
 8001830:	200001c4 	.word	0x200001c4

08001834 <memset>:
 8001834:	4402      	add	r2, r0
 8001836:	4603      	mov	r3, r0
 8001838:	4293      	cmp	r3, r2
 800183a:	d100      	bne.n	800183e <memset+0xa>
 800183c:	4770      	bx	lr
 800183e:	f803 1b01 	strb.w	r1, [r3], #1
 8001842:	e7f9      	b.n	8001838 <memset+0x4>

08001844 <_sbrk_r>:
 8001844:	b538      	push	{r3, r4, r5, lr}
 8001846:	4d06      	ldr	r5, [pc, #24]	; (8001860 <_sbrk_r+0x1c>)
 8001848:	2300      	movs	r3, #0
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	602b      	str	r3, [r5, #0]
 8001850:	f7fe fe0c 	bl	800046c <_sbrk>
 8001854:	1c43      	adds	r3, r0, #1
 8001856:	d102      	bne.n	800185e <_sbrk_r+0x1a>
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	b103      	cbz	r3, 800185e <_sbrk_r+0x1a>
 800185c:	6023      	str	r3, [r4, #0]
 800185e:	bd38      	pop	{r3, r4, r5, pc}
 8001860:	200001c0 	.word	0x200001c0

08001864 <__errno>:
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <__errno+0x8>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000058 	.word	0x20000058

08001870 <__libc_init_array>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	4d0d      	ldr	r5, [pc, #52]	; (80018a8 <__libc_init_array+0x38>)
 8001874:	4c0d      	ldr	r4, [pc, #52]	; (80018ac <__libc_init_array+0x3c>)
 8001876:	1b64      	subs	r4, r4, r5
 8001878:	10a4      	asrs	r4, r4, #2
 800187a:	2600      	movs	r6, #0
 800187c:	42a6      	cmp	r6, r4
 800187e:	d109      	bne.n	8001894 <__libc_init_array+0x24>
 8001880:	4d0b      	ldr	r5, [pc, #44]	; (80018b0 <__libc_init_array+0x40>)
 8001882:	4c0c      	ldr	r4, [pc, #48]	; (80018b4 <__libc_init_array+0x44>)
 8001884:	f000 f81a 	bl	80018bc <_init>
 8001888:	1b64      	subs	r4, r4, r5
 800188a:	10a4      	asrs	r4, r4, #2
 800188c:	2600      	movs	r6, #0
 800188e:	42a6      	cmp	r6, r4
 8001890:	d105      	bne.n	800189e <__libc_init_array+0x2e>
 8001892:	bd70      	pop	{r4, r5, r6, pc}
 8001894:	f855 3b04 	ldr.w	r3, [r5], #4
 8001898:	4798      	blx	r3
 800189a:	3601      	adds	r6, #1
 800189c:	e7ee      	b.n	800187c <__libc_init_array+0xc>
 800189e:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a2:	4798      	blx	r3
 80018a4:	3601      	adds	r6, #1
 80018a6:	e7f2      	b.n	800188e <__libc_init_array+0x1e>
 80018a8:	0800193c 	.word	0x0800193c
 80018ac:	0800193c 	.word	0x0800193c
 80018b0:	0800193c 	.word	0x0800193c
 80018b4:	08001940 	.word	0x08001940

080018b8 <__retarget_lock_acquire_recursive>:
 80018b8:	4770      	bx	lr

080018ba <__retarget_lock_release_recursive>:
 80018ba:	4770      	bx	lr

080018bc <_init>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	bf00      	nop
 80018c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c2:	bc08      	pop	{r3}
 80018c4:	469e      	mov	lr, r3
 80018c6:	4770      	bx	lr

080018c8 <_fini>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr
