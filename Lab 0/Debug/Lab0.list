
Lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024e4  080024e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e4  080024e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080024f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080024f8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5c1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e8  00000000  00000000  0002a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a5  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f9f  00000000  00000000  0002d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb7b  00000000  00000000  000561a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff613  00000000  00000000  00061d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e68  00000000  00000000  00161334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0016419c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800248c 	.word	0x0800248c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800248c 	.word	0x0800248c

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f9d3 	bl	80005aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f80a 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f8a8 	bl	800035c <MX_GPIO_Init>
  MX_TIM2_Init();
 800020c:	f000 f858 	bl	80002c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // start the timer and associated interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 8000210:	4801      	ldr	r0, [pc, #4]	; (8000218 <main+0x1c>)
 8000212:	f001 fcd1 	bl	8001bb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x1a>
 8000218:	20000028 	.word	0x20000028

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 f902 	bl	8002434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fd1e 	bl	8000c80 <HAL_PWREx_ControlVoltageScaling>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800024a:	f000 f8f1 	bl	8000430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024e:	2310      	movs	r3, #16
 8000250:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025a:	2360      	movs	r3, #96	; 0x60
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000262:	2301      	movs	r3, #1
 8000264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000266:	2301      	movs	r3, #1
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800026a:	233c      	movs	r3, #60	; 0x3c
 800026c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fda2 	bl	8000dc8 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800028a:	f000 f8d1 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2303      	movs	r3, #3
 8000294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	2105      	movs	r1, #5
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f9a8 	bl	80015fc <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002b2:	f000 f8bd 	bl	8000430 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3758      	adds	r7, #88	; 0x58
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_TIM2_Init+0x98>)
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <MX_TIM2_Init+0x98>)
 80002e8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80002ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_TIM2_Init+0x98>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_TIM2_Init+0x98>)
 80002f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80002fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_TIM2_Init+0x98>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_TIM2_Init+0x98>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000308:	4813      	ldr	r0, [pc, #76]	; (8000358 <MX_TIM2_Init+0x98>)
 800030a:	f001 fbfd 	bl	8001b08 <HAL_TIM_Base_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000314:	f000 f88c 	bl	8000430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800031c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_TIM2_Init+0x98>)
 8000326:	f001 fdb9 	bl	8001e9c <HAL_TIM_ConfigClockSource>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000330:	f000 f87e 	bl	8000430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_TIM2_Init+0x98>)
 8000342:	f001 ffd1 	bl	80022e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800034c:	f000 f870 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b23      	ldr	r3, [pc, #140]	; (8000400 <MX_GPIO_Init+0xa4>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a22      	ldr	r2, [pc, #136]	; (8000400 <MX_GPIO_Init+0xa4>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <MX_GPIO_Init+0xa4>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <MX_GPIO_Init+0xa4>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <MX_GPIO_Init+0xa4>)
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MX_GPIO_Init+0xa4>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0302 	and.w	r3, r3, #2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003aa:	f000 fc17 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003b6:	f000 fc11 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80003ba:	2320      	movs	r3, #32
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 fa70 	bl	80008b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003f2:	f000 fa61 	bl	80008b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400

08000408 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Interrupt handler for TIM2; toggle LED.
 * @retval None
 */
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000416:	f000 fbf9 	bl	8000c0c <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800041a:	2120      	movs	r1, #32
 800041c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000420:	f000 fbf4 	bl	8000c0c <HAL_GPIO_TogglePin>
 }
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	48000400 	.word	0x48000400

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x44>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6613      	str	r3, [r2, #96]	; 0x60
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x44>)
 8000450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_MspInit+0x44>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	6593      	str	r3, [r2, #88]	; 0x58
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_MspInit+0x44>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000494:	d113      	bne.n	80004be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6593      	str	r3, [r2, #88]	; 0x58
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2100      	movs	r1, #0
 80004b2:	201c      	movs	r0, #28
 80004b4:	f000 f9c9 	bl	800084a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004b8:	201c      	movs	r0, #28
 80004ba:	f000 f9e2 	bl	8000882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f89c 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <TIM2_IRQHandler+0x10>)
 8000526:	f001 fbb7 	bl	8001c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff ffea 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f001 ff5d 	bl	8002444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe37 	bl	80001fc <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000590:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	080024ec 	.word	0x080024ec
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	20000078 	.word	0x20000078

080005a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_IRQHandler>

080005aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f93d 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f80e 	bl	80005dc <HAL_InitTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005cc:	f7ff ff36 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d023      	beq.n	8000638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_InitTick+0x70>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_InitTick+0x6c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f949 	bl	800089e <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f913 	bl	800084a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <HAL_InitTick+0x74>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e007      	b.n	800063c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e001      	b.n	800063c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000008 	.word	0x20000008
 800064c:	20000000 	.word	0x20000000
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008
 8000678:	20000074 	.word	0x20000074

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000074 	.word	0x20000074

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 021f 	and.w	r2, r3, #31
 8000710:	4907      	ldr	r1, [pc, #28]	; (8000730 <__NVIC_EnableIRQ+0x38>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff8e 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff29 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff3e 	bl	80006dc <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff8e 	bl	8000788 <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5d 	bl	8000734 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff31 	bl	80006f8 <__NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffa2 	bl	80007f0 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	e166      	b.n	8000b96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8158 	beq.w	8000b90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_Init+0x40>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d130      	bne.n	800095a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800092e:	2201      	movs	r2, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	f003 0201 	and.w	r2, r3, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	2b03      	cmp	r3, #3
 8000964:	d017      	beq.n	8000996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d123      	bne.n	80009ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	6939      	ldr	r1, [r7, #16]
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0203 	and.w	r2, r3, #3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 80b2 	beq.w	8000b90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a30:	4a60      	ldr	r2, [pc, #384]	; (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6613      	str	r3, [r2, #96]	; 0x60
 8000a38:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a44:	4a5c      	ldr	r2, [pc, #368]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a6e:	d02b      	beq.n	8000ac8 <HAL_GPIO_Init+0x210>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a52      	ldr	r2, [pc, #328]	; (8000bbc <HAL_GPIO_Init+0x304>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d025      	beq.n	8000ac4 <HAL_GPIO_Init+0x20c>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a51      	ldr	r2, [pc, #324]	; (8000bc0 <HAL_GPIO_Init+0x308>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d01f      	beq.n	8000ac0 <HAL_GPIO_Init+0x208>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a50      	ldr	r2, [pc, #320]	; (8000bc4 <HAL_GPIO_Init+0x30c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d019      	beq.n	8000abc <HAL_GPIO_Init+0x204>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4f      	ldr	r2, [pc, #316]	; (8000bc8 <HAL_GPIO_Init+0x310>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d013      	beq.n	8000ab8 <HAL_GPIO_Init+0x200>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4e      	ldr	r2, [pc, #312]	; (8000bcc <HAL_GPIO_Init+0x314>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d00d      	beq.n	8000ab4 <HAL_GPIO_Init+0x1fc>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	; (8000bd0 <HAL_GPIO_Init+0x318>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d007      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f8>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_GPIO_Init+0x31c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d101      	bne.n	8000aac <HAL_GPIO_Init+0x1f4>
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	e00e      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000aac:	2308      	movs	r3, #8
 8000aae:	e00c      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	e00a      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	e008      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x212>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ada:	4937      	ldr	r1, [pc, #220]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_GPIO_Init+0x320>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f47f ae91 	bne.w	80008c8 <HAL_GPIO_Init+0x10>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	48001000 	.word	0x48001000
 8000bcc:	48001400 	.word	0x48001400
 8000bd0:	48001800 	.word	0x48001800
 8000bd4:	48001c00 	.word	0x48001c00
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4013      	ands	r3, r2
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43d9      	mvns	r1, r3
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c50:	d102      	bne.n	8000c58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	e00b      	b.n	8000c70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c66:	d102      	bne.n	8000c6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6c:	e000      	b.n	8000c70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000c6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000

08000c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d141      	bne.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9a:	d131      	bne.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c9c:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb4:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2232      	movs	r2, #50	; 0x32
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	0c9b      	lsrs	r3, r3, #18
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd2:	e002      	b.n	8000cda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d102      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f2      	bne.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfa:	d158      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e057      	b.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d10:	e04d      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d18:	d141      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d131      	bne.n	8000d8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2232      	movs	r2, #50	; 0x32
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	0c9b      	lsrs	r3, r3, #18
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d5e:	e002      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d72:	d102      	bne.n	8000d7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f2      	bne.n	8000d60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d86:	d112      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e011      	b.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d9c:	e007      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40007000 	.word	0x40007000
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	431bde83 	.word	0x431bde83

08000dc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f000 bc08 	b.w	80015ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ddc:	4b96      	ldr	r3, [pc, #600]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000de6:	4b94      	ldr	r3, [pc, #592]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80e4 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <HAL_RCC_OscConfig+0x4c>
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	2b0c      	cmp	r3, #12
 8000e08:	f040 808b 	bne.w	8000f22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	f040 8087 	bne.w	8000f22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e14:	4b88      	ldr	r3, [pc, #544]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_RCC_OscConfig+0x64>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e3df      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	4b81      	ldr	r3, [pc, #516]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_RCC_OscConfig+0x7e>
 8000e3c:	4b7e      	ldr	r3, [pc, #504]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e44:	e005      	b.n	8000e52 <HAL_RCC_OscConfig+0x8a>
 8000e46:	4b7c      	ldr	r3, [pc, #496]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d223      	bcs.n	8000e9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd94 	bl	8001988 <RCC_SetFlashLatencyFromMSIRange>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3c0      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e6a:	4b73      	ldr	r3, [pc, #460]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a72      	ldr	r2, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b70      	ldr	r3, [pc, #448]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	496d      	ldr	r1, [pc, #436]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e88:	4b6b      	ldr	r3, [pc, #428]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	4968      	ldr	r1, [pc, #416]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	604b      	str	r3, [r1, #4]
 8000e9c:	e025      	b.n	8000eea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9e:	4b66      	ldr	r3, [pc, #408]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a65      	ldr	r2, [pc, #404]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b63      	ldr	r3, [pc, #396]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4960      	ldr	r1, [pc, #384]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ebc:	4b5e      	ldr	r3, [pc, #376]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	495b      	ldr	r1, [pc, #364]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fd54 	bl	8001988 <RCC_SetFlashLatencyFromMSIRange>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e380      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000eea:	f000 fcc1 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	4950      	ldr	r1, [pc, #320]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8000efc:	5ccb      	ldrb	r3, [r1, r3]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	fa22 f303 	lsr.w	r3, r2, r3
 8000f06:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_RCC_OscConfig+0x278>)
 8000f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <HAL_RCC_OscConfig+0x27c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb64 	bl	80005dc <HAL_InitTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d052      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	e364      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d032      	beq.n	8000f90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a42      	ldr	r2, [pc, #264]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fba1 	bl	800067c <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fb9d 	bl	800067c <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e34d      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4930      	ldr	r1, [pc, #192]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	492b      	ldr	r1, [pc, #172]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
 8000f8e:	e01a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fb6e 	bl	800067c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fb6a 	bl	800067c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e31a      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x1dc>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d073      	beq.n	80010ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x21c>
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b0c      	cmp	r3, #12
 8000fdc:	d10e      	bne.n	8000ffc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d10b      	bne.n	8000ffc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d063      	beq.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d15f      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e2f7      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d106      	bne.n	8001014 <HAL_RCC_OscConfig+0x24c>
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e025      	b.n	8001060 <HAL_RCC_OscConfig+0x298>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800101c:	d114      	bne.n	8001048 <HAL_RCC_OscConfig+0x280>
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a02      	ldr	r2, [pc, #8]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e013      	b.n	8001060 <HAL_RCC_OscConfig+0x298>
 8001038:	40021000 	.word	0x40021000
 800103c:	080024a4 	.word	0x080024a4
 8001040:	20000000 	.word	0x20000000
 8001044:	20000004 	.word	0x20000004
 8001048:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a9f      	ldr	r2, [pc, #636]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b9d      	ldr	r3, [pc, #628]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a9c      	ldr	r2, [pc, #624]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fb08 	bl	800067c <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fb04 	bl	800067c <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e2b4      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001082:	4b92      	ldr	r3, [pc, #584]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0x2a8>
 800108e:	e014      	b.n	80010ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff faf4 	bl	800067c <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff faf0 	bl	800067c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e2a0      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010aa:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x2d0>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d060      	beq.n	8001188 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x310>
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d119      	bne.n	8001106 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d116      	bne.n	8001106 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d8:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_OscConfig+0x328>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e27d      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	061b      	lsls	r3, r3, #24
 80010fe:	4973      	ldr	r1, [pc, #460]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	e040      	b.n	8001188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d023      	beq.n	8001156 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110e:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff faaf 	bl	800067c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff faab 	bl	800067c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e25b      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	061b      	lsls	r3, r3, #24
 800114e:	495f      	ldr	r1, [pc, #380]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e018      	b.n	8001188 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a5c      	ldr	r2, [pc, #368]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800115c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fa8b 	bl	800067c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fa87 	bl	800067c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e237      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03c      	beq.n	800120e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800119e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a2:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fa66 	bl	800067c <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fa62 	bl	800067c <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e212      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80011c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ef      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3ec>
 80011d4:	e01b      	b.n	800120e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011dc:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e6:	f7ff fa49 	bl	800067c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ee:	f7ff fa45 	bl	800067c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1f5      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ef      	bne.n	80011ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80a6 	beq.w	8001368 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10d      	bne.n	8001248 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001244:	2301      	movs	r3, #1
 8001246:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_RCC_OscConfig+0x508>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d118      	bne.n	8001286 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_OscConfig+0x508>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x508>)
 800125a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001260:	f7ff fa0c 	bl	800067c <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001268:	f7ff fa08 	bl	800067c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1b8      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_RCC_OscConfig+0x508>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4d8>
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800129e:	e029      	b.n	80012f4 <HAL_RCC_OscConfig+0x52c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d115      	bne.n	80012d4 <HAL_RCC_OscConfig+0x50c>
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_RCC_OscConfig+0x504>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c8:	e014      	b.n	80012f4 <HAL_RCC_OscConfig+0x52c>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
 80012d4:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	4a9c      	ldr	r2, [pc, #624]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a98      	ldr	r2, [pc, #608]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d016      	beq.n	800132a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff f9be 	bl	800067c <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff f9ba 	bl	800067c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e168      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800131c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ed      	beq.n	8001304 <HAL_RCC_OscConfig+0x53c>
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff f9a7 	bl	800067c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff f9a3 	bl	800067c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e151      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ed      	bne.n	8001332 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b00      	cmp	r3, #0
 8001372:	d03c      	beq.n	80013ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800137c:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800137e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff f976 	bl	800067c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001394:	f7ff f972 	bl	800067c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e122      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013a6:	4b69      	ldr	r3, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80013a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ef      	beq.n	8001394 <HAL_RCC_OscConfig+0x5cc>
 80013b4:	e01b      	b.n	80013ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80013b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013bc:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff f959 	bl	800067c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ce:	f7ff f955 	bl	800067c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e105      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013e0:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80013e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ef      	bne.n	80013ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80f9 	beq.w	80015ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	f040 80cf 	bne.w	80015a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001402:	4b52      	ldr	r3, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0203 	and.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	429a      	cmp	r2, r3
 8001414:	d12c      	bne.n	8001470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	3b01      	subs	r3, #1
 8001422:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d123      	bne.n	8001470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d11b      	bne.n	8001470 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d113      	bne.n	8001470 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	3b01      	subs	r3, #1
 8001456:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d109      	bne.n	8001470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	3b01      	subs	r3, #1
 800146a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d071      	beq.n	8001554 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	d068      	beq.n	8001548 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ac      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2d      	ldr	r2, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800149c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800149e:	f7ff f8ed 	bl	800067c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff f8e9 	bl	800067c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e099      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_OscConfig+0x788>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014d4:	3a01      	subs	r2, #1
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	4311      	orrs	r1, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014de:	0212      	lsls	r2, r2, #8
 80014e0:	4311      	orrs	r1, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014e6:	0852      	lsrs	r2, r2, #1
 80014e8:	3a01      	subs	r2, #1
 80014ea:	0552      	lsls	r2, r2, #21
 80014ec:	4311      	orrs	r1, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014f2:	0852      	lsrs	r2, r2, #1
 80014f4:	3a01      	subs	r2, #1
 80014f6:	0652      	lsls	r2, r2, #25
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014fe:	06d2      	lsls	r2, r2, #27
 8001500:	430a      	orrs	r2, r1
 8001502:	4912      	ldr	r1, [pc, #72]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001504:	4313      	orrs	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800150e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001520:	f7ff f8ac 	bl	800067c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff f8a8 	bl	800067c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e058      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001546:	e050      	b.n	80015ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e04f      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
 800154c:	40021000 	.word	0x40021000
 8001550:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d144      	bne.n	80015ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001578:	f7ff f880 	bl	800067c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff f87c 	bl	800067c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e02c      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x7b8>
 800159e:	e024      	b.n	80015ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d01f      	beq.n	80015e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 80015ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff f863 	bl	800067c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff f85f 	bl	800067c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e00f      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4905      	ldr	r1, [pc, #20]	; (80015f4 <HAL_RCC_OscConfig+0x82c>)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x830>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
 80015e4:	e001      	b.n	80015ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	feeefffc 	.word	0xfeeefffc

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e11d      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b90      	ldr	r3, [pc, #576]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b8d      	ldr	r3, [pc, #564]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 020f 	bic.w	r2, r3, #15
 800162a:	498b      	ldr	r1, [pc, #556]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e105      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d010      	beq.n	8001672 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165c:	429a      	cmp	r2, r3
 800165e:	d908      	bls.n	8001672 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b7e      	ldr	r3, [pc, #504]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	497b      	ldr	r1, [pc, #492]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d079      	beq.n	8001772 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d11e      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b75      	ldr	r3, [pc, #468]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0dc      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001696:	f000 f9d1 	bl	8001a3c <RCC_GetSysClockFreqFromPLLSource>
 800169a:	4603      	mov	r3, r0
 800169c:	4a70      	ldr	r2, [pc, #448]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d946      	bls.n	8001730 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016a2:	4b6e      	ldr	r3, [pc, #440]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d140      	bne.n	8001730 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b6:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e035      	b.n	8001730 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d115      	bne.n	8001704 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b9      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0ad      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0a5      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001704:	f000 f8b4 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001708:	4603      	mov	r3, r0
 800170a:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d90f      	bls.n	8001730 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001710:	4b52      	ldr	r3, [pc, #328]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001724:	4a4d      	ldr	r2, [pc, #308]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 0203 	bic.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4947      	ldr	r1, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001742:	f7fe ff9b 	bl	800067c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001748:	e00a      	b.n	8001760 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174a:	f7fe ff97 	bl	800067c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e077      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 020c 	and.w	r2, r3, #12
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	429a      	cmp	r2, r3
 8001770:	d1eb      	bne.n	800174a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b80      	cmp	r3, #128	; 0x80
 8001776:	d105      	bne.n	8001784 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a37      	ldr	r2, [pc, #220]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800177e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001782:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d010      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179c:	429a      	cmp	r2, r3
 800179e:	d208      	bcs.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	492b      	ldr	r1, [pc, #172]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d210      	bcs.n	80017e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 020f 	bic.w	r2, r3, #15
 80017c8:	4923      	ldr	r1, [pc, #140]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_ClockConfig+0x25c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e036      	b.n	8001850 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4918      	ldr	r1, [pc, #96]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4910      	ldr	r1, [pc, #64]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001820:	f000 f826 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x26c>)
 800183e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fec9 	bl	80005dc <HAL_InitTick>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]

  return status;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	04c4b400 	.word	0x04c4b400
 8001864:	080024a4 	.word	0x080024a4
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001888:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d121      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d11e      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e005      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018cc:	4a2b      	ldr	r2, [pc, #172]	; (800197c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	e004      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_RCC_GetSysClockFreq+0x114>)
 80018f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d134      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0xa6>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d003      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0xac>
 8001914:	e005      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_RCC_GetSysClockFreq+0x110>)
 8001918:	617b      	str	r3, [r7, #20]
      break;
 800191a:	e005      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_GetSysClockFreq+0x114>)
 800191e:	617b      	str	r3, [r7, #20]
      break;
 8001920:	e002      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	617b      	str	r3, [r7, #20]
      break;
 8001926:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	fb03 f202 	mul.w	r2, r3, r2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_GetSysClockFreq+0x108>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	0e5b      	lsrs	r3, r3, #25
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	3301      	adds	r3, #1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001968:	69bb      	ldr	r3, [r7, #24]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	080024b4 	.word	0x080024b4
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019a0:	f7ff f94e 	bl	8000c40 <HAL_PWREx_GetVoltageRange>
 80019a4:	6178      	str	r0, [r7, #20]
 80019a6:	e014      	b.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6593      	str	r3, [r2, #88]	; 0x58
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019c0:	f7ff f93e 	bl	8000c40 <HAL_PWREx_GetVoltageRange>
 80019c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d10b      	bne.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d913      	bls.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2ba0      	cmp	r3, #160	; 0xa0
 80019e4:	d902      	bls.n	80019ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019e6:	2302      	movs	r3, #2
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e00d      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ec:	2301      	movs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	e00a      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b7f      	cmp	r3, #127	; 0x7f
 80019f6:	d902      	bls.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	e004      	b.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b70      	cmp	r3, #112	; 0x70
 8001a02:	d101      	bne.n	8001a08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 020f 	bic.w	r2, r3, #15
 8001a10:	4909      	ldr	r1, [pc, #36]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40022000 	.word	0x40022000

08001a3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d00b      	beq.n	8001a6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d825      	bhi.n	8001aa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d008      	beq.n	8001a70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d11f      	bne.n	8001aa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a66:	613b      	str	r3, [r7, #16]
    break;
 8001a68:	e01f      	b.n	8001aaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001a6c:	613b      	str	r3, [r7, #16]
    break;
 8001a6e:	e01c      	b.n	8001aaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e005      	b.n	8001a98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	613b      	str	r3, [r7, #16]
    break;
 8001aa2:	e002      	b.n	8001aaa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
    break;
 8001aa8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	fb03 f202 	mul.w	r2, r3, r2
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0e5b      	lsrs	r3, r3, #25
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001aea:	683b      	ldr	r3, [r7, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200
 8001b04:	080024b4 	.word	0x080024b4

08001b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e049      	b.n	8001bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fca8 	bl	8000484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f000 fa9a 	bl	8002080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e04f      	b.n	8001c70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfa:	d018      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_TIM_Base_Start_IT+0x76>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d115      	bne.n	8001c5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d015      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0xb4>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d011      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c58:	e008      	b.n	8001c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e000      	b.n	8001c6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40000c00 	.word	0x40000c00
 8001c8c:	40013400 	.word	0x40013400
 8001c90:	40014000 	.word	0x40014000
 8001c94:	00010007 	.word	0x00010007

08001c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f9ad 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f99f 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f9b0 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d020      	beq.n	8001d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0204 	mvn.w	r2, #4
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f987 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f979 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f98a 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d020      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0208 	mvn.w	r2, #8
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f961 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f953 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f964 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0210 	mvn.w	r2, #16
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2208      	movs	r2, #8
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f93b 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f92d 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f93e 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0201 	mvn.w	r2, #1
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fb02 	bl	8000408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 faf2 	bl	800240c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 faea 	bl	8002420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8fd 	bl	800206a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0220 	mvn.w	r2, #32
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fab2 	bl	80023f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0b6      	b.n	8002026 <HAL_TIM_ConfigClockSource+0x18a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef4:	d03e      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0xd8>
 8001ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001efa:	f200 8087 	bhi.w	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	f000 8086 	beq.w	8002012 <HAL_TIM_ConfigClockSource+0x176>
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d87f      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f0c:	2b70      	cmp	r3, #112	; 0x70
 8001f0e:	d01a      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0xaa>
 8001f10:	2b70      	cmp	r3, #112	; 0x70
 8001f12:	d87b      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f14:	2b60      	cmp	r3, #96	; 0x60
 8001f16:	d050      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0x11e>
 8001f18:	2b60      	cmp	r3, #96	; 0x60
 8001f1a:	d877      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f1c:	2b50      	cmp	r3, #80	; 0x50
 8001f1e:	d03c      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0xfe>
 8001f20:	2b50      	cmp	r3, #80	; 0x50
 8001f22:	d873      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d058      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0x13e>
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d86f      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f2c:	2b30      	cmp	r3, #48	; 0x30
 8001f2e:	d064      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x15e>
 8001f30:	2b30      	cmp	r3, #48	; 0x30
 8001f32:	d86b      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d060      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x15e>
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d867      	bhi.n	800200c <HAL_TIM_ConfigClockSource+0x170>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d05c      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x15e>
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d05a      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x15e>
 8001f44:	e062      	b.n	800200c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f56:	f000 f9a7 	bl	80022a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	609a      	str	r2, [r3, #8]
      break;
 8001f72:	e04f      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f84:	f000 f990 	bl	80022a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f96:	609a      	str	r2, [r3, #8]
      break;
 8001f98:	e03c      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f000 f904 	bl	80021b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2150      	movs	r1, #80	; 0x50
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f95d 	bl	8002272 <TIM_ITRx_SetConfig>
      break;
 8001fb8:	e02c      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f000 f923 	bl	8002212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2160      	movs	r1, #96	; 0x60
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f94d 	bl	8002272 <TIM_ITRx_SetConfig>
      break;
 8001fd8:	e01c      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f8e4 	bl	80021b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2140      	movs	r1, #64	; 0x40
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f93d 	bl	8002272 <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e00c      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f000 f934 	bl	8002272 <TIM_ITRx_SetConfig>
      break;
 800200a:	e003      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      break;
 8002010:	e000      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <TIM_Base_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d00f      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3c      	ldr	r2, [pc, #240]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <TIM_Base_SetConfig+0x114>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d01b      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d017      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00f      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00b      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <TIM_Base_SetConfig+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d003      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <TIM_Base_SetConfig+0x114>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <TIM_Base_SetConfig+0x128>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40000400 	.word	0x40000400
 800219c:	40000800 	.word	0x40000800
 80021a0:	40000c00 	.word	0x40000c00
 80021a4:	40013400 	.word	0x40013400
 80021a8:	40014000 	.word	0x40014000
 80021ac:	40014400 	.word	0x40014400
 80021b0:	40014800 	.word	0x40014800

080021b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0201 	bic.w	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f023 030a 	bic.w	r3, r3, #10
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002212:	b480      	push	{r7}
 8002214:	b087      	sub	sp, #28
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f023 0210 	bic.w	r2, r3, #16
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800223c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	031b      	lsls	r3, r3, #12
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800224e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	621a      	str	r2, [r3, #32]
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	f043 0307 	orr.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	021a      	lsls	r2, r3, #8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	609a      	str	r2, [r3, #8]
}
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e068      	b.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800233a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d018      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10c      	bne.n	80023c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40013400 	.word	0x40013400
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40014000 	.word	0x40014000

080023f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <memset>:
 8002434:	4402      	add	r2, r0
 8002436:	4603      	mov	r3, r0
 8002438:	4293      	cmp	r3, r2
 800243a:	d100      	bne.n	800243e <memset+0xa>
 800243c:	4770      	bx	lr
 800243e:	f803 1b01 	strb.w	r1, [r3], #1
 8002442:	e7f9      	b.n	8002438 <memset+0x4>

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4d0d      	ldr	r5, [pc, #52]	; (800247c <__libc_init_array+0x38>)
 8002448:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244a:	1b64      	subs	r4, r4, r5
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	2600      	movs	r6, #0
 8002450:	42a6      	cmp	r6, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	4d0b      	ldr	r5, [pc, #44]	; (8002484 <__libc_init_array+0x40>)
 8002456:	4c0c      	ldr	r4, [pc, #48]	; (8002488 <__libc_init_array+0x44>)
 8002458:	f000 f818 	bl	800248c <_init>
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	2600      	movs	r6, #0
 8002462:	42a6      	cmp	r6, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f855 3b04 	ldr.w	r3, [r5], #4
 800246c:	4798      	blx	r3
 800246e:	3601      	adds	r6, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f855 3b04 	ldr.w	r3, [r5], #4
 8002476:	4798      	blx	r3
 8002478:	3601      	adds	r6, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	080024e4 	.word	0x080024e4
 8002480:	080024e4 	.word	0x080024e4
 8002484:	080024e4 	.word	0x080024e4
 8002488:	080024e8 	.word	0x080024e8

0800248c <_init>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	bf00      	nop
 8002490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002492:	bc08      	pop	{r3}
 8002494:	469e      	mov	lr, r3
 8002496:	4770      	bx	lr

08002498 <_fini>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr
