
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000621c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08006c20  08006c20  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c20  08006c20  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00058140  200000c0  08006ce8  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20058200  08006ce8  00028200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016637  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b84  00000000  00000000  000367df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00039368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecf  00000000  00000000  0003a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cab0  00000000  00000000  0003b59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d5d  00000000  00000000  0006804f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011af4b  00000000  00000000  0007cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005324  00000000  00000000  00197cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0019d01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019d085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019d17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080063c4 	.word	0x080063c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c4 	.word	0x200000c4
 80001fc:	080063c4 	.word	0x080063c4

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr

0800080c <__aeabi_d2f>:
 800080c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000814:	bf24      	itt	cs
 8000816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800081a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800081e:	d90d      	bls.n	800083c <__aeabi_d2f+0x30>
 8000820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800082c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000834:	bf08      	it	eq
 8000836:	f020 0001 	biceq.w	r0, r0, #1
 800083a:	4770      	bx	lr
 800083c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000840:	d121      	bne.n	8000886 <__aeabi_d2f+0x7a>
 8000842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000846:	bfbc      	itt	lt
 8000848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800084c:	4770      	bxlt	lr
 800084e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000852:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000856:	f1c2 0218 	rsb	r2, r2, #24
 800085a:	f1c2 0c20 	rsb	ip, r2, #32
 800085e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	bf18      	it	ne
 8000868:	f040 0001 	orrne.w	r0, r0, #1
 800086c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000874:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000878:	ea40 000c 	orr.w	r0, r0, ip
 800087c:	fa23 f302 	lsr.w	r3, r3, r2
 8000880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000884:	e7cc      	b.n	8000820 <__aeabi_d2f+0x14>
 8000886:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800088a:	d107      	bne.n	800089c <__aeabi_d2f+0x90>
 800088c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000890:	bf1e      	ittt	ne
 8000892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800089a:	4770      	bxne	lr
 800089c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	0000      	movs	r0, r0
	...

080008b0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_DFSDM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
//timer used for led blinking
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d109      	bne.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(recording)
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d037      	beq.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x88>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Make LED blink if recording
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	4820      	ldr	r0, [pc, #128]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008ce:	f003 fbb7 	bl	8004040 <HAL_GPIO_TogglePin>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sineWave[noteIndex] * 0.8);
			noteIndex = (noteIndex + 1)%44;
			}
		}

}
 80008d2:	e031      	b.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x88>
	else if(htim == &htim2){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d12d      	bne.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(playSound){
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d029      	beq.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x88>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sineWave[noteIndex] * 0.8);
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fef1 	bl	80006d8 <__aeabi_ui2d>
 80008f6:	a312      	add	r3, pc, #72	; (adr r3, 8000940 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80008f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fc:	f7ff fc80 	bl	8000200 <__aeabi_dmul>
 8000900:	4602      	mov	r2, r0
 8000902:	460b      	mov	r3, r1
 8000904:	4610      	mov	r0, r2
 8000906:	4619      	mov	r1, r3
 8000908:	f7ff ff60 	bl	80007cc <__aeabi_d2uiz>
 800090c:	4603      	mov	r3, r0
 800090e:	2208      	movs	r2, #8
 8000910:	2100      	movs	r1, #0
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000914:	f002 f94f 	bl	8002bb6 <HAL_DAC_SetValue>
			noteIndex = (noteIndex + 1)%44;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000920:	fb82 1203 	smull	r1, r2, r2, r3
 8000924:	10d1      	asrs	r1, r2, #3
 8000926:	17da      	asrs	r2, r3, #31
 8000928:	1a8a      	subs	r2, r1, r2
 800092a:	212c      	movs	r1, #44	; 0x2c
 800092c:	fb01 f202 	mul.w	r2, r1, r2
 8000930:	1a9a      	subs	r2, r3, r2
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000936:	701a      	strb	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	9999999a 	.word	0x9999999a
 8000944:	3fe99999 	.word	0x3fe99999
 8000948:	20058130 	.word	0x20058130
 800094c:	200581c9 	.word	0x200581c9
 8000950:	48000400 	.word	0x48000400
 8000954:	200580e4 	.word	0x200580e4
 8000958:	200581c8 	.word	0x200581c8
 800095c:	200581ca 	.word	0x200581ca
 8000960:	20000000 	.word	0x20000000
 8000964:	20057f84 	.word	0x20057f84
 8000968:	2e8ba2e9 	.word	0x2e8ba2e9
 800096c:	00000000 	.word	0x00000000

08000970 <sine_wave>:

uint32_t sine_wave(float x){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t sine;
	float radians =2*3.14*x;
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fece 	bl	800071c <__aeabi_f2d>
 8000980:	a314      	add	r3, pc, #80	; (adr r3, 80009d4 <sine_wave+0x64>)
 8000982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000986:	f7ff fc3b 	bl	8000200 <__aeabi_dmul>
 800098a:	4602      	mov	r2, r0
 800098c:	460b      	mov	r3, r1
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	f7ff ff3b 	bl	800080c <__aeabi_d2f>
 8000996:	4603      	mov	r3, r0
 8000998:	60fb      	str	r3, [r7, #12]
	sine = (uint32_t)((arm_sin_f32(radians) + 1) * 80);
 800099a:	ed97 0a03 	vldr	s0, [r7, #12]
 800099e:	f005 fc9f 	bl	80062e0 <arm_sin_f32>
 80009a2:	eef0 7a40 	vmov.f32	s15, s0
 80009a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80009d0 <sine_wave+0x60>
 80009b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ba:	ee17 3a90 	vmov	r3, s15
 80009be:	60bb      	str	r3, [r7, #8]
	return sine;
 80009c0:	68bb      	ldr	r3, [r7, #8]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	f3af 8000 	nop.w
 80009d0:	42a00000 	.word	0x42a00000
 80009d4:	51eb851f 	.word	0x51eb851f
 80009d8:	40191eb8 	.word	0x40191eb8

080009dc <makeNote>:

uint32_t makeNote(int samples){
 80009dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009e0:	b087      	sub	sp, #28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	466b      	mov	r3, sp
 80009e8:	461e      	mov	r6, r3
	uint32_t array[samples];
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	1e4b      	subs	r3, r1, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	460a      	mov	r2, r1
 80009f2:	2300      	movs	r3, #0
 80009f4:	4690      	mov	r8, r2
 80009f6:	4699      	mov	r9, r3
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	f04f 0300 	mov.w	r3, #0
 8000a00:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a04:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a08:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4614      	mov	r4, r2
 8000a12:	461d      	mov	r5, r3
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	016b      	lsls	r3, r5, #5
 8000a1e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a22:	0162      	lsls	r2, r4, #5
 8000a24:	460b      	mov	r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	3307      	adds	r3, #7
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a32:	466b      	mov	r3, sp
 8000a34:	3303      	adds	r3, #3
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<samples;i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e019      	b.n	8000a76 <makeNote+0x9a>
		float mod = (float)i/(float)samples;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	ee07 3a90 	vmov	s15, r3
 8000a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5a:	edc7 7a02 	vstr	s15, [r7, #8]
		array[i]=sine_wave(mod);
 8000a5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a62:	f7ff ff85 	bl	8000970 <sine_wave>
 8000a66:	4601      	mov	r1, r0
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0;i<samples;i++){
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbe1      	blt.n	8000a42 <makeNote+0x66>
	}
	return array;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	46b5      	mov	sp, r6
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	371c      	adds	r7, #28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a8c <HAL_GPIO_EXTI_Callback>:

//=================Part 4: Putting it all together======================
int currentCaseIndex = 0;
int numCases = 8; // Number of notes (adjust as needed)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) {
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9c:	f040 808d 	bne.w	8000bba <HAL_GPIO_EXTI_Callback+0x12e>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Stop any ongoing audio playback
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4848      	ldr	r0, [pc, #288]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000aa4:	f002 f842 	bl	8002b2c <HAL_DAC_Stop_DMA>


        switch (currentCaseIndex) {
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d877      	bhi.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x114>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ad9 	.word	0x08000ad9
 8000abc:	08000af3 	.word	0x08000af3
 8000ac0:	08000b0d 	.word	0x08000b0d
 8000ac4:	08000b27 	.word	0x08000b27
 8000ac8:	08000b41 	.word	0x08000b41
 8000acc:	08000b53 	.word	0x08000b53
 8000ad0:	08000b6d 	.word	0x08000b6d
 8000ad4:	08000b87 	.word	0x08000b87
        	case 0: //record msg
        		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	483a      	ldr	r0, [pc, #232]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000adc:	f002 f826 	bl	8002b2c <HAL_DAC_Stop_DMA>
				recording=1;
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x140>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
				HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &micBuffer, BUFFER_SIZE); //start recording
 8000ae6:	4a3a      	ldr	r2, [pc, #232]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x144>)
 8000ae8:	493a      	ldr	r1, [pc, #232]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x148>)
 8000aea:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000aec:	f002 fc5c 	bl	80033a8 <HAL_DFSDM_FilterRegularStart_DMA>
				break;
 8000af0:	e057      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 1: //play 1st note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(42), 42, DAC_ALIGN_8B_R);
 8000af2:	202a      	movs	r0, #42	; 0x2a
 8000af4:	f7ff ff72 	bl	80009dc <makeNote>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	2308      	movs	r3, #8
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	232a      	movs	r3, #42	; 0x2a
 8000b02:	2100      	movs	r1, #0
 8000b04:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b06:	f001 ff45 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b0a:	e04a      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 2: //play 2nd note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)makeNote(50), 50, DAC_ALIGN_8B_R);
 8000b0c:	2032      	movs	r0, #50	; 0x32
 8000b0e:	f7ff ff65 	bl	80009dc <makeNote>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	2308      	movs	r3, #8
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2332      	movs	r3, #50	; 0x32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4829      	ldr	r0, [pc, #164]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b20:	f001 ff38 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b24:	e03d      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 3: //play 3rd note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)makeNote(62), 62, DAC_ALIGN_8B_R);
 8000b26:	203e      	movs	r0, #62	; 0x3e
 8000b28:	f7ff ff58 	bl	80009dc <makeNote>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	2308      	movs	r3, #8
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	233e      	movs	r3, #62	; 0x3e
 8000b36:	2100      	movs	r1, #0
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b3a:	f001 ff2b 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b3e:	e030      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 4: //play recorded msg
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &micBuffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x144>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b4c:	f001 ff22 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b50:	e027      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 5: //play 4th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)makeNote(50), 50, DAC_ALIGN_8B_R);
 8000b52:	2032      	movs	r0, #50	; 0x32
 8000b54:	f7ff ff42 	bl	80009dc <makeNote>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2332      	movs	r3, #50	; 0x32
 8000b62:	2100      	movs	r1, #0
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b66:	f001 ff15 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b6a:	e01a      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 6: //play 5th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)makeNote(80), 80, DAC_ALIGN_8B_R);
 8000b6c:	2050      	movs	r0, #80	; 0x50
 8000b6e:	f7ff ff35 	bl	80009dc <makeNote>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	2308      	movs	r3, #8
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2350      	movs	r3, #80	; 0x50
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b80:	f001 ff08 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b84:	e00d      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			case 7: //play 6th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)makeNote(120), 120, DAC_ALIGN_8B_R);
 8000b86:	2078      	movs	r0, #120	; 0x78
 8000b88:	f7ff ff28 	bl	80009dc <makeNote>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2308      	movs	r3, #8
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2378      	movs	r3, #120	; 0x78
 8000b96:	2100      	movs	r1, #0
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000b9a:	f001 fefb 	bl	8002994 <HAL_DAC_Start_DMA>
				break;
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x116>
			default:
				break;
 8000ba0:	bf00      	nop
		}
        currentCaseIndex = (currentCaseIndex + 1) % numCases; // Move to the next note and loop around
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x150>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	fb93 f1f2 	sdiv	r1, r3, r2
 8000bb0:	fb01 f202 	mul.w	r2, r1, r2
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000bb8:	6013      	str	r3, [r2, #0]
    }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20057f84 	.word	0x20057f84
 8000bc8:	200581cc 	.word	0x200581cc
 8000bcc:	200581c9 	.word	0x200581c9
 8000bd0:	00015f90 	.word	0x00015f90
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	20057ff8 	.word	0x20057ff8
 8000bdc:	200000b0 	.word	0x200000b0

08000be0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ){ //invoked when conversion of mic input is complete
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if(hdfsdm_filter == &hdfsdm1_filter0){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d127      	bne.n	8000c40 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000bf0:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 8000bf2:	f002 fc5b 	bl	80034ac <HAL_DFSDM_FilterRegularStop_DMA>
		//do the shifting stuff
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	e01a      	b.n	8000c32 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		    if (micBuffer[i] < 0) {
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da08      	bge.n	8000c1a <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
		    	micBuffer[i] = -micBuffer[i]; // Multiply it by -1 to make it positive
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	425a      	negs	r2, r3
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }
		    micBuffer[i] = micBuffer[i] >> 10; //shift by 8 to get rid of the garbage
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	129a      	asrs	r2, r3, #10
 8000c24:	4909      	ldr	r1, [pc, #36]	; (8000c4c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_DFSDM_FilterRegConvCpltCallback+0x70>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dde0      	ble.n	8000bfc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
		}
		recording=0;//stop blinking
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_DFSDM_FilterRegConvCpltCallback+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	}
 }
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20057ff8 	.word	0x20057ff8
 8000c4c:	200000dc 	.word	0x200000dc
 8000c50:	00015f8f 	.word	0x00015f8f
 8000c54:	200581c9 	.word	0x200581c9

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fdeb 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f811 	bl	8000c86 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 fa96 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f000 fa62 	bl	8001130 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c6c:	f000 f8d2 	bl	8000e14 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000c70:	f000 f85a 	bl	8000d28 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c74:	f000 f968 	bl	8000f48 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000c78:	f000 f900 	bl	8000e7c <MX_DFSDM1_Init>
  MX_TIM3_Init();
 8000c7c:	f000 f9b4 	bl	8000fe8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c80:	f000 fa04 	bl	800108c <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x2c>

08000c86 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b096      	sub	sp, #88	; 0x58
 8000c8a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2244      	movs	r2, #68	; 0x44
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fb69 	bl	800636c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fa1b 	bl	80040e4 <HAL_PWREx_ControlVoltageScaling>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cb4:	f000 fade 	bl	8001274 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cd4:	233c      	movs	r3, #60	; 0x3c
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fa9f 	bl	800422c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cf4:	f000 fabe 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2105      	movs	r1, #5
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fea5 	bl	8004a60 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d1c:	f000 faaa 	bl	8001274 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3758      	adds	r7, #88	; 0x58
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <MX_ADC1_Init+0xe0>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000da6:	f000 ff7f 	bl	8001ca8 <HAL_ADC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 fa60 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_ADC1_Init+0xe4>)
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db8:	2306      	movs	r3, #6
 8000dba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dc0:	237f      	movs	r3, #127	; 0x7f
 8000dc2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000dd2:	f001 f8af 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000ddc:	f000 fa4a 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000de4:	230c      	movs	r3, #12
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_ADC1_Init+0xdc>)
 8000dee:	f001 f8a1 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000df8:	f000 fa3c 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20057f1c 	.word	0x20057f1c
 8000e08:	50040000 	.word	0x50040000
 8000e0c:	80000001 	.word	0x80000001
 8000e10:	c7520000 	.word	0xc7520000

08000e14 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2228      	movs	r2, #40	; 0x28
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 faa3 	bl	800636c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_DAC1_Init+0x60>)
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <MX_DAC1_Init+0x64>)
 8000e2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_DAC1_Init+0x60>)
 8000e2e:	f001 fd8e 	bl	800294e <HAL_DAC_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e38:	f000 fa1c 	bl	8001274 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e40:	230a      	movs	r3, #10
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_DAC1_Init+0x60>)
 8000e5e:	f001 feed 	bl	8002c3c <HAL_DAC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000e68:	f000 fa04 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20057f84 	.word	0x20057f84
 8000e78:	40007400 	.word	0x40007400

08000e7c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000e82:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <MX_DFSDM1_Init+0xbc>)
 8000e84:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000e9a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e9e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000ea2:	2236      	movs	r2, #54	; 0x36
 8000ea4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000eac:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000eae:	f002 f95b 	bl	8003168 <HAL_DFSDM_FilterInit>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000eb8:	f000 f9dc 	bl	8001274 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <MX_DFSDM1_Init+0xc4>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ed0:	2232      	movs	r2, #50	; 0x32
 8000ed2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_DFSDM1_Init+0xc0>)
 8000f0c:	f002 f86c 	bl	8002fe8 <HAL_DFSDM_ChannelInit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000f16:	f000 f9ad 	bl	8001274 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <MX_DFSDM1_Init+0xc8>)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_DFSDM1_Init+0xb8>)
 8000f20:	f002 f9fc 	bl	800331c <HAL_DFSDM_FilterConfigRegChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000f2a:	f000 f9a3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20057ff8 	.word	0x20057ff8
 8000f38:	40016100 	.word	0x40016100
 8000f3c:	2005804c 	.word	0x2005804c
 8000f40:	40016040 	.word	0x40016040
 8000f44:	00020004 	.word	0x00020004

08000f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2727;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f7c:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8000f80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000f90:	f004 fd10 	bl	80059b4 <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f9a:	f000 f96b 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000fac:	f004 fecc 	bl	8005d48 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fb6:	f000 f95d 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000fc8:	f005 f8e4 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fd2:	f000 f94f 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <MX_TIM2_Init+0x9c>)
 8000fd8:	f004 fd44 	bl	8005a64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200580e4 	.word	0x200580e4

08000fe8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001008:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <MX_TIM3_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM3_Init+0x9c>)
 800100e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001012:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM3_Init+0x9c>)
 800101c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001020:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_TIM3_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800102e:	4815      	ldr	r0, [pc, #84]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001030:	f004 fcc0 	bl	80059b4 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800103a:	f000 f91b 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_TIM3_Init+0x9c>)
 800104c:	f004 fe7c 	bl	8005d48 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001056:	f000 f90d 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001068:	f005 f894 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001072:	f000 f8ff 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM3_Init+0x9c>)
 8001078:	f004 fcf4 	bl	8005a64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20058130 	.word	0x20058130
 8001088:	40000400 	.word	0x40000400

0800108c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <MX_TIM4_Init+0xa0>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010d4:	f004 fc6e 	bl	80059b4 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80010de:	f000 f8c9 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_TIM4_Init+0x9c>)
 80010f0:	f004 fe2a 	bl	8005d48 <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80010fa:	f000 f8bb 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM4_Init+0x9c>)
 800110c:	f005 f842 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001116:	f000 f8ad 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM4_Init+0x9c>)
 800111c:	f004 fca2 	bl	8005a64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2005817c 	.word	0x2005817c
 800112c:	40000800 	.word	0x40000800

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_DMA_Init+0x60>)
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <MX_DMA_Init+0x60>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6493      	str	r3, [r2, #72]	; 0x48
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_DMA_Init+0x60>)
 8001144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_DMA_Init+0x60>)
 8001150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_DMA_Init+0x60>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6493      	str	r3, [r2, #72]	; 0x48
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_DMA_Init+0x60>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200d      	movs	r0, #13
 800116c:	f001 fbb9 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001170:	200d      	movs	r0, #13
 8001172:	f001 fbd2 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	200e      	movs	r0, #14
 800117c:	f001 fbb1 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001180:	200e      	movs	r0, #14
 8001182:	f001 fbca 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a22      	ldr	r2, [pc, #136]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <MX_GPIO_Init+0xd8>)
 8001212:	f002 fefd 	bl	8004010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <MX_GPIO_Init+0xdc>)
 800122e:	f002 fd5d 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <MX_GPIO_Init+0xd8>)
 800124c:	f002 fd4e 	bl	8003cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f001 fb44 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f001 fb5d 	bl	800291a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	; 0x60
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6593      	str	r3, [r2, #88]	; 0x58
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0a8      	sub	sp, #160	; 0xa0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2294      	movs	r2, #148	; 0x94
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 f847 	bl	800636c <memset>
  if(hadc->Instance==ADC1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_ADC_MspInit+0x80>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d12b      	bne.n	8001340 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012fe:	2318      	movs	r3, #24
 8001300:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800130a:	2302      	movs	r3, #2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800130e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe33 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8001324:	f7ff ffa6 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_ADC_MspInit+0x84>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_ADC_MspInit+0x84>)
 800132e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_ADC_MspInit+0x84>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	37a0      	adds	r7, #160	; 0xa0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	50040000 	.word	0x50040000
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_DAC_MspInit+0xcc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d14f      	bne.n	8001412 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 8001378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800137c:	6593      	str	r3, [r2, #88]	; 0x58
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_DAC_MspInit+0xd0>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a2:	2310      	movs	r3, #16
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f002 fc98 	bl	8003cec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_DAC_MspInit+0xd8>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013c4:	2206      	movs	r2, #6
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013ca:	2210      	movs	r2, #16
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013ec:	2220      	movs	r2, #32
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 80013f8:	f002 f9aa 	bl	8003750 <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001402:	f7ff ff37 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_DAC_MspInit+0xd4>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40007400 	.word	0x40007400
 8001420:	40021000 	.word	0x40021000
 8001424:	20057f98 	.word	0x20057f98
 8001428:	40020030 	.word	0x40020030

0800142c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0ae      	sub	sp, #184	; 0xb8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2294      	movs	r2, #148	; 0x94
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f004 ff8d 	bl	800636c <memset>
  if(DFSDM1_Init == 0)
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d14b      	bne.n	80014f2 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fd8a 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001476:	f7ff fefd 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800147a:	4b3c      	ldr	r3, [pc, #240]	; (800156c <HAL_DFSDM_FilterMspInit+0x140>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a3a      	ldr	r2, [pc, #232]	; (800156c <HAL_DFSDM_FilterMspInit+0x140>)
 8001482:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_DFSDM_FilterMspInit+0x140>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10b      	bne.n	80014a4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001490:	4a37      	ldr	r2, [pc, #220]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001496:	6613      	str	r3, [r2, #96]	; 0x60
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 800149a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_DFSDM_FilterMspInit+0x144>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80014bc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014d6:	2306      	movs	r3, #6
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4824      	ldr	r0, [pc, #144]	; (8001574 <HAL_DFSDM_FilterMspInit+0x148>)
 80014e4:	f002 fc02 	bl	8003cec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_DFSDM_FilterMspInit+0x13c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_DFSDM_FilterMspInit+0x13c>)
 80014f0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a20      	ldr	r2, [pc, #128]	; (8001578 <HAL_DFSDM_FilterMspInit+0x14c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d130      	bne.n	800155e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_DFSDM_FilterMspInit+0x154>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001504:	2256      	movs	r2, #86	; 0x56
 8001506:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001528:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001538:	f002 f90a 	bl	8003750 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001542:	f7ff fe97 	bl	8001274 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_DFSDM_FilterMspInit+0x150>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800155e:	bf00      	nop
 8001560:	37b8      	adds	r7, #184	; 0xb8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200581d4 	.word	0x200581d4
 800156c:	200581d0 	.word	0x200581d0
 8001570:	40021000 	.word	0x40021000
 8001574:	48001000 	.word	0x48001000
 8001578:	40016100 	.word	0x40016100
 800157c:	20058084 	.word	0x20058084
 8001580:	40020044 	.word	0x40020044

08001584 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0ae      	sub	sp, #184	; 0xb8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2294      	movs	r2, #148	; 0x94
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fee1 	bl	800636c <memset>
  if(DFSDM1_Init == 0)
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d14b      	bne.n	800164a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80015b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fcde 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80015ce:	f7ff fe51 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10b      	bne.n	80015fc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6613      	str	r3, [r2, #96]	; 0x60
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001614:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800162e:	2306      	movs	r3, #6
 8001630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800163c:	f002 fb56 	bl	8003cec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001648:	6013      	str	r3, [r2, #0]
  }

}
 800164a:	bf00      	nop
 800164c:	37b8      	adds	r7, #184	; 0xb8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200581d4 	.word	0x200581d4
 8001658:	200581d0 	.word	0x200581d0
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d114      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	4a21      	ldr	r2, [pc, #132]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201c      	movs	r0, #28
 8001694:	f001 f925 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001698:	201c      	movs	r0, #28
 800169a:	f001 f93e 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800169e:	e02a      	b.n	80016f6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_TIM_Base_MspInit+0xa0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d114      	bne.n	80016d4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201d      	movs	r0, #29
 80016c8:	f001 f90b 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016cc:	201d      	movs	r0, #29
 80016ce:	f001 f924 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 80016d2:	e010      	b.n	80016f6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_TIM_Base_MspInit+0xa4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10b      	bne.n	80016f6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40000400 	.word	0x40000400
 8001708:	40000800 	.word	0x40000800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f8c2 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Channel3_IRQHandler+0x10>)
 8001766:	f002 f972 	bl	8003a4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20057f98 	.word	0x20057f98

08001774 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel4_IRQHandler+0x10>)
 800177a:	f002 f968 	bl	8003a4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20058084 	.word	0x20058084

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f004 f9d9 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200580e4 	.word	0x200580e4

0800179c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TIM3_IRQHandler+0x10>)
 80017a2:	f004 f9cf 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20058130 	.word	0x20058130

080017b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80017b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017b8:	f002 fc5c 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f004 fdb3 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fa1f 	bl	8000c58 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001828:	08006c28 	.word	0x08006c28
  ldr r2, =_sbss
 800182c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001830:	20058200 	.word	0x20058200

08001834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f001 f843 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fd12 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d023      	beq.n	80018c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_InitTick+0x70>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f84f 	bl	8002936 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d809      	bhi.n	80018b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f001 f819 	bl	80028e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x74>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e001      	b.n	80018c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000bc 	.word	0x200000bc
 80018d8:	200000b4 	.word	0x200000b4
 80018dc:	200000b8 	.word	0x200000b8

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200000bc 	.word	0x200000bc
 8001904:	200581d8 	.word	0x200581d8

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200581d8 	.word	0x200581d8

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000bc 	.word	0x200000bc

08001968 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3360      	adds	r3, #96	; 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <LL_ADC_SetOffset+0x44>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	03fff000 	.word	0x03fff000

08001a18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3360      	adds	r3, #96	; 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3360      	adds	r3, #96	; 0x60
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3330      	adds	r3, #48	; 0x30
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	211f      	movs	r1, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 011f 	and.w	r1, r3, #31
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3314      	adds	r3, #20
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0e5b      	lsrs	r3, r3, #25
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2107      	movs	r1, #7
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	0d1b      	lsrs	r3, r3, #20
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0318 	and.w	r3, r3, #24
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	0007ffff 	.word	0x0007ffff

08001b98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_IsEnabled+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_IsEnabled+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e129      	b.n	8001f16 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff faf9 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff67 	bl	8001bbc <LL_ADC_IsDeepPowerDownEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff4d 	bl	8001b98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff82 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d115      	bne.n	8001d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff66 	bl	8001be4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_ADC_Init+0x278>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	4a81      	ldr	r2, [pc, #516]	; (8001f24 <HAL_ADC_Init+0x27c>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff64 	bl	8001c0c <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff75 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 8001d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80c2 	bne.w	8001f04 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 80be 	bne.w	8001f04 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff49 	bl	8001c34 <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da8:	485f      	ldr	r0, [pc, #380]	; (8001f28 <HAL_ADC_Init+0x280>)
 8001daa:	f7ff ff43 	bl	8001c34 <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4619      	mov	r1, r3
 8001dba:	485c      	ldr	r0, [pc, #368]	; (8001f2c <HAL_ADC_Init+0x284>)
 8001dbc:	f7ff fdd4 	bl	8001968 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e5b      	ldrb	r3, [r3, #25]
 8001dc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d106      	bne.n	8001dfc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	3b01      	subs	r3, #1
 8001df4:	045b      	lsls	r3, r3, #17
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_ADC_Init+0x288>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff25 	bl	8001c80 <LL_ADC_INJ_IsConversionOngoing>
 8001e36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d140      	bne.n	8001ec0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d13d      	bne.n	8001ec0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e1b      	ldrb	r3, [r3, #24]
 8001e4c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e4e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e66:	f023 0306 	bic.w	r3, r3, #6
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d118      	bne.n	8001eb0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	e007      	b.n	8001ec0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f023 010f 	bic.w	r1, r3, #15
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee0:	e007      	b.n	8001ef2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 020f 	bic.w	r2, r2, #15
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	; 0x58
 8001f02:	e007      	b.n	8001f14 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200000b4 	.word	0x200000b4
 8001f24:	053e2d63 	.word	0x053e2d63
 8001f28:	50040000 	.word	0x50040000
 8001f2c:	50040300 	.word	0x50040300
 8001f30:	fff0c007 	.word	0xfff0c007

08001f34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0b6      	sub	sp, #216	; 0xd8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x22>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e3d5      	b.n	8002702 <HAL_ADC_ConfigChannel+0x7ce>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fe79 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 83ba 	bne.w	80026e4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d824      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	3b02      	subs	r3, #2
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d81b      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0x8e>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_ADC_ConfigChannel+0x5c>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fa9 	.word	0x08001fa9
 8001f98:	08001fb1 	.word	0x08001fb1
 8001f9c:	08001fb9 	.word	0x08001fb9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fa6:	e010      	b.n	8001fca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fae:	e00c      	b.n	8001fca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001fb0:	2318      	movs	r3, #24
 8001fb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fb6:	e008      	b.n	8001fca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fc0:	e003      	b.n	8001fca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001fd8:	f7ff fd62 	bl	8001aa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fe3a 	bl	8001c5a <LL_ADC_REG_IsConversionOngoing>
 8001fe6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe46 	bl	8001c80 <LL_ADC_INJ_IsConversionOngoing>
 8001ff4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 81bf 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 81ba 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002014:	d10f      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	f7ff fd69 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fd23 	bl	8001a7a <LL_ADC_SetSamplingTimeCommonConfig>
 8002034:	e00e      	b.n	8002054 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	461a      	mov	r2, r3
 8002044:	f7ff fd58 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd13 	bl	8001a7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00a      	beq.n	800208c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002086:	f7ff fca3 	bl	80019d0 <LL_ADC_SetOffset>
 800208a:	e179      	b.n	8002380 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fcc0 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x184>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fcb5 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	f003 021f 	and.w	r2, r3, #31
 80020b6:	e01e      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1c2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fcaa 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e004      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80020ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_ConfigChannel+0x1da>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	e018      	b.n	8002140 <HAL_ADC_ConfigChannel+0x20c>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800212a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e004      	b.n	8002140 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fc79 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc5d 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <HAL_ADC_ConfigChannel+0x24a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fc52 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	e01e      	b.n	80021bc <HAL_ADC_ConfigChannel+0x288>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fc47 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800219c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80021ac:	2320      	movs	r3, #32
 80021ae:	e004      	b.n	80021ba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80021b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x2a0>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	e018      	b.n	8002206 <HAL_ADC_ConfigChannel+0x2d2>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80021e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80021f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e004      	b.n	8002206 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80021fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002206:	429a      	cmp	r2, r3
 8002208:	d106      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2200      	movs	r2, #0
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fc16 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2102      	movs	r1, #2
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fbfa 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10a      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x310>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2102      	movs	r1, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fbef 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	e01e      	b.n	8002282 <HAL_ADC_ConfigChannel+0x34e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fbe4 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800226a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e004      	b.n	8002280 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_ConfigChannel+0x366>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	e014      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x390>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80022a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80022ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80022b6:	2320      	movs	r3, #32
 80022b8:	e004      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80022ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d106      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fbb7 	bl	8001a44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2103      	movs	r1, #3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fb9b 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x3ce>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2103      	movs	r1, #3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fb90 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	e017      	b.n	8002332 <HAL_ADC_ConfigChannel+0x3fe>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2103      	movs	r1, #3
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fb85 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_ConfigChannel+0x416>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	e011      	b.n	800236e <HAL_ADC_ConfigChannel+0x43a>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800235c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800236e:	429a      	cmp	r2, r3
 8002370:	d106      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	2103      	movs	r1, #3
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fb62 	bl	8001a44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc55 	bl	8001c34 <LL_ADC_IsEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 813f 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f7ff fbd6 	bl	8001b50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a8e      	ldr	r2, [pc, #568]	; (80025e4 <HAL_ADC_ConfigChannel+0x6b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	f040 8130 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x4a4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e019      	b.n	800240c <HAL_ADC_ConfigChannel+0x4d8>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e003      	b.n	80023fc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b09      	cmp	r3, #9
 8002404:	bf94      	ite	ls
 8002406:	2301      	movls	r3, #1
 8002408:	2300      	movhi	r3, #0
 800240a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240c:	2b00      	cmp	r3, #0
 800240e:	d079      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_ADC_ConfigChannel+0x4f8>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	069b      	lsls	r3, r3, #26
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	e015      	b.n	8002458 <HAL_ADC_ConfigChannel+0x524>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	069b      	lsls	r3, r3, #26
 8002454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x544>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	e017      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x574>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e003      	b.n	800249c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	ea42 0103 	orr.w	r1, r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x59a>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	3301      	adds	r3, #1
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	051b      	lsls	r3, r3, #20
 80024cc:	e018      	b.n	8002500 <HAL_ADC_ConfigChannel+0x5cc>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002500:	430b      	orrs	r3, r1
 8002502:	e080      	b.n	8002606 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x5ec>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	3301      	adds	r3, #1
 8002518:	069b      	lsls	r3, r3, #26
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	e015      	b.n	800254c <HAL_ADC_ConfigChannel+0x618>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002538:	2320      	movs	r3, #32
 800253a:	e003      	b.n	8002544 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	069b      	lsls	r3, r3, #26
 8002548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x638>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	3301      	adds	r3, #1
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	e017      	b.n	800259c <HAL_ADC_ConfigChannel+0x668>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	61bb      	str	r3, [r7, #24]
  return result;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	ea42 0103 	orr.w	r1, r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10d      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x694>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	3b1e      	subs	r3, #30
 80025c0:	051b      	lsls	r3, r3, #20
 80025c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c6:	e01d      	b.n	8002604 <HAL_ADC_ConfigChannel+0x6d0>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	60fb      	str	r3, [r7, #12]
  return result;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e005      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x6bc>
 80025e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	3b1e      	subs	r3, #30
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260a:	4619      	mov	r1, r3
 800260c:	f7ff fa74 	bl	8001af8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_ADC_ConfigChannel+0x7d8>)
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d06c      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	483c      	ldr	r0, [pc, #240]	; (8002710 <HAL_ADC_ConfigChannel+0x7dc>)
 800261e:	f7ff f9c9 	bl	80019b4 <LL_ADC_GetCommonPathInternalCh>
 8002622:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_ADC_ConfigChannel+0x7e0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d127      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d121      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a35      	ldr	r2, [pc, #212]	; (8002718 <HAL_ADC_ConfigChannel+0x7e4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d157      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800264a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800264e:	4619      	mov	r1, r3
 8002650:	482f      	ldr	r0, [pc, #188]	; (8002710 <HAL_ADC_ConfigChannel+0x7dc>)
 8002652:	f7ff f99c 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_ADC_ConfigChannel+0x7e8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	4a30      	ldr	r2, [pc, #192]	; (8002720 <HAL_ADC_ConfigChannel+0x7ec>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002670:	e002      	b.n	8002678 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267e:	e03a      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_ADC_ConfigChannel+0x7f0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d113      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800268a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_ADC_ConfigChannel+0x7e4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d12a      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a8:	4619      	mov	r1, r3
 80026aa:	4819      	ldr	r0, [pc, #100]	; (8002710 <HAL_ADC_ConfigChannel+0x7dc>)
 80026ac:	f7ff f96f 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b0:	e021      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_ADC_ConfigChannel+0x7f4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d11c      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d116      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_ADC_ConfigChannel+0x7e4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026da:	4619      	mov	r1, r3
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <HAL_ADC_ConfigChannel+0x7dc>)
 80026de:	f7ff f956 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
 80026e2:	e008      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002702:	4618      	mov	r0, r3
 8002704:	37d8      	adds	r7, #216	; 0xd8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	80080000 	.word	0x80080000
 8002710:	50040300 	.word	0x50040300
 8002714:	c7520000 	.word	0xc7520000
 8002718:	50040000 	.word	0x50040000
 800271c:	200000b4 	.word	0x200000b4
 8002720:	053e2d63 	.word	0x053e2d63
 8002724:	cb840000 	.word	0xcb840000
 8002728:	80000001 	.word	0x80000001

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e014      	b.n	800298a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	791b      	ldrb	r3, [r3, #4]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fe fced 	bl	8001350 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	795b      	ldrb	r3, [r3, #5]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_DAC_Start_DMA+0x1e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e0ab      	b.n	8002b0a <HAL_DAC_Start_DMA+0x176>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2202      	movs	r2, #2
 80029bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d12f      	bne.n	8002a24 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_DAC_Start_DMA+0x180>)
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_DAC_Start_DMA+0x184>)
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_DAC_Start_DMA+0x188>)
 80029da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d013      	beq.n	8002a1a <HAL_DAC_Start_DMA+0x86>
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d845      	bhi.n	8002a84 <HAL_DAC_Start_DMA+0xf0>
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_DAC_Start_DMA+0x72>
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002a04:	e03e      	b.n	8002a84 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	613b      	str	r3, [r7, #16]
        break;
 8002a0e:	e03c      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	613b      	str	r3, [r7, #16]
        break;
 8002a18:	e037      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	613b      	str	r3, [r7, #16]
        break;
 8002a22:	e032      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_DAC_Start_DMA+0x18c>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_DAC_Start_DMA+0x190>)
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a3b      	ldr	r2, [pc, #236]	; (8002b28 <HAL_DAC_Start_DMA+0x194>)
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d013      	beq.n	8002a7a <HAL_DAC_Start_DMA+0xe6>
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d817      	bhi.n	8002a88 <HAL_DAC_Start_DMA+0xf4>
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_DAC_Start_DMA+0xd2>
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d005      	beq.n	8002a70 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002a64:	e010      	b.n	8002a88 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	613b      	str	r3, [r7, #16]
        break;
 8002a6e:	e00c      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3318      	adds	r3, #24
 8002a76:	613b      	str	r3, [r7, #16]
        break;
 8002a78:	e007      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	331c      	adds	r3, #28
 8002a80:	613b      	str	r3, [r7, #16]
        break;
 8002a82:	e002      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002a88:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6898      	ldr	r0, [r3, #8]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	f000 fef9 	bl	80038a0 <HAL_DMA_Start_IT>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e010      	b.n	8002ad6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68d8      	ldr	r0, [r3, #12]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	f000 fee7 	bl	80038a0 <HAL_DMA_Start_IT>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e005      	b.n	8002b08 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08002ed5 	.word	0x08002ed5
 8002b18:	08002ef7 	.word	0x08002ef7
 8002b1c:	08002f13 	.word	0x08002f13
 8002b20:	08002f7d 	.word	0x08002f7d
 8002b24:	08002f9f 	.word	0x08002f9f
 8002b28:	08002fbb 	.word	0x08002fbb

08002b2c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2201      	movs	r2, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 ff0b 	bl	8003996 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e00c      	b.n	8002bac <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fefd 	bl	8003996 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002baa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3308      	adds	r3, #8
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3314      	adds	r3, #20
 8002be8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	461a      	mov	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	795b      	ldrb	r3, [r3, #5]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_DAC_ConfigChannel+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e137      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x28c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	f040 8081 	bne.w	8002d70 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fe4b 	bl	8001908 <HAL_GetTick>
 8002c72:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d140      	bne.n	8002cfc <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c7a:	e018      	b.n	8002cae <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c7c:	f7fe fe44 	bl	8001908 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d911      	bls.n	8002cae <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f043 0208 	orr.w	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e10c      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1df      	bne.n	8002c7c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fe fe2f 	bl	8001920 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	69d2      	ldr	r2, [r2, #28]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
 8002ccc:	e023      	b.n	8002d16 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cce:	f7fe fe1b 	bl	8001908 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d90f      	bls.n	8002cfc <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0a      	bge.n	8002cfc <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f043 0208 	orr.w	r2, r3, #8
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0e5      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	dbe3      	blt.n	8002cce <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f7fe fe0a 	bl	8001920 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	69d2      	ldr	r2, [r2, #28]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	ea02 0103 	and.w	r1, r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	21ff      	movs	r1, #255	; 0xff
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	ea02 0103 	and.w	r1, r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d11d      	bne.n	8002db4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	221f      	movs	r2, #31
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	400a      	ands	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	d104      	bne.n	8002e64 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e018      	b.n	8002e96 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e00f      	b.n	8002e96 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e76:	f001 ffb9 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8002e7a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_DAC_ConfigChannel+0x294>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d904      	bls.n	8002e8e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	e003      	b.n	8002e96 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e94:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	22c0      	movs	r2, #192	; 0xc0
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	04c4b400 	.word	0x04c4b400

08002ed4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff fe8c 	bl	8002c00 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	711a      	strb	r2, [r3, #4]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe85 	bl	8002c14 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fe7b 	bl	8002c28 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	711a      	strb	r2, [r3, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ffd8 	bl	8002f40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	711a      	strb	r2, [r3, #4]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff ffd1 	bl	8002f54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff ffc7 	bl	8002f68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	711a      	strb	r2, [r3, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0ac      	b.n	8003154 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fab6 	bl	8003570 <DFSDM_GetChannelFromInstance>
 8003004:	4603      	mov	r3, r0
 8003006:	4a55      	ldr	r2, [pc, #340]	; (800315c <HAL_DFSDM_ChannelInit+0x174>)
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09f      	b.n	8003154 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fe fab5 	bl	8001584 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <HAL_DFSDM_ChannelInit+0x178>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	4a4f      	ldr	r2, [pc, #316]	; (8003160 <HAL_DFSDM_ChannelInit+0x178>)
 8003022:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003024:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <HAL_DFSDM_ChannelInit+0x178>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d125      	bne.n	8003078 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 8003032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003036:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4948      	ldr	r1, [pc, #288]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a46      	ldr	r2, [pc, #280]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 800304c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003050:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	791b      	ldrb	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800305a:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	493f      	ldr	r1, [pc, #252]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <HAL_DFSDM_ChannelInit+0x17c>)
 8003072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003076:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003086:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003096:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800309c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 020f 	bic.w	r2, r2, #15
 80030b4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80030dc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 0207 	and.w	r2, r2, #7
 8003108:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003134:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa14 	bl	8003570 <DFSDM_GetChannelFromInstance>
 8003148:	4602      	mov	r2, r0
 800314a:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_DFSDM_ChannelInit+0x174>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200581e0 	.word	0x200581e0
 8003160:	200581dc 	.word	0x200581dc
 8003164:	40016000 	.word	0x40016000

08003168 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0ca      	b.n	8003310 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a66      	ldr	r2, [pc, #408]	; (8003318 <HAL_DFSDM_FilterInit+0x1b0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d109      	bne.n	8003198 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003188:	2b01      	cmp	r3, #1
 800318a:	d003      	beq.n	8003194 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0bb      	b.n	8003310 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe f93b 	bl	800142c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80031c4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7a1b      	ldrb	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e007      	b.n	80031f0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80031ee:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7a5b      	ldrb	r3, [r3, #9]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d108      	bne.n	800320a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e007      	b.n	800321a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003228:	f023 0308 	bic.w	r3, r3, #8
 800322c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d108      	bne.n	8003248 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7c1b      	ldrb	r3, [r3, #16]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d108      	bne.n	8003262 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0210 	orr.w	r2, r2, #16
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e007      	b.n	8003272 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0210 	bic.w	r2, r2, #16
 8003270:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7c5b      	ldrb	r3, [r3, #17]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e007      	b.n	800329c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0220 	bic.w	r2, r2, #32
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80032aa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80032ae:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032c2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032ca:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7c1a      	ldrb	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40016100 	.word	0x40016100

0800331c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d02e      	beq.n	8003394 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800333c:	2bff      	cmp	r3, #255	; 0xff
 800333e:	d029      	beq.n	8003394 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800334e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003352:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10d      	bne.n	8003376 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e00a      	b.n	800338c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
 8003392:	e001      	b.n	8003398 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
}
 800339a:	4618      	mov	r0, r3
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
 80033c8:	e064      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d8:	d002      	beq.n	80033e0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
 80033de:	e059      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10e      	bne.n	8003406 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d002      	beq.n	8003406 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
 8003404:	e046      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800341c:	2b20      	cmp	r3, #32
 800341e:	d102      	bne.n	8003426 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e036      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d004      	beq.n	800343a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003436:	2b03      	cmp	r3, #3
 8003438:	d12a      	bne.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003450:	2b20      	cmp	r3, #32
 8003452:	d101      	bne.n	8003458 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003456:	e000      	b.n	800345a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003458:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	331c      	adds	r3, #28
 800346a:	4619      	mov	r1, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f000 fa16 	bl	80038a0 <HAL_DMA_Start_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003486:	e005      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f8bd 	bl	8003608 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800348e:	e001      	b.n	8003494 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	08003531 	.word	0x08003531
 80034a4:	0800354d 	.word	0x0800354d
 80034a8:	08003515 	.word	0x08003515

080034ac <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d007      	beq.n	80034d2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d002      	beq.n	80034d2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e007      	b.n	80034e2 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa5d 	bl	8003996 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8e9 	bl	80036b4 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff ffe2 	bl	80034ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7fd fb4e 	bl	8000be0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2203      	movs	r2, #3
 800355e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ffcd 	bl	8003500 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <DFSDM_GetChannelFromInstance+0x7c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d102      	bne.n	8003586 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e02b      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <DFSDM_GetChannelFromInstance+0x80>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d102      	bne.n	8003594 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e024      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <DFSDM_GetChannelFromInstance+0x84>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d102      	bne.n	80035a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800359c:	2302      	movs	r3, #2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e01d      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <DFSDM_GetChannelFromInstance+0x88>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d102      	bne.n	80035b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80035aa:	2304      	movs	r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e016      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <DFSDM_GetChannelFromInstance+0x8c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d102      	bne.n	80035be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80035b8:	2305      	movs	r3, #5
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e00f      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <DFSDM_GetChannelFromInstance+0x90>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d102      	bne.n	80035cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80035c6:	2306      	movs	r3, #6
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e008      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <DFSDM_GetChannelFromInstance+0x94>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80035d4:	2307      	movs	r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e001      	b.n	80035de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80035da:	2303      	movs	r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40016000 	.word	0x40016000
 80035f0:	40016020 	.word	0x40016020
 80035f4:	40016040 	.word	0x40016040
 80035f8:	40016080 	.word	0x40016080
 80035fc:	400160a0 	.word	0x400160a0
 8003600:	400160c0 	.word	0x400160c0
 8003604:	400160e0 	.word	0x400160e0

08003608 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e033      	b.n	8003692 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003648:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003660:	2b03      	cmp	r3, #3
 8003662:	d116      	bne.n	8003692 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0202 	orr.w	r2, r2, #2
 800367a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003682:	2b01      	cmp	r3, #1
 8003684:	d102      	bne.n	800368c <DFSDM_RegConvStart+0x84>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	e000      	b.n	800368e <DFSDM_RegConvStart+0x86>
 800368c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <DFSDM_RegConvStart+0x98>
 800369c:	2202      	movs	r2, #2
 800369e:	e000      	b.n	80036a2 <DFSDM_RegConvStart+0x9a>
 80036a0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d116      	bne.n	800372c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0202 	orr.w	r2, r2, #2
 8003714:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <DFSDM_RegConvStop+0x72>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	e000      	b.n	8003728 <DFSDM_RegConvStop+0x74>
 8003726:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003732:	2b02      	cmp	r3, #2
 8003734:	d101      	bne.n	800373a <DFSDM_RegConvStop+0x86>
 8003736:	2201      	movs	r2, #1
 8003738:	e000      	b.n	800373c <DFSDM_RegConvStop+0x88>
 800373a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08d      	b.n	800387e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_DMA_Init+0x138>)
 800376a:	429a      	cmp	r2, r3
 800376c:	d80f      	bhi.n	800378e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b45      	ldr	r3, [pc, #276]	; (800388c <HAL_DMA_Init+0x13c>)
 8003776:	4413      	add	r3, r2
 8003778:	4a45      	ldr	r2, [pc, #276]	; (8003890 <HAL_DMA_Init+0x140>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	009a      	lsls	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a42      	ldr	r2, [pc, #264]	; (8003894 <HAL_DMA_Init+0x144>)
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
 800378c:	e00e      	b.n	80037ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_DMA_Init+0x148>)
 8003796:	4413      	add	r3, r2
 8003798:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <HAL_DMA_Init+0x140>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a3c      	ldr	r2, [pc, #240]	; (800389c <HAL_DMA_Init+0x14c>)
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa12 	bl	8003c28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380c:	d102      	bne.n	8003814 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003828:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_DMA_Init+0x104>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d80c      	bhi.n	8003854 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa32 	bl	8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	e008      	b.n	8003866 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40020407 	.word	0x40020407
 800388c:	bffdfff8 	.word	0xbffdfff8
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	40020000 	.word	0x40020000
 8003898:	bffdfbf8 	.word	0xbffdfbf8
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_Start_IT+0x20>
 80038bc:	2302      	movs	r3, #2
 80038be:	e066      	b.n	800398e <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d155      	bne.n	8003980 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f957 	bl	8003bac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 020e 	orr.w	r2, r2, #14
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e00f      	b.n	8003938 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 020a 	orr.w	r2, r2, #10
 8003936:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e005      	b.n	800398c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d008      	beq.n	80039c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e040      	b.n	8003a42 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 020e 	bic.w	r2, r2, #14
 80039ce:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039de:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	f003 021c 	and.w	r2, r3, #28
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003a02:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a2e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f003 031c 	and.w	r3, r3, #28
 8003a6e:	2204      	movs	r2, #4
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d026      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x7a>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d021      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f003 021c 	and.w	r2, r3, #28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2104      	movs	r1, #4
 8003ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d071      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ac6:	e06c      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f003 031c 	and.w	r3, r3, #28
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02e      	beq.n	8003b3a <HAL_DMA_IRQHandler+0xec>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d029      	beq.n	8003b3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020a 	bic.w	r2, r2, #10
 8003b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f003 021c 	and.w	r2, r3, #28
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2102      	movs	r1, #2
 8003b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d038      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b38:	e033      	b.n	8003ba2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 031c 	and.w	r3, r3, #28
 8003b42:	2208      	movs	r2, #8
 8003b44:	409a      	lsls	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x156>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d025      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 020e 	bic.w	r2, r2, #14
 8003b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f003 021c 	and.w	r2, r3, #28
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
}
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bd4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f003 021c 	and.w	r2, r3, #28
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d108      	bne.n	8003c0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c0a:	e007      	b.n	8003c1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d80a      	bhi.n	8003c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c50:	e007      	b.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	009a      	lsls	r2, r3, #2
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3b08      	subs	r3, #8
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2201      	movs	r2, #1
 8003c82:	409a      	lsls	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40020407 	.word	0x40020407
 8003c98:	4002081c 	.word	0x4002081c
 8003c9c:	cccccccd 	.word	0xcccccccd
 8003ca0:	40020880 	.word	0x40020880

08003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	1000823f 	.word	0x1000823f
 8003ce8:	40020940 	.word	0x40020940

08003cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e166      	b.n	8003fca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8158 	beq.w	8003fc4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d005      	beq.n	8003d2c <HAL_GPIO_Init+0x40>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d130      	bne.n	8003d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2203      	movs	r2, #3
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d62:	2201      	movs	r2, #1
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0201 	and.w	r2, r3, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d017      	beq.n	8003dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d123      	bne.n	8003e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	6939      	ldr	r1, [r7, #16]
 8003e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0203 	and.w	r2, r3, #3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80b2 	beq.w	8003fc4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_GPIO_Init+0x2fc>)
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	4a60      	ldr	r2, [pc, #384]	; (8003fe8 <HAL_GPIO_Init+0x2fc>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_GPIO_Init+0x2fc>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e78:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_GPIO_Init+0x300>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	220f      	movs	r2, #15
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ea2:	d02b      	beq.n	8003efc <HAL_GPIO_Init+0x210>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_GPIO_Init+0x304>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d025      	beq.n	8003ef8 <HAL_GPIO_Init+0x20c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a51      	ldr	r2, [pc, #324]	; (8003ff4 <HAL_GPIO_Init+0x308>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d01f      	beq.n	8003ef4 <HAL_GPIO_Init+0x208>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a50      	ldr	r2, [pc, #320]	; (8003ff8 <HAL_GPIO_Init+0x30c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d019      	beq.n	8003ef0 <HAL_GPIO_Init+0x204>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a4f      	ldr	r2, [pc, #316]	; (8003ffc <HAL_GPIO_Init+0x310>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_GPIO_Init+0x200>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a4e      	ldr	r2, [pc, #312]	; (8004000 <HAL_GPIO_Init+0x314>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00d      	beq.n	8003ee8 <HAL_GPIO_Init+0x1fc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a4d      	ldr	r2, [pc, #308]	; (8004004 <HAL_GPIO_Init+0x318>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <HAL_GPIO_Init+0x1f8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a4c      	ldr	r2, [pc, #304]	; (8004008 <HAL_GPIO_Init+0x31c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_GPIO_Init+0x1f4>
 8003edc:	2307      	movs	r3, #7
 8003ede:	e00e      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	e00c      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ee4:	2306      	movs	r3, #6
 8003ee6:	e00a      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ee8:	2305      	movs	r3, #5
 8003eea:	e008      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e006      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e004      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e002      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_GPIO_Init+0x212>
 8003efc:	2300      	movs	r3, #0
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	f002 0203 	and.w	r2, r2, #3
 8003f04:	0092      	lsls	r2, r2, #2
 8003f06:	4093      	lsls	r3, r2
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f0e:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_GPIO_Init+0x300>)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	3302      	adds	r3, #2
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f40:	4a32      	ldr	r2, [pc, #200]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f6a:	4a28      	ldr	r2, [pc, #160]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_GPIO_Init+0x320>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_GPIO_Init+0x320>)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f ae91 	bne.w	8003cfc <HAL_GPIO_Init+0x10>
  }
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	48000400 	.word	0x48000400
 8003ff4:	48000800 	.word	0x48000800
 8003ff8:	48000c00 	.word	0x48000c00
 8003ffc:	48001000 	.word	0x48001000
 8004000:	48001400 	.word	0x48001400
 8004004:	48001800 	.word	0x48001800
 8004008:	48001c00 	.word	0x48001c00
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
 800401c:	4613      	mov	r3, r2
 800401e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004020:	787b      	ldrb	r3, [r7, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800402c:	e002      	b.n	8004034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	041a      	lsls	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43d9      	mvns	r1, r3
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	400b      	ands	r3, r1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fcfa 	bl	8000a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b4:	d102      	bne.n	80040bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80040b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ba:	e00b      	b.n	80040d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d102      	bne.n	80040d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80040cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d0:	e000      	b.n	80040d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80040d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40007000 	.word	0x40007000

080040e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d141      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f2:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d131      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004100:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004106:	4a46      	ldr	r2, [pc, #280]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004118:	4a41      	ldr	r2, [pc, #260]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800411e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004120:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2232      	movs	r2, #50	; 0x32
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004136:	e002      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413e:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f2      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d158      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e057      	b.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004164:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416a:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004174:	e04d      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417c:	d141      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d131      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004192:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2232      	movs	r2, #50	; 0x32
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	0c9b      	lsrs	r3, r3, #18
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c2:	e002      	b.n	80041ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d102      	bne.n	80041de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f2      	bne.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ea:	d112      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e011      	b.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004200:	e007      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004210:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40007000 	.word	0x40007000
 8004224:	200000b4 	.word	0x200000b4
 8004228:	431bde83 	.word	0x431bde83

0800422c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f000 bc08 	b.w	8004a50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004240:	4b96      	ldr	r3, [pc, #600]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800424a:	4b94      	ldr	r3, [pc, #592]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80e4 	beq.w	800442a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_RCC_OscConfig+0x4c>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	f040 808b 	bne.w	8004386 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b01      	cmp	r3, #1
 8004274:	f040 8087 	bne.w	8004386 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004278:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_OscConfig+0x64>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e3df      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <HAL_RCC_OscConfig+0x7e>
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a8:	e005      	b.n	80042b6 <HAL_RCC_OscConfig+0x8a>
 80042aa:	4b7c      	ldr	r3, [pc, #496]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d223      	bcs.n	8004302 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fda0 	bl	8004e04 <RCC_SetFlashLatencyFromMSIRange>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e3c0      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ce:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a72      	ldr	r2, [pc, #456]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b70      	ldr	r3, [pc, #448]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	496d      	ldr	r1, [pc, #436]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ec:	4b6b      	ldr	r3, [pc, #428]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4968      	ldr	r1, [pc, #416]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	e025      	b.n	800434e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004302:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a65      	ldr	r2, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b63      	ldr	r3, [pc, #396]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4960      	ldr	r1, [pc, #384]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	495b      	ldr	r1, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fd60 	bl	8004e04 <RCC_SetFlashLatencyFromMSIRange>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e380      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800434e:	f000 fcc1 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004352:	4602      	mov	r2, r0
 8004354:	4b51      	ldr	r3, [pc, #324]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	4950      	ldr	r1, [pc, #320]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004360:	5ccb      	ldrb	r3, [r1, r3]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a4e      	ldr	r2, [pc, #312]	; (80044a4 <HAL_RCC_OscConfig+0x278>)
 800436c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fa78 	bl	8001868 <HAL_InitTick>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d052      	beq.n	8004428 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	e364      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d032      	beq.n	80043f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800438e:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a42      	ldr	r2, [pc, #264]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800439a:	f7fd fab5 	bl	8001908 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a2:	f7fd fab1 	bl	8001908 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e34d      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a35      	ldr	r2, [pc, #212]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	4930      	ldr	r1, [pc, #192]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	492b      	ldr	r1, [pc, #172]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
 80043f2:	e01a      	b.n	800442a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a28      	ldr	r2, [pc, #160]	; (800449c <HAL_RCC_OscConfig+0x270>)
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004400:	f7fd fa82 	bl	8001908 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004408:	f7fd fa7e 	bl	8001908 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e31a      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x1dc>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d073      	beq.n	800451e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d005      	beq.n	8004448 <HAL_RCC_OscConfig+0x21c>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d10e      	bne.n	8004460 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d063      	beq.n	800451c <HAL_RCC_OscConfig+0x2f0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d15f      	bne.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e2f7      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x24c>
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e025      	b.n	80044c4 <HAL_RCC_OscConfig+0x298>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d114      	bne.n	80044ac <HAL_RCC_OscConfig+0x280>
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a02      	ldr	r2, [pc, #8]	; (800449c <HAL_RCC_OscConfig+0x270>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e013      	b.n	80044c4 <HAL_RCC_OscConfig+0x298>
 800449c:	40021000 	.word	0x40021000
 80044a0:	080063dc 	.word	0x080063dc
 80044a4:	200000b4 	.word	0x200000b4
 80044a8:	200000b8 	.word	0x200000b8
 80044ac:	4ba0      	ldr	r3, [pc, #640]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a9f      	ldr	r2, [pc, #636]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b9d      	ldr	r3, [pc, #628]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a9c      	ldr	r2, [pc, #624]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fa1c 	bl	8001908 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fa18 	bl	8001908 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e2b4      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e6:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x2a8>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fa08 	bl	8001908 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fa04 	bl	8001908 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e2a0      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450e:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x2d0>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d060      	beq.n	80045ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x310>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d119      	bne.n	800456a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d116      	bne.n	800456a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800453c:	4b7c      	ldr	r3, [pc, #496]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x328>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e27d      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b76      	ldr	r3, [pc, #472]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	4973      	ldr	r1, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	e040      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d023      	beq.n	80045ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004572:	4b6f      	ldr	r3, [pc, #444]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6e      	ldr	r2, [pc, #440]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd f9c3 	bl	8001908 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fd f9bf 	bl	8001908 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e25b      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004598:	4b65      	ldr	r3, [pc, #404]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b62      	ldr	r3, [pc, #392]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	495f      	ldr	r1, [pc, #380]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	e018      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5c      	ldr	r2, [pc, #368]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd f99f 	bl	8001908 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fd f99b 	bl	8001908 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e237      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d03c      	beq.n	8004672 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01c      	beq.n	800463a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004606:	4a4a      	ldr	r2, [pc, #296]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd f97a 	bl	8001908 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004618:	f7fd f976 	bl	8001908 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e212      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800462a:	4b41      	ldr	r3, [pc, #260]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800462c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ef      	beq.n	8004618 <HAL_RCC_OscConfig+0x3ec>
 8004638:	e01b      	b.n	8004672 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800463c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004640:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fd f95d 	bl	8001908 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004652:	f7fd f959 	bl	8001908 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1f5      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004664:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ef      	bne.n	8004652 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80a6 	beq.w	80047cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	4a26      	ldr	r2, [pc, #152]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	; 0x58
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x508>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d118      	bne.n	80046ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCC_OscConfig+0x508>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x508>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c4:	f7fd f920 	bl	8001908 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046cc:	f7fd f91c 	bl	8001908 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1b8      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCC_OscConfig+0x508>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d108      	bne.n	8004704 <HAL_RCC_OscConfig+0x4d8>
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004702:	e029      	b.n	8004758 <HAL_RCC_OscConfig+0x52c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b05      	cmp	r3, #5
 800470a:	d115      	bne.n	8004738 <HAL_RCC_OscConfig+0x50c>
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	4a07      	ldr	r2, [pc, #28]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a03      	ldr	r2, [pc, #12]	; (8004730 <HAL_RCC_OscConfig+0x504>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x52c>
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
 8004738:	4b9d      	ldr	r3, [pc, #628]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a9c      	ldr	r2, [pc, #624]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004748:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	4a98      	ldr	r2, [pc, #608]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d016      	beq.n	800478e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fd f8d2 	bl	8001908 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd f8ce 	bl	8001908 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e168      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477e:	4b8c      	ldr	r3, [pc, #560]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ed      	beq.n	8004768 <HAL_RCC_OscConfig+0x53c>
 800478c:	e015      	b.n	80047ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fd f8bb 	bl	8001908 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fd f8b7 	bl	8001908 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e151      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ac:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ed      	bne.n	8004796 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ba:	7ffb      	ldrb	r3, [r7, #31]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c0:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	4a7a      	ldr	r2, [pc, #488]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80047c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d03c      	beq.n	8004852 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01c      	beq.n	800481a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e0:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80047e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e6:	4a72      	ldr	r2, [pc, #456]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd f88a 	bl	8001908 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047f8:	f7fd f886 	bl	8001908 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e122      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800480a:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800480c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ef      	beq.n	80047f8 <HAL_RCC_OscConfig+0x5cc>
 8004818:	e01b      	b.n	8004852 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800481c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004820:	4a63      	ldr	r2, [pc, #396]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd f86d 	bl	8001908 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004832:	f7fd f869 	bl	8001908 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e105      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ef      	bne.n	8004832 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80f9 	beq.w	8004a4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	2b02      	cmp	r3, #2
 8004862:	f040 80cf 	bne.w	8004a04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004866:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f003 0203 	and.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	429a      	cmp	r2, r3
 8004878:	d12c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	3b01      	subs	r3, #1
 8004886:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d123      	bne.n	80048d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d11b      	bne.n	80048d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d113      	bne.n	80048d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	3b01      	subs	r3, #1
 80048ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d109      	bne.n	80048d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	3b01      	subs	r3, #1
 80048ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d071      	beq.n	80049b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d068      	beq.n	80049ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048e6:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0ac      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2d      	ldr	r2, [pc, #180]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80048fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004900:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004902:	f7fd f801 	bl	8001908 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fc fffd 	bl	8001908 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e099      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004928:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_RCC_OscConfig+0x788>)
 800492e:	4013      	ands	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004938:	3a01      	subs	r2, #1
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004942:	0212      	lsls	r2, r2, #8
 8004944:	4311      	orrs	r1, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800494a:	0852      	lsrs	r2, r2, #1
 800494c:	3a01      	subs	r2, #1
 800494e:	0552      	lsls	r2, r2, #21
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0652      	lsls	r2, r2, #25
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004962:	06d2      	lsls	r2, r2, #27
 8004964:	430a      	orrs	r2, r1
 8004966:	4912      	ldr	r1, [pc, #72]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004968:	4313      	orrs	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 8004972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 800497e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004984:	f7fc ffc0 	bl	8001908 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fc ffbc 	bl	8001908 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e058      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <HAL_RCC_OscConfig+0x784>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049aa:	e050      	b.n	8004a4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e04f      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
 80049b0:	40021000 	.word	0x40021000
 80049b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b8:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d144      	bne.n	8004a4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049dc:	f7fc ff94 	bl	8001908 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fc ff90 	bl	8001908 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e02c      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x7b8>
 8004a02:	e024      	b.n	8004a4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d01f      	beq.n	8004a4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 8004a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fc ff77 	bl	8001908 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fc ff73 	bl	8001908 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e00f      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4905      	ldr	r1, [pc, #20]	; (8004a58 <HAL_RCC_OscConfig+0x82c>)
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x830>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	60cb      	str	r3, [r1, #12]
 8004a48:	e001      	b.n	8004a4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	feeefffc 	.word	0xfeeefffc

08004a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e11d      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b90      	ldr	r3, [pc, #576]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d910      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b8d      	ldr	r3, [pc, #564]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	498b      	ldr	r1, [pc, #556]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b89      	ldr	r3, [pc, #548]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e105      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	4b81      	ldr	r3, [pc, #516]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d908      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b7e      	ldr	r3, [pc, #504]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	497b      	ldr	r1, [pc, #492]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d079      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d11e      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aea:	4b75      	ldr	r3, [pc, #468]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0dc      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004afa:	f000 f9dd 	bl	8004eb8 <RCC_GetSysClockFreqFromPLLSource>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4a70      	ldr	r2, [pc, #448]	; (8004cc4 <HAL_RCC_ClockConfig+0x264>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d946      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b06:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d140      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b12:	4b6b      	ldr	r3, [pc, #428]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1a:	4a69      	ldr	r2, [pc, #420]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e035      	b.n	8004b94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b30:	4b63      	ldr	r3, [pc, #396]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d115      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b9      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b48:	4b5d      	ldr	r3, [pc, #372]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0ad      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b58:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0a5      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004b68:	f000 f8b4 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4a55      	ldr	r2, [pc, #340]	; (8004cc4 <HAL_RCC_ClockConfig+0x264>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d90f      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b74:	4b52      	ldr	r3, [pc, #328]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b80:	4b4f      	ldr	r3, [pc, #316]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b88:	4a4d      	ldr	r2, [pc, #308]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b94:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 0203 	bic.w	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4947      	ldr	r1, [pc, #284]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fc feaf 	bl	8001908 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bae:	f7fc feab 	bl	8001908 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e077      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc4:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 020c 	and.w	r2, r3, #12
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d1eb      	bne.n	8004bae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a37      	ldr	r2, [pc, #220]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d010      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d208      	bcs.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	492b      	ldr	r1, [pc, #172]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c16:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d210      	bcs.n	8004c46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c24:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 020f 	bic.w	r2, r3, #15
 8004c2c:	4923      	ldr	r1, [pc, #140]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c34:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e036      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c52:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4918      	ldr	r1, [pc, #96]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c84:	f000 f826 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <HAL_RCC_ClockConfig+0x268>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x26c>)
 8004ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_ClockConfig+0x270>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fc fddd 	bl	8001868 <HAL_InitTick>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	04c4b400 	.word	0x04c4b400
 8004cc8:	080063dc 	.word	0x080063dc
 8004ccc:	200000b4 	.word	0x200000b4
 8004cd0:	200000b8 	.word	0x200000b8

08004cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce2:	4b3e      	ldr	r3, [pc, #248]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cec:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d121      	bne.n	8004d46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d11e      	bne.n	8004d46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d08:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d14:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e005      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d24:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d30:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d4c:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e004      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d58:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d134      	bne.n	8004dcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d003      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0xac>
 8004d78:	e005      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d7c:	617b      	str	r3, [r7, #20]
      break;
 8004d7e:	e005      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d82:	617b      	str	r3, [r7, #20]
      break;
 8004d84:	e002      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	617b      	str	r3, [r7, #20]
      break;
 8004d8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	3301      	adds	r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	fb03 f202 	mul.w	r2, r3, r2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	0e5b      	lsrs	r3, r3, #25
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	080063ec 	.word	0x080063ec
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	007a1200 	.word	0x007a1200

08004dec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	200000b4 	.word	0x200000b4

08004e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e1c:	f7ff f942 	bl	80040a4 <HAL_PWREx_GetVoltageRange>
 8004e20:	6178      	str	r0, [r7, #20]
 8004e22:	e014      	b.n	8004e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e3c:	f7ff f932 	bl	80040a4 <HAL_PWREx_GetVoltageRange>
 8004e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d10b      	bne.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d913      	bls.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e60:	d902      	bls.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e62:	2302      	movs	r3, #2
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e00d      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e68:	2301      	movs	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e00a      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b7f      	cmp	r3, #127	; 0x7f
 8004e72:	d902      	bls.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e74:	2302      	movs	r3, #2
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e004      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d101      	bne.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e80:	2301      	movs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 020f 	bic.w	r2, r3, #15
 8004e8c:	4909      	ldr	r1, [pc, #36]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40022000 	.word	0x40022000

08004eb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d00b      	beq.n	8004ee6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d825      	bhi.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d008      	beq.n	8004eec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d11f      	bne.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ee2:	613b      	str	r3, [r7, #16]
    break;
 8004ee4:	e01f      	b.n	8004f26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ee8:	613b      	str	r3, [r7, #16]
    break;
 8004eea:	e01c      	b.n	8004f26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d107      	bne.n	8004f08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e005      	b.n	8004f14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004f14:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	613b      	str	r3, [r7, #16]
    break;
 8004f1e:	e002      	b.n	8004f26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
    break;
 8004f24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	3301      	adds	r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	fb03 f202 	mul.w	r2, r3, r2
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	0e5b      	lsrs	r3, r3, #25
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f66:	683b      	ldr	r3, [r7, #0]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40021000 	.word	0x40021000
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	007a1200 	.word	0x007a1200
 8004f80:	080063ec 	.word	0x080063ec

08004f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f90:	2300      	movs	r3, #0
 8004f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d040      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d02a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d825      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fac:	2b60      	cmp	r3, #96	; 0x60
 8004fae:	d026      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fb0:	2b60      	cmp	r3, #96	; 0x60
 8004fb2:	d821      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d006      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d81d      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d010      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004fc4:	e018      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc6:	4b89      	ldr	r3, [pc, #548]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4a88      	ldr	r2, [pc, #544]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd2:	e015      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb02 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe4:	e00c      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3320      	adds	r3, #32
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fbed 	bl	80057cc <RCCEx_PLLSAI2_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005006:	4b79      	ldr	r3, [pc, #484]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005014:	4975      	ldr	r1, [pc, #468]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800501c:	e001      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d047      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005036:	d030      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d82a      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800503e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005042:	d02a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005048:	d824      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d008      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d81e      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d010      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005060:	e018      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005062:	4b62      	ldr	r3, [pc, #392]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4a61      	ldr	r2, [pc, #388]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800506e:	e015      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fab4 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005080:	e00c      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3320      	adds	r3, #32
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fb9f 	bl	80057cc <RCCEx_PLLSAI2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005092:	e003      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	74fb      	strb	r3, [r7, #19]
      break;
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800509a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050a2:	4b52      	ldr	r3, [pc, #328]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	494e      	ldr	r1, [pc, #312]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050b8:	e001      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 809f 	beq.w	800520a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050d0:	4b46      	ldr	r3, [pc, #280]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e6:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6593      	str	r3, [r2, #88]	; 0x58
 80050f2:	4b3e      	ldr	r3, [pc, #248]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fe:	2301      	movs	r3, #1
 8005100:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005102:	4b3b      	ldr	r3, [pc, #236]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a3a      	ldr	r2, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800510e:	f7fc fbfb 	bl	8001908 <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005114:	e009      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fc fbf7 	bl	8001908 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d902      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	74fb      	strb	r3, [r7, #19]
        break;
 8005128:	e005      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800512a:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ef      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d15b      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01f      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d019      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc fbb6 	bl	8001908 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519e:	e00b      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fc fbb2 	bl	8001908 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d902      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	74fb      	strb	r3, [r7, #19]
            break;
 80051b6:	e006      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ec      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10c      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	4903      	ldr	r1, [pc, #12]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	74bb      	strb	r3, [r7, #18]
 80051ea:	e005      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f8:	7c7b      	ldrb	r3, [r7, #17]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d105      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051fe:	4ba0      	ldr	r3, [pc, #640]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	4a9f      	ldr	r2, [pc, #636]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005216:	4b9a      	ldr	r3, [pc, #616]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f023 0203 	bic.w	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	4996      	ldr	r1, [pc, #600]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005238:	4b91      	ldr	r3, [pc, #580]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f023 020c 	bic.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	498e      	ldr	r1, [pc, #568]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	4985      	ldr	r1, [pc, #532]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800527c:	4b80      	ldr	r3, [pc, #512]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528a:	497d      	ldr	r1, [pc, #500]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800529e:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ac:	4974      	ldr	r1, [pc, #464]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052c0:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	496c      	ldr	r1, [pc, #432]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e2:	4b67      	ldr	r3, [pc, #412]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f0:	4963      	ldr	r1, [pc, #396]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005304:	4b5e      	ldr	r3, [pc, #376]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005312:	495b      	ldr	r1, [pc, #364]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005326:	4b56      	ldr	r3, [pc, #344]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	4952      	ldr	r1, [pc, #328]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005348:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	494a      	ldr	r1, [pc, #296]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800536a:	4b45      	ldr	r3, [pc, #276]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	4941      	ldr	r1, [pc, #260]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539a:	4939      	ldr	r1, [pc, #228]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d028      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	4930      	ldr	r1, [pc, #192]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a2b      	ldr	r2, [pc, #172]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d8:	60d3      	str	r3, [r2, #12]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f8f9 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d04d      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005414:	d108      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541c:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005422:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005426:	e012      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005434:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005446:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005456:	d106      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a08      	ldr	r2, [pc, #32]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e020      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546e:	d109      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a02      	ldr	r2, [pc, #8]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	60d3      	str	r3, [r2, #12]
 800547c:	e014      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f8a5 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d028      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b4:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	4947      	ldr	r1, [pc, #284]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d2:	d106      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4a41      	ldr	r2, [pc, #260]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054de:	60d3      	str	r3, [r2, #12]
 80054e0:	e011      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ea:	d10c      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f876 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054fc:	7cfb      	ldrb	r3, [r7, #19]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	492f      	ldr	r1, [pc, #188]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	2102      	movs	r1, #2
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f851 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005546:	7cfb      	ldrb	r3, [r7, #19]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005562:	f023 0204 	bic.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556c:	491c      	ldr	r1, [pc, #112]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005580:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005586:	f023 0218 	bic.w	r2, r3, #24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	4913      	ldr	r1, [pc, #76]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b4:	490a      	ldr	r1, [pc, #40]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c6:	d105      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000

080055e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055f2:	4b72      	ldr	r3, [pc, #456]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055fe:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d103      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
       ||
 8005612:	2b00      	cmp	r3, #0
 8005614:	d142      	bne.n	800569c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	e03f      	b.n	800569c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d018      	beq.n	8005656 <RCCEx_PLLSAI1_Config+0x72>
 8005624:	2b03      	cmp	r3, #3
 8005626:	d825      	bhi.n	8005674 <RCCEx_PLLSAI1_Config+0x90>
 8005628:	2b01      	cmp	r3, #1
 800562a:	d002      	beq.n	8005632 <RCCEx_PLLSAI1_Config+0x4e>
 800562c:	2b02      	cmp	r3, #2
 800562e:	d009      	beq.n	8005644 <RCCEx_PLLSAI1_Config+0x60>
 8005630:	e020      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005632:	4b62      	ldr	r3, [pc, #392]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11d      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005642:	e01a      	b.n	800567a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005644:	4b5d      	ldr	r3, [pc, #372]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d116      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005654:	e013      	b.n	800567e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005656:	4b59      	ldr	r3, [pc, #356]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005672:	e006      	b.n	8005682 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	e004      	b.n	8005684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800567a:	bf00      	nop
 800567c:	e002      	b.n	8005684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005682:	bf00      	nop
    }

    if(status == HAL_OK)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800568a:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4949      	ldr	r1, [pc, #292]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 8086 	bne.w	80057b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a44      	ldr	r2, [pc, #272]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b0:	f7fc f92a 	bl	8001908 <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b6:	e009      	b.n	80056cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b8:	f7fc f926 	bl	8001908 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ca:	e005      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ef      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d168      	bne.n	80057b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d113      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e4:	4b35      	ldr	r3, [pc, #212]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6892      	ldr	r2, [r2, #8]
 80056f0:	0211      	lsls	r1, r2, #8
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	06d2      	lsls	r2, r2, #27
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6852      	ldr	r2, [r2, #4]
 80056fe:	3a01      	subs	r2, #1
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	430a      	orrs	r2, r1
 8005704:	492d      	ldr	r1, [pc, #180]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
 800570a:	e02d      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d115      	bne.n	800573e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005712:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	4b2b      	ldr	r3, [pc, #172]	; (80057c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	0211      	lsls	r1, r2, #8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6912      	ldr	r2, [r2, #16]
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0552      	lsls	r2, r2, #21
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	3a01      	subs	r2, #1
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	430a      	orrs	r2, r1
 8005736:	4921      	ldr	r1, [pc, #132]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
 800573c:	e014      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800573e:	4b1f      	ldr	r3, [pc, #124]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6892      	ldr	r2, [r2, #8]
 800574a:	0211      	lsls	r1, r2, #8
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6952      	ldr	r2, [r2, #20]
 8005750:	0852      	lsrs	r2, r2, #1
 8005752:	3a01      	subs	r2, #1
 8005754:	0652      	lsls	r2, r2, #25
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6852      	ldr	r2, [r2, #4]
 800575c:	3a01      	subs	r2, #1
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	430a      	orrs	r2, r1
 8005762:	4916      	ldr	r1, [pc, #88]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800576e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fc f8c8 	bl	8001908 <HAL_GetTick>
 8005778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800577a:	e009      	b.n	8005790 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577c:	f7fc f8c4 	bl	8001908 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d902      	bls.n	8005790 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	73fb      	strb	r3, [r7, #15]
          break;
 800578e:	e005      	b.n	800579c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ef      	beq.n	800577c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	4904      	ldr	r1, [pc, #16]	; (80057bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	07ff800f 	.word	0x07ff800f
 80057c4:	ff9f800f 	.word	0xff9f800f
 80057c8:	f9ff800f 	.word	0xf9ff800f

080057cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057da:	4b72      	ldr	r3, [pc, #456]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057e6:	4b6f      	ldr	r3, [pc, #444]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0203 	and.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d103      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
       ||
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d142      	bne.n	8005884 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	e03f      	b.n	8005884 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d018      	beq.n	800583e <RCCEx_PLLSAI2_Config+0x72>
 800580c:	2b03      	cmp	r3, #3
 800580e:	d825      	bhi.n	800585c <RCCEx_PLLSAI2_Config+0x90>
 8005810:	2b01      	cmp	r3, #1
 8005812:	d002      	beq.n	800581a <RCCEx_PLLSAI2_Config+0x4e>
 8005814:	2b02      	cmp	r3, #2
 8005816:	d009      	beq.n	800582c <RCCEx_PLLSAI2_Config+0x60>
 8005818:	e020      	b.n	800585c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800581a:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11d      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582a:	e01a      	b.n	8005862 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800582c:	4b5d      	ldr	r3, [pc, #372]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d116      	bne.n	8005866 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583c:	e013      	b.n	8005866 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800583e:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10f      	bne.n	800586a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800584a:	4b56      	ldr	r3, [pc, #344]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800585a:	e006      	b.n	800586a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]
      break;
 8005860:	e004      	b.n	800586c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800586a:	bf00      	nop
    }

    if(status == HAL_OK)
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d108      	bne.n	8005884 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005872:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4949      	ldr	r1, [pc, #292]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 8086 	bne.w	8005998 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800588c:	4b45      	ldr	r3, [pc, #276]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a44      	ldr	r2, [pc, #272]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fc f836 	bl	8001908 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a0:	f7fc f832 	bl	8001908 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
        break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058b4:	4b3b      	ldr	r3, [pc, #236]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ef      	bne.n	80058a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d168      	bne.n	8005998 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d113      	bne.n	80058f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	4b35      	ldr	r3, [pc, #212]	; (80059a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6892      	ldr	r2, [r2, #8]
 80058d8:	0211      	lsls	r1, r2, #8
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	06d2      	lsls	r2, r2, #27
 80058e0:	4311      	orrs	r1, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6852      	ldr	r2, [r2, #4]
 80058e6:	3a01      	subs	r2, #1
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	430a      	orrs	r2, r1
 80058ec:	492d      	ldr	r1, [pc, #180]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	614b      	str	r3, [r1, #20]
 80058f2:	e02d      	b.n	8005950 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d115      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058fa:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	0211      	lsls	r1, r2, #8
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6912      	ldr	r2, [r2, #16]
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0552      	lsls	r2, r2, #21
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	430a      	orrs	r2, r1
 800591e:	4921      	ldr	r1, [pc, #132]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	614b      	str	r3, [r1, #20]
 8005924:	e014      	b.n	8005950 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005926:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6892      	ldr	r2, [r2, #8]
 8005932:	0211      	lsls	r1, r2, #8
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6952      	ldr	r2, [r2, #20]
 8005938:	0852      	lsrs	r2, r2, #1
 800593a:	3a01      	subs	r2, #1
 800593c:	0652      	lsls	r2, r2, #25
 800593e:	4311      	orrs	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6852      	ldr	r2, [r2, #4]
 8005944:	3a01      	subs	r2, #1
 8005946:	0112      	lsls	r2, r2, #4
 8005948:	430a      	orrs	r2, r1
 800594a:	4916      	ldr	r1, [pc, #88]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594c:	4313      	orrs	r3, r2
 800594e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fb ffd4 	bl	8001908 <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005962:	e009      	b.n	8005978 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005964:	f7fb ffd0 	bl	8001908 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d902      	bls.n	8005978 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	73fb      	strb	r3, [r7, #15]
          break;
 8005976:	e005      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ef      	beq.n	8005964 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	4904      	ldr	r1, [pc, #16]	; (80059a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	07ff800f 	.word	0x07ff800f
 80059ac:	ff9f800f 	.word	0xff9f800f
 80059b0:	f9ff800f 	.word	0xf9ff800f

080059b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e049      	b.n	8005a5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fe42 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f000 fa9a 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d001      	beq.n	8005a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e04f      	b.n	8005b1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa6:	d018      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_TIM_Base_Start_IT+0x76>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d115      	bne.n	8005b06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d015      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0xb4>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d011      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	e008      	b.n	8005b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e000      	b.n	8005b1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0202 	mvn.w	r2, #2
 8005b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9ad 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f99f 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9b0 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0204 	mvn.w	r2, #4
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f987 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f979 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f98a 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0208 	mvn.w	r2, #8
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f961 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f953 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f964 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0210 	mvn.w	r2, #16
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2208      	movs	r2, #8
 8005c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f93b 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f92d 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f93e 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0201 	mvn.w	r2, #1
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fa fe00 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 faf2 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 faea 	bl	80062cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8fd 	bl	8005f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0220 	mvn.w	r2, #32
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fab2 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIM_ConfigClockSource+0x1c>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e0b6      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x18a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da0:	d03e      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0xd8>
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da6:	f200 8087 	bhi.w	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dae:	f000 8086 	beq.w	8005ebe <HAL_TIM_ConfigClockSource+0x176>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d87f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005db8:	2b70      	cmp	r3, #112	; 0x70
 8005dba:	d01a      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xaa>
 8005dbc:	2b70      	cmp	r3, #112	; 0x70
 8005dbe:	d87b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005dc0:	2b60      	cmp	r3, #96	; 0x60
 8005dc2:	d050      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x11e>
 8005dc4:	2b60      	cmp	r3, #96	; 0x60
 8005dc6:	d877      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005dc8:	2b50      	cmp	r3, #80	; 0x50
 8005dca:	d03c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xfe>
 8005dcc:	2b50      	cmp	r3, #80	; 0x50
 8005dce:	d873      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d058      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x13e>
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d86f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d064      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8005ddc:	2b30      	cmp	r3, #48	; 0x30
 8005dde:	d86b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d060      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d867      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d05a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8005df0:	e062      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e02:	f000 f9a7 	bl	8006154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
      break;
 8005e1e:	e04f      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	f000 f990 	bl	8006154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e42:	609a      	str	r2, [r3, #8]
      break;
 8005e44:	e03c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 f904 	bl	8006060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2150      	movs	r1, #80	; 0x50
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f95d 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005e64:	e02c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 f923 	bl	80060be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2160      	movs	r1, #96	; 0x60
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f94d 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 f8e4 	bl	8006060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2140      	movs	r1, #64	; 0x40
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f93d 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e00c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 f934 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e003      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebc:	e000      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a40      	ldr	r2, [pc, #256]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a3c      	ldr	r2, [pc, #240]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a3b      	ldr	r2, [pc, #236]	; (800604c <TIM_Base_SetConfig+0x120>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3a      	ldr	r2, [pc, #232]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2f      	ldr	r2, [pc, #188]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01f      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d01b      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d017      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	; (800604c <TIM_Base_SetConfig+0x120>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a29      	ldr	r2, [pc, #164]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <TIM_Base_SetConfig+0x128>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a27      	ldr	r2, [pc, #156]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00f      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a12      	ldr	r2, [pc, #72]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00b      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a11      	ldr	r2, [pc, #68]	; (8006054 <TIM_Base_SetConfig+0x128>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a0f      	ldr	r2, [pc, #60]	; (800605c <TIM_Base_SetConfig+0x130>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d103      	bne.n	800602c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	615a      	str	r2, [r3, #20]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40014000 	.word	0x40014000
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800

08006060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 030a 	bic.w	r3, r3, #10
 800609c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0210 	bic.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	f043 0307 	orr.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	431a      	orrs	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e068      	b.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2e      	ldr	r2, [pc, #184]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2d      	ldr	r2, [pc, #180]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1e      	ldr	r2, [pc, #120]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01d      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d018      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10c      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40014000 	.word	0x40014000

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <arm_sin_f32>:
 80062e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006360 <arm_sin_f32+0x80>
 80062e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80062e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80062f4:	d504      	bpl.n	8006300 <arm_sin_f32+0x20>
 80062f6:	ee17 3a90 	vmov	r3, s15
 80062fa:	3b01      	subs	r3, #1
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006304:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006364 <arm_sin_f32+0x84>
 8006308:	ee30 0a67 	vsub.f32	s0, s0, s15
 800630c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006310:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006314:	ee17 3a90 	vmov	r3, s15
 8006318:	b29b      	uxth	r3, r3
 800631a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631e:	d21a      	bcs.n	8006356 <arm_sin_f32+0x76>
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800632e:	4a0e      	ldr	r2, [pc, #56]	; (8006368 <arm_sin_f32+0x88>)
 8006330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006338:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800633c:	ed93 7a00 	vldr	s14, [r3]
 8006340:	edd2 6a00 	vldr	s13, [r2]
 8006344:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006348:	ee20 0a26 	vmul.f32	s0, s0, s13
 800634c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006350:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006354:	4770      	bx	lr
 8006356:	ee30 0a47 	vsub.f32	s0, s0, s14
 800635a:	2101      	movs	r1, #1
 800635c:	2300      	movs	r3, #0
 800635e:	e7e6      	b.n	800632e <arm_sin_f32+0x4e>
 8006360:	3e22f983 	.word	0x3e22f983
 8006364:	44000000 	.word	0x44000000
 8006368:	0800641c 	.word	0x0800641c

0800636c <memset>:
 800636c:	4402      	add	r2, r0
 800636e:	4603      	mov	r3, r0
 8006370:	4293      	cmp	r3, r2
 8006372:	d100      	bne.n	8006376 <memset+0xa>
 8006374:	4770      	bx	lr
 8006376:	f803 1b01 	strb.w	r1, [r3], #1
 800637a:	e7f9      	b.n	8006370 <memset+0x4>

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f818 	bl	80063c4 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006c20 	.word	0x08006c20
 80063b8:	08006c20 	.word	0x08006c20
 80063bc:	08006c20 	.word	0x08006c20
 80063c0:	08006c24 	.word	0x08006c24

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
