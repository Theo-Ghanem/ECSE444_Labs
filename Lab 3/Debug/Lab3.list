
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d54  08005d54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d54  08005d54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d54  08005d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  08005d68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005d68  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159dc  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ca  00000000  00000000  00035ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  000383a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e50  00000000  00000000  00039650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8a6  00000000  00000000  0003a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014073  00000000  00000000  00066d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ad4f  00000000  00000000  0007adb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fbc  00000000  00000000  00195b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0019aac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019ab2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019ac27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080054f8 	.word	0x080054f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080054f8 	.word	0x080054f8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_d2f>:
 8000578:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800057c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000580:	bf24      	itt	cs
 8000582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058a:	d90d      	bls.n	80005a8 <__aeabi_d2f+0x30>
 800058c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800059c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005ac:	d121      	bne.n	80005f2 <__aeabi_d2f+0x7a>
 80005ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b2:	bfbc      	itt	lt
 80005b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005b8:	4770      	bxlt	lr
 80005ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c2:	f1c2 0218 	rsb	r2, r2, #24
 80005c6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ce:	fa20 f002 	lsr.w	r0, r0, r2
 80005d2:	bf18      	it	ne
 80005d4:	f040 0001 	orrne.w	r0, r0, #1
 80005d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e4:	ea40 000c 	orr.w	r0, r0, ip
 80005e8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f0:	e7cc      	b.n	800058c <__aeabi_d2f+0x14>
 80005f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005f6:	d107      	bne.n	8000608 <__aeabi_d2f+0x90>
 80005f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005fc:	bf1e      	ittt	ne
 80005fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000606:	4770      	bxne	lr
 8000608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800060c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM2_Init(void);
static void MX_DFSDM1_Init(void);
/* USER CODE BEGIN PFP */

//PART 1 ======================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin){
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000628:	d11a      	bne.n	8000660 <HAL_GPIO_EXTI_Callback+0x48>
		GPIO_PinState ledState = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 800062a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000630:	f002 fd70 	bl	8003114 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]

		if (ledState == GPIO_PIN_SET) {
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d108      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x38>
		    // The LED is currently ON
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED OFF
 800063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000644:	f002 fd96 	bl	8003174 <HAL_GPIO_TogglePin>
			playSound = 0;  // Stop Playing Sound
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_GPIO_EXTI_Callback+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED ON

			playSound = 1;  // Set the flag to start generating sound
		}
	}
}
 800064e:	e007      	b.n	8000660 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED ON
 8000650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000656:	f002 fd8d 	bl	8003174 <HAL_GPIO_TogglePin>
			playSound = 1;  // Set the flag to start generating sound
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_GPIO_EXTI_Callback+0x54>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	48000400 	.word	0x48000400
 800066c:	20000241 	.word	0x20000241

08000670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a21      	ldr	r2, [pc, #132]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d136      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(playSound){
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d032      	beq.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x7e>
		angle += 0.130899;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff1b 	bl	80004c8 <__aeabi_f2d>
 8000692:	a319      	add	r3, pc, #100	; (adr r3, 80006f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000698:	f7ff fdb8 	bl	800020c <__adddf3>
 800069c:	4602      	mov	r2, r0
 800069e:	460b      	mov	r3, r1
 80006a0:	4610      	mov	r0, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	f7ff ff68 	bl	8000578 <__aeabi_d2f>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006ac:	6013      	str	r3, [r2, #0]
		sine = (uint8_t)((arm_sin_f32(angle) + 1) * 120);
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	eeb0 0a67 	vmov.f32	s0, s15
 80006b8:	f004 feac 	bl	8005414 <arm_sin_f32>
 80006bc:	eef0 7a40 	vmov.f32	s15, s0
 80006c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800070c <HAL_TIM_PeriodElapsedCallback+0x9c>
 80006cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d4:	edc7 7a00 	vstr	s15, [r7]
 80006d8:	783b      	ldrb	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006de:	701a      	strb	r2, [r3, #0]
		// Output the sample to the DAC channel
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sine);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2208      	movs	r2, #8
 80006e6:	2100      	movs	r1, #0
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006ea:	f001 fe2a 	bl	8002342 <HAL_DAC_SetValue>
		}
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	660a2014 	.word	0x660a2014
 80006fc:	3fc0c14c 	.word	0x3fc0c14c
 8000700:	200001f0 	.word	0x200001f0
 8000704:	20000241 	.word	0x20000241
 8000708:	2000023c 	.word	0x2000023c
 800070c:	42f00000 	.word	0x42f00000
 8000710:	20000240 	.word	0x20000240
 8000714:	20000090 	.word	0x20000090

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fd11 	bl	8001142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f814 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f9f6 	bl	8000b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000728:	f000 f9c2 	bl	8000ab0 <MX_DMA_Init>
  MX_DAC1_Init();
 800072c:	f000 f8d6 	bl	80008dc <MX_DAC1_Init>
  MX_ADC1_Init();
 8000730:	f000 f85e 	bl	80007f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000734:	f000 f96c 	bl	8000a10 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000738:	f000 f904 	bl	8000944 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Pin D7
 800073c:	2100      	movs	r1, #0
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <main+0x30>)
 8000740:	f001 fdad 	bl	800229e <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x2c>
 8000746:	bf00      	nop
 8000748:	20000090 	.word	0x20000090

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2244      	movs	r2, #68	; 0x44
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fea0 	bl	80054a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800076e:	2000      	movs	r0, #0
 8000770:	f002 fd52 	bl	8003218 <HAL_PWREx_ControlVoltageScaling>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800077a:	f000 fa3b 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800077e:	2310      	movs	r3, #16
 8000780:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000792:	2301      	movs	r3, #1
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800079a:	233c      	movs	r3, #60	; 0x3c
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fdd6 	bl	8003360 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ba:	f000 fa1b 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f9dc 	bl	8003b94 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e2:	f000 fa07 	bl	8000bf4 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	; 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000808:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <MX_ADC1_Init+0xe0>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_ADC1_Init+0xdc>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_ADC1_Init+0xdc>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000826:	2204      	movs	r2, #4
 8000828:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_ADC1_Init+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000832:	2200      	movs	r2, #0
 8000834:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000838:	2202      	movs	r2, #2
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC1_Init+0xdc>)
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000846:	2201      	movs	r2, #1
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC1_Init+0xdc>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC1_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <MX_ADC1_Init+0xdc>)
 800086e:	f000 fea1 	bl	80015b4 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f9bc 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000884:	2303      	movs	r3, #3
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	237f      	movs	r3, #127	; 0x7f
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088c:	2304      	movs	r3, #4
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ADC1_Init+0xdc>)
 800089a:	f000 ffd1 	bl	8001840 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80008a4:	f000 f9a6 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_ADC1_Init+0xe8>)
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ac:	230c      	movs	r3, #12
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_ADC1_Init+0xdc>)
 80008b6:	f000 ffc3 	bl	8001840 <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80008c0:	f000 f998 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000028 	.word	0x20000028
 80008d0:	50040000 	.word	0x50040000
 80008d4:	80000001 	.word	0x80000001
 80008d8:	c7520000 	.word	0xc7520000

080008dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2228      	movs	r2, #40	; 0x28
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fdd9 	bl	80054a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_DAC1_Init+0x60>)
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_DAC1_Init+0x64>)
 80008f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_DAC1_Init+0x60>)
 80008f6:	f001 fcb0 	bl	800225a <HAL_DAC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000900:	f000 f978 	bl	8000bf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000908:	230a      	movs	r3, #10
 800090a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800090c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_DAC1_Init+0x60>)
 8000926:	f001 fd31 	bl	800238c <HAL_DAC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 f960 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000090 	.word	0x20000090
 8000940:	40007400 	.word	0x40007400

08000944 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 800094a:	4a2d      	ldr	r2, [pc, #180]	; (8000a00 <MX_DFSDM1_Init+0xbc>)
 800094c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 8000956:	2201      	movs	r2, #1
 8000958:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 800095c:	2201      	movs	r2, #1
 800095e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 8000962:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000966:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 800096a:	2236      	movs	r2, #54	; 0x36
 800096c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 8000970:	2201      	movs	r2, #1
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 8000976:	f001 ff15 	bl	80027a4 <HAL_DFSDM_FilterInit>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000980:	f000 f938 	bl	8000bf4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_DFSDM1_Init+0xc4>)
 8000988:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 800098c:	2201      	movs	r2, #1
 800098e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 8000998:	2222      	movs	r2, #34	; 0x22
 800099a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009b6:	2204      	movs	r2, #4
 80009b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_DFSDM1_Init+0xc0>)
 80009d4:	f001 fe26 	bl	8002624 <HAL_DFSDM_ChannelInit>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80009de:	f000 f909 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80009e2:	2201      	movs	r2, #1
 80009e4:	4909      	ldr	r1, [pc, #36]	; (8000a0c <MX_DFSDM1_Init+0xc8>)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_DFSDM1_Init+0xb8>)
 80009e8:	f001 ffb6 	bl	8002958 <HAL_DFSDM_FilterConfigRegChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80009f2:	f000 f8ff 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000104 	.word	0x20000104
 8000a00:	40016100 	.word	0x40016100
 8000a04:	20000158 	.word	0x20000158
 8000a08:	40016040 	.word	0x40016040
 8000a0c:	00020004 	.word	0x00020004

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a44:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a58:	f004 f846 	bl	8004ae8 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a62:	f000 f8c7 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a74:	f004 fa02 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a7e:	f000 f8b9 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a82:	2320      	movs	r3, #32
 8000a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000a90:	f004 fc1a 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a9a:	f000 f8ab 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_TIM2_Init+0x9c>)
 8000aa0:	f004 f87a 	bl	8004b98 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001f0 	.word	0x200001f0

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_DMA_Init+0x60>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <MX_DMA_Init+0x60>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6493      	str	r3, [r2, #72]	; 0x48
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_DMA_Init+0x60>)
 8000adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200d      	movs	r0, #13
 8000aec:	f001 fb7f 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000af0:	200d      	movs	r0, #13
 8000af2:	f001 fb98 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	200e      	movs	r0, #14
 8000afc:	f001 fb77 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b00:	200e      	movs	r0, #14
 8000b02:	f001 fb90 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b90:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000b92:	f002 fad7 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <MX_GPIO_Init+0xdc>)
 8000bae:	f002 f91f 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000bcc:	f002 f910 	bl	8002df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2028      	movs	r0, #40	; 0x28
 8000bd6:	f001 fb0a 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bda:	2028      	movs	r0, #40	; 0x28
 8000bdc:	f001 fb23 	bl	8002226 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0a8      	sub	sp, #160	; 0xa0
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2294      	movs	r2, #148	; 0x94
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fc21 	bl	80054a0 <memset>
  if(hadc->Instance==ADC1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0x80>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d12b      	bne.n	8000cc0 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c76:	2301      	movs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c7e:	2318      	movs	r3, #24
 8000c80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fa0d 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000ca4:	f7ff ffa6 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_ADC_MspInit+0x84>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_ADC_MspInit+0x84>)
 8000cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_ADC_MspInit+0x84>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	37a0      	adds	r7, #160	; 0xa0
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	50040000 	.word	0x50040000
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2b      	ldr	r2, [pc, #172]	; (8000d9c <HAL_DAC_MspInit+0xcc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d14f      	bne.n	8000d92 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000cf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <HAL_DAC_MspInit+0xd0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d22:	2310      	movs	r3, #16
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f002 f85a 	bl	8002df0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d3e:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <HAL_DAC_MspInit+0xd8>)
 8000d40:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d44:	2206      	movs	r2, #6
 8000d46:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d78:	f001 fe80 	bl	8002a7c <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000d82:	f7ff ff37 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_DAC_MspInit+0xd4>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40007400 	.word	0x40007400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	200000a4 	.word	0x200000a4
 8000da8:	40020030 	.word	0x40020030

08000dac <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ae      	sub	sp, #184	; 0xb8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2294      	movs	r2, #148	; 0x94
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fb67 	bl	80054a0 <memset>
  if(DFSDM1_Init == 0)
 8000dd2:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d14b      	bne.n	8000e72 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f964 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff fefd 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <HAL_DFSDM_FilterMspInit+0x140>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <HAL_DFSDM_FilterMspInit+0x140>)
 8000e02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000e04:	4b39      	ldr	r3, [pc, #228]	; (8000eec <HAL_DFSDM_FilterMspInit+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10b      	bne.n	8000e24 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e10:	4a37      	ldr	r2, [pc, #220]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e16:	6613      	str	r3, [r2, #96]	; 0x60
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <HAL_DFSDM_FilterMspInit+0x148>)
 8000e64:	f001 ffc4 	bl	8002df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000e70:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d130      	bne.n	8000ede <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <HAL_DFSDM_FilterMspInit+0x154>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e84:	2256      	movs	r2, #86	; 0x56
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000eb8:	f001 fde0 	bl	8002a7c <HAL_DMA_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000ec2:	f7ff fe97 	bl	8000bf4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_DFSDM_FilterMspInit+0x150>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000248 	.word	0x20000248
 8000eec:	20000244 	.word	0x20000244
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	40016100 	.word	0x40016100
 8000efc:	20000190 	.word	0x20000190
 8000f00:	40020044 	.word	0x40020044

08000f04 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ae      	sub	sp, #184	; 0xb8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2294      	movs	r2, #148	; 0x94
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fabb 	bl	80054a0 <memset>
  if(DFSDM1_Init == 0)
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d14b      	bne.n	8000fca <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f8b8 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f4e:	f7ff fe51 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10b      	bne.n	8000f7c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f94:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000fbc:	f001 ff18 	bl	8002df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000fc8:	6013      	str	r3, [r2, #0]
  }

}
 8000fca:	bf00      	nop
 8000fcc:	37b8      	adds	r7, #184	; 0xb8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000248 	.word	0x20000248
 8000fd8:	20000244 	.word	0x20000244
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48001000 	.word	0x48001000

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d113      	bne.n	800101e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_TIM_Base_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_TIM_Base_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	201c      	movs	r0, #28
 8001014:	f001 f8eb 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001018:	201c      	movs	r0, #28
 800101a:	f001 f904 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8b8 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA1_Channel3_IRQHandler+0x10>)
 8001086:	f001 fda1 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000a4 	.word	0x200000a4

08001094 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel4_IRQHandler+0x10>)
 800109a:	f001 fd97 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000190 	.word	0x20000190

080010a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM2_IRQHandler+0x10>)
 80010ae:	f003 fde3 	bl	8004c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001f0 	.word	0x200001f0

080010bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80010c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010c4:	f002 f870 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f004 f9c7 	bl	80054b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff faf9 	bl	8000718 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001134:	08005d5c 	.word	0x08005d5c
  ldr r2, =_sbss
 8001138:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800113c:	20000274 	.word	0x20000274

08001140 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_IRQHandler>

08001142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f001 f843 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f80e 	bl	8001174 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001164:	f7ff fd4c 	bl	8000c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d023      	beq.n	80011d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_InitTick+0x70>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f84f 	bl	8002242 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d809      	bhi.n	80011c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f001 f819 	bl	80021ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e001      	b.n	80011d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	2000024c 	.word	0x2000024c

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000024c 	.word	0x2000024c

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3360      	adds	r3, #96	; 0x60
 80012ee:	461a      	mov	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LL_ADC_SetOffset+0x44>)
 80012fe:	4013      	ands	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	4313      	orrs	r3, r2
 800130c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	03fff000 	.word	0x03fff000

08001324 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3360      	adds	r3, #96	; 0x60
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	615a      	str	r2, [r3, #20]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3330      	adds	r3, #48	; 0x30
 80013bc:	461a      	mov	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	211f      	movs	r1, #31
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0e9b      	lsrs	r3, r3, #26
 80013e4:	f003 011f 	and.w	r1, r3, #31
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3314      	adds	r3, #20
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	0e5b      	lsrs	r3, r3, #25
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	0d1b      	lsrs	r3, r3, #20
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2107      	movs	r1, #7
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	401a      	ands	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0318 	and.w	r3, r3, #24
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001480:	40d9      	lsrs	r1, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	400b      	ands	r3, r1
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	431a      	orrs	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	0007ffff 	.word	0x0007ffff

080014a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6093      	str	r3, [r2, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001504:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800152c:	d101      	bne.n	8001532 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <LL_ADC_IsEnabled+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_IsEnabled+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b04      	cmp	r3, #4
 8001578:	d101      	bne.n	800157e <LL_ADC_REG_IsConversionOngoing+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b08      	cmp	r3, #8
 800159e:	d101      	bne.n	80015a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e129      	b.n	8001822 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fb33 	bl	8000c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff67 	bl	80014c8 <LL_ADC_IsDeepPowerDownEnabled>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff4d 	bl	80014a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff82 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d115      	bne.n	8001646 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff66 	bl	80014f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_ADC_Init+0x278>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	4a81      	ldr	r2, [pc, #516]	; (8001830 <HAL_ADC_Init+0x27c>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	3301      	adds	r3, #1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001638:	e002      	b.n	8001640 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff64 	bl	8001518 <LL_ADC_IsInternalRegulatorEnabled>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff75 	bl	8001566 <LL_ADC_REG_IsConversionOngoing>
 800167c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 80c2 	bne.w	8001810 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 80be 	bne.w	8001810 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800169c:	f043 0202 	orr.w	r2, r3, #2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff49 	bl	8001540 <LL_ADC_IsEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b4:	485f      	ldr	r0, [pc, #380]	; (8001834 <HAL_ADC_Init+0x280>)
 80016b6:	f7ff ff43 	bl	8001540 <LL_ADC_IsEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4619      	mov	r1, r3
 80016c6:	485c      	ldr	r0, [pc, #368]	; (8001838 <HAL_ADC_Init+0x284>)
 80016c8:	f7ff fdd4 	bl	8001274 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e5b      	ldrb	r3, [r3, #25]
 80016d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80016dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80016e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	3b01      	subs	r3, #1
 8001700:	045b      	lsls	r3, r3, #17
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d009      	beq.n	8001724 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b44      	ldr	r3, [pc, #272]	; (800183c <HAL_ADC_Init+0x288>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	430b      	orrs	r3, r1
 8001736:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff25 	bl	800158c <LL_ADC_INJ_IsConversionOngoing>
 8001742:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d140      	bne.n	80017cc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13d      	bne.n	80017cc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800175a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001772:	f023 0306 	bic.w	r3, r3, #6
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001786:	2b01      	cmp	r3, #1
 8001788:	d118      	bne.n	80017bc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ac:	430a      	orrs	r2, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	e007      	b.n	80017cc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10c      	bne.n	80017ee <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f023 010f 	bic.w	r1, r3, #15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	e007      	b.n	80017fe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020f 	bic.w	r2, r2, #15
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
 800180e:	e007      	b.n	8001820 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001820:	7ffb      	ldrb	r3, [r7, #31]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000
 8001830:	053e2d63 	.word	0x053e2d63
 8001834:	50040000 	.word	0x50040000
 8001838:	50040300 	.word	0x50040300
 800183c:	fff0c007 	.word	0xfff0c007

08001840 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b6      	sub	sp, #216	; 0xd8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x22>
 800185e:	2302      	movs	r3, #2
 8001860:	e3d5      	b.n	800200e <HAL_ADC_ConfigChannel+0x7ce>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fe79 	bl	8001566 <LL_ADC_REG_IsConversionOngoing>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 83ba 	bne.w	8001ff0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d824      	bhi.n	80018d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	3b02      	subs	r3, #2
 8001892:	2b03      	cmp	r3, #3
 8001894:	d81b      	bhi.n	80018ce <HAL_ADC_ConfigChannel+0x8e>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <HAL_ADC_ConfigChannel+0x5c>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018c5 	.word	0x080018c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80018ac:	230c      	movs	r3, #12
 80018ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018b2:	e010      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80018b4:	2312      	movs	r3, #18
 80018b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018ba:	e00c      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80018bc:	2318      	movs	r3, #24
 80018be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018c2:	e008      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018cc:	e003      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80018ce:	2306      	movs	r3, #6
 80018d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80018e4:	f7ff fd62 	bl	80013ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe3a 	bl	8001566 <LL_ADC_REG_IsConversionOngoing>
 80018f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe46 	bl	800158c <LL_ADC_INJ_IsConversionOngoing>
 8001900:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 81bf 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800190e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 81ba 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001920:	d10f      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff fd69 	bl	8001404 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd23 	bl	8001386 <LL_ADC_SetSamplingTimeCommonConfig>
 8001940:	e00e      	b.n	8001960 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	461a      	mov	r2, r3
 8001950:	f7ff fd58 	bl	8001404 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd13 	bl	8001386 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b04      	cmp	r3, #4
 8001980:	d00a      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001992:	f7ff fca3 	bl	80012dc <LL_ADC_SetOffset>
 8001996:	e179      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fcc0 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10a      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x184>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fcb5 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	f003 021f 	and.w	r2, r3, #31
 80019c2:	e01e      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1c2>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fcaa 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e004      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80019f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x1da>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	e018      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x20c>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e004      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001a42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d106      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fc79 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fc5d 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x24a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fc52 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	e01e      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x288>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fc47 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e004      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001abc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x2a0>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	e018      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x2d2>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e004      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d106      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fc16 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fbfa 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x310>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fbef 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 021f 	and.w	r2, r3, #31
 8001b4e:	e01e      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x34e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fbe4 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e004      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x366>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	e014      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x390>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2102      	movs	r1, #2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fbb7 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2103      	movs	r1, #3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fb9b 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x3ce>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb90 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	e017      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x3fe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2103      	movs	r1, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb85 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c28:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e003      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x416>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	e011      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x43a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c66:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e003      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d106      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fb62 	bl	8001350 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fc55 	bl	8001540 <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 813f 	bne.w	8001f1c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f7ff fbd6 	bl	800145c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a8e      	ldr	r2, [pc, #568]	; (8001ef0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 8130 	bne.w	8001f1c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x4a4>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	bf94      	ite	ls
 8001cdc:	2301      	movls	r3, #1
 8001cde:	2300      	movhi	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e019      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x4d8>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	bf94      	ite	ls
 8001d12:	2301      	movls	r3, #1
 8001d14:	2300      	movhi	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d079      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4f8>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0e9b      	lsrs	r3, r3, #26
 8001d2e:	3301      	adds	r3, #1
 8001d30:	069b      	lsls	r3, r3, #26
 8001d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d36:	e015      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x524>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e003      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	069b      	lsls	r3, r3, #26
 8001d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x544>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	e017      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x574>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	ea42 0103 	orr.w	r1, r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x59a>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	e018      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x5cc>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	e080      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x5ec>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	069b      	lsls	r3, r3, #26
 8001e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2a:	e015      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x618>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	069b      	lsls	r3, r3, #26
 8001e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x638>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	e017      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x668>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	61bb      	str	r3, [r7, #24]
  return result;
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e003      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x694>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b1e      	subs	r3, #30
 8001ecc:	051b      	lsls	r3, r3, #20
 8001ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	e01d      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x6d0>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	60fb      	str	r3, [r7, #12]
  return result;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e005      	b.n	8001efc <HAL_ADC_ConfigChannel+0x6bc>
 8001ef0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	051b      	lsls	r3, r3, #20
 8001f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7ff fa74 	bl	8001404 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d06c      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f28:	483c      	ldr	r0, [pc, #240]	; (800201c <HAL_ADC_ConfigChannel+0x7dc>)
 8001f2a:	f7ff f9c9 	bl	80012c0 <LL_ADC_GetCommonPathInternalCh>
 8001f2e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d127      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d121      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a35      	ldr	r2, [pc, #212]	; (8002024 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d157      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <HAL_ADC_ConfigChannel+0x7dc>)
 8001f5e:	f7ff f99c 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_ADC_ConfigChannel+0x7e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	4a30      	ldr	r2, [pc, #192]	; (800202c <HAL_ADC_ConfigChannel+0x7ec>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f9      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f8a:	e03a      	b.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_ADC_ConfigChannel+0x7f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d113      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10d      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <HAL_ADC_ConfigChannel+0x7e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d12a      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4819      	ldr	r0, [pc, #100]	; (800201c <HAL_ADC_ConfigChannel+0x7dc>)
 8001fb8:	f7ff f96f 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbc:	e021      	b.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_ADC_ConfigChannel+0x7f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d11c      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d116      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_ADC_ConfigChannel+0x7e4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d111      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <HAL_ADC_ConfigChannel+0x7dc>)
 8001fea:	f7ff f956 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
 8001fee:	e008      	b.n	8002002 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800200a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800200e:	4618      	mov	r0, r3
 8002010:	37d8      	adds	r7, #216	; 0xd8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	80080000 	.word	0x80080000
 800201c:	50040300 	.word	0x50040300
 8002020:	c7520000 	.word	0xc7520000
 8002024:	50040000 	.word	0x50040000
 8002028:	20000000 	.word	0x20000000
 800202c:	053e2d63 	.word	0x053e2d63
 8002030:	cb840000 	.word	0xcb840000
 8002034:	80000001 	.word	0x80000001

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e014      	b.n	8002296 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe fd27 	bl	8000cd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	795b      	ldrb	r3, [r3, #5]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_DAC_Start+0x16>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e040      	b.n	8002336 <HAL_DAC_Start+0x98>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d11d      	bne.n	8002328 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	e014      	b.n	8002328 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2102      	movs	r1, #2
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0202 	orr.w	r2, r2, #2
 8002326:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002342:	b480      	push	{r7}
 8002344:	b087      	sub	sp, #28
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	3308      	adds	r3, #8
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e004      	b.n	8002376 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3314      	adds	r3, #20
 8002374:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	461a      	mov	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	795b      	ldrb	r3, [r3, #5]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_DAC_ConfigChannel+0x1c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e137      	b.n	8002618 <HAL_DAC_ConfigChannel+0x28c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2202      	movs	r2, #2
 80023b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	f040 8081 	bne.w	80024c0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80023be:	f7fe ff29 	bl	8001214 <HAL_GetTick>
 80023c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d140      	bne.n	800244c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023ca:	e018      	b.n	80023fe <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023cc:	f7fe ff22 	bl	8001214 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d911      	bls.n	80023fe <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f043 0208 	orr.w	r2, r3, #8
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2203      	movs	r2, #3
 80023f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e10c      	b.n	8002618 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1df      	bne.n	80023cc <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe ff0d 	bl	800122c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	69d2      	ldr	r2, [r2, #28]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
 800241c:	e023      	b.n	8002466 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800241e:	f7fe fef9 	bl	8001214 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d90f      	bls.n	800244c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0a      	bge.n	800244c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f043 0208 	orr.w	r2, r3, #8
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2203      	movs	r2, #3
 8002446:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0e5      	b.n	8002618 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	2b00      	cmp	r3, #0
 8002454:	dbe3      	blt.n	800241e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fee8 	bl	800122c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	69d2      	ldr	r2, [r2, #28]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	ea02 0103 	and.w	r1, r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	21ff      	movs	r1, #255	; 0xff
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	ea02 0103 	and.w	r1, r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d11d      	bne.n	8002504 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	221f      	movs	r2, #31
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	431a      	orrs	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4313      	orrs	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43da      	mvns	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	f640 72fe 	movw	r2, #4094	; 0xffe
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	4013      	ands	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	4313      	orrs	r3, r2
 800259e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a8:	d104      	bne.n	80025b4 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e018      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	e00f      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80025c6:	f001 fcab 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 80025ca:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_DAC_ConfigChannel+0x294>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d904      	bls.n	80025de <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e003      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025e4:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	22c0      	movs	r2, #192	; 0xc0
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	04c4b400 	.word	0x04c4b400

08002624 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0ac      	b.n	8002790 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f9d2 	bl	80029e4 <DFSDM_GetChannelFromInstance>
 8002640:	4603      	mov	r3, r0
 8002642:	4a55      	ldr	r2, [pc, #340]	; (8002798 <HAL_DFSDM_ChannelInit+0x174>)
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e09f      	b.n	8002790 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe fc57 	bl	8000f04 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_DFSDM_ChannelInit+0x178>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_DFSDM_ChannelInit+0x178>)
 800265e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002660:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_DFSDM_ChannelInit+0x178>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d125      	bne.n	80026b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800266e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002672:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4948      	ldr	r1, [pc, #288]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002688:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800268c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d108      	bne.n	80026a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	493f      	ldr	r1, [pc, #252]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3c      	ldr	r2, [pc, #240]	; (80027a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020f 	bic.w	r2, r2, #15
 80026f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6819      	ldr	r1, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002718:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 0207 	and.w	r2, r2, #7
 8002744:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002770:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f930 	bl	80029e4 <DFSDM_GetChannelFromInstance>
 8002784:	4602      	mov	r2, r0
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <HAL_DFSDM_ChannelInit+0x174>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000254 	.word	0x20000254
 800279c:	20000250 	.word	0x20000250
 80027a0:	40016000 	.word	0x40016000

080027a4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0ca      	b.n	800294c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a66      	ldr	r2, [pc, #408]	; (8002954 <HAL_DFSDM_FilterInit+0x1b0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d109      	bne.n	80027d4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d003      	beq.n	80027d0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0bb      	b.n	800294c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fadd 	bl	8000dac <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002800:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7a1b      	ldrb	r3, [r3, #8]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d108      	bne.n	800281c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e007      	b.n	800282c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800282a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7a5b      	ldrb	r3, [r3, #9]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d108      	bne.n	8002846 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e007      	b.n	8002856 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	f023 0308 	bic.w	r3, r3, #8
 8002868:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d108      	bne.n	8002884 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7c1b      	ldrb	r3, [r3, #16]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0210 	orr.w	r2, r2, #16
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0210 	bic.w	r2, r2, #16
 80028ac:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7c5b      	ldrb	r3, [r3, #17]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0220 	bic.w	r2, r2, #32
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80028e6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80028ea:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6959      	ldr	r1, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028fe:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002906:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7c1a      	ldrb	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40016100 	.word	0x40016100

08002958 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02e      	beq.n	80029d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002978:	2bff      	cmp	r3, #255	; 0xff
 800297a:	d029      	beq.n	80029d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10d      	bne.n	80029b2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e00a      	b.n	80029c8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
 80029ce:	e001      	b.n	80029d4 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <DFSDM_GetChannelFromInstance+0x7c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d102      	bne.n	80029fa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e02b      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <DFSDM_GetChannelFromInstance+0x80>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d102      	bne.n	8002a08 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e024      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <DFSDM_GetChannelFromInstance+0x84>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d102      	bne.n	8002a16 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a10:	2302      	movs	r3, #2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e01d      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <DFSDM_GetChannelFromInstance+0x88>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d102      	bne.n	8002a24 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e016      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a2c:	2305      	movs	r3, #5
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e00f      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <DFSDM_GetChannelFromInstance+0x90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d102      	bne.n	8002a40 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e008      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <DFSDM_GetChannelFromInstance+0x94>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d102      	bne.n	8002a4e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e001      	b.n	8002a52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40016000 	.word	0x40016000
 8002a64:	40016020 	.word	0x40016020
 8002a68:	40016040 	.word	0x40016040
 8002a6c:	40016080 	.word	0x40016080
 8002a70:	400160a0 	.word	0x400160a0
 8002a74:	400160c0 	.word	0x400160c0
 8002a78:	400160e0 	.word	0x400160e0

08002a7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e08d      	b.n	8002baa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_DMA_Init+0x138>)
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d80f      	bhi.n	8002aba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b45      	ldr	r3, [pc, #276]	; (8002bb8 <HAL_DMA_Init+0x13c>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a45      	ldr	r2, [pc, #276]	; (8002bbc <HAL_DMA_Init+0x140>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	009a      	lsls	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_DMA_Init+0x144>)
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab8:	e00e      	b.n	8002ad8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_DMA_Init+0x148>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <HAL_DMA_Init+0x140>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	009a      	lsls	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_DMA_Init+0x14c>)
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8fe 	bl	8002d2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b38:	d102      	bne.n	8002b40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d010      	beq.n	8002b80 <HAL_DMA_Init+0x104>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d80c      	bhi.n	8002b80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f91e 	bl	8002da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e008      	b.n	8002b92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40020407 	.word	0x40020407
 8002bb8:	bffdfff8 	.word	0xbffdfff8
 8002bbc:	cccccccd 	.word	0xcccccccd
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	bffdfbf8 	.word	0xbffdfbf8
 8002bc8:	40020400 	.word	0x40020400

08002bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f003 031c 	and.w	r3, r3, #28
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d026      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d021      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f003 021c 	and.w	r2, r3, #28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d071      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c44:	e06c      	b.n	8002d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f003 031c 	and.w	r3, r3, #28
 8002c4e:	2202      	movs	r2, #2
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d02e      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xec>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d029      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 020a 	bic.w	r2, r2, #10
 8002c80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f003 021c 	and.w	r2, r3, #28
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2102      	movs	r1, #2
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d038      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cb6:	e033      	b.n	8002d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f003 031c 	and.w	r3, r3, #28
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02a      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x156>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 020e 	bic.w	r2, r2, #14
 8002ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f003 021c 	and.w	r2, r3, #28
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
}
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d80a      	bhi.n	8002d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d4c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6493      	str	r3, [r2, #72]	; 0x48
 8002d54:	e007      	b.n	8002d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3b08      	subs	r3, #8
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2201      	movs	r2, #1
 8002d86:	409a      	lsls	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40020407 	.word	0x40020407
 8002d9c:	4002081c 	.word	0x4002081c
 8002da0:	cccccccd 	.word	0xcccccccd
 8002da4:	40020880 	.word	0x40020880

08002da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	1000823f 	.word	0x1000823f
 8002dec:	40020940 	.word	0x40020940

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfe:	e166      	b.n	80030ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8158 	beq.w	80030c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d005      	beq.n	8002e30 <HAL_GPIO_Init+0x40>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d130      	bne.n	8002e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e66:	2201      	movs	r2, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0201 	and.w	r2, r3, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d017      	beq.n	8002ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d123      	bne.n	8002f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	6939      	ldr	r1, [r7, #16]
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80b2 	beq.w	80030c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	4a60      	ldr	r2, [pc, #384]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f70:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f7c:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_GPIO_Init+0x300>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fa6:	d02b      	beq.n	8003000 <HAL_GPIO_Init+0x210>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_GPIO_Init+0x304>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d025      	beq.n	8002ffc <HAL_GPIO_Init+0x20c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_GPIO_Init+0x308>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_GPIO_Init+0x208>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a50      	ldr	r2, [pc, #320]	; (80030fc <HAL_GPIO_Init+0x30c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d019      	beq.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a4f      	ldr	r2, [pc, #316]	; (8003100 <HAL_GPIO_Init+0x310>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x200>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a4e      	ldr	r2, [pc, #312]	; (8003104 <HAL_GPIO_Init+0x314>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1fc>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_GPIO_Init+0x318>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1f8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4c      	ldr	r2, [pc, #304]	; (800310c <HAL_GPIO_Init+0x31c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1f4>
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	e00e      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	e00c      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fe8:	2306      	movs	r3, #6
 8002fea:	e00a      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fec:	2305      	movs	r3, #5
 8002fee:	e008      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	e006      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e004      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e002      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8003000:	2300      	movs	r3, #0
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	4093      	lsls	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003012:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_GPIO_Init+0x300>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_GPIO_Init+0x320>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <HAL_GPIO_Init+0x320>)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_GPIO_Init+0x320>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c2:	4a13      	ldr	r2, [pc, #76]	; (8003110 <HAL_GPIO_Init+0x320>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f47f ae91 	bne.w	8002e00 <HAL_GPIO_Init+0x10>
  }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	48000400 	.word	0x48000400
 80030f8:	48000800 	.word	0x48000800
 80030fc:	48000c00 	.word	0x48000c00
 8003100:	48001000 	.word	0x48001000
 8003104:	48001400 	.word	0x48001400
 8003108:	48001800 	.word	0x48001800
 800310c:	48001c00 	.word	0x48001c00
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e001      	b.n	8003136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003160:	e002      	b.n	8003168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	43d9      	mvns	r1, r3
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	400b      	ands	r3, r1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fa26 	bl	8000618 <HAL_GPIO_EXTI_Callback>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d102      	bne.n	80031f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	e00b      	b.n	8003208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	e000      	b.n	8003208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003206:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40007000 	.word	0x40007000

08003218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d141      	bne.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d131      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324c:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2232      	movs	r2, #50	; 0x32
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	e002      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3b01      	subs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d102      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d158      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e057      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032a8:	e04d      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d141      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d131      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2232      	movs	r2, #50	; 0x32
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	e002      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f2      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d112      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e011      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003334:	e007      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003344:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40007000 	.word	0x40007000
 8003358:	20000000 	.word	0x20000000
 800335c:	431bde83 	.word	0x431bde83

08003360 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f000 bc08 	b.w	8003b84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003374:	4b96      	ldr	r3, [pc, #600]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337e:	4b94      	ldr	r3, [pc, #592]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80e4 	beq.w	800355e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_RCC_OscConfig+0x4c>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f040 808b 	bne.w	80034ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 8087 	bne.w	80034ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ac:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x64>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e3df      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_RCC_OscConfig+0x7e>
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	e005      	b.n	80033ea <HAL_RCC_OscConfig+0x8a>
 80033de:	4b7c      	ldr	r3, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d223      	bcs.n	8003436 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fda0 	bl	8003f38 <RCC_SetFlashLatencyFromMSIRange>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3c0      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	496d      	ldr	r1, [pc, #436]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4968      	ldr	r1, [pc, #416]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e025      	b.n	8003482 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a65      	ldr	r2, [pc, #404]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4960      	ldr	r1, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	495b      	ldr	r1, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd60 	bl	8003f38 <RCC_SetFlashLatencyFromMSIRange>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e380      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003482:	f000 fcc1 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4950      	ldr	r1, [pc, #320]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a4e      	ldr	r2, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x278>)
 80034a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fe64 	bl	8001174 <HAL_InitTick>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	e364      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d032      	beq.n	8003528 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ce:	f7fd fea1 	bl	8001214 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7fd fe9d 	bl	8001214 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e34d      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e8:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4930      	ldr	r1, [pc, #192]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	492b      	ldr	r1, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
 8003526:	e01a      	b.n	800355e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003534:	f7fd fe6e 	bl	8001214 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800353c:	f7fd fe6a 	bl	8001214 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e31a      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1dc>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d073      	beq.n	8003652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x21c>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d10e      	bne.n	8003594 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d10b      	bne.n	8003594 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d063      	beq.n	8003650 <HAL_RCC_OscConfig+0x2f0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15f      	bne.n	8003650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e2f7      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x24c>
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e025      	b.n	80035f8 <HAL_RCC_OscConfig+0x298>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d114      	bne.n	80035e0 <HAL_RCC_OscConfig+0x280>
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e013      	b.n	80035f8 <HAL_RCC_OscConfig+0x298>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08005510 	.word	0x08005510
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004
 80035e0:	4ba0      	ldr	r3, [pc, #640]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a9f      	ldr	r2, [pc, #636]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a9c      	ldr	r2, [pc, #624]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fe08 	bl	8001214 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd fe04 	bl	8001214 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e2b4      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	4b92      	ldr	r3, [pc, #584]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x2a8>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fdf4 	bl	8001214 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd fdf0 	bl	8001214 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e2a0      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003642:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x2d0>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d060      	beq.n	8003720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x310>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d119      	bne.n	800369e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d116      	bne.n	800369e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003670:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_OscConfig+0x328>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e27d      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	4973      	ldr	r1, [pc, #460]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	e040      	b.n	8003720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d023      	beq.n	80036ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a6:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fd fdaf 	bl	8001214 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fd fdab 	bl	8001214 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e25b      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036cc:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	495f      	ldr	r1, [pc, #380]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	e018      	b.n	8003720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fd8b 	bl	8001214 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fd87 	bl	8001214 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e237      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01c      	beq.n	800376e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003734:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fd66 	bl	8001214 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fd62 	bl	8001214 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e212      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <HAL_RCC_OscConfig+0x3ec>
 800376c:	e01b      	b.n	80037a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fd49 	bl	8001214 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd fd45 	bl	8001214 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1f5      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ef      	bne.n	8003786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80a6 	beq.w	8003900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037dc:	2301      	movs	r3, #1
 80037de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d118      	bne.n	800381e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f8:	f7fd fd0c 	bl	8001214 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fd08 	bl	8001214 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1b8      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <HAL_RCC_OscConfig+0x4d8>
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003836:	e029      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d115      	bne.n	800386c <HAL_RCC_OscConfig+0x50c>
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a07      	ldr	r2, [pc, #28]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a03      	ldr	r2, [pc, #12]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003860:	e014      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	4b9d      	ldr	r3, [pc, #628]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a9c      	ldr	r2, [pc, #624]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800387c:	4b99      	ldr	r3, [pc, #612]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	4a98      	ldr	r2, [pc, #608]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d016      	beq.n	80038c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fd fcbe 	bl	8001214 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389c:	f7fd fcba 	bl	8001214 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e168      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ed      	beq.n	800389c <HAL_RCC_OscConfig+0x53c>
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fca7 	bl	8001214 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fca3 	bl	8001214 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e151      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e0:	4b80      	ldr	r3, [pc, #512]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ed      	bne.n	80038ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ee:	7ffb      	ldrb	r3, [r7, #31]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b7b      	ldr	r3, [pc, #492]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4a7a      	ldr	r2, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03c      	beq.n	8003986 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01c      	beq.n	800394e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fc76 	bl	8001214 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800392c:	f7fd fc72 	bl	8001214 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e122      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800393e:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x5cc>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800394e:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fd fc59 	bl	8001214 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003966:	f7fd fc55 	bl	8001214 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e105      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003978:	4b5a      	ldr	r3, [pc, #360]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800397a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ef      	bne.n	8003966 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80f9 	beq.w	8003b82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	f040 80cf 	bne.w	8003b38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800399a:	4b52      	ldr	r3, [pc, #328]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0203 	and.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d12c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	3b01      	subs	r3, #1
 80039ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d123      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d11b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d113      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d109      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	3b01      	subs	r3, #1
 8003a02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d071      	beq.n	8003aec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d068      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a0e:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0ac      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a36:	f7fd fbed 	bl	8001214 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fbe9 	bl	8001214 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e099      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x788>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a76:	0212      	lsls	r2, r2, #8
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0552      	lsls	r2, r2, #21
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a96:	06d2      	lsls	r2, r2, #27
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4912      	ldr	r1, [pc, #72]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab8:	f7fd fbac 	bl	8001214 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd fba8 	bl	8001214 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ade:	e050      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04f      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d144      	bne.n	8003b82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b10:	f7fd fb80 	bl	8001214 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fb7c 	bl	8001214 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e02c      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x7b8>
 8003b36:	e024      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d01f      	beq.n	8003b7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fb63 	bl	8001214 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd fb5f 	bl	8001214 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4905      	ldr	r1, [pc, #20]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x830>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
 8003b7c:	e001      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	feeefffc 	.word	0xfeeefffc

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e11d      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	498b      	ldr	r1, [pc, #556]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b89      	ldr	r3, [pc, #548]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e105      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d908      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	497b      	ldr	r1, [pc, #492]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d079      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d11e      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0dc      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c2e:	f000 f9dd 	bl	8003fec <RCC_GetSysClockFreqFromPLLSource>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a70      	ldr	r2, [pc, #448]	; (8003df8 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d946      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d140      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c46:	4b6b      	ldr	r3, [pc, #428]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	4a69      	ldr	r2, [pc, #420]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e035      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b9      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0ad      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a5      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c9c:	f000 f8b4 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d90f      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ca8:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cb4:	4b4f      	ldr	r3, [pc, #316]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4947      	ldr	r1, [pc, #284]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd fa9b 	bl	8001214 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce2:	f7fd fa97 	bl	8001214 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e077      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 020c 	and.w	r2, r3, #12
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d1eb      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d208      	bcs.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	492b      	ldr	r1, [pc, #172]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d210      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 020f 	bic.w	r2, r3, #15
 8003d60:	4923      	ldr	r1, [pc, #140]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e036      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4918      	ldr	r1, [pc, #96]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4910      	ldr	r1, [pc, #64]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db8:	f000 f826 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	490c      	ldr	r1, [pc, #48]	; (8003dfc <HAL_RCC_ClockConfig+0x268>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_RCC_ClockConfig+0x26c>)
 8003dd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fd f9c9 	bl	8001174 <HAL_InitTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	04c4b400 	.word	0x04c4b400
 8003dfc:	08005510 	.word	0x08005510
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e20:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d11e      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d134      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0xa6>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8003eac:	e005      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eb0:	617b      	str	r3, [r7, #20]
      break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eb6:	617b      	str	r3, [r7, #20]
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3301      	adds	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	0e5b      	lsrs	r3, r3, #25
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f00:	69bb      	ldr	r3, [r7, #24]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08005520 	.word	0x08005520
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200

08003f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000000 	.word	0x20000000

08003f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f44:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f50:	f7ff f942 	bl	80031d8 <HAL_PWREx_GetVoltageRange>
 8003f54:	6178      	str	r0, [r7, #20]
 8003f56:	e014      	b.n	8003f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58
 8003f64:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f70:	f7ff f932 	bl	80031d8 <HAL_PWREx_GetVoltageRange>
 8003f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f88:	d10b      	bne.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d913      	bls.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2ba0      	cmp	r3, #160	; 0xa0
 8003f94:	d902      	bls.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f96:	2302      	movs	r3, #2
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e00d      	b.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e00a      	b.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa6:	d902      	bls.n	8003fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003fa8:	2302      	movs	r3, #2
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	e004      	b.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d101      	bne.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 020f 	bic.w	r2, r3, #15
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d001      	beq.n	8003fda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40022000 	.word	0x40022000

08003fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d00b      	beq.n	800401a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d825      	bhi.n	8004054 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d008      	beq.n	8004020 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11f      	bne.n	8004054 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004016:	613b      	str	r3, [r7, #16]
    break;
 8004018:	e01f      	b.n	800405a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800401a:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800401c:	613b      	str	r3, [r7, #16]
    break;
 800401e:	e01c      	b.n	800405a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004020:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d107      	bne.n	800403c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e005      	b.n	8004048 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004048:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	613b      	str	r3, [r7, #16]
    break;
 8004052:	e002      	b.n	800405a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
    break;
 8004058:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	3301      	adds	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	fb03 f202 	mul.w	r2, r3, r2
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0e5b      	lsrs	r3, r3, #25
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800409a:	683b      	ldr	r3, [r7, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40021000 	.word	0x40021000
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	007a1200 	.word	0x007a1200
 80040b4:	08005520 	.word	0x08005520

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c4:	2300      	movs	r3, #0
 80040c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d040      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d02a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d825      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040e0:	2b60      	cmp	r3, #96	; 0x60
 80040e2:	d026      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d821      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d006      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d81d      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d010      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040f8:	e018      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a88      	ldr	r2, [pc, #544]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004106:	e015      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fb02 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004118:	e00c      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3320      	adds	r3, #32
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fbed 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	74fb      	strb	r3, [r7, #19]
      break;
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800413a:	4b79      	ldr	r3, [pc, #484]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004148:	4975      	ldr	r1, [pc, #468]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004150:	e001      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d047      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d030      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d82a      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004176:	d02a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417c:	d824      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d008      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d81e      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004194:	e018      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004196:	4b62      	ldr	r3, [pc, #392]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4a61      	ldr	r2, [pc, #388]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a2:	e015      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fab4 	bl	8004718 <RCCEx_PLLSAI1_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b4:	e00c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fb9f 	bl	8004900 <RCCEx_PLLSAI2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	74fb      	strb	r3, [r7, #19]
      break;
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041d6:	4b52      	ldr	r3, [pc, #328]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	494e      	ldr	r1, [pc, #312]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041ec:	e001      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 809f 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004204:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004236:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004242:	f7fc ffe7 	bl	8001214 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004248:	e009      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fc ffe3 	bl	8001214 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d902      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	74fb      	strb	r3, [r7, #19]
        break;
 800425c:	e005      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ef      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d15b      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004270:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01f      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	d019      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ba:	4a19      	ldr	r2, [pc, #100]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d016      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fc ffa2 	bl	8001214 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	e00b      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fc ff9e 	bl	8001214 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d902      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	74fb      	strb	r3, [r7, #19]
            break;
 80042ea:	e006      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ec      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10c      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004318:	e008      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
 800431e:	e005      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432c:	7c7b      	ldrb	r3, [r7, #17]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4ba0      	ldr	r3, [pc, #640]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	4a9f      	ldr	r2, [pc, #636]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800434a:	4b9a      	ldr	r3, [pc, #616]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f023 0203 	bic.w	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	4996      	ldr	r1, [pc, #600]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f023 020c 	bic.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	498e      	ldr	r1, [pc, #568]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438e:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	4985      	ldr	r1, [pc, #532]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043b0:	4b80      	ldr	r3, [pc, #512]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	497d      	ldr	r1, [pc, #500]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043d2:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	4974      	ldr	r1, [pc, #464]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043f4:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	496c      	ldr	r1, [pc, #432]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004416:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004424:	4963      	ldr	r1, [pc, #396]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004438:	4b5e      	ldr	r3, [pc, #376]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004446:	495b      	ldr	r1, [pc, #364]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800445a:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	4952      	ldr	r1, [pc, #328]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800447c:	4b4d      	ldr	r3, [pc, #308]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	494a      	ldr	r1, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800449e:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	4941      	ldr	r1, [pc, #260]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044c0:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	4939      	ldr	r1, [pc, #228]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d028      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044e2:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	4930      	ldr	r1, [pc, #192]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004500:	d106      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	4a2b      	ldr	r2, [pc, #172]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450c:	60d3      	str	r3, [r2, #12]
 800450e:	e011      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f8f9 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d04d      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004548:	d108      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004556:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800455a:	e012      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457a:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458a:	d106      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004596:	60d3      	str	r3, [r2, #12]
 8004598:	e020      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a2:	d109      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a02      	ldr	r2, [pc, #8]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	60d3      	str	r3, [r2, #12]
 80045b0:	e014      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f8a5 	bl	8004718 <RCCEx_PLLSAI1_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d028      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e8:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f6:	4947      	ldr	r1, [pc, #284]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004606:	d106      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a41      	ldr	r2, [pc, #260]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004612:	60d3      	str	r3, [r2, #12]
 8004614:	e011      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461e:	d10c      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f876 	bl	8004718 <RCCEx_PLLSAI1_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	492f      	ldr	r1, [pc, #188]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004668:	d10c      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f851 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004696:	f023 0204 	bic.w	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a0:	491c      	ldr	r1, [pc, #112]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ba:	f023 0218 	bic.w	r2, r3, #24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	4913      	ldr	r1, [pc, #76]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e8:	490a      	ldr	r1, [pc, #40]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004708:	7cbb      	ldrb	r3, [r7, #18]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000

08004718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004726:	4b72      	ldr	r3, [pc, #456]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004732:	4b6f      	ldr	r3, [pc, #444]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0203 	and.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d103      	bne.n	800474a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
       ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d142      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e03f      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d018      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x72>
 8004758:	2b03      	cmp	r3, #3
 800475a:	d825      	bhi.n	80047a8 <RCCEx_PLLSAI1_Config+0x90>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d002      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x4e>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d009      	beq.n	8004778 <RCCEx_PLLSAI1_Config+0x60>
 8004764:	e020      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004766:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004776:	e01a      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004778:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e013      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047a6:	e006      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e004      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047be:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4949      	ldr	r1, [pc, #292]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8086 	bne.w	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047d8:	4b45      	ldr	r3, [pc, #276]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a44      	ldr	r2, [pc, #272]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fc fd16 	bl	8001214 <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ea:	e009      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ec:	f7fc fd12 	bl	8001214 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	73fb      	strb	r3, [r7, #15]
        break;
 80047fe:	e005      	b.n	800480c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ef      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d168      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d113      	bne.n	8004840 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481e:	4013      	ands	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	0211      	lsls	r1, r2, #8
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68d2      	ldr	r2, [r2, #12]
 800482a:	06d2      	lsls	r2, r2, #27
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6852      	ldr	r2, [r2, #4]
 8004832:	3a01      	subs	r2, #1
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	430a      	orrs	r2, r1
 8004838:	492d      	ldr	r1, [pc, #180]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	610b      	str	r3, [r1, #16]
 800483e:	e02d      	b.n	800489c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d115      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004846:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0552      	lsls	r2, r2, #21
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6852      	ldr	r2, [r2, #4]
 8004864:	3a01      	subs	r2, #1
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	430a      	orrs	r2, r1
 800486a:	4921      	ldr	r1, [pc, #132]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]
 8004870:	e014      	b.n	800489c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	4b21      	ldr	r3, [pc, #132]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	0211      	lsls	r1, r2, #8
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6952      	ldr	r2, [r2, #20]
 8004884:	0852      	lsrs	r2, r2, #1
 8004886:	3a01      	subs	r2, #1
 8004888:	0652      	lsls	r2, r2, #25
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6852      	ldr	r2, [r2, #4]
 8004890:	3a01      	subs	r2, #1
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	430a      	orrs	r2, r1
 8004896:	4916      	ldr	r1, [pc, #88]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc fcb4 	bl	8001214 <HAL_GetTick>
 80048ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ae:	e009      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b0:	f7fc fcb0 	bl	8001214 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d902      	bls.n	80048c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	73fb      	strb	r3, [r7, #15]
          break;
 80048c2:	e005      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	4904      	ldr	r1, [pc, #16]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	07ff800f 	.word	0x07ff800f
 80048f8:	ff9f800f 	.word	0xff9f800f
 80048fc:	f9ff800f 	.word	0xf9ff800f

08004900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800491a:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d103      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d142      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e03f      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d018      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x72>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d825      	bhi.n	8004990 <RCCEx_PLLSAI2_Config+0x90>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <RCCEx_PLLSAI2_Config+0x4e>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d009      	beq.n	8004960 <RCCEx_PLLSAI2_Config+0x60>
 800494c:	e020      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800494e:	4b62      	ldr	r3, [pc, #392]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e01a      	b.n	8004996 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004960:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e013      	b.n	800499a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004972:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800498e:	e006      	b.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e004      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800499e:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049a6:	4b4c      	ldr	r3, [pc, #304]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f023 0203 	bic.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4949      	ldr	r1, [pc, #292]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 8086 	bne.w	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049c0:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a44      	ldr	r2, [pc, #272]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fc fc22 	bl	8001214 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d4:	f7fc fc1e 	bl	8001214 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
        break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ef      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d168      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d113      	bne.n	8004a28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	4b35      	ldr	r3, [pc, #212]	; (8004adc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	06d2      	lsls	r2, r2, #27
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6852      	ldr	r2, [r2, #4]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0112      	lsls	r2, r2, #4
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	492d      	ldr	r1, [pc, #180]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	614b      	str	r3, [r1, #20]
 8004a26:	e02d      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d115      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	0211      	lsls	r1, r2, #8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6912      	ldr	r2, [r2, #16]
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	3a01      	subs	r2, #1
 8004a44:	0552      	lsls	r2, r2, #21
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	430a      	orrs	r2, r1
 8004a52:	4921      	ldr	r1, [pc, #132]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	614b      	str	r3, [r1, #20]
 8004a58:	e014      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6892      	ldr	r2, [r2, #8]
 8004a66:	0211      	lsls	r1, r2, #8
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6952      	ldr	r2, [r2, #20]
 8004a6c:	0852      	lsrs	r2, r2, #1
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	0652      	lsls	r2, r2, #25
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6852      	ldr	r2, [r2, #4]
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fc fbc0 	bl	8001214 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a96:	e009      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a98:	f7fc fbbc 	bl	8001214 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aaa:	e005      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ef      	beq.n	8004a98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	07ff800f 	.word	0x07ff800f
 8004ae0:	ff9f800f 	.word	0xff9f800f
 8004ae4:	f9ff800f 	.word	0xf9ff800f

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e049      	b.n	8004b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fa68 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fa9a 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04f      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d018      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d115      	bne.n	8004c3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d015      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d011      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	e008      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40013400 	.word	0x40013400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	00010007 	.word	0x00010007

08004c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d020      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0202 	mvn.w	r2, #2
 8004cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9ad 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f99f 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f9b0 	bl	8005036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0204 	mvn.w	r2, #4
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f987 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f979 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f98a 	bl	8005036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f961 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f953 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f964 	bl	8005036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f93b 	bl	8005022 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f92d 	bl	800500e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f93e 	bl	8005036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0201 	mvn.w	r2, #1
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fb fc46 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 faf2 	bl	80053ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 faea 	bl	8005400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8fd 	bl	800504a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0220 	mvn.w	r2, #32
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fab2 	bl	80053d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0b6      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x18a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d03e      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0xd8>
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	f200 8087 	bhi.w	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	f000 8086 	beq.w	8004ff2 <HAL_TIM_ConfigClockSource+0x176>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eea:	d87f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d01a      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0xaa>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d87b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004ef4:	2b60      	cmp	r3, #96	; 0x60
 8004ef6:	d050      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x11e>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d877      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004efc:	2b50      	cmp	r3, #80	; 0x50
 8004efe:	d03c      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xfe>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d873      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d058      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x13e>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d86f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d064      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15e>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d86b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d060      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15e>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d867      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05c      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15e>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d05a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x15e>
 8004f24:	e062      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f36:	f000 f9a7 	bl	8005288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]
      break;
 8004f52:	e04f      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f64:	f000 f990 	bl	8005288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e03c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 f904 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2150      	movs	r1, #80	; 0x50
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f95d 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004f98:	e02c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 f923 	bl	80051f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2160      	movs	r1, #96	; 0x60
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f94d 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e01c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 f8e4 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f93d 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 f934 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004fea:	e003      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a40      	ldr	r2, [pc, #256]	; (8005174 <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d00f      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3d      	ldr	r2, [pc, #244]	; (8005178 <TIM_Base_SetConfig+0x118>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3c      	ldr	r2, [pc, #240]	; (800517c <TIM_Base_SetConfig+0x11c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <TIM_Base_SetConfig+0x120>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3a      	ldr	r2, [pc, #232]	; (8005184 <TIM_Base_SetConfig+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d108      	bne.n	80050b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <TIM_Base_SetConfig+0x114>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01f      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d01b      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <TIM_Base_SetConfig+0x118>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d017      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <TIM_Base_SetConfig+0x11c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <TIM_Base_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00f      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <TIM_Base_SetConfig+0x124>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a28      	ldr	r2, [pc, #160]	; (8005188 <TIM_Base_SetConfig+0x128>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a27      	ldr	r2, [pc, #156]	; (800518c <TIM_Base_SetConfig+0x12c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a26      	ldr	r2, [pc, #152]	; (8005190 <TIM_Base_SetConfig+0x130>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d108      	bne.n	800510c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <TIM_Base_SetConfig+0x114>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00f      	beq.n	8005158 <TIM_Base_SetConfig+0xf8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <TIM_Base_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_Base_SetConfig+0xf8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a11      	ldr	r2, [pc, #68]	; (8005188 <TIM_Base_SetConfig+0x128>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a10      	ldr	r2, [pc, #64]	; (800518c <TIM_Base_SetConfig+0x12c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0xf8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0f      	ldr	r2, [pc, #60]	; (8005190 <TIM_Base_SetConfig+0x130>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d103      	bne.n	8005160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	615a      	str	r2, [r3, #20]
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 030a 	bic.w	r3, r3, #10
 80051d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b087      	sub	sp, #28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0210 	bic.w	r2, r3, #16
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800521c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800522e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0307 	orr.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e068      	b.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2e      	ldr	r2, [pc, #184]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2d      	ldr	r2, [pc, #180]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800531a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d018      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10c      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40014000 	.word	0x40014000

080053d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <arm_sin_f32>:
 8005414:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005494 <arm_sin_f32+0x80>
 8005418:	ee20 0a27 	vmul.f32	s0, s0, s15
 800541c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005428:	d504      	bpl.n	8005434 <arm_sin_f32+0x20>
 800542a:	ee17 3a90 	vmov	r3, s15
 800542e:	3b01      	subs	r3, #1
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005438:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005498 <arm_sin_f32+0x84>
 800543c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005440:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005444:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005448:	ee17 3a90 	vmov	r3, s15
 800544c:	b29b      	uxth	r3, r3
 800544e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005452:	d21a      	bcs.n	800548a <arm_sin_f32+0x76>
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005462:	4a0e      	ldr	r2, [pc, #56]	; (800549c <arm_sin_f32+0x88>)
 8005464:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800546c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005470:	ed93 7a00 	vldr	s14, [r3]
 8005474:	edd2 6a00 	vldr	s13, [r2]
 8005478:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800547c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005484:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005488:	4770      	bx	lr
 800548a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800548e:	2101      	movs	r1, #1
 8005490:	2300      	movs	r3, #0
 8005492:	e7e6      	b.n	8005462 <arm_sin_f32+0x4e>
 8005494:	3e22f983 	.word	0x3e22f983
 8005498:	44000000 	.word	0x44000000
 800549c:	08005550 	.word	0x08005550

080054a0 <memset>:
 80054a0:	4402      	add	r2, r0
 80054a2:	4603      	mov	r3, r0
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d100      	bne.n	80054aa <memset+0xa>
 80054a8:	4770      	bx	lr
 80054aa:	f803 1b01 	strb.w	r1, [r3], #1
 80054ae:	e7f9      	b.n	80054a4 <memset+0x4>

080054b0 <__libc_init_array>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4d0d      	ldr	r5, [pc, #52]	; (80054e8 <__libc_init_array+0x38>)
 80054b4:	4c0d      	ldr	r4, [pc, #52]	; (80054ec <__libc_init_array+0x3c>)
 80054b6:	1b64      	subs	r4, r4, r5
 80054b8:	10a4      	asrs	r4, r4, #2
 80054ba:	2600      	movs	r6, #0
 80054bc:	42a6      	cmp	r6, r4
 80054be:	d109      	bne.n	80054d4 <__libc_init_array+0x24>
 80054c0:	4d0b      	ldr	r5, [pc, #44]	; (80054f0 <__libc_init_array+0x40>)
 80054c2:	4c0c      	ldr	r4, [pc, #48]	; (80054f4 <__libc_init_array+0x44>)
 80054c4:	f000 f818 	bl	80054f8 <_init>
 80054c8:	1b64      	subs	r4, r4, r5
 80054ca:	10a4      	asrs	r4, r4, #2
 80054cc:	2600      	movs	r6, #0
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	d105      	bne.n	80054de <__libc_init_array+0x2e>
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d8:	4798      	blx	r3
 80054da:	3601      	adds	r6, #1
 80054dc:	e7ee      	b.n	80054bc <__libc_init_array+0xc>
 80054de:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e2:	4798      	blx	r3
 80054e4:	3601      	adds	r6, #1
 80054e6:	e7f2      	b.n	80054ce <__libc_init_array+0x1e>
 80054e8:	08005d54 	.word	0x08005d54
 80054ec:	08005d54 	.word	0x08005d54
 80054f0:	08005d54 	.word	0x08005d54
 80054f4:	08005d58 	.word	0x08005d58

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
