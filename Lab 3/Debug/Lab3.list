
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a10  08005a10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a10  08005a10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003103c  2000000c  08005a24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20031048  08005a24  00021048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013634  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a5  00000000  00000000  000336b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edf  00000000  00000000  000371a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cab0  00000000  00000000  0003807f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001487e  00000000  00000000  00064b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a338  00000000  00000000  000793ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005240  00000000  00000000  001936e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00198928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080059b8 	.word	0x080059b8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080059b8 	.word	0x080059b8

080001fc <HAL_GPIO_EXTI_Callback>:
//            min = arr[i]; // Update min if a smaller element is found
//    }
//    return min;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin){
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800020c:	d10c      	bne.n	8000228 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800020e:	2100      	movs	r1, #0
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <HAL_GPIO_EXTI_Callback+0x34>)
 8000212:	f001 fff9 	bl	8002208 <HAL_DAC_Stop_DMA>
		recording=1;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <HAL_GPIO_EXTI_Callback+0x38>)
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &micBuffer, BUFFER_SIZE); //start recording
 800021c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000220:	4905      	ldr	r1, [pc, #20]	; (8000238 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000222:	4806      	ldr	r0, [pc, #24]	; (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000224:	f002 fc0a 	bl	8002a3c <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20030dd0 	.word	0x20030dd0
 8000234:	20031014 	.word	0x20031014
 8000238:	20000028 	.word	0x20000028
 800023c:	20030e44 	.word	0x20030e44

08000240 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
    audioFilterHalfCplt = 1;
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800024a:	2201      	movs	r2, #1
 800024c:	701a      	strb	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20031015 	.word	0x20031015

08000260 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ){ //invoked when conversion of mic input is complete
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af02      	add	r7, sp, #8
 8000266:	6078      	str	r0, [r7, #4]
	if(hdfsdm_filter == &hdfsdm1_filter0){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d137      	bne.n	80002e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x80>
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000270:	481d      	ldr	r0, [pc, #116]	; (80002e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000272:	f002 fc65 	bl	8002b40 <HAL_DFSDM_FilterRegularStop_DMA>
		//do the shifting stuff
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	e01a      	b.n	80002b2 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		    if (micBuffer[i] < 0) {
 800027c:	4a1b      	ldr	r2, [pc, #108]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	da08      	bge.n	800029a <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
		    	micBuffer[i] = -micBuffer[i]; // Multiply it by -1 to make it positive
 8000288:	4a18      	ldr	r2, [pc, #96]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	425a      	negs	r2, r3
 8000292:	4916      	ldr	r1, [pc, #88]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }
		    micBuffer[i] = micBuffer[i] >> 10; //shift by 8 to get rid of the garbage
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	129a      	asrs	r2, r3, #10
 80002a4:	4911      	ldr	r1, [pc, #68]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b8:	4293      	cmp	r3, r2
 80002ba:	dddf      	ble.n	800027c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
		}
		recording=0;//stop blinking
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 80002ca:	f003 f9e1 	bl	8003690 <HAL_GPIO_WritePin>
		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &micBuffer, BUFFER_SIZE, DAC_ALIGN_12B_R); //play back the recorded data on speaker
 80002ce:	2300      	movs	r3, #0
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 80002d8:	2100      	movs	r1, #0
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 80002dc:	f001 fec8 	bl	8002070 <HAL_DAC_Start_DMA>
	}
 }
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20030e44 	.word	0x20030e44
 80002ec:	20000028 	.word	0x20000028
 80002f0:	20031014 	.word	0x20031014
 80002f4:	48000400 	.word	0x48000400
 80002f8:	20030dd0 	.word	0x20030dd0

080002fc <HAL_TIM_PeriodElapsedCallback>:


//timer used for led blinking
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a08      	ldr	r2, [pc, #32]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d108      	bne.n	800031e <HAL_TIM_PeriodElapsedCallback+0x22>
		if(recording)
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d004      	beq.n	800031e <HAL_TIM_PeriodElapsedCallback+0x22>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Make LED blink if recording
 8000314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800031a:	f003 f9d1 	bl	80036c0 <HAL_GPIO_TogglePin>
	}
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20030f7c 	.word	0x20030f7c
 800032c:	20031014 	.word	0x20031014
 8000330:	48000400 	.word	0x48000400

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000338:	f000 fdeb 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f811 	bl	8000362 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000340:	f000 fa96 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000344:	f000 fa62 	bl	800080c <MX_DMA_Init>
  MX_DAC1_Init();
 8000348:	f000 f8d2 	bl	80004f0 <MX_DAC1_Init>
  MX_ADC1_Init();
 800034c:	f000 f85a 	bl	8000404 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000350:	f000 f968 	bl	8000624 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000354:	f000 f900 	bl	8000558 <MX_DFSDM1_Init>
  MX_TIM3_Init();
 8000358:	f000 f9b4 	bl	80006c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800035c:	f000 fa04 	bl	8000768 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000360:	e7fe      	b.n	8000360 <main+0x2c>

08000362 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b096      	sub	sp, #88	; 0x58
 8000366:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2244      	movs	r2, #68	; 0x44
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f005 faf5 	bl	8005960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	463b      	mov	r3, r7
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000384:	2000      	movs	r0, #0
 8000386:	f003 f9ed 	bl	8003764 <HAL_PWREx_ControlVoltageScaling>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000390:	f000 fade 	bl	8000950 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000394:	2310      	movs	r3, #16
 8000396:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003a0:	2360      	movs	r3, #96	; 0x60
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	2302      	movs	r3, #2
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003a8:	2301      	movs	r3, #1
 80003aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80003b0:	233c      	movs	r3, #60	; 0x3c
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003bc:	2302      	movs	r3, #2
 80003be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	4618      	mov	r0, r3
 80003c6:	f003 fa71 	bl	80038ac <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003d0:	f000 fabe 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	2303      	movs	r3, #3
 80003da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	2105      	movs	r1, #5
 80003ec:	4618      	mov	r0, r3
 80003ee:	f003 fe77 	bl	80040e0 <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003f8:	f000 faaa 	bl	8000950 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3758      	adds	r7, #88	; 0x58
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040a:	463b      	mov	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
 8000418:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800041a:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800041c:	4a31      	ldr	r2, [pc, #196]	; (80004e4 <MX_ADC1_Init+0xe0>)
 800041e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000420:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000434:	2201      	movs	r2, #1
 8000436:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000438:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800043a:	2204      	movs	r2, #4
 800043c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000444:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000446:	2200      	movs	r2, #0
 8000448:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800044c:	2202      	movs	r2, #2
 800044e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000452:	2201      	movs	r2, #1
 8000454:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800045a:	2201      	movs	r2, #1
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000474:	2200      	movs	r2, #0
 8000476:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000480:	4817      	ldr	r0, [pc, #92]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000482:	f000 ff7f 	bl	8001384 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800048c:	f000 fa60 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_ADC1_Init+0xe4>)
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000494:	2306      	movs	r3, #6
 8000496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000498:	2303      	movs	r3, #3
 800049a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049c:	237f      	movs	r3, #127	; 0x7f
 800049e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a0:	2304      	movs	r3, #4
 80004a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_ADC1_Init+0xdc>)
 80004ae:	f001 f8af 	bl	8001610 <HAL_ADC_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80004b8:	f000 fa4a 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_ADC1_Init+0xe8>)
 80004be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004c0:	230c      	movs	r3, #12
 80004c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_ADC1_Init+0xdc>)
 80004ca:	f001 f8a1 	bl	8001610 <HAL_ADC_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004d4:	f000 fa3c 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3718      	adds	r7, #24
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20030d68 	.word	0x20030d68
 80004e4:	50040000 	.word	0x50040000
 80004e8:	80000001 	.word	0x80000001
 80004ec:	c7520000 	.word	0xc7520000

080004f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2228      	movs	r2, #40	; 0x28
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f005 fa2f 	bl	8005960 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_DAC1_Init+0x60>)
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <MX_DAC1_Init+0x64>)
 8000506:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <MX_DAC1_Init+0x60>)
 800050a:	f001 fd8e 	bl	800202a <HAL_DAC_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000514:	f000 fa1c 	bl	8000950 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800051c:	230a      	movs	r3, #10
 800051e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000524:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_DAC1_Init+0x60>)
 800053a:	f001 fec9 	bl	80022d0 <HAL_DAC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000544:	f000 fa04 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3728      	adds	r7, #40	; 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20030dd0 	.word	0x20030dd0
 8000554:	40007400 	.word	0x40007400

08000558 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 800055e:	4a2d      	ldr	r2, [pc, #180]	; (8000614 <MX_DFSDM1_Init+0xbc>)
 8000560:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 800056a:	2201      	movs	r2, #1
 800056c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 8000570:	2201      	movs	r2, #1
 8000572:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 8000576:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800057a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 800057e:	2236      	movs	r2, #54	; 0x36
 8000580:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 8000584:	2201      	movs	r2, #1
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000588:	4821      	ldr	r0, [pc, #132]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 800058a:	f002 f937 	bl	80027fc <HAL_DFSDM_FilterInit>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000594:	f000 f9dc 	bl	8000950 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <MX_DFSDM1_Init+0xc4>)
 800059c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005ac:	2232      	movs	r2, #50	; 0x32
 80005ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_DFSDM1_Init+0xc0>)
 80005e8:	f002 f848 	bl	800267c <HAL_DFSDM_ChannelInit>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80005f2:	f000 f9ad 	bl	8000950 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80005f6:	2201      	movs	r2, #1
 80005f8:	4909      	ldr	r1, [pc, #36]	; (8000620 <MX_DFSDM1_Init+0xc8>)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_DFSDM1_Init+0xb8>)
 80005fc:	f002 f9d8 	bl	80029b0 <HAL_DFSDM_FilterConfigRegChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000606:	f000 f9a3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20030e44 	.word	0x20030e44
 8000614:	40016100 	.word	0x40016100
 8000618:	20030e98 	.word	0x20030e98
 800061c:	40016040 	.word	0x40016040
 8000620:	00020004 	.word	0x00020004

08000624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM2_Init+0x9c>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2727;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000658:	f640 22a7 	movw	r2, #2727	; 0xaa7
 800065c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066a:	4815      	ldr	r0, [pc, #84]	; (80006c0 <MX_TIM2_Init+0x9c>)
 800066c:	f004 fce2 	bl	8005034 <HAL_TIM_Base_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000676:	f000 f96b 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_TIM2_Init+0x9c>)
 8000688:	f004 fe9e 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000692:	f000 f95d 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000696:	2320      	movs	r3, #32
 8000698:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_TIM2_Init+0x9c>)
 80006a4:	f005 f8b6 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006ae:	f000 f94f 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MX_TIM2_Init+0x9c>)
 80006b4:	f004 fd16 	bl	80050e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20030f30 	.word	0x20030f30

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_TIM3_Init+0x9c>)
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_TIM3_Init+0xa0>)
 80006e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_TIM3_Init+0x9c>)
 80006ea:	f649 4240 	movw	r2, #40000	; 0x9c40
 80006ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_TIM3_Init+0x9c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM3_Init+0x9c>)
 80006f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM3_Init+0x9c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_TIM3_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800070a:	4815      	ldr	r0, [pc, #84]	; (8000760 <MX_TIM3_Init+0x9c>)
 800070c:	f004 fc92 	bl	8005034 <HAL_TIM_Base_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000716:	f000 f91b 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_TIM3_Init+0x9c>)
 8000728:	f004 fe4e 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000732:	f000 f90d 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <MX_TIM3_Init+0x9c>)
 8000744:	f005 f866 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800074e:	f000 f8ff 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <MX_TIM3_Init+0x9c>)
 8000754:	f004 fcc6 	bl	80050e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20030f7c 	.word	0x20030f7c
 8000764:	40000400 	.word	0x40000400

08000768 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_TIM4_Init+0x9c>)
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_TIM4_Init+0xa0>)
 800078a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM4_Init+0x9c>)
 800078e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_TIM4_Init+0x9c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM4_Init+0x9c>)
 800079c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007b0:	f004 fc40 	bl	8005034 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80007ba:	f000 f8c9 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007cc:	f004 fdfc 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80007d6:	f000 f8bb 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007e8:	f005 f814 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80007f2:	f000 f8ad 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <MX_TIM4_Init+0x9c>)
 80007f8:	f004 fc74 	bl	80050e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20030fc8 	.word	0x20030fc8
 8000808:	40000800 	.word	0x40000800

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_DMA_Init+0x60>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_DMA_Init+0x60>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6493      	str	r3, [r2, #72]	; 0x48
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_DMA_Init+0x60>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DMA_Init+0x60>)
 800082c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_DMA_Init+0x60>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6493      	str	r3, [r2, #72]	; 0x48
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x60>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200d      	movs	r0, #13
 8000848:	f001 fbb9 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800084c:	200d      	movs	r0, #13
 800084e:	f001 fbd2 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200e      	movs	r0, #14
 8000858:	f001 fbb1 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800085c:	200e      	movs	r0, #14
 800085e:	f001 fbca 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a2e      	ldr	r2, [pc, #184]	; (8000944 <MX_GPIO_Init+0xd4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ec:	4816      	ldr	r0, [pc, #88]	; (8000948 <MX_GPIO_Init+0xd8>)
 80008ee:	f002 fecf 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <MX_GPIO_Init+0xdc>)
 800090a:	f002 fd2f 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800090e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000928:	f002 fd20 	bl	800336c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2028      	movs	r0, #40	; 0x28
 8000932:	f001 fb44 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f001 fb5d 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	48000400 	.word	0x48000400
 800094c:	48000800 	.word	0x48000800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0a8      	sub	sp, #160	; 0xa0
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2294      	movs	r2, #148	; 0x94
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 ffd3 	bl	8005960 <memset>
  if(hadc->Instance==ADC1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_ADC_MspInit+0x80>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d12b      	bne.n	8000a1c <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009d2:	2301      	movs	r3, #1
 80009d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009da:	2318      	movs	r3, #24
 80009dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fe05 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000a00:	f7ff ffa6 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_ADC_MspInit+0x84>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_ADC_MspInit+0x84>)
 8000a0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_ADC_MspInit+0x84>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	37a0      	adds	r7, #160	; 0xa0
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	50040000 	.word	0x50040000
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <HAL_DAC_MspInit+0xcc>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d14f      	bne.n	8000aee <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a24      	ldr	r2, [pc, #144]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_DAC_MspInit+0xd0>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f002 fc6a 	bl	800336c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_DAC_MspInit+0xd8>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ac8:	2220      	movs	r2, #32
 8000aca:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ad4:	f002 f97c 	bl	8002dd0 <HAL_DMA_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000ade:	f7ff ff37 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <HAL_DAC_MspInit+0xd4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40007400 	.word	0x40007400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	20030de4 	.word	0x20030de4
 8000b04:	40020030 	.word	0x40020030

08000b08 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ae      	sub	sp, #184	; 0xb8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2294      	movs	r2, #148	; 0x94
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 ff19 	bl	8005960 <memset>
  if(DFSDM1_Init == 0)
 8000b2e:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14b      	bne.n	8000bce <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fd5c 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f7ff fefd 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10b      	bne.n	8000b80 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	4a37      	ldr	r2, [pc, #220]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b72:	6613      	str	r3, [r2, #96]	; 0x60
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000b98:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4824      	ldr	r0, [pc, #144]	; (8000c50 <HAL_DFSDM_FilterMspInit+0x148>)
 8000bc0:	f002 fbd4 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000bcc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d130      	bne.n	8000c3a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <HAL_DFSDM_FilterMspInit+0x154>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000be0:	2256      	movs	r2, #86	; 0x56
 8000be2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c14:	f002 f8dc 	bl	8002dd0 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000c1e:	f7ff fe97 	bl	8000950 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
 8000c34:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37b8      	adds	r7, #184	; 0xb8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2003101c 	.word	0x2003101c
 8000c48:	20031018 	.word	0x20031018
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48001000 	.word	0x48001000
 8000c54:	40016100 	.word	0x40016100
 8000c58:	20030ed0 	.word	0x20030ed0
 8000c5c:	40020044 	.word	0x40020044

08000c60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ae      	sub	sp, #184	; 0xb8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2294      	movs	r2, #148	; 0x94
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fe6d 	bl	8005960 <memset>
  if(DFSDM1_Init == 0)
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14b      	bne.n	8000d26 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fcb0 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000caa:	f7ff fe51 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cca:	6613      	str	r3, [r2, #96]	; 0x60
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000cf0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000d18:	f002 fb28 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000d24:	6013      	str	r3, [r2, #0]
  }

}
 8000d26:	bf00      	nop
 8000d28:	37b8      	adds	r7, #184	; 0xb8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2003101c 	.word	0x2003101c
 8000d34:	20031018 	.word	0x20031018
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48001000 	.word	0x48001000

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d114      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	201c      	movs	r0, #28
 8000d70:	f001 f925 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d74:	201c      	movs	r0, #28
 8000d76:	f001 f93e 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d7a:	e02a      	b.n	8000dd2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_TIM_Base_MspInit+0xa0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d114      	bne.n	8000db0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6593      	str	r3, [r2, #88]	; 0x58
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	201d      	movs	r0, #29
 8000da4:	f001 f90b 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000da8:	201d      	movs	r0, #29
 8000daa:	f001 f924 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8000dae:	e010      	b.n	8000dd2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_TIM_Base_MspInit+0xa4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_TIM_Base_MspInit+0x9c>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40000400 	.word	0x40000400
 8000de4:	40000800 	.word	0x40000800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f8c2 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Channel3_IRQHandler+0x10>)
 8000e42:	f002 f944 	bl	80030ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20030de4 	.word	0x20030de4

08000e50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <DMA1_Channel4_IRQHandler+0x10>)
 8000e56:	f002 f93a 	bl	80030ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20030ed0 	.word	0x20030ed0

08000e64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM2_IRQHandler+0x10>)
 8000e6a:	f004 f9ab 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20030f30 	.word	0x20030f30

08000e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM3_IRQHandler+0x10>)
 8000e7e:	f004 f9a1 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20030f7c 	.word	0x20030f7c

08000e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e94:	f002 fc2e 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f004 fd3f 	bl	8005970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fa1f 	bl	8000334 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	08005a18 	.word	0x08005a18
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	20031048 	.word	0x20031048

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f001 f843 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff fd12 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d023      	beq.n	8000fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_InitTick+0x70>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f84f 	bl	8002012 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d809      	bhi.n	8000f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f001 f819 	bl	8001fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0x74>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e004      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e001      	b.n	8000fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20031020 	.word	0x20031020

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20031020 	.word	0x20031020

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3360      	adds	r3, #96	; 0x60
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <LL_ADC_SetOffset+0x44>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	4313      	orrs	r3, r2
 80010dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	03fff000 	.word	0x03fff000

080010f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3360      	adds	r3, #96	; 0x60
 8001102:	461a      	mov	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3360      	adds	r3, #96	; 0x60
 8001130:	461a      	mov	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	615a      	str	r2, [r3, #20]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3330      	adds	r3, #48	; 0x30
 800118c:	461a      	mov	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	4413      	add	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	211f      	movs	r1, #31
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0e9b      	lsrs	r3, r3, #26
 80011b4:	f003 011f 	and.w	r1, r3, #31
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	431a      	orrs	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3314      	adds	r3, #20
 80011e4:	461a      	mov	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	0e5b      	lsrs	r3, r3, #25
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	0d1b      	lsrs	r3, r3, #20
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2107      	movs	r1, #7
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	0d1b      	lsrs	r3, r3, #20
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0318 	and.w	r3, r3, #24
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001250:	40d9      	lsrs	r1, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	400b      	ands	r3, r1
 8001256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125a:	431a      	orrs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	0007ffff 	.word	0x0007ffff

08001274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6093      	str	r3, [r2, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012fc:	d101      	bne.n	8001302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <LL_ADC_IsEnabled+0x18>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <LL_ADC_IsEnabled+0x1a>
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b04      	cmp	r3, #4
 8001348:	d101      	bne.n	800134e <LL_ADC_REG_IsConversionOngoing+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b08      	cmp	r3, #8
 800136e:	d101      	bne.n	8001374 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e129      	b.n	80015f2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff faf9 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff67 	bl	8001298 <LL_ADC_IsDeepPowerDownEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff4d 	bl	8001274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff82 	bl	80012e8 <LL_ADC_IsInternalRegulatorEnabled>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff66 	bl	80012c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_ADC_Init+0x278>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	4a81      	ldr	r2, [pc, #516]	; (8001600 <HAL_ADC_Init+0x27c>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	3301      	adds	r3, #1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001408:	e002      	b.n	8001410 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3b01      	subs	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff64 	bl	80012e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10d      	bne.n	8001442 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff75 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 800144c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 80c2 	bne.w	80015e0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 80be 	bne.w	80015e0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff49 	bl	8001310 <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001484:	485f      	ldr	r0, [pc, #380]	; (8001604 <HAL_ADC_Init+0x280>)
 8001486:	f7ff ff43 	bl	8001310 <LL_ADC_IsEnabled>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4619      	mov	r1, r3
 8001496:	485c      	ldr	r0, [pc, #368]	; (8001608 <HAL_ADC_Init+0x284>)
 8001498:	f7ff fdd4 	bl	8001044 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7e5b      	ldrb	r3, [r3, #25]
 80014a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d106      	bne.n	80014d8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	3b01      	subs	r3, #1
 80014d0:	045b      	lsls	r3, r3, #17
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d009      	beq.n	80014f4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <HAL_ADC_Init+0x288>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	430b      	orrs	r3, r1
 8001506:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff25 	bl	800135c <LL_ADC_INJ_IsConversionOngoing>
 8001512:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d140      	bne.n	800159c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d13d      	bne.n	800159c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800152a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001532:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001542:	f023 0306 	bic.w	r3, r3, #6
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	430b      	orrs	r3, r1
 800154e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001556:	2b01      	cmp	r3, #1
 8001558:	d118      	bne.n	800158c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001570:	4311      	orrs	r1, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800157c:	430a      	orrs	r2, r1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	e007      	b.n	800159c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10c      	bne.n	80015be <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f023 010f 	bic.w	r1, r3, #15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
 80015bc:	e007      	b.n	80015ce <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 020f 	bic.w	r2, r2, #15
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	659a      	str	r2, [r3, #88]	; 0x58
 80015de:	e007      	b.n	80015f0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f043 0210 	orr.w	r2, r3, #16
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	053e2d63 	.word	0x053e2d63
 8001604:	50040000 	.word	0x50040000
 8001608:	50040300 	.word	0x50040300
 800160c:	fff0c007 	.word	0xfff0c007

08001610 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0b6      	sub	sp, #216	; 0xd8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x22>
 800162e:	2302      	movs	r3, #2
 8001630:	e3d5      	b.n	8001dde <HAL_ADC_ConfigChannel+0x7ce>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe79 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 83ba 	bne.w	8001dc0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d824      	bhi.n	80016a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	3b02      	subs	r3, #2
 8001662:	2b03      	cmp	r3, #3
 8001664:	d81b      	bhi.n	800169e <HAL_ADC_ConfigChannel+0x8e>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_ADC_ConfigChannel+0x5c>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	0800167d 	.word	0x0800167d
 8001670:	08001685 	.word	0x08001685
 8001674:	0800168d 	.word	0x0800168d
 8001678:	08001695 	.word	0x08001695
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800167c:	230c      	movs	r3, #12
 800167e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001682:	e010      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001684:	2312      	movs	r3, #18
 8001686:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800168a:	e00c      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800168c:	2318      	movs	r3, #24
 800168e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001692:	e008      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800169c:	e003      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800169e:	2306      	movs	r3, #6
 80016a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80016a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80016b4:	f7ff fd62 	bl	800117c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe3a 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 80016c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe46 	bl	800135c <LL_ADC_INJ_IsConversionOngoing>
 80016d0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 81bf 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 81ba 	bne.w	8001a5c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016f0:	d10f      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fd69 	bl	80011d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fd23 	bl	8001156 <LL_ADC_SetSamplingTimeCommonConfig>
 8001710:	e00e      	b.n	8001730 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fd58 	bl	80011d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd13 	bl	8001156 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00a      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001762:	f7ff fca3 	bl	80010ac <LL_ADC_SetOffset>
 8001766:	e179      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fcc0 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x184>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcb5 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	f003 021f 	and.w	r2, r3, #31
 8001792:	e01e      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x1c2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fcaa 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80017c2:	2320      	movs	r3, #32
 80017c4:	e004      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80017c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x1da>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0e9b      	lsrs	r3, r3, #26
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	e018      	b.n	800181c <HAL_ADC_ConfigChannel+0x20c>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80017fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800180e:	2320      	movs	r3, #32
 8001810:	e004      	b.n	800181c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001812:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800181c:	429a      	cmp	r2, r3
 800181e:	d106      	bne.n	800182e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc79 	bl	8001120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fc5d 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <HAL_ADC_ConfigChannel+0x24a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc52 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	e01e      	b.n	8001898 <HAL_ADC_ConfigChannel+0x288>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc47 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001888:	2320      	movs	r3, #32
 800188a:	e004      	b.n	8001896 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800188c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x2a0>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	e018      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x2d2>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80018c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80018cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80018d4:	2320      	movs	r3, #32
 80018d6:	e004      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80018d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc16 	bl	8001120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2102      	movs	r1, #2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fbfa 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x310>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fbef 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	e01e      	b.n	800195e <HAL_ADC_ConfigChannel+0x34e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2102      	movs	r1, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbe4 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800193e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e004      	b.n	800195c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x366>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0e9b      	lsrs	r3, r3, #26
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	e014      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x390>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800198a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2102      	movs	r1, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fbb7 	bl	8001120 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb9b 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <HAL_ADC_ConfigChannel+0x3ce>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2103      	movs	r1, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb90 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	e017      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x3fe>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2103      	movs	r1, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb85 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80019fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001a00:	2320      	movs	r3, #32
 8001a02:	e003      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x416>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e011      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x43a>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a36:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e003      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb62 	bl	8001120 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc55 	bl	8001310 <LL_ADC_IsEnabled>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 813f 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f7ff fbd6 	bl	800122c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 8130 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x4a4>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e019      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x4d8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	bf94      	ite	ls
 8001ae2:	2301      	movls	r3, #1
 8001ae4:	2300      	movhi	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d079      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x4f8>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b06:	e015      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x524>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b18:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x544>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x574>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b64:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x59a>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	051b      	lsls	r3, r3, #20
 8001ba8:	e018      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x5cc>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	e080      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x5ec>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	069b      	lsls	r3, r3, #26
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfa:	e015      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x618>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	069b      	lsls	r3, r3, #26
 8001c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x638>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	e017      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x668>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	61bb      	str	r3, [r7, #24]
  return result;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e003      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x694>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b1e      	subs	r3, #30
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	e01d      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x6d0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
  return result;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e005      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x6bc>
 8001cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 021f 	and.w	r2, r3, #31
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b1e      	subs	r3, #30
 8001cda:	051b      	lsls	r3, r3, #20
 8001cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7ff fa74 	bl	80011d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d06c      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf8:	483c      	ldr	r0, [pc, #240]	; (8001dec <HAL_ADC_ConfigChannel+0x7dc>)
 8001cfa:	f7ff f9c9 	bl	8001090 <LL_ADC_GetCommonPathInternalCh>
 8001cfe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d127      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d121      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d157      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	482f      	ldr	r0, [pc, #188]	; (8001dec <HAL_ADC_ConfigChannel+0x7dc>)
 8001d2e:	f7ff f99c 	bl	800106a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <HAL_ADC_ConfigChannel+0x7ec>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_ADC_ConfigChannel+0x7f0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d113      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12a      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d84:	4619      	mov	r1, r3
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <HAL_ADC_ConfigChannel+0x7dc>)
 8001d88:	f7ff f96f 	bl	800106a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d8c:	e021      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_ADC_ConfigChannel+0x7f4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11c      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d116      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d111      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db6:	4619      	mov	r1, r3
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <HAL_ADC_ConfigChannel+0x7dc>)
 8001dba:	f7ff f956 	bl	800106a <LL_ADC_SetCommonPathInternalCh>
 8001dbe:	e008      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001dda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	37d8      	adds	r7, #216	; 0xd8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	80080000 	.word	0x80080000
 8001dec:	50040300 	.word	0x50040300
 8001df0:	c7520000 	.word	0xc7520000
 8001df4:	50040000 	.word	0x50040000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	053e2d63 	.word	0x053e2d63
 8001e00:	cb840000 	.word	0xcb840000
 8001e04:	80000001 	.word	0x80000001

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e014      	b.n	8002066 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe fced 	bl	8000a2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	795b      	ldrb	r3, [r3, #5]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_DAC_Start_DMA+0x1e>
 800208a:	2302      	movs	r3, #2
 800208c:	e0ab      	b.n	80021e6 <HAL_DAC_Start_DMA+0x176>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2202      	movs	r2, #2
 8002098:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d12f      	bne.n	8002100 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_DAC_Start_DMA+0x180>)
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <HAL_DAC_Start_DMA+0x184>)
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_DAC_Start_DMA+0x188>)
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d013      	beq.n	80020f6 <HAL_DAC_Start_DMA+0x86>
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d845      	bhi.n	8002160 <HAL_DAC_Start_DMA+0xf0>
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_DAC_Start_DMA+0x72>
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d005      	beq.n	80020ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80020e0:	e03e      	b.n	8002160 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3308      	adds	r3, #8
 80020e8:	613b      	str	r3, [r7, #16]
        break;
 80020ea:	e03c      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	613b      	str	r3, [r7, #16]
        break;
 80020f4:	e037      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3310      	adds	r3, #16
 80020fc:	613b      	str	r3, [r7, #16]
        break;
 80020fe:	e032      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <HAL_DAC_Start_DMA+0x18c>)
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <HAL_DAC_Start_DMA+0x190>)
 800210e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_DAC_Start_DMA+0x194>)
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002126:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d013      	beq.n	8002156 <HAL_DAC_Start_DMA+0xe6>
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d817      	bhi.n	8002164 <HAL_DAC_Start_DMA+0xf4>
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_DAC_Start_DMA+0xd2>
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d005      	beq.n	800214c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002140:	e010      	b.n	8002164 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3314      	adds	r3, #20
 8002148:	613b      	str	r3, [r7, #16]
        break;
 800214a:	e00c      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3318      	adds	r3, #24
 8002152:	613b      	str	r3, [r7, #16]
        break;
 8002154:	e007      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	331c      	adds	r3, #28
 800215c:	613b      	str	r3, [r7, #16]
        break;
 800215e:	e002      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002164:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800217a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6898      	ldr	r0, [r3, #8]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	f000 fecb 	bl	8002f20 <HAL_DMA_Start_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	75fb      	strb	r3, [r7, #23]
 800218e:	e010      	b.n	80021b2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800219e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68d8      	ldr	r0, [r3, #12]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	f000 feb9 	bl	8002f20 <HAL_DMA_Start_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e005      	b.n	80021e4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	08002569 	.word	0x08002569
 80021f4:	0800258b 	.word	0x0800258b
 80021f8:	080025a7 	.word	0x080025a7
 80021fc:	08002611 	.word	0x08002611
 8002200:	08002633 	.word	0x08002633
 8002204:	0800264f 	.word	0x0800264f

08002208 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	400a      	ands	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fedd 	bl	8003016 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e00c      	b.n	8002288 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fecf 	bl	8003016 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002286:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	795b      	ldrb	r3, [r3, #5]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_DAC_ConfigChannel+0x1c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e137      	b.n	800255c <HAL_DAC_ConfigChannel+0x28c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2202      	movs	r2, #2
 80022f6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	f040 8081 	bne.w	8002404 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002302:	f7fe fe6f 	bl	8000fe4 <HAL_GetTick>
 8002306:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d140      	bne.n	8002390 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800230e:	e018      	b.n	8002342 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002310:	f7fe fe68 	bl	8000fe4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d911      	bls.n	8002342 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f043 0208 	orr.w	r2, r3, #8
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2203      	movs	r2, #3
 800233c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e10c      	b.n	800255c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1df      	bne.n	8002310 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe fe53 	bl	8000ffc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	69d2      	ldr	r2, [r2, #28]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
 8002360:	e023      	b.n	80023aa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002362:	f7fe fe3f 	bl	8000fe4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d90f      	bls.n	8002390 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	da0a      	bge.n	8002390 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f043 0208 	orr.w	r2, r3, #8
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2203      	movs	r2, #3
 800238a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0e5      	b.n	800255c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	2b00      	cmp	r3, #0
 8002398:	dbe3      	blt.n	8002362 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800239a:	2001      	movs	r0, #1
 800239c:	f7fe fe2e 	bl	8000ffc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	69d2      	ldr	r2, [r2, #28]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	ea02 0103 	and.w	r1, r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	21ff      	movs	r1, #255	; 0xff
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	ea02 0103 	and.w	r1, r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d11d      	bne.n	8002448 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	4013      	ands	r3, r2
 8002426:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	4313      	orrs	r3, r2
 800243e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	431a      	orrs	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ec:	d104      	bne.n	80024f8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e018      	b.n	800252a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e00f      	b.n	800252a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800250a:	f001 ffaf 	bl	800446c <HAL_RCC_GetHCLKFreq>
 800250e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_DAC_ConfigChannel+0x294>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d904      	bls.n	8002522 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	e003      	b.n	800252a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002528:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	22c0      	movs	r2, #192	; 0xc0
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	04c4b400 	.word	0x04c4b400

08002568 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff fe8b 	bl	8002292 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	711a      	strb	r2, [r3, #4]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe84 	bl	80022a6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fe7a 	bl	80022ba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	711a      	strb	r2, [r3, #4]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff ffd8 	bl	80025d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	711a      	strb	r2, [r3, #4]
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff ffd1 	bl	80025e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff ffc7 	bl	80025fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	711a      	strb	r2, [r3, #4]
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0ac      	b.n	80027e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 faac 	bl	8002bf0 <DFSDM_GetChannelFromInstance>
 8002698:	4603      	mov	r3, r0
 800269a:	4a55      	ldr	r2, [pc, #340]	; (80027f0 <HAL_DFSDM_ChannelInit+0x174>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09f      	b.n	80027e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7fe fad9 	bl	8000c60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_DFSDM_ChannelInit+0x178>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <HAL_DFSDM_ChannelInit+0x178>)
 80026b6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <HAL_DFSDM_ChannelInit+0x178>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d125      	bne.n	800270c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026c0:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026cc:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4948      	ldr	r1, [pc, #288]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a46      	ldr	r2, [pc, #280]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80026e4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	791b      	ldrb	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	493f      	ldr	r1, [pc, #252]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800270a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800271a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800272a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002730:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020f 	bic.w	r2, r2, #15
 8002748:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002770:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 0207 	and.w	r2, r2, #7
 800279c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fa0a 	bl	8002bf0 <DFSDM_GetChannelFromInstance>
 80027dc:	4602      	mov	r2, r0
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_DFSDM_ChannelInit+0x174>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20031028 	.word	0x20031028
 80027f4:	20031024 	.word	0x20031024
 80027f8:	40016000 	.word	0x40016000

080027fc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0ca      	b.n	80029a4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a66      	ldr	r2, [pc, #408]	; (80029ac <HAL_DFSDM_FilterInit+0x1b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d109      	bne.n	800282c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800281c:	2b01      	cmp	r3, #1
 800281e:	d003      	beq.n	8002828 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0bb      	b.n	80029a4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe f95f 	bl	8000b08 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002858:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7a1b      	ldrb	r3, [r3, #8]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d108      	bne.n	8002874 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e007      	b.n	8002884 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002882:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7a5b      	ldrb	r3, [r3, #9]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028bc:	f023 0308 	bic.w	r3, r3, #8
 80028c0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d108      	bne.n	80028dc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7c1b      	ldrb	r3, [r3, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d108      	bne.n	80028f6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0210 	orr.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e007      	b.n	8002906 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0210 	bic.w	r2, r2, #16
 8002904:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7c5b      	ldrb	r3, [r3, #17]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e007      	b.n	8002930 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0220 	bic.w	r2, r2, #32
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800293e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002942:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6959      	ldr	r1, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002956:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800295e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7c1a      	ldrb	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40016100 	.word	0x40016100

080029b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02e      	beq.n	8002a28 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029d0:	2bff      	cmp	r3, #255	; 0xff
 80029d2:	d029      	beq.n	8002a28 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10d      	bne.n	8002a0a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e00a      	b.n	8002a20 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
 8002a26:	e001      	b.n	8002a2c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
 8002a5c:	e064      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a6c:	d002      	beq.n	8002a74 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
 8002a72:	e059      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10e      	bne.n	8002a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
 8002a98:	e046      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d107      	bne.n	8002aba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d102      	bne.n	8002aba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
 8002ab8:	e036      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d004      	beq.n	8002ace <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d12a      	bne.n	8002b24 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d101      	bne.n	8002aec <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002aea:	e000      	b.n	8002aee <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002aec:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	331c      	adds	r3, #28
 8002afe:	4619      	mov	r1, r3
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f000 fa0c 	bl	8002f20 <HAL_DMA_Start_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002b1a:	e005      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8b3 	bl	8002c88 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002b22:	e001      	b.n	8002b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	08002bb1 	.word	0x08002bb1
 8002b38:	08002bcd 	.word	0x08002bcd
 8002b3c:	08002b95 	.word	0x08002b95

08002b40 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d007      	beq.n	8002b66 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d002      	beq.n	8002b66 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e007      	b.n	8002b76 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fa53 	bl	8003016 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8df 	bl	8002d34 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fd fb4c 	bl	8000240 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7fd fb4e 	bl	8000260 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f7ff ffcd 	bl	8002b80 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <DFSDM_GetChannelFromInstance+0x7c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e02b      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <DFSDM_GetChannelFromInstance+0x80>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e024      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <DFSDM_GetChannelFromInstance+0x84>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e01d      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <DFSDM_GetChannelFromInstance+0x88>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d102      	bne.n	8002c30 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e016      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <DFSDM_GetChannelFromInstance+0x8c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d102      	bne.n	8002c3e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e00f      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <DFSDM_GetChannelFromInstance+0x90>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c46:	2306      	movs	r3, #6
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e008      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <DFSDM_GetChannelFromInstance+0x94>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d102      	bne.n	8002c5a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c54:	2307      	movs	r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e001      	b.n	8002c5e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40016000 	.word	0x40016000
 8002c70:	40016020 	.word	0x40016020
 8002c74:	40016040 	.word	0x40016040
 8002c78:	40016080 	.word	0x40016080
 8002c7c:	400160a0 	.word	0x400160a0
 8002c80:	400160c0 	.word	0x400160c0
 8002c84:	400160e0 	.word	0x400160e0

08002c88 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e033      	b.n	8002d12 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d116      	bne.n	8002d12 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0202 	orr.w	r2, r2, #2
 8002cfa:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <DFSDM_RegConvStart+0x84>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	e000      	b.n	8002d0e <DFSDM_RegConvStart+0x86>
 8002d0c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <DFSDM_RegConvStart+0x98>
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	e000      	b.n	8002d22 <DFSDM_RegConvStart+0x9a>
 8002d20:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d116      	bne.n	8002dac <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0202 	orr.w	r2, r2, #2
 8002d94:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <DFSDM_RegConvStop+0x72>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	e000      	b.n	8002da8 <DFSDM_RegConvStop+0x74>
 8002da6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d101      	bne.n	8002dba <DFSDM_RegConvStop+0x86>
 8002db6:	2201      	movs	r2, #1
 8002db8:	e000      	b.n	8002dbc <DFSDM_RegConvStop+0x88>
 8002dba:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e08d      	b.n	8002efe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_DMA_Init+0x138>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d80f      	bhi.n	8002e0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b45      	ldr	r3, [pc, #276]	; (8002f0c <HAL_DMA_Init+0x13c>)
 8002df6:	4413      	add	r3, r2
 8002df8:	4a45      	ldr	r2, [pc, #276]	; (8002f10 <HAL_DMA_Init+0x140>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_DMA_Init+0x144>)
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0c:	e00e      	b.n	8002e2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_DMA_Init+0x148>)
 8002e16:	4413      	add	r3, r2
 8002e18:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <HAL_DMA_Init+0x140>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	009a      	lsls	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_DMA_Init+0x14c>)
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa12 	bl	80032a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e8c:	d102      	bne.n	8002e94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_DMA_Init+0x104>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d80c      	bhi.n	8002ed4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa32 	bl	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e008      	b.n	8002ee6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40020407 	.word	0x40020407
 8002f0c:	bffdfff8 	.word	0xbffdfff8
 8002f10:	cccccccd 	.word	0xcccccccd
 8002f14:	40020000 	.word	0x40020000
 8002f18:	bffdfbf8 	.word	0xbffdfbf8
 8002f1c:	40020400 	.word	0x40020400

08002f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_DMA_Start_IT+0x20>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e066      	b.n	800300e <HAL_DMA_Start_IT+0xee>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d155      	bne.n	8003000 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f957 	bl	800322c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 020e 	orr.w	r2, r2, #14
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e00f      	b.n	8002fb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 020a 	orr.w	r2, r2, #10
 8002fb6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e005      	b.n	800300c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003008:	2302      	movs	r3, #2
 800300a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d008      	beq.n	8003040 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e040      	b.n	80030c2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 021c 	and.w	r2, r3, #28
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800308c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 031c 	and.w	r3, r3, #28
 80030ee:	2204      	movs	r2, #4
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d026      	beq.n	8003148 <HAL_DMA_IRQHandler+0x7a>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0204 	bic.w	r2, r2, #4
 8003120:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 021c 	and.w	r2, r3, #28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2104      	movs	r1, #4
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	2b00      	cmp	r3, #0
 800313c:	d071      	beq.n	8003222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003146:	e06c      	b.n	8003222 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f003 031c 	and.w	r3, r3, #28
 8003150:	2202      	movs	r2, #2
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02e      	beq.n	80031ba <HAL_DMA_IRQHandler+0xec>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d029      	beq.n	80031ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 020a 	bic.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 021c 	and.w	r2, r3, #28
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2102      	movs	r1, #2
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d038      	beq.n	8003222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031b8:	e033      	b.n	8003222 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 031c 	and.w	r3, r3, #28
 80031c2:	2208      	movs	r2, #8
 80031c4:	409a      	lsls	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x156>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d025      	beq.n	8003224 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 020e 	bic.w	r2, r2, #14
 80031e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	f003 021c 	and.w	r2, r3, #28
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003222:	bf00      	nop
 8003224:	bf00      	nop
}
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003242:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003254:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 021c 	and.w	r2, r3, #28
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d108      	bne.n	800328c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800328a:	e007      	b.n	800329c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d80a      	bhi.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6493      	str	r3, [r2, #72]	; 0x48
 80032d0:	e007      	b.n	80032e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	009a      	lsls	r2, r3, #2
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032dc:	4413      	add	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3b08      	subs	r3, #8
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2201      	movs	r2, #1
 8003302:	409a      	lsls	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40020407 	.word	0x40020407
 8003318:	4002081c 	.word	0x4002081c
 800331c:	cccccccd 	.word	0xcccccccd
 8003320:	40020880 	.word	0x40020880

08003324 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003346:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3b01      	subs	r3, #1
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2201      	movs	r2, #1
 8003352:	409a      	lsls	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	1000823f 	.word	0x1000823f
 8003368:	40020940 	.word	0x40020940

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337a:	e166      	b.n	800364a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2101      	movs	r1, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	4013      	ands	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8158 	beq.w	8003644 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d005      	beq.n	80033ac <HAL_GPIO_Init+0x40>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d130      	bne.n	800340e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e2:	2201      	movs	r2, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 0201 	and.w	r2, r3, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b03      	cmp	r3, #3
 8003418:	d017      	beq.n	800344a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d123      	bne.n	800349e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80b2 	beq.w	8003644 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_GPIO_Init+0x2fc>)
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	4a60      	ldr	r2, [pc, #384]	; (8003668 <HAL_GPIO_Init+0x2fc>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6613      	str	r3, [r2, #96]	; 0x60
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_GPIO_Init+0x2fc>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f8:	4a5c      	ldr	r2, [pc, #368]	; (800366c <HAL_GPIO_Init+0x300>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3302      	adds	r3, #2
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003522:	d02b      	beq.n	800357c <HAL_GPIO_Init+0x210>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_GPIO_Init+0x304>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d025      	beq.n	8003578 <HAL_GPIO_Init+0x20c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a51      	ldr	r2, [pc, #324]	; (8003674 <HAL_GPIO_Init+0x308>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d01f      	beq.n	8003574 <HAL_GPIO_Init+0x208>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a50      	ldr	r2, [pc, #320]	; (8003678 <HAL_GPIO_Init+0x30c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d019      	beq.n	8003570 <HAL_GPIO_Init+0x204>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4f      	ldr	r2, [pc, #316]	; (800367c <HAL_GPIO_Init+0x310>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_GPIO_Init+0x200>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_GPIO_Init+0x314>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00d      	beq.n	8003568 <HAL_GPIO_Init+0x1fc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_GPIO_Init+0x318>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x1f8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a4c      	ldr	r2, [pc, #304]	; (8003688 <HAL_GPIO_Init+0x31c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_Init+0x1f4>
 800355c:	2307      	movs	r3, #7
 800355e:	e00e      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003560:	2308      	movs	r3, #8
 8003562:	e00c      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003564:	2306      	movs	r3, #6
 8003566:	e00a      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003568:	2305      	movs	r3, #5
 800356a:	e008      	b.n	800357e <HAL_GPIO_Init+0x212>
 800356c:	2304      	movs	r3, #4
 800356e:	e006      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003570:	2303      	movs	r3, #3
 8003572:	e004      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003574:	2302      	movs	r3, #2
 8003576:	e002      	b.n	800357e <HAL_GPIO_Init+0x212>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_GPIO_Init+0x212>
 800357c:	2300      	movs	r3, #0
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	f002 0203 	and.w	r2, r2, #3
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	4093      	lsls	r3, r2
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_GPIO_Init+0x300>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_GPIO_Init+0x320>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c0:	4a32      	ldr	r2, [pc, #200]	; (800368c <HAL_GPIO_Init+0x320>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_GPIO_Init+0x320>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ea:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_GPIO_Init+0x320>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035f0:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_GPIO_Init+0x320>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_GPIO_Init+0x320>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_GPIO_Init+0x320>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_GPIO_Init+0x320>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f ae91 	bne.w	800337c <HAL_GPIO_Init+0x10>
  }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	48001400 	.word	0x48001400
 8003684:	48001800 	.word	0x48001800
 8003688:	48001c00 	.word	0x48001c00
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	43d9      	mvns	r1, r3
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	400b      	ands	r3, r1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc fd72 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_PWREx_GetVoltageRange+0x3c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d102      	bne.n	800373c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373a:	e00b      	b.n	8003754 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_PWREx_GetVoltageRange+0x3c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d102      	bne.n	8003752 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800374c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003750:	e000      	b.n	8003754 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003752:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40007000 	.word	0x40007000

08003764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d141      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003772:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d131      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003780:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003786:	4a46      	ldr	r2, [pc, #280]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003798:	4a41      	ldr	r2, [pc, #260]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037a0:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2232      	movs	r2, #50	; 0x32
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	4a3f      	ldr	r2, [pc, #252]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	0c9b      	lsrs	r3, r3, #18
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b6:	e002      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d102      	bne.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f2      	bne.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d2:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037de:	d158      	bne.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e057      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ea:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037f4:	e04d      	b.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d141      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d131      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2232      	movs	r2, #50	; 0x32
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	0c9b      	lsrs	r3, r3, #18
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003842:	e002      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3b01      	subs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d102      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f2      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d112      	bne.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e011      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003880:	e007      	b.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388a:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003890:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40007000 	.word	0x40007000
 80038a4:	20000000 	.word	0x20000000
 80038a8:	431bde83 	.word	0x431bde83

080038ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 bc08 	b.w	80040d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ca:	4b94      	ldr	r3, [pc, #592]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80e4 	beq.w	8003aaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4c>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	f040 808b 	bne.w	8003a06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 8087 	bne.w	8003a06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x64>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e3df      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_RCC_OscConfig+0x7e>
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003928:	e005      	b.n	8003936 <HAL_RCC_OscConfig+0x8a>
 800392a:	4b7c      	ldr	r3, [pc, #496]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	4293      	cmp	r3, r2
 8003938:	d223      	bcs.n	8003982 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fda0 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e3c0      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394e:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a72      	ldr	r2, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003954:	f043 0308 	orr.w	r3, r3, #8
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	496d      	ldr	r1, [pc, #436]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4968      	ldr	r1, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
 8003980:	e025      	b.n	80039ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4960      	ldr	r1, [pc, #384]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a0:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	495b      	ldr	r1, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fd60 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e380      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ce:	f000 fcc1 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 80039d2:	4602      	mov	r2, r0
 80039d4:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4950      	ldr	r1, [pc, #320]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039e0:	5ccb      	ldrb	r3, [r1, r3]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 80039ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ee:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd faa6 	bl	8000f44 <HAL_InitTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d052      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	e364      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d032      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fae3 	bl	8000fe4 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a22:	f7fd fadf 	bl	8000fe4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e34d      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a40:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a35      	ldr	r2, [pc, #212]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4930      	ldr	r1, [pc, #192]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	492b      	ldr	r1, [pc, #172]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e01a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a74:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fab0 	bl	8000fe4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a88:	f7fd faac 	bl	8000fe4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e31a      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1dc>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d073      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x21c>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d063      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d15f      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e2f7      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x24c>
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e025      	b.n	8003b44 <HAL_RCC_OscConfig+0x298>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b00:	d114      	bne.n	8003b2c <HAL_RCC_OscConfig+0x280>
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a02      	ldr	r2, [pc, #8]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0x298>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	080059d0 	.word	0x080059d0
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a9f      	ldr	r2, [pc, #636]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b9d      	ldr	r3, [pc, #628]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a9c      	ldr	r2, [pc, #624]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fa4a 	bl	8000fe4 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fa46 	bl	8000fe4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e2b4      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	4b92      	ldr	r3, [pc, #584]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2a8>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fa36 	bl	8000fe4 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fa32 	bl	8000fe4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e2a0      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2d0>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d060      	beq.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x310>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d116      	bne.n	8003bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bbc:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x328>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e27d      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4973      	ldr	r1, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	e040      	b.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf2:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f9f1 	bl	8000fe4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd f9ed 	bl	8000fe4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e25b      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b62      	ldr	r3, [pc, #392]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	495f      	ldr	r1, [pc, #380]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd f9cd 	bl	8000fe4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd f9c9 	bl	8000fe4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e237      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fd f9a8 	bl	8000fe4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fd f9a4 	bl	8000fe4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e212      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ef      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3ec>
 8003cb8:	e01b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd f98b 	bl	8000fe4 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd f987 	bl	8000fe4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1f5      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ef      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a6 	beq.w	8003e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d118      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d44:	f7fd f94e 	bl	8000fe4 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4c:	f7fd f94a 	bl	8000fe4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1b8      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4d8>
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d82:	e029      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d115      	bne.n	8003db8 <HAL_RCC_OscConfig+0x50c>
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dac:	e014      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	4b9d      	ldr	r3, [pc, #628]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a9c      	ldr	r2, [pc, #624]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc8:	4b99      	ldr	r3, [pc, #612]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a98      	ldr	r2, [pc, #608]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd f900 	bl	8000fe4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd f8fc 	bl	8000fe4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e168      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ed      	beq.n	8003de8 <HAL_RCC_OscConfig+0x53c>
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fd f8e9 	bl	8000fe4 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd f8e5 	bl	8000fe4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e151      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	4b80      	ldr	r3, [pc, #512]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ed      	bne.n	8003e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b7b      	ldr	r3, [pc, #492]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	4a7a      	ldr	r2, [pc, #488]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e60:	4b73      	ldr	r3, [pc, #460]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e66:	4a72      	ldr	r2, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd f8b8 	bl	8000fe4 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e78:	f7fd f8b4 	bl	8000fe4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e122      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8a:	4b69      	ldr	r3, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ef      	beq.n	8003e78 <HAL_RCC_OscConfig+0x5cc>
 8003e98:	e01b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e9a:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea0:	4a63      	ldr	r2, [pc, #396]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fd f89b 	bl	8000fe4 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb2:	f7fd f897 	bl	8000fe4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e105      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ef      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80f9 	beq.w	80040ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f040 80cf 	bne.w	8004084 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ee6:	4b52      	ldr	r3, [pc, #328]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0203 	and.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d12c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	3b01      	subs	r3, #1
 8003f06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d123      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d11b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d113      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d071      	beq.n	8004038 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d068      	beq.n	800402c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f5a:	4b35      	ldr	r3, [pc, #212]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f66:	4b32      	ldr	r3, [pc, #200]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0ac      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f82:	f7fd f82f 	bl	8000fe4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd f82b 	bl	8000fe4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e099      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCC_OscConfig+0x788>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fc2:	0212      	lsls	r2, r2, #8
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0552      	lsls	r2, r2, #21
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fd6:	0852      	lsrs	r2, r2, #1
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	0652      	lsls	r2, r2, #25
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe2:	06d2      	lsls	r2, r2, #27
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4912      	ldr	r1, [pc, #72]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004004:	f7fc ffee 	bl	8000fe4 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fc ffea 	bl	8000fe4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e058      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCC_OscConfig+0x784>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402a:	e050      	b.n	80040ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e04f      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
 8004030:	40021000 	.word	0x40021000
 8004034:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d144      	bne.n	80040ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800405c:	f7fc ffc2 	bl	8000fe4 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fc ffbe 	bl	8000fe4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e02c      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x7b8>
 8004082:	e024      	b.n	80040ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d01f      	beq.n	80040ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 8004090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fc ffa5 	bl	8000fe4 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fc ffa1 	bl	8000fe4 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e00f      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_OscConfig+0x830>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
 80040c8:	e001      	b.n	80040ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	feeefffc 	.word	0xfeeefffc

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e11d      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b90      	ldr	r3, [pc, #576]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b8d      	ldr	r3, [pc, #564]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	498b      	ldr	r1, [pc, #556]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b89      	ldr	r3, [pc, #548]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e105      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	429a      	cmp	r2, r3
 8004142:	d908      	bls.n	8004156 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b7e      	ldr	r3, [pc, #504]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	497b      	ldr	r1, [pc, #492]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d079      	beq.n	8004256 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d11e      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	4b75      	ldr	r3, [pc, #468]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0dc      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800417a:	f000 f9dd 	bl	8004538 <RCC_GetSysClockFreqFromPLLSource>
 800417e:	4603      	mov	r3, r0
 8004180:	4a70      	ldr	r2, [pc, #448]	; (8004344 <HAL_RCC_ClockConfig+0x264>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d946      	bls.n	8004214 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004186:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d140      	bne.n	8004214 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004192:	4b6b      	ldr	r3, [pc, #428]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800419a:	4a69      	ldr	r2, [pc, #420]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e035      	b.n	8004214 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b0:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d115      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b9      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c8:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0ad      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0a5      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041e8:	f000 f8b4 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4a55      	ldr	r2, [pc, #340]	; (8004344 <HAL_RCC_ClockConfig+0x264>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d90f      	bls.n	8004214 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004200:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004208:	4a4d      	ldr	r2, [pc, #308]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004214:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 0203 	bic.w	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4947      	ldr	r1, [pc, #284]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fc fedd 	bl	8000fe4 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422c:	e00a      	b.n	8004244 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422e:	f7fc fed9 	bl	8000fe4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e077      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004244:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 020c 	and.w	r2, r3, #12
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	429a      	cmp	r2, r3
 8004254:	d1eb      	bne.n	800422e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d105      	bne.n	8004268 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800425c:	4b38      	ldr	r3, [pc, #224]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a37      	ldr	r2, [pc, #220]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004266:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004280:	429a      	cmp	r2, r3
 8004282:	d208      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	492b      	ldr	r1, [pc, #172]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d210      	bcs.n	80042c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 020f 	bic.w	r2, r3, #15
 80042ac:	4923      	ldr	r1, [pc, #140]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCC_ClockConfig+0x25c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e036      	b.n	8004334 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d2:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4918      	ldr	r1, [pc, #96]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4910      	ldr	r1, [pc, #64]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004304:	f000 f826 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_RCC_ClockConfig+0x260>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	490c      	ldr	r1, [pc, #48]	; (8004348 <HAL_RCC_ClockConfig+0x268>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <HAL_RCC_ClockConfig+0x26c>)
 8004322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCC_ClockConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc fe0b 	bl	8000f44 <HAL_InitTick>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]

  return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40022000 	.word	0x40022000
 8004340:	40021000 	.word	0x40021000
 8004344:	04c4b400 	.word	0x04c4b400
 8004348:	080059d0 	.word	0x080059d0
 800434c:	20000000 	.word	0x20000000
 8004350:	20000004 	.word	0x20000004

08004354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	; 0x24
 8004358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b3e      	ldr	r3, [pc, #248]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x34>
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d121      	bne.n	80043c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d11e      	bne.n	80043c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e005      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a4:	4b2d      	ldr	r3, [pc, #180]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b0:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e004      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_RCC_GetSysClockFreq+0x114>)
 80043da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d134      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0xa6>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d003      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0xac>
 80043f8:	e005      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_RCC_GetSysClockFreq+0x110>)
 80043fc:	617b      	str	r3, [r7, #20]
      break;
 80043fe:	e005      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_RCC_GetSysClockFreq+0x114>)
 8004402:	617b      	str	r3, [r7, #20]
      break;
 8004404:	e002      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	617b      	str	r3, [r7, #20]
      break;
 800440a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	3301      	adds	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	fb03 f202 	mul.w	r2, r3, r2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_RCC_GetSysClockFreq+0x108>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	0e5b      	lsrs	r3, r3, #25
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	3301      	adds	r3, #1
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800444c:	69bb      	ldr	r3, [r7, #24]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	080059e0 	.word	0x080059e0
 8004464:	00f42400 	.word	0x00f42400
 8004468:	007a1200 	.word	0x007a1200

0800446c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_GetHCLKFreq+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000000 	.word	0x20000000

08004484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800449c:	f7ff f942 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 80044a0:	6178      	str	r0, [r7, #20]
 80044a2:	e014      	b.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f932 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d10b      	bne.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d913      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2ba0      	cmp	r3, #160	; 0xa0
 80044e0:	d902      	bls.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e2:	2302      	movs	r3, #2
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e00d      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e8:	2301      	movs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e00a      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b7f      	cmp	r3, #127	; 0x7f
 80044f2:	d902      	bls.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80044f4:	2302      	movs	r3, #2
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e004      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b70      	cmp	r3, #112	; 0x70
 80044fe:	d101      	bne.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004500:	2301      	movs	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 020f 	bic.w	r2, r3, #15
 800450c:	4909      	ldr	r1, [pc, #36]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40022000 	.word	0x40022000

08004538 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d00b      	beq.n	8004566 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d825      	bhi.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d008      	beq.n	800456c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d11f      	bne.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004562:	613b      	str	r3, [r7, #16]
    break;
 8004564:	e01f      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004568:	613b      	str	r3, [r7, #16]
    break;
 800456a:	e01c      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d107      	bne.n	8004588 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800457a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e005      	b.n	8004594 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004594:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	613b      	str	r3, [r7, #16]
    break;
 800459e:	e002      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
    break;
 80045a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	3301      	adds	r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80045e6:	683b      	ldr	r3, [r7, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200
 8004600:	080059e0 	.word	0x080059e0

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461c:	2b00      	cmp	r3, #0
 800461e:	d040      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d02a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d825      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d026      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d821      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d006      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d81d      	bhi.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004640:	2b20      	cmp	r3, #32
 8004642:	d010      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004644:	e018      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a88      	ldr	r2, [pc, #544]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004652:	e015      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fb02 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004664:	e00c      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3320      	adds	r3, #32
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fbed 	bl	8004e4c <RCCEx_PLLSAI2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	74fb      	strb	r3, [r7, #19]
      break;
 800467c:	e000      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800467e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004686:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004694:	4975      	ldr	r1, [pc, #468]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800469c:	e001      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d047      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d030      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d82a      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d02a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d824      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d4:	d81e      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d010      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046e0:	e018      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046e2:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4a61      	ldr	r2, [pc, #388]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ee:	e015      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fab4 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004700:	e00c      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3320      	adds	r3, #32
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fb9f 	bl	8004e4c <RCCEx_PLLSAI2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	74fb      	strb	r3, [r7, #19]
      break;
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800471a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004722:	4b52      	ldr	r3, [pc, #328]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	494e      	ldr	r1, [pc, #312]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004738:	e001      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 809f 	beq.w	800488a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474c:	2300      	movs	r3, #0
 800474e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004750:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a40      	ldr	r2, [pc, #256]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
 8004772:	4b3e      	ldr	r3, [pc, #248]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477e:	2301      	movs	r3, #1
 8004780:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800478e:	f7fc fc29 	bl	8000fe4 <HAL_GetTick>
 8004792:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004794:	e009      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fc fc25 	bl	8000fe4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d902      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	74fb      	strb	r3, [r7, #19]
        break;
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0ef      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d15b      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047bc:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d019      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004806:	4a19      	ldr	r2, [pc, #100]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d016      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fc fbe4 	bl	8000fe4 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	e00b      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc fbe0 	bl	8000fe4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d902      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	74fb      	strb	r3, [r7, #19]
            break;
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ec      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10c      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004864:	e008      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	74bb      	strb	r3, [r7, #18]
 800486a:	e005      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004878:	7c7b      	ldrb	r3, [r7, #17]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4ba0      	ldr	r3, [pc, #640]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	4a9f      	ldr	r2, [pc, #636]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004896:	4b9a      	ldr	r3, [pc, #616]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f023 0203 	bic.w	r2, r3, #3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4996      	ldr	r1, [pc, #600]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b8:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 020c 	bic.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	498e      	ldr	r1, [pc, #568]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048da:	4b89      	ldr	r3, [pc, #548]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	4985      	ldr	r1, [pc, #532]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048fc:	4b80      	ldr	r3, [pc, #512]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	497d      	ldr	r1, [pc, #500]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491e:	4b78      	ldr	r3, [pc, #480]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	4974      	ldr	r1, [pc, #464]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004940:	4b6f      	ldr	r3, [pc, #444]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	496c      	ldr	r1, [pc, #432]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004962:	4b67      	ldr	r3, [pc, #412]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	4963      	ldr	r1, [pc, #396]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004992:	495b      	ldr	r1, [pc, #364]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	4952      	ldr	r1, [pc, #328]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c8:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	494a      	ldr	r1, [pc, #296]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ea:	4b45      	ldr	r3, [pc, #276]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f8:	4941      	ldr	r1, [pc, #260]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a0c:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1a:	4939      	ldr	r1, [pc, #228]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2e:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3c:	4930      	ldr	r1, [pc, #192]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a58:	60d3      	str	r3, [r2, #12]
 8004a5a:	e011      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f8f9 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d04d      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a94:	d108      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aa2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004aa6:	e012      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae2:	60d3      	str	r3, [r2, #12]
 8004ae4:	e020      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004af0:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a02      	ldr	r2, [pc, #8]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	60d3      	str	r3, [r2, #12]
 8004afc:	e014      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f8a5 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d028      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b34:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b42:	4947      	ldr	r1, [pc, #284]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b42      	ldr	r3, [pc, #264]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
 8004b60:	e011      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b6a:	d10c      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f876 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7c:	7cfb      	ldrb	r3, [r7, #19]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01e      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b92:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba2:	492f      	ldr	r1, [pc, #188]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f851 	bl	8004c64 <RCCEx_PLLSAI1_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bc6:	7cfb      	ldrb	r3, [r7, #19]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bdc:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be2:	f023 0204 	bic.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bec:	491c      	ldr	r1, [pc, #112]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c06:	f023 0218 	bic.w	r2, r3, #24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	4913      	ldr	r1, [pc, #76]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d017      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c34:	490a      	ldr	r1, [pc, #40]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c54:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000

08004c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c72:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00e      	beq.n	8004c9c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c7e:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d103      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
       ||
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d142      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e03f      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d018      	beq.n	8004cd6 <RCCEx_PLLSAI1_Config+0x72>
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d825      	bhi.n	8004cf4 <RCCEx_PLLSAI1_Config+0x90>
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d002      	beq.n	8004cb2 <RCCEx_PLLSAI1_Config+0x4e>
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d009      	beq.n	8004cc4 <RCCEx_PLLSAI1_Config+0x60>
 8004cb0:	e020      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb2:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11d      	bne.n	8004cfa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc2:	e01a      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b5d      	ldr	r3, [pc, #372]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d116      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd4:	e013      	b.n	8004cfe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cd6:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce2:	4b56      	ldr	r3, [pc, #344]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e004      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4949      	ldr	r1, [pc, #292]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f040 8086 	bne.w	8004e30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a44      	ldr	r2, [pc, #272]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fc f958 	bl	8000fe4 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d36:	e009      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d38:	f7fc f954 	bl	8000fe4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d902      	bls.n	8004d4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	73fb      	strb	r3, [r7, #15]
        break;
 8004d4a:	e005      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ef      	bne.n	8004d38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d168      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d113      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d64:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6892      	ldr	r2, [r2, #8]
 8004d70:	0211      	lsls	r1, r2, #8
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68d2      	ldr	r2, [r2, #12]
 8004d76:	06d2      	lsls	r2, r2, #27
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6852      	ldr	r2, [r2, #4]
 8004d7e:	3a01      	subs	r2, #1
 8004d80:	0112      	lsls	r2, r2, #4
 8004d82:	430a      	orrs	r2, r1
 8004d84:	492d      	ldr	r1, [pc, #180]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	610b      	str	r3, [r1, #16]
 8004d8a:	e02d      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d115      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6892      	ldr	r2, [r2, #8]
 8004d9e:	0211      	lsls	r1, r2, #8
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6912      	ldr	r2, [r2, #16]
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	0552      	lsls	r2, r2, #21
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	3a01      	subs	r2, #1
 8004db2:	0112      	lsls	r2, r2, #4
 8004db4:	430a      	orrs	r2, r1
 8004db6:	4921      	ldr	r1, [pc, #132]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]
 8004dbc:	e014      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	0211      	lsls	r1, r2, #8
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6952      	ldr	r2, [r2, #20]
 8004dd0:	0852      	lsrs	r2, r2, #1
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	0652      	lsls	r2, r2, #25
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6852      	ldr	r2, [r2, #4]
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	0112      	lsls	r2, r2, #4
 8004de0:	430a      	orrs	r2, r1
 8004de2:	4916      	ldr	r1, [pc, #88]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fc f8f6 	bl	8000fe4 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dfc:	f7fc f8f2 	bl	8000fe4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	07ff800f 	.word	0x07ff800f
 8004e44:	ff9f800f 	.word	0xff9f800f
 8004e48:	f9ff800f 	.word	0xf9ff800f

08004e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00e      	beq.n	8004e84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e66:	4b6f      	ldr	r3, [pc, #444]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0203 	and.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d103      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
       ||
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d142      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
 8004e82:	e03f      	b.n	8004f04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d018      	beq.n	8004ebe <RCCEx_PLLSAI2_Config+0x72>
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d825      	bhi.n	8004edc <RCCEx_PLLSAI2_Config+0x90>
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d002      	beq.n	8004e9a <RCCEx_PLLSAI2_Config+0x4e>
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d009      	beq.n	8004eac <RCCEx_PLLSAI2_Config+0x60>
 8004e98:	e020      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e9a:	4b62      	ldr	r3, [pc, #392]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11d      	bne.n	8004ee2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eaa:	e01a      	b.n	8004ee2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eac:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ebc:	e013      	b.n	8004ee6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ebe:	4b59      	ldr	r3, [pc, #356]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eca:	4b56      	ldr	r3, [pc, #344]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eda:	e006      	b.n	8004eea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e004      	b.n	8004eec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004ef2:	4b4c      	ldr	r3, [pc, #304]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f023 0203 	bic.w	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4949      	ldr	r1, [pc, #292]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 8086 	bne.w	8005018 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f0c:	4b45      	ldr	r3, [pc, #276]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a44      	ldr	r2, [pc, #272]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f18:	f7fc f864 	bl	8000fe4 <HAL_GetTick>
 8004f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f1e:	e009      	b.n	8004f34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f20:	f7fc f860 	bl	8000fe4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d902      	bls.n	8004f34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	73fb      	strb	r3, [r7, #15]
        break;
 8004f32:	e005      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f34:	4b3b      	ldr	r3, [pc, #236]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ef      	bne.n	8004f20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d168      	bne.n	8005018 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f4c:	4b35      	ldr	r3, [pc, #212]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	4b35      	ldr	r3, [pc, #212]	; (8005028 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68d2      	ldr	r2, [r2, #12]
 8004f5e:	06d2      	lsls	r2, r2, #27
 8004f60:	4311      	orrs	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6852      	ldr	r2, [r2, #4]
 8004f66:	3a01      	subs	r2, #1
 8004f68:	0112      	lsls	r2, r2, #4
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	492d      	ldr	r1, [pc, #180]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	614b      	str	r3, [r1, #20]
 8004f72:	e02d      	b.n	8004fd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d115      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f7a:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	4b2b      	ldr	r3, [pc, #172]	; (800502c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6892      	ldr	r2, [r2, #8]
 8004f86:	0211      	lsls	r1, r2, #8
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6912      	ldr	r2, [r2, #16]
 8004f8c:	0852      	lsrs	r2, r2, #1
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	0552      	lsls	r2, r2, #21
 8004f92:	4311      	orrs	r1, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6852      	ldr	r2, [r2, #4]
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	4921      	ldr	r1, [pc, #132]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	614b      	str	r3, [r1, #20]
 8004fa4:	e014      	b.n	8004fd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	4b21      	ldr	r3, [pc, #132]	; (8005030 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6892      	ldr	r2, [r2, #8]
 8004fb2:	0211      	lsls	r1, r2, #8
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6952      	ldr	r2, [r2, #20]
 8004fb8:	0852      	lsrs	r2, r2, #1
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	0652      	lsls	r2, r2, #25
 8004fbe:	4311      	orrs	r1, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	4916      	ldr	r1, [pc, #88]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fc f802 	bl	8000fe4 <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fe2:	e009      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fe4:	f7fb fffe 	bl	8000fe4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ff6:	e005      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	4904      	ldr	r1, [pc, #16]	; (8005024 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	07ff800f 	.word	0x07ff800f
 800502c:	ff9f800f 	.word	0xff9f800f
 8005030:	f9ff800f 	.word	0xf9ff800f

08005034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e049      	b.n	80050da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fe70 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f000 fa9a 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04f      	b.n	800519c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01d      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d018      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <HAL_TIM_Base_Start_IT+0xc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_TIM_Base_Start_IT+0x76>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d115      	bne.n	8005186 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d015      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005172:	d011      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	e008      	b.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e000      	b.n	800519a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	00010007 	.word	0x00010007

080051c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0202 	mvn.w	r2, #2
 80051f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9ad 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f99f 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f9b0 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0204 	mvn.w	r2, #4
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f987 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f979 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f98a 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0208 	mvn.w	r2, #8
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f961 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f953 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f964 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0210 	mvn.w	r2, #16
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2208      	movs	r2, #8
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f93b 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f92d 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f93e 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0201 	mvn.w	r2, #1
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fa ffe6 	bl	80002fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 faf2 	bl	8005938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 faea 	bl	800594c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8fd 	bl	8005596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0220 	mvn.w	r2, #32
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fab2 	bl	8005924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_ConfigClockSource+0x1c>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0b6      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x18a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005420:	d03e      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005426:	f200 8087 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x170>
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	f000 8086 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x176>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d87f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005438:	2b70      	cmp	r3, #112	; 0x70
 800543a:	d01a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0xaa>
 800543c:	2b70      	cmp	r3, #112	; 0x70
 800543e:	d87b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005440:	2b60      	cmp	r3, #96	; 0x60
 8005442:	d050      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005444:	2b60      	cmp	r3, #96	; 0x60
 8005446:	d877      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005448:	2b50      	cmp	r3, #80	; 0x50
 800544a:	d03c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0xfe>
 800544c:	2b50      	cmp	r3, #80	; 0x50
 800544e:	d873      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d058      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x13e>
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d86f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d064      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 800545c:	2b30      	cmp	r3, #48	; 0x30
 800545e:	d86b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d060      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d867      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d05a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 8005470:	e062      	b.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005482:	f000 f9a7 	bl	80057d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
      break;
 800549e:	e04f      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054b0:	f000 f990 	bl	80057d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	609a      	str	r2, [r3, #8]
      break;
 80054c4:	e03c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 f904 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2150      	movs	r1, #80	; 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f95d 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 80054e4:	e02c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 f923 	bl	800573e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2160      	movs	r1, #96	; 0x60
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f94d 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005504:	e01c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	461a      	mov	r2, r3
 8005514:	f000 f8e4 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2140      	movs	r1, #64	; 0x40
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f93d 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005524:	e00c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 f934 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005536:	e003      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e000      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800553e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a40      	ldr	r2, [pc, #256]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <TIM_Base_SetConfig+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d01b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <TIM_Base_SetConfig+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <TIM_Base_SetConfig+0x130>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <TIM_Base_SetConfig+0x130>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	615a      	str	r2, [r3, #20]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 0210 	bic.w	r2, r3, #16
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f043 0307 	orr.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e068      	b.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2e      	ldr	r2, [pc, #184]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2d      	ldr	r2, [pc, #180]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01d      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d018      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a18      	ldr	r2, [pc, #96]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10c      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40014000 	.word	0x40014000

08005924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <memset>:
 8005960:	4402      	add	r2, r0
 8005962:	4603      	mov	r3, r0
 8005964:	4293      	cmp	r3, r2
 8005966:	d100      	bne.n	800596a <memset+0xa>
 8005968:	4770      	bx	lr
 800596a:	f803 1b01 	strb.w	r1, [r3], #1
 800596e:	e7f9      	b.n	8005964 <memset+0x4>

08005970 <__libc_init_array>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	4d0d      	ldr	r5, [pc, #52]	; (80059a8 <__libc_init_array+0x38>)
 8005974:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <__libc_init_array+0x3c>)
 8005976:	1b64      	subs	r4, r4, r5
 8005978:	10a4      	asrs	r4, r4, #2
 800597a:	2600      	movs	r6, #0
 800597c:	42a6      	cmp	r6, r4
 800597e:	d109      	bne.n	8005994 <__libc_init_array+0x24>
 8005980:	4d0b      	ldr	r5, [pc, #44]	; (80059b0 <__libc_init_array+0x40>)
 8005982:	4c0c      	ldr	r4, [pc, #48]	; (80059b4 <__libc_init_array+0x44>)
 8005984:	f000 f818 	bl	80059b8 <_init>
 8005988:	1b64      	subs	r4, r4, r5
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	2600      	movs	r6, #0
 800598e:	42a6      	cmp	r6, r4
 8005990:	d105      	bne.n	800599e <__libc_init_array+0x2e>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	f855 3b04 	ldr.w	r3, [r5], #4
 8005998:	4798      	blx	r3
 800599a:	3601      	adds	r6, #1
 800599c:	e7ee      	b.n	800597c <__libc_init_array+0xc>
 800599e:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a2:	4798      	blx	r3
 80059a4:	3601      	adds	r6, #1
 80059a6:	e7f2      	b.n	800598e <__libc_init_array+0x1e>
 80059a8:	08005a10 	.word	0x08005a10
 80059ac:	08005a10 	.word	0x08005a10
 80059b0:	08005a10 	.word	0x08005a10
 80059b4:	08005a14 	.word	0x08005a14

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
