
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005384  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d88  08005d88  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005d88  08005d88  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d88  08005d88  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200000bc  08005e4c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005e4c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159fd  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ca  00000000  00000000  00035ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e50  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8a6  00000000  00000000  0003a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001407c  00000000  00000000  00066e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ad58  00000000  00000000  0007ae92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fbc  00000000  00000000  00195bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0019aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019ac11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800552c 	.word	0x0800552c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	0800552c 	.word	0x0800552c

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_d2f>:
 8000578:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800057c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000580:	bf24      	itt	cs
 8000582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058a:	d90d      	bls.n	80005a8 <__aeabi_d2f+0x30>
 800058c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800059c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005ac:	d121      	bne.n	80005f2 <__aeabi_d2f+0x7a>
 80005ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b2:	bfbc      	itt	lt
 80005b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005b8:	4770      	bxlt	lr
 80005ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c2:	f1c2 0218 	rsb	r2, r2, #24
 80005c6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ce:	fa20 f002 	lsr.w	r0, r0, r2
 80005d2:	bf18      	it	ne
 80005d4:	f040 0001 	orrne.w	r0, r0, #1
 80005d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e4:	ea40 000c 	orr.w	r0, r0, ip
 80005e8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f0:	e7cc      	b.n	800058c <__aeabi_d2f+0x14>
 80005f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005f6:	d107      	bne.n	8000608 <__aeabi_d2f+0x90>
 80005f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005fc:	bf1e      	ittt	ne
 80005fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000606:	4770      	bxne	lr
 8000608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800060c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM2_Init(void);
static void MX_DFSDM1_Init(void);
/* USER CODE BEGIN PFP */

//PART 1 ======================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin){
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000628:	d11a      	bne.n	8000660 <HAL_GPIO_EXTI_Callback+0x48>
		GPIO_PinState ledState = HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 800062a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000630:	f002 fd8a 	bl	8003148 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]

		if (ledState == GPIO_PIN_SET) { // The LED is currently ON
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d108      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED OFF
 800063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000644:	f002 fdb0 	bl	80031a8 <HAL_GPIO_TogglePin>
			playSound = 0;  // Stop Playing Sound
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_GPIO_EXTI_Callback+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		} else { // The LED is currently OFF
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED ON
			playSound = 1;  // Set the flag to start generating sound
		}
	}
}
 800064e:	e007      	b.n	8000660 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Turn LED ON
 8000650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <HAL_GPIO_EXTI_Callback+0x50>)
 8000656:	f002 fda7 	bl	80031a8 <HAL_GPIO_TogglePin>
			playSound = 1;  // Set the flag to start generating sound
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_GPIO_EXTI_Callback+0x54>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	48000400 	.word	0x48000400
 800066c:	200002f1 	.word	0x200002f1

08000670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d14a      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0xa6>
		if(playSound){
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d046      	beq.n	8000716 <HAL_TIM_PeriodElapsedCallback+0xa6>
		angle += 0.130899;
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff1b 	bl	80004c8 <__aeabi_f2d>
 8000692:	a323      	add	r3, pc, #140	; (adr r3, 8000720 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000698:	f7ff fdb8 	bl	800020c <__adddf3>
 800069c:	4602      	mov	r2, r0
 800069e:	460b      	mov	r3, r1
 80006a0:	4610      	mov	r0, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	f7ff ff68 	bl	8000578 <__aeabi_d2f>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006ac:	6013      	str	r3, [r2, #0]
		sine = (uint8_t)((arm_sin_f32(angle) + 1) * 120);
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	eeb0 0a67 	vmov.f32	s0, s15
 80006b8:	f004 fec6 	bl	8005448 <arm_sin_f32>
 80006bc:	eef0 7a40 	vmov.f32	s15, s0
 80006c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000734 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80006cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d4:	edc7 7a00 	vstr	s15, [r7]
 80006d8:	783b      	ldrb	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006de:	701a      	strb	r2, [r3, #0]
		// Output the sample to the DAC channel
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sineWave[noteIndex]);
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ec:	2208      	movs	r2, #8
 80006ee:	2100      	movs	r1, #0
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006f2:	f001 fe40 	bl	8002376 <HAL_DAC_SetValue>
		noteIndex = (noteIndex + 1)%44;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	10d1      	asrs	r1, r2, #3
 8000704:	17da      	asrs	r2, r3, #31
 8000706:	1a8a      	subs	r2, r1, r2
 8000708:	212c      	movs	r1, #44	; 0x2c
 800070a:	fb01 f202 	mul.w	r2, r1, r2
 800070e:	1a9a      	subs	r2, r3, r2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000714:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	660a2014 	.word	0x660a2014
 8000724:	3fc0c14c 	.word	0x3fc0c14c
 8000728:	200002a0 	.word	0x200002a0
 800072c:	200002f1 	.word	0x200002f1
 8000730:	200002ec 	.word	0x200002ec
 8000734:	42f00000 	.word	0x42f00000
 8000738:	200002f0 	.word	0x200002f0
 800073c:	200002f2 	.word	0x200002f2
 8000740:	20000000 	.word	0x20000000
 8000744:	20000140 	.word	0x20000140
 8000748:	2e8ba2e9 	.word	0x2e8ba2e9

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fd11 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f814 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f9f6 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 800075c:	f000 f9c2 	bl	8000ae4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000760:	f000 f8d6 	bl	8000910 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000764:	f000 f85e 	bl	8000824 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000768:	f000 f96c 	bl	8000a44 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 800076c:	f000 f904 	bl	8000978 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Pin D7
 8000770:	2100      	movs	r1, #0
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <main+0x30>)
 8000774:	f001 fdad 	bl	80022d2 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x2c>
 800077a:	bf00      	nop
 800077c:	20000140 	.word	0x20000140

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2244      	movs	r2, #68	; 0x44
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fea0 	bl	80054d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f002 fd52 	bl	800324c <HAL_PWREx_ControlVoltageScaling>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007ae:	f000 fa3b 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007be:	2360      	movs	r3, #96	; 0x60
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007ce:	233c      	movs	r3, #60	; 0x3c
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fdd6 	bl	8003394 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ee:	f000 fa1b 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	2105      	movs	r1, #5
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f9dc 	bl	8003bc8 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000816:	f000 fa07 	bl	8000c28 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3758      	adds	r7, #88	; 0x58
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_ADC1_Init+0xdc>)
 800083c:	4a31      	ldr	r2, [pc, #196]	; (8000904 <MX_ADC1_Init+0xe0>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <MX_ADC1_Init+0xdc>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000854:	2201      	movs	r2, #1
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_ADC1_Init+0xdc>)
 800085a:	2204      	movs	r2, #4
 800085c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_ADC1_Init+0xdc>)
 800086c:	2202      	movs	r2, #2
 800086e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000872:	2201      	movs	r2, #1
 8000874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_ADC1_Init+0xdc>)
 800087a:	2201      	movs	r2, #1
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_ADC1_Init+0xdc>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_ADC1_Init+0xdc>)
 8000894:	2200      	movs	r2, #0
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_ADC1_Init+0xdc>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a0:	4817      	ldr	r0, [pc, #92]	; (8000900 <MX_ADC1_Init+0xdc>)
 80008a2:	f000 fea1 	bl	80015e8 <HAL_ADC_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f9bc 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADC1_Init+0xe4>)
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b4:	2306      	movs	r3, #6
 80008b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008bc:	237f      	movs	r3, #127	; 0x7f
 80008be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c0:	2304      	movs	r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ADC1_Init+0xdc>)
 80008ce:	f000 ffd1 	bl	8001874 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80008d8:	f000 f9a6 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_ADC1_Init+0xe8>)
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008e0:	230c      	movs	r3, #12
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_ADC1_Init+0xdc>)
 80008ea:	f000 ffc3 	bl	8001874 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80008f4:	f000 f998 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000d8 	.word	0x200000d8
 8000904:	50040000 	.word	0x50040000
 8000908:	80000001 	.word	0x80000001
 800090c:	c7520000 	.word	0xc7520000

08000910 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2228      	movs	r2, #40	; 0x28
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fdd9 	bl	80054d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_DAC1_Init+0x60>)
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <MX_DAC1_Init+0x64>)
 8000926:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_DAC1_Init+0x60>)
 800092a:	f001 fcb0 	bl	800228e <HAL_DAC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000934:	f000 f978 	bl	8000c28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800093c:	230a      	movs	r3, #10
 800093e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_DAC1_Init+0x60>)
 800095a:	f001 fd31 	bl	80023c0 <HAL_DAC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f960 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000140 	.word	0x20000140
 8000974:	40007400 	.word	0x40007400

08000978 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 800097e:	4a2d      	ldr	r2, [pc, #180]	; (8000a34 <MX_DFSDM1_Init+0xbc>)
 8000980:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 800098a:	2201      	movs	r2, #1
 800098c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 8000990:	2201      	movs	r2, #1
 8000992:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 8000996:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800099a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 800099e:	2236      	movs	r2, #54	; 0x36
 80009a0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 80009aa:	f001 ff15 	bl	80027d8 <HAL_DFSDM_FilterInit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80009b4:	f000 f938 	bl	8000c28 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <MX_DFSDM1_Init+0xc4>)
 80009bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009cc:	2222      	movs	r2, #34	; 0x22
 80009ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_DFSDM1_Init+0xc0>)
 8000a08:	f001 fe26 	bl	8002658 <HAL_DFSDM_ChannelInit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000a12:	f000 f909 	bl	8000c28 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000a16:	2201      	movs	r2, #1
 8000a18:	4909      	ldr	r1, [pc, #36]	; (8000a40 <MX_DFSDM1_Init+0xc8>)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_DFSDM1_Init+0xb8>)
 8000a1c:	f001 ffb6 	bl	800298c <HAL_DFSDM_FilterConfigRegChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000a26:	f000 f8ff 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001b4 	.word	0x200001b4
 8000a34:	40016100 	.word	0x40016100
 8000a38:	20000208 	.word	0x20000208
 8000a3c:	40016040 	.word	0x40016040
 8000a40:	00020004 	.word	0x00020004

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2727;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a78:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000a8c:	f004 f846 	bl	8004b1c <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 f8c7 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000aa8:	f004 fa02 	bl	8004eb0 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab2:	f000 f8b9 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000ac4:	f004 fc1a 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 f8ab 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM2_Init+0x9c>)
 8000ad4:	f004 f87a 	bl	8004bcc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200002a0 	.word	0x200002a0

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_DMA_Init+0x60>)
 8000aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MX_DMA_Init+0x60>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6493      	str	r3, [r2, #72]	; 0x48
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_DMA_Init+0x60>)
 8000af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_DMA_Init+0x60>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <MX_DMA_Init+0x60>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_DMA_Init+0x60>)
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f001 fb7f 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f001 fb98 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200e      	movs	r0, #14
 8000b30:	f001 fb77 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b34:	200e      	movs	r0, #14
 8000b36:	f001 fb90 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_GPIO_Init+0xd4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	4816      	ldr	r0, [pc, #88]	; (8000c20 <MX_GPIO_Init+0xd8>)
 8000bc6:	f002 fad7 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <MX_GPIO_Init+0xdc>)
 8000be2:	f002 f91f 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000be6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <MX_GPIO_Init+0xd8>)
 8000c00:	f002 f910 	bl	8002e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2028      	movs	r0, #40	; 0x28
 8000c0a:	f001 fb0a 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f001 fb23 	bl	800225a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000800 	.word	0x48000800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	; 0x60
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a8      	sub	sp, #160	; 0xa0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2294      	movs	r2, #148	; 0x94
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fc21 	bl	80054d4 <memset>
  if(hadc->Instance==ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_ADC_MspInit+0x80>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d12b      	bne.n	8000cf4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000caa:	2301      	movs	r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000cb2:	2318      	movs	r3, #24
 8000cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fa0d 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000cd8:	f7ff ffa6 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	37a0      	adds	r7, #160	; 0xa0
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	50040000 	.word	0x50040000
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <HAL_DAC_MspInit+0xcc>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d14f      	bne.n	8000dc6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a2a      	ldr	r2, [pc, #168]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_DAC_MspInit+0xd0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d56:	2310      	movs	r3, #16
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f002 f85a 	bl	8002e24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_DAC_MspInit+0xd8>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d78:	2206      	movs	r2, #6
 8000d7a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d7e:	2210      	movs	r2, #16
 8000d80:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000dac:	f001 fe80 	bl	8002ab0 <HAL_DMA_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000db6:	f7ff ff37 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_DAC_MspInit+0xd4>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40007400 	.word	0x40007400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	20000154 	.word	0x20000154
 8000ddc:	40020030 	.word	0x40020030

08000de0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ae      	sub	sp, #184	; 0xb8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2294      	movs	r2, #148	; 0x94
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fb67 	bl	80054d4 <memset>
  if(DFSDM1_Init == 0)
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <HAL_DFSDM_FilterMspInit+0x13c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d14b      	bne.n	8000ea6 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f964 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000e2a:	f7ff fefd 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <HAL_DFSDM_FilterMspInit+0x140>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <HAL_DFSDM_FilterMspInit+0x140>)
 8000e36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <HAL_DFSDM_FilterMspInit+0x140>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10b      	bne.n	8000e58 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e40:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a37      	ldr	r2, [pc, #220]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_DFSDM_FilterMspInit+0x144>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e70:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4824      	ldr	r0, [pc, #144]	; (8000f28 <HAL_DFSDM_FilterMspInit+0x148>)
 8000e98:	f001 ffc4 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_DFSDM_FilterMspInit+0x13c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_DFSDM_FilterMspInit+0x13c>)
 8000ea4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <HAL_DFSDM_FilterMspInit+0x14c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d130      	bne.n	8000f12 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_DFSDM_FilterMspInit+0x154>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000eb8:	2256      	movs	r2, #86	; 0x56
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000edc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000eec:	f001 fde0 	bl	8002ab0 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000ef6:	f7ff fe97 	bl	8000c28 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000f12:	bf00      	nop
 8000f14:	37b8      	adds	r7, #184	; 0xb8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002f8 	.word	0x200002f8
 8000f20:	200002f4 	.word	0x200002f4
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	40016100 	.word	0x40016100
 8000f30:	20000240 	.word	0x20000240
 8000f34:	40020044 	.word	0x40020044

08000f38 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ae      	sub	sp, #184	; 0xb8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2294      	movs	r2, #148	; 0x94
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fabb 	bl	80054d4 <memset>
  if(DFSDM1_Init == 0)
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d14b      	bne.n	8000ffe <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 f8b8 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f82:	f7ff fe51 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	; (800100c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10b      	bne.n	8000fb0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a16      	ldr	r2, [pc, #88]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000fc8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000ff0:	f001 ff18 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000ffc:	6013      	str	r3, [r2, #0]
  }

}
 8000ffe:	bf00      	nop
 8001000:	37b8      	adds	r7, #184	; 0xb8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002f8 	.word	0x200002f8
 800100c:	200002f4 	.word	0x200002f4
 8001010:	40021000 	.word	0x40021000
 8001014:	48001000 	.word	0x48001000

08001018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001028:	d113      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_TIM_Base_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_TIM_Base_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_TIM_Base_MspInit+0x44>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	201c      	movs	r0, #28
 8001048:	f001 f8eb 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800104c:	201c      	movs	r0, #28
 800104e:	f001 f904 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8b8 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Channel3_IRQHandler+0x10>)
 80010ba:	f001 fda1 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000154 	.word	0x20000154

080010c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA1_Channel4_IRQHandler+0x10>)
 80010ce:	f001 fd97 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000240 	.word	0x20000240

080010dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM2_IRQHandler+0x10>)
 80010e2:	f003 fde3 	bl	8004cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002a0 	.word	0x200002a0

080010f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80010f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f8:	f002 f870 	bl	80031dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff ffea 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f004 f9c7 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff faf9 	bl	800074c <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800115c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001168:	08005d90 	.word	0x08005d90
  ldr r2, =_sbss
 800116c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001170:	20000324 	.word	0x20000324

08001174 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>

08001176 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f001 f843 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f80e 	bl	80011a8 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001198:	f7ff fd4c 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119c:	79fb      	ldrb	r3, [r7, #7]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_InitTick+0x70>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f84f 	bl	8002276 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d809      	bhi.n	80011f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f001 f819 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_InitTick+0x74>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e007      	b.n	8001208 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e004      	b.n	8001208 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e001      	b.n	8001208 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000b8 	.word	0x200000b8
 8001218:	200000b0 	.word	0x200000b0
 800121c:	200000b4 	.word	0x200000b4

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200000b8 	.word	0x200000b8
 8001244:	200002fc 	.word	0x200002fc

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200002fc 	.word	0x200002fc

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000b8 	.word	0x200000b8

080012a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <LL_ADC_SetOffset+0x44>)
 8001332:	4013      	ands	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	4313      	orrs	r3, r2
 8001340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	03fff000 	.word	0x03fff000

08001358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3360      	adds	r3, #96	; 0x60
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3360      	adds	r3, #96	; 0x60
 8001394:	461a      	mov	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3330      	adds	r3, #48	; 0x30
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	211f      	movs	r1, #31
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0e9b      	lsrs	r3, r3, #26
 8001418:	f003 011f 	and.w	r1, r3, #31
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3314      	adds	r3, #20
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	0e5b      	lsrs	r3, r3, #25
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	0d1b      	lsrs	r3, r3, #20
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2107      	movs	r1, #7
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	401a      	ands	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0d1b      	lsrs	r3, r3, #20
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0318 	and.w	r3, r3, #24
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014b4:	40d9      	lsrs	r1, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	400b      	ands	r3, r1
 80014ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014be:	431a      	orrs	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	0007ffff 	.word	0x0007ffff

080014d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6093      	str	r3, [r2, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800150c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001510:	d101      	bne.n	8001516 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001538:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001560:	d101      	bne.n	8001566 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <LL_ADC_IsEnabled+0x18>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <LL_ADC_IsEnabled+0x1a>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e129      	b.n	8001856 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fb33 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff67 	bl	80014fc <LL_ADC_IsDeepPowerDownEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff4d 	bl	80014d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff82 	bl	800154c <LL_ADC_IsInternalRegulatorEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff66 	bl	8001524 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_ADC_Init+0x278>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	4a81      	ldr	r2, [pc, #516]	; (8001864 <HAL_ADC_Init+0x27c>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	3301      	adds	r3, #1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800166c:	e002      	b.n	8001674 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b01      	subs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff64 	bl	800154c <LL_ADC_IsInternalRegulatorEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f043 0210 	orr.w	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff75 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 80016b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80c2 	bne.w	8001844 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 80be 	bne.w	8001844 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff49 	bl	8001574 <LL_ADC_IsEnabled>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10b      	bne.n	8001700 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016e8:	485f      	ldr	r0, [pc, #380]	; (8001868 <HAL_ADC_Init+0x280>)
 80016ea:	f7ff ff43 	bl	8001574 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	485c      	ldr	r0, [pc, #368]	; (800186c <HAL_ADC_Init+0x284>)
 80016fc:	f7ff fdd4 	bl	80012a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e5b      	ldrb	r3, [r3, #25]
 8001704:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001710:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001716:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	045b      	lsls	r3, r3, #17
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_ADC_Init+0x288>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff25 	bl	80015c0 <LL_ADC_INJ_IsConversionOngoing>
 8001776:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d140      	bne.n	8001800 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d13d      	bne.n	8001800 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
 800178c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800178e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001796:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a6:	f023 0306 	bic.w	r3, r3, #6
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017e0:	430a      	orrs	r2, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	e007      	b.n	8001800 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10c      	bne.n	8001822 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f023 010f 	bic.w	r1, r3, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
 8001820:	e007      	b.n	8001832 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020f 	bic.w	r2, r2, #15
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	659a      	str	r2, [r3, #88]	; 0x58
 8001842:	e007      	b.n	8001854 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f043 0210 	orr.w	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001854:	7ffb      	ldrb	r3, [r7, #31]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000b0 	.word	0x200000b0
 8001864:	053e2d63 	.word	0x053e2d63
 8001868:	50040000 	.word	0x50040000
 800186c:	50040300 	.word	0x50040300
 8001870:	fff0c007 	.word	0xfff0c007

08001874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0b6      	sub	sp, #216	; 0xd8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x22>
 8001892:	2302      	movs	r3, #2
 8001894:	e3d5      	b.n	8002042 <HAL_ADC_ConfigChannel+0x7ce>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fe79 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 83ba 	bne.w	8002024 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d824      	bhi.n	800190a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	3b02      	subs	r3, #2
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d81b      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x8e>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <HAL_ADC_ConfigChannel+0x5c>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	080018e1 	.word	0x080018e1
 80018d4:	080018e9 	.word	0x080018e9
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	080018f9 	.word	0x080018f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80018e0:	230c      	movs	r3, #12
 80018e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018e6:	e010      	b.n	800190a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80018e8:	2312      	movs	r3, #18
 80018ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018ee:	e00c      	b.n	800190a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80018f0:	2318      	movs	r3, #24
 80018f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80018f6:	e008      	b.n	800190a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001900:	e003      	b.n	800190a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001902:	2306      	movs	r3, #6
 8001904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001908:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001918:	f7ff fd62 	bl	80013e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe3a 	bl	800159a <LL_ADC_REG_IsConversionOngoing>
 8001926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe46 	bl	80015c0 <LL_ADC_INJ_IsConversionOngoing>
 8001934:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 81bf 	bne.w	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 81ba 	bne.w	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001954:	d10f      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff fd69 	bl	8001438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd23 	bl	80013ba <LL_ADC_SetSamplingTimeCommonConfig>
 8001974:	e00e      	b.n	8001994 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	461a      	mov	r2, r3
 8001984:	f7ff fd58 	bl	8001438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd13 	bl	80013ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00a      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019c6:	f7ff fca3 	bl	8001310 <LL_ADC_SetOffset>
 80019ca:	e179      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fcc0 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x184>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fcb5 	bl	8001358 <LL_ADC_GetOffsetChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 021f 	and.w	r2, r3, #31
 80019f6:	e01e      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1c2>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fcaa 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e004      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x1da>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0e9b      	lsrs	r3, r3, #26
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	e018      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x20c>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001a6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001a72:	2320      	movs	r3, #32
 8001a74:	e004      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fc79 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fc5d 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x24a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fc52 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	e01e      	b.n	8001afc <HAL_ADC_ConfigChannel+0x288>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fc47 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001aec:	2320      	movs	r3, #32
 8001aee:	e004      	b.n	8001afa <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x2a0>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	e018      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x2d2>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e004      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc16 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fbfa 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x310>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2102      	movs	r1, #2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fbef 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 021f 	and.w	r2, r3, #31
 8001b82:	e01e      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x34e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fbe4 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	e004      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x366>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0e9b      	lsrs	r3, r3, #26
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	e014      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x390>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e004      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2102      	movs	r1, #2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fbb7 	bl	8001384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fb9b 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x3ce>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb90 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	e017      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x3fe>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2103      	movs	r1, #3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb85 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e003      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x416>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	e011      	b.n	8001cae <HAL_ADC_ConfigChannel+0x43a>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d106      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2103      	movs	r1, #3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb62 	bl	8001384 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fc55 	bl	8001574 <LL_ADC_IsEnabled>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 813f 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f7ff fbd6 	bl	8001490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a8e      	ldr	r2, [pc, #568]	; (8001f24 <HAL_ADC_ConfigChannel+0x6b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f040 8130 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x4a4>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	3301      	adds	r3, #1
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e019      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x4d8>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e003      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2b09      	cmp	r3, #9
 8001d44:	bf94      	ite	ls
 8001d46:	2301      	movls	r3, #1
 8001d48:	2300      	movhi	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d079      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x4f8>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d6a:	e015      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x524>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e003      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x544>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	3301      	adds	r3, #1
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	e017      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x574>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e003      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	ea42 0103 	orr.w	r1, r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x59a>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	051b      	lsls	r3, r3, #20
 8001e0c:	e018      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x5cc>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e40:	430b      	orrs	r3, r1
 8001e42:	e080      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x5ec>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	3301      	adds	r3, #1
 8001e58:	069b      	lsls	r3, r3, #26
 8001e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5e:	e015      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x618>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	e003      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x638>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	e017      	b.n	8001edc <HAL_ADC_ConfigChannel+0x668>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	61bb      	str	r3, [r7, #24]
  return result;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	ea42 0103 	orr.w	r1, r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x694>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	3b1e      	subs	r3, #30
 8001f00:	051b      	lsls	r3, r3, #20
 8001f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f06:	e01d      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x6d0>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	60fb      	str	r3, [r7, #12]
  return result;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e005      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x6bc>
 8001f24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7ff fa74 	bl	8001438 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_ADC_ConfigChannel+0x7d8>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d06c      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f5e:	f7ff f9c9 	bl	80012f4 <LL_ADC_GetCommonPathInternalCh>
 8001f62:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d127      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d121      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d157      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8e:	4619      	mov	r1, r3
 8001f90:	482f      	ldr	r0, [pc, #188]	; (8002050 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f92:	f7ff f99c 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_ADC_ConfigChannel+0x7e8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	4a30      	ldr	r2, [pc, #192]	; (8002060 <HAL_ADC_ConfigChannel+0x7ec>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fbe:	e03a      	b.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_ADC_ConfigChannel+0x7f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d113      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_ADC_ConfigChannel+0x7e4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d12a      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4819      	ldr	r0, [pc, #100]	; (8002050 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fec:	f7ff f96f 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ff0:	e021      	b.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d11c      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d116      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <HAL_ADC_ConfigChannel+0x7e4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d111      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <HAL_ADC_ConfigChannel+0x7dc>)
 800201e:	f7ff f956 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
 8002022:	e008      	b.n	8002036 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800203e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002042:	4618      	mov	r0, r3
 8002044:	37d8      	adds	r7, #216	; 0xd8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	80080000 	.word	0x80080000
 8002050:	50040300 	.word	0x50040300
 8002054:	c7520000 	.word	0xc7520000
 8002058:	50040000 	.word	0x50040000
 800205c:	200000b0 	.word	0x200000b0
 8002060:	053e2d63 	.word	0x053e2d63
 8002064:	cb840000 	.word	0xcb840000
 8002068:	80000001 	.word	0x80000001

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e014      	b.n	80022ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	791b      	ldrb	r3, [r3, #4]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fd27 	bl	8000d04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	795b      	ldrb	r3, [r3, #5]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_DAC_Start+0x16>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e040      	b.n	800236a <HAL_DAC_Start+0x98>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11d      	bne.n	800235c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	e014      	b.n	800235c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2102      	movs	r1, #2
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0202 	orr.w	r2, r2, #2
 800235a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002376:	b480      	push	{r7}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3308      	adds	r3, #8
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e004      	b.n	80023aa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3314      	adds	r3, #20
 80023a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	461a      	mov	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	795b      	ldrb	r3, [r3, #5]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_DAC_ConfigChannel+0x1c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e137      	b.n	800264c <HAL_DAC_ConfigChannel+0x28c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	f040 8081 	bne.w	80024f4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80023f2:	f7fe ff29 	bl	8001248 <HAL_GetTick>
 80023f6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d140      	bne.n	8002480 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023fe:	e018      	b.n	8002432 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002400:	f7fe ff22 	bl	8001248 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d911      	bls.n	8002432 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f043 0208 	orr.w	r2, r3, #8
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2203      	movs	r2, #3
 800242c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e10c      	b.n	800264c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1df      	bne.n	8002400 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe ff0d 	bl	8001260 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	69d2      	ldr	r2, [r2, #28]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
 8002450:	e023      	b.n	800249a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002452:	f7fe fef9 	bl	8001248 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d90f      	bls.n	8002480 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0a      	bge.n	8002480 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f043 0208 	orr.w	r2, r3, #8
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2203      	movs	r2, #3
 800247a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0e5      	b.n	800264c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	2b00      	cmp	r3, #0
 8002488:	dbe3      	blt.n	8002452 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fee8 	bl	8001260 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	69d2      	ldr	r2, [r2, #28]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	ea02 0103 	and.w	r1, r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	21ff      	movs	r1, #255	; 0xff
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	ea02 0103 	and.w	r1, r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d11d      	bne.n	8002538 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	221f      	movs	r2, #31
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	4013      	ands	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	4313      	orrs	r3, r2
 800252e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	431a      	orrs	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	4313      	orrs	r3, r2
 8002576:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43da      	mvns	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	d104      	bne.n	80025e8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e018      	b.n	800261a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	e00f      	b.n	800261a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80025fa:	f001 fcab 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 80025fe:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_DAC_ConfigChannel+0x294>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d904      	bls.n	8002612 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e003      	b.n	800261a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002618:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	22c0      	movs	r2, #192	; 0xc0
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	04c4b400 	.word	0x04c4b400

08002658 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0ac      	b.n	80027c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f9d2 	bl	8002a18 <DFSDM_GetChannelFromInstance>
 8002674:	4603      	mov	r3, r0
 8002676:	4a55      	ldr	r2, [pc, #340]	; (80027cc <HAL_DFSDM_ChannelInit+0x174>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e09f      	b.n	80027c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fc57 	bl	8000f38 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002692:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002694:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d125      	bne.n	80026e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800269c:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4948      	ldr	r1, [pc, #288]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a46      	ldr	r2, [pc, #280]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026bc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80026c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	493f      	ldr	r1, [pc, #252]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002706:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800270c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020f 	bic.w	r2, r2, #15
 8002724:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800274c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 0207 	and.w	r2, r2, #7
 8002778:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f930 	bl	8002a18 <DFSDM_GetChannelFromInstance>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_DFSDM_ChannelInit+0x174>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000304 	.word	0x20000304
 80027d0:	20000300 	.word	0x20000300
 80027d4:	40016000 	.word	0x40016000

080027d8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0ca      	b.n	8002980 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a66      	ldr	r2, [pc, #408]	; (8002988 <HAL_DFSDM_FilterInit+0x1b0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d003      	beq.n	8002804 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0bb      	b.n	8002980 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe fadd 	bl	8000de0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002834:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7a1b      	ldrb	r3, [r3, #8]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e007      	b.n	8002860 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800285e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7a5b      	ldrb	r3, [r3, #9]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002898:	f023 0308 	bic.w	r3, r3, #8
 800289c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d108      	bne.n	80028b8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7c1b      	ldrb	r3, [r3, #16]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0210 	orr.w	r2, r2, #16
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0210 	bic.w	r2, r2, #16
 80028e0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7c5b      	ldrb	r3, [r3, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d108      	bne.n	80028fc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e007      	b.n	800290c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0220 	bic.w	r2, r2, #32
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800291a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800291e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6959      	ldr	r1, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002932:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800293a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699a      	ldr	r2, [r3, #24]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7c1a      	ldrb	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40016100 	.word	0x40016100

0800298c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02e      	beq.n	8002a04 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029ac:	2bff      	cmp	r3, #255	; 0xff
 80029ae:	d029      	beq.n	8002a04 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10d      	bne.n	80029e6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e00a      	b.n	80029fc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	e001      	b.n	8002a08 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e02b      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <DFSDM_GetChannelFromInstance+0x80>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d102      	bne.n	8002a3c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e024      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <DFSDM_GetChannelFromInstance+0x84>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d102      	bne.n	8002a4a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a44:	2302      	movs	r3, #2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e01d      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <DFSDM_GetChannelFromInstance+0x88>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d102      	bne.n	8002a58 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a52:	2304      	movs	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e016      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a60:	2305      	movs	r3, #5
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e00f      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <DFSDM_GetChannelFromInstance+0x90>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d102      	bne.n	8002a74 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a6e:	2306      	movs	r3, #6
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e008      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <DFSDM_GetChannelFromInstance+0x94>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e001      	b.n	8002a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a82:	2303      	movs	r3, #3
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40016000 	.word	0x40016000
 8002a98:	40016020 	.word	0x40016020
 8002a9c:	40016040 	.word	0x40016040
 8002aa0:	40016080 	.word	0x40016080
 8002aa4:	400160a0 	.word	0x400160a0
 8002aa8:	400160c0 	.word	0x400160c0
 8002aac:	400160e0 	.word	0x400160e0

08002ab0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08d      	b.n	8002bde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_DMA_Init+0x138>)
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d80f      	bhi.n	8002aee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <HAL_DMA_Init+0x13c>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_DMA_Init+0x140>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_DMA_Init+0x144>)
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
 8002aec:	e00e      	b.n	8002b0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <HAL_DMA_Init+0x148>)
 8002af6:	4413      	add	r3, r2
 8002af8:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <HAL_DMA_Init+0x140>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	009a      	lsls	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <HAL_DMA_Init+0x14c>)
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8fe 	bl	8002d60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6c:	d102      	bne.n	8002b74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_DMA_Init+0x104>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d80c      	bhi.n	8002bb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f91e 	bl	8002ddc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e008      	b.n	8002bc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020407 	.word	0x40020407
 8002bec:	bffdfff8 	.word	0xbffdfff8
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	bffdfbf8 	.word	0xbffdfbf8
 8002bfc:	40020400 	.word	0x40020400

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f003 031c 	and.w	r3, r3, #28
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d026      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x7a>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d021      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f003 021c 	and.w	r2, r3, #28
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2104      	movs	r1, #4
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d071      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c78:	e06c      	b.n	8002d54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f003 031c 	and.w	r3, r3, #28
 8002c82:	2202      	movs	r2, #2
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02e      	beq.n	8002cec <HAL_DMA_IRQHandler+0xec>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d029      	beq.n	8002cec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 020a 	bic.w	r2, r2, #10
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 021c 	and.w	r2, r3, #28
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2102      	movs	r1, #2
 8002ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d038      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cea:	e033      	b.n	8002d54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f003 031c 	and.w	r3, r3, #28
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02a      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d025      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 020e 	bic.w	r2, r2, #14
 8002d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f003 021c 	and.w	r2, r3, #28
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
}
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d80a      	bhi.n	8002d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d80:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6493      	str	r3, [r2, #72]	; 0x48
 8002d88:	e007      	b.n	8002d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d94:	4413      	add	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3b08      	subs	r3, #8
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002db0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2201      	movs	r2, #1
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40020407 	.word	0x40020407
 8002dd0:	4002081c 	.word	0x4002081c
 8002dd4:	cccccccd 	.word	0xcccccccd
 8002dd8:	40020880 	.word	0x40020880

08002ddc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dfe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	1000823f 	.word	0x1000823f
 8002e20:	40020940 	.word	0x40020940

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	e166      	b.n	8003102 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8158 	beq.w	80030fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d005      	beq.n	8002e64 <HAL_GPIO_Init+0x40>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d130      	bne.n	8002ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 0201 	and.w	r2, r3, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d017      	beq.n	8002f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d123      	bne.n	8002f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	08da      	lsrs	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3208      	adds	r2, #8
 8002f50:	6939      	ldr	r1, [r7, #16]
 8002f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0203 	and.w	r2, r3, #3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80b2 	beq.w	80030fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_GPIO_Init+0x2fc>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	4a60      	ldr	r2, [pc, #384]	; (8003120 <HAL_GPIO_Init+0x2fc>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_GPIO_Init+0x2fc>)
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fb0:	4a5c      	ldr	r2, [pc, #368]	; (8003124 <HAL_GPIO_Init+0x300>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fda:	d02b      	beq.n	8003034 <HAL_GPIO_Init+0x210>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_GPIO_Init+0x304>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d025      	beq.n	8003030 <HAL_GPIO_Init+0x20c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a51      	ldr	r2, [pc, #324]	; (800312c <HAL_GPIO_Init+0x308>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01f      	beq.n	800302c <HAL_GPIO_Init+0x208>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d019      	beq.n	8003028 <HAL_GPIO_Init+0x204>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x310>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_GPIO_Init+0x200>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_GPIO_Init+0x314>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00d      	beq.n	8003020 <HAL_GPIO_Init+0x1fc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_GPIO_Init+0x318>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x1f8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x31c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_GPIO_Init+0x1f4>
 8003014:	2307      	movs	r3, #7
 8003016:	e00e      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003018:	2308      	movs	r3, #8
 800301a:	e00c      	b.n	8003036 <HAL_GPIO_Init+0x212>
 800301c:	2306      	movs	r3, #6
 800301e:	e00a      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003020:	2305      	movs	r3, #5
 8003022:	e008      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003024:	2304      	movs	r3, #4
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003028:	2303      	movs	r3, #3
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x212>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x212>
 8003034:	2300      	movs	r3, #0
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003046:	4937      	ldr	r1, [pc, #220]	; (8003124 <HAL_GPIO_Init+0x300>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_GPIO_Init+0x320>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003078:	4a32      	ldr	r2, [pc, #200]	; (8003144 <HAL_GPIO_Init+0x320>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_GPIO_Init+0x320>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030a2:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_GPIO_Init+0x320>)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_GPIO_Init+0x320>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_GPIO_Init+0x320>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_GPIO_Init+0x320>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_GPIO_Init+0x320>)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3301      	adds	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f47f ae91 	bne.w	8002e34 <HAL_GPIO_Init+0x10>
  }
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000
 8003128:	48000400 	.word	0x48000400
 800312c:	48000800 	.word	0x48000800
 8003130:	48000c00 	.word	0x48000c00
 8003134:	48001000 	.word	0x48001000
 8003138:	48001400 	.word	0x48001400
 800313c:	48001800 	.word	0x48001800
 8003140:	48001c00 	.word	0x48001c00
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	e001      	b.n	800316a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
 8003184:	4613      	mov	r3, r2
 8003186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003194:	e002      	b.n	800319c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43d9      	mvns	r1, r3
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	400b      	ands	r3, r1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031f2:	4a05      	ldr	r2, [pc, #20]	; (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fa0c 	bl	8000618 <HAL_GPIO_EXTI_Callback>
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d102      	bne.n	8003224 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003222:	e00b      	b.n	800323c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003232:	d102      	bne.n	800323a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	e000      	b.n	800323c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800323a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40007000 	.word	0x40007000

0800324c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d141      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d131      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326e:	4a46      	ldr	r2, [pc, #280]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003280:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2232      	movs	r2, #50	; 0x32
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	e002      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d102      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d158      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e057      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032dc:	e04d      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d141      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d131      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2232      	movs	r2, #50	; 0x32
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332a:	e002      	b.n	8003332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d102      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d112      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e011      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003368:	e007      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003378:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40007000 	.word	0x40007000
 800338c:	200000b0 	.word	0x200000b0
 8003390:	431bde83 	.word	0x431bde83

08003394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f000 bc08 	b.w	8003bb8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a8:	4b96      	ldr	r3, [pc, #600]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b2:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80e4 	beq.w	8003592 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4c>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	f040 808b 	bne.w	80034ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	f040 8087 	bne.w	80034ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x64>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e3df      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_RCC_OscConfig+0x7e>
 8003408:	4b7e      	ldr	r3, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	e005      	b.n	800341e <HAL_RCC_OscConfig+0x8a>
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341e:	4293      	cmp	r3, r2
 8003420:	d223      	bcs.n	800346a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fda0 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e3c0      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	496d      	ldr	r1, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	4968      	ldr	r1, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e025      	b.n	80034b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346a:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b63      	ldr	r3, [pc, #396]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4960      	ldr	r1, [pc, #384]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	495b      	ldr	r1, [pc, #364]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fd60 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e380      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b6:	f000 fcc1 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4950      	ldr	r1, [pc, #320]	; (8003608 <HAL_RCC_OscConfig+0x274>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a4e      	ldr	r2, [pc, #312]	; (800360c <HAL_RCC_OscConfig+0x278>)
 80034d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d6:	4b4e      	ldr	r3, [pc, #312]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fe64 	bl	80011a8 <HAL_InitTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d052      	beq.n	8003590 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	e364      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d032      	beq.n	800355c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003502:	f7fd fea1 	bl	8001248 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800350a:	f7fd fe9d 	bl	8001248 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e34d      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351c:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4930      	ldr	r1, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	492b      	ldr	r1, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
 800355a:	e01a      	b.n	8003592 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003568:	f7fd fe6e 	bl	8001248 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003570:	f7fd fe6a 	bl	8001248 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e31a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1dc>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d073      	beq.n	8003686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x21c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d10e      	bne.n	80035c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d063      	beq.n	8003684 <HAL_RCC_OscConfig+0x2f0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d15f      	bne.n	8003684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e2f7      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x24c>
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e025      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e8:	d114      	bne.n	8003614 <HAL_RCC_OscConfig+0x280>
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a05      	ldr	r2, [pc, #20]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a02      	ldr	r2, [pc, #8]	; (8003604 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 8003604:	40021000 	.word	0x40021000
 8003608:	08005544 	.word	0x08005544
 800360c:	200000b0 	.word	0x200000b0
 8003610:	200000b4 	.word	0x200000b4
 8003614:	4ba0      	ldr	r3, [pc, #640]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a9f      	ldr	r2, [pc, #636]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b9d      	ldr	r3, [pc, #628]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9c      	ldr	r2, [pc, #624]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fe08 	bl	8001248 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fe04 	bl	8001248 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2b4      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x2a8>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fdf4 	bl	8001248 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fdf0 	bl	8001248 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e2a0      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x2d0>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d060      	beq.n	8003754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x310>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d116      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x328>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e27d      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	4973      	ldr	r1, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d0:	e040      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d023      	beq.n	8003722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036da:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fd fdaf 	bl	8001248 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fd fdab 	bl	8001248 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e25b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b62      	ldr	r3, [pc, #392]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	495f      	ldr	r1, [pc, #380]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e018      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5c      	ldr	r2, [pc, #368]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fd8b 	bl	8001248 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7fd fd87 	bl	8001248 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e237      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03c      	beq.n	80037da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd fd66 	bl	8001248 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd fd62 	bl	8001248 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e212      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <HAL_RCC_OscConfig+0x3ec>
 80037a0:	e01b      	b.n	80037da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a8:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd fd49 	bl	8001248 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd fd45 	bl	8001248 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1f5      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ef      	bne.n	80037ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a6 	beq.w	8003934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a26      	ldr	r2, [pc, #152]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x508>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d118      	bne.n	8003852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <HAL_RCC_OscConfig+0x508>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382c:	f7fd fd0c 	bl	8001248 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fd fd08 	bl	8001248 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e1b8      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_RCC_OscConfig+0x508>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x4d8>
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386a:	e029      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_OscConfig+0x50c>
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	4a03      	ldr	r2, [pc, #12]	; (8003898 <HAL_RCC_OscConfig+0x504>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	4b9d      	ldr	r3, [pc, #628]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	4a9c      	ldr	r2, [pc, #624]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b0:	4b99      	ldr	r3, [pc, #612]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	4a98      	ldr	r2, [pc, #608]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fcbe 	bl	8001248 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fcba 	bl	8001248 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e168      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	4b8c      	ldr	r3, [pc, #560]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ed      	beq.n	80038d0 <HAL_RCC_OscConfig+0x53c>
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fca7 	bl	8001248 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd fca3 	bl	8001248 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e151      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003914:	4b80      	ldr	r3, [pc, #512]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ed      	bne.n	80038fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	4a7a      	ldr	r2, [pc, #488]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03c      	beq.n	80039ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01c      	beq.n	8003982 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003948:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd fc76 	bl	8001248 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003960:	f7fd fc72 	bl	8001248 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e122      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003972:	4b69      	ldr	r3, [pc, #420]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <HAL_RCC_OscConfig+0x5cc>
 8003980:	e01b      	b.n	80039ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003988:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fd fc59 	bl	8001248 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800399a:	f7fd fc55 	bl	8001248 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e105      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ac:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80039ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ef      	bne.n	800399a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80f9 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 80cf 	bne.w	8003b6c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039ce:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d12c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	3b01      	subs	r3, #1
 80039ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d123      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d11b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d113      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d109      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d071      	beq.n	8003b20 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d068      	beq.n	8003b14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a42:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a4e:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0ac      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2d      	ldr	r2, [pc, #180]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6a:	f7fd fbed 	bl	8001248 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fd fbe9 	bl	8001248 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e099      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a90:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_OscConfig+0x788>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aaa:	0212      	lsls	r2, r2, #8
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0552      	lsls	r2, r2, #21
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003abe:	0852      	lsrs	r2, r2, #1
 8003ac0:	3a01      	subs	r2, #1
 8003ac2:	0652      	lsls	r2, r2, #25
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aca:	06d2      	lsls	r2, r2, #27
 8003acc:	430a      	orrs	r2, r1
 8003ace:	4912      	ldr	r1, [pc, #72]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aec:	f7fd fbac 	bl	8001248 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fba8 	bl	8001248 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e058      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b12:	e050      	b.n	8003bb6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e04f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d144      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b44:	f7fd fb80 	bl	8001248 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fb7c 	bl	8001248 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e02c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x7b8>
 8003b6a:	e024      	b.n	8003bb6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d01f      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fb63 	bl	8001248 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fd fb5f 	bl	8001248 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	4905      	ldr	r1, [pc, #20]	; (8003bc0 <HAL_RCC_OscConfig+0x82c>)
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x830>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
 8003bb0:	e001      	b.n	8003bb6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	feeefffc 	.word	0xfeeefffc

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e11d      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b90      	ldr	r3, [pc, #576]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b8d      	ldr	r3, [pc, #564]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 020f 	bic.w	r2, r3, #15
 8003bf6:	498b      	ldr	r1, [pc, #556]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b89      	ldr	r3, [pc, #548]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e105      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d908      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b7e      	ldr	r3, [pc, #504]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	497b      	ldr	r1, [pc, #492]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d079      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d11e      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b75      	ldr	r3, [pc, #468]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0dc      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c62:	f000 f9dd 	bl	8004020 <RCC_GetSysClockFreqFromPLLSource>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d946      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c6e:	4b6e      	ldr	r3, [pc, #440]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d140      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c7a:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e035      	b.n	8003cfc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c98:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d115      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b9      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb0:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0ad      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc0:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0a5      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003cd0:	f000 f8b4 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4a55      	ldr	r2, [pc, #340]	; (8003e2c <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d90f      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cdc:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf0:	4a4d      	ldr	r2, [pc, #308]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 0203 	bic.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4947      	ldr	r1, [pc, #284]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fa9b 	bl	8001248 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d16:	f7fd fa97 	bl	8001248 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e077      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 020c 	and.w	r2, r3, #12
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d1eb      	bne.n	8003d16 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d105      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d44:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a37      	ldr	r2, [pc, #220]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d208      	bcs.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	492b      	ldr	r1, [pc, #172]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d210      	bcs.n	8003dae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 020f 	bic.w	r2, r3, #15
 8003d94:	4923      	ldr	r1, [pc, #140]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_ClockConfig+0x25c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e036      	b.n	8003e1c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4918      	ldr	r1, [pc, #96]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4910      	ldr	r1, [pc, #64]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dec:	f000 f826 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	490c      	ldr	r1, [pc, #48]	; (8003e30 <HAL_RCC_ClockConfig+0x268>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x26c>)
 8003e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_RCC_ClockConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd f9c9 	bl	80011a8 <HAL_InitTick>
 8003e16:	4603      	mov	r3, r0
 8003e18:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	04c4b400 	.word	0x04c4b400
 8003e30:	08005544 	.word	0x08005544
 8003e34:	200000b0 	.word	0x200000b0
 8003e38:	200000b4 	.word	0x200000b4

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e54:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x34>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d121      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d11e      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e004      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec0:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d134      	bne.n	8003f34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d003      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ee0:	e005      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee4:	617b      	str	r3, [r7, #20]
      break;
 8003ee6:	e005      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eea:	617b      	str	r3, [r7, #20]
      break;
 8003eec:	e002      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	617b      	str	r3, [r7, #20]
      break;
 8003ef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	3301      	adds	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	fb03 f202 	mul.w	r2, r3, r2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	0e5b      	lsrs	r3, r3, #25
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	3301      	adds	r3, #1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f34:	69bb      	ldr	r3, [r7, #24]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	08005554 	.word	0x08005554
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200000b0 	.word	0x200000b0

08003f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f942 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
 8003f8a:	e014      	b.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f932 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d10b      	bne.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d913      	bls.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc8:	d902      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fca:	2302      	movs	r3, #2
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	e00d      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e00a      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003fda:	d902      	bls.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003fdc:	2302      	movs	r3, #2
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e004      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d101      	bne.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 020f 	bic.w	r2, r3, #15
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	40022000 	.word	0x40022000

08004020 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004026:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d00b      	beq.n	800404e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d825      	bhi.n	8004088 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d008      	beq.n	8004054 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d11f      	bne.n	8004088 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800404a:	613b      	str	r3, [r7, #16]
    break;
 800404c:	e01f      	b.n	800408e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800404e:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004050:	613b      	str	r3, [r7, #16]
    break;
 8004052:	e01c      	b.n	800408e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e005      	b.n	800407c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004070:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
    break;
 8004086:	e002      	b.n	800408e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
    break;
 800408c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	3301      	adds	r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	fb03 f202 	mul.w	r2, r3, r2
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	0e5b      	lsrs	r3, r3, #25
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80040ce:	683b      	ldr	r3, [r7, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40021000 	.word	0x40021000
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	007a1200 	.word	0x007a1200
 80040e8:	08005554 	.word	0x08005554

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f4:	2300      	movs	r3, #0
 80040f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004104:	2b00      	cmp	r3, #0
 8004106:	d040      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410c:	2b80      	cmp	r3, #128	; 0x80
 800410e:	d02a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d825      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d026      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d821      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d006      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d81d      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d010      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800412c:	e018      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800412e:	4b89      	ldr	r3, [pc, #548]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a88      	ldr	r2, [pc, #544]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413a:	e015      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb02 	bl	800474c <RCCEx_PLLSAI1_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414c:	e00c      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fbed 	bl	8004934 <RCCEx_PLLSAI2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	74fb      	strb	r3, [r7, #19]
      break;
 8004164:	e000      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416e:	4b79      	ldr	r3, [pc, #484]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004174:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417c:	4975      	ldr	r1, [pc, #468]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004184:	e001      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d047      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419e:	d030      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d82a      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041aa:	d02a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b0:	d824      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041bc:	d81e      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d010      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041c8:	e018      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ca:	4b62      	ldr	r3, [pc, #392]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4a61      	ldr	r2, [pc, #388]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d6:	e015      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fab4 	bl	800474c <RCCEx_PLLSAI1_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e8:	e00c      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3320      	adds	r3, #32
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb9f 	bl	8004934 <RCCEx_PLLSAI2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	74fb      	strb	r3, [r7, #19]
      break;
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800420a:	4b52      	ldr	r3, [pc, #328]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	494e      	ldr	r1, [pc, #312]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 809f 	beq.w	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004248:	2300      	movs	r3, #0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a40      	ldr	r2, [pc, #256]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
 800425a:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004276:	f7fc ffe7 	bl	8001248 <HAL_GetTick>
 800427a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800427c:	e009      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fc ffe3 	bl	8001248 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d902      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	74fb      	strb	r3, [r7, #19]
        break;
 8004290:	e005      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ef      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d15b      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042a4:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d019      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ce:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ee:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d016      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fc ffa2 	bl	8001248 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	e00b      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fc ff9e 	bl	8001248 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d902      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	74fb      	strb	r3, [r7, #19]
            break;
 800431e:	e006      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ec      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10c      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
 8004352:	e005      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004354:	40021000 	.word	0x40021000
 8004358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004360:	7c7b      	ldrb	r3, [r7, #17]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004366:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	4a9f      	ldr	r2, [pc, #636]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437e:	4b9a      	ldr	r3, [pc, #616]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f023 0203 	bic.w	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	4996      	ldr	r1, [pc, #600]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a0:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 020c 	bic.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	498e      	ldr	r1, [pc, #568]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c2:	4b89      	ldr	r3, [pc, #548]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	4985      	ldr	r1, [pc, #532]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e4:	4b80      	ldr	r3, [pc, #512]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f2:	497d      	ldr	r1, [pc, #500]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004406:	4b78      	ldr	r3, [pc, #480]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	4974      	ldr	r1, [pc, #464]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004428:	4b6f      	ldr	r3, [pc, #444]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	496c      	ldr	r1, [pc, #432]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800444a:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004458:	4963      	ldr	r1, [pc, #396]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800446c:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447a:	495b      	ldr	r1, [pc, #364]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448e:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	4952      	ldr	r1, [pc, #328]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b0:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	494a      	ldr	r1, [pc, #296]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d2:	4b45      	ldr	r3, [pc, #276]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	4941      	ldr	r1, [pc, #260]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044f4:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	4939      	ldr	r1, [pc, #228]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d028      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004516:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004524:	4930      	ldr	r1, [pc, #192]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004534:	d106      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004540:	60d3      	str	r3, [r2, #12]
 8004542:	e011      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f8f9 	bl	800474c <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d04d      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d108      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800458a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800458e:	e012      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	490e      	ldr	r1, [pc, #56]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045be:	d106      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ca:	60d3      	str	r3, [r2, #12]
 80045cc:	e020      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	60d3      	str	r3, [r2, #12]
 80045e4:	e014      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f8a5 	bl	800474c <RCCEx_PLLSAI1_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d028      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461c:	4b4a      	ldr	r3, [pc, #296]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462a:	4947      	ldr	r1, [pc, #284]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463a:	d106      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
 8004648:	e011      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f876 	bl	800474c <RCCEx_PLLSAI1_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01e      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467a:	4b33      	ldr	r3, [pc, #204]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	492f      	ldr	r1, [pc, #188]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f851 	bl	800474c <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f023 0204 	bic.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	491c      	ldr	r1, [pc, #112]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ee:	f023 0218 	bic.w	r2, r3, #24
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	4913      	ldr	r1, [pc, #76]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	490a      	ldr	r1, [pc, #40]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800473c:	7cbb      	ldrb	r3, [r7, #18]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000

0800474c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475a:	4b72      	ldr	r3, [pc, #456]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004766:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d103      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
       ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d142      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e03f      	b.n	8004804 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d018      	beq.n	80047be <RCCEx_PLLSAI1_Config+0x72>
 800478c:	2b03      	cmp	r3, #3
 800478e:	d825      	bhi.n	80047dc <RCCEx_PLLSAI1_Config+0x90>
 8004790:	2b01      	cmp	r3, #1
 8004792:	d002      	beq.n	800479a <RCCEx_PLLSAI1_Config+0x4e>
 8004794:	2b02      	cmp	r3, #2
 8004796:	d009      	beq.n	80047ac <RCCEx_PLLSAI1_Config+0x60>
 8004798:	e020      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479a:	4b62      	ldr	r3, [pc, #392]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11d      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047aa:	e01a      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047ac:	4b5d      	ldr	r3, [pc, #372]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d116      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047bc:	e013      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047be:	4b59      	ldr	r3, [pc, #356]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ca:	4b56      	ldr	r3, [pc, #344]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047da:	e006      	b.n	80047ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e004      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047f2:	4b4c      	ldr	r3, [pc, #304]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f023 0203 	bic.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4949      	ldr	r1, [pc, #292]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004800:	4313      	orrs	r3, r2
 8004802:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 8086 	bne.w	8004918 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800480c:	4b45      	ldr	r3, [pc, #276]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a44      	ldr	r2, [pc, #272]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fc fd16 	bl	8001248 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fc fd12 	bl	8001248 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
        break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d168      	bne.n	8004918 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d113      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484c:	4b35      	ldr	r3, [pc, #212]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	4b35      	ldr	r3, [pc, #212]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004852:	4013      	ands	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	0211      	lsls	r1, r2, #8
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68d2      	ldr	r2, [r2, #12]
 800485e:	06d2      	lsls	r2, r2, #27
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6852      	ldr	r2, [r2, #4]
 8004866:	3a01      	subs	r2, #1
 8004868:	0112      	lsls	r2, r2, #4
 800486a:	430a      	orrs	r2, r1
 800486c:	492d      	ldr	r1, [pc, #180]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	610b      	str	r3, [r1, #16]
 8004872:	e02d      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d115      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	4b2b      	ldr	r3, [pc, #172]	; (800492c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6892      	ldr	r2, [r2, #8]
 8004886:	0211      	lsls	r1, r2, #8
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6912      	ldr	r2, [r2, #16]
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	3a01      	subs	r2, #1
 8004890:	0552      	lsls	r2, r2, #21
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	3a01      	subs	r2, #1
 800489a:	0112      	lsls	r2, r2, #4
 800489c:	430a      	orrs	r2, r1
 800489e:	4921      	ldr	r1, [pc, #132]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	610b      	str	r3, [r1, #16]
 80048a4:	e014      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	0211      	lsls	r1, r2, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6952      	ldr	r2, [r2, #20]
 80048b8:	0852      	lsrs	r2, r2, #1
 80048ba:	3a01      	subs	r2, #1
 80048bc:	0652      	lsls	r2, r2, #25
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6852      	ldr	r2, [r2, #4]
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	430a      	orrs	r2, r1
 80048ca:	4916      	ldr	r1, [pc, #88]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d0:	4b14      	ldr	r3, [pc, #80]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fc fcb4 	bl	8001248 <HAL_GetTick>
 80048e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e2:	e009      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e4:	f7fc fcb0 	bl	8001248 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d902      	bls.n	80048f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	73fb      	strb	r3, [r7, #15]
          break;
 80048f6:	e005      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0ef      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	4904      	ldr	r1, [pc, #16]	; (8004924 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004914:	4313      	orrs	r3, r2
 8004916:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	07ff800f 	.word	0x07ff800f
 800492c:	ff9f800f 	.word	0xff9f800f
 8004930:	f9ff800f 	.word	0xf9ff800f

08004934 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004942:	4b72      	ldr	r3, [pc, #456]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00e      	beq.n	800496c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800494e:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0203 	and.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d103      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
       ||
 8004962:	2b00      	cmp	r3, #0
 8004964:	d142      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e03f      	b.n	80049ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d018      	beq.n	80049a6 <RCCEx_PLLSAI2_Config+0x72>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d825      	bhi.n	80049c4 <RCCEx_PLLSAI2_Config+0x90>
 8004978:	2b01      	cmp	r3, #1
 800497a:	d002      	beq.n	8004982 <RCCEx_PLLSAI2_Config+0x4e>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d009      	beq.n	8004994 <RCCEx_PLLSAI2_Config+0x60>
 8004980:	e020      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004982:	4b62      	ldr	r3, [pc, #392]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e01a      	b.n	80049ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a4:	e013      	b.n	80049ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a6:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c2:	e006      	b.n	80049d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e004      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049da:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 0203 	bic.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4949      	ldr	r1, [pc, #292]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8086 	bne.w	8004b00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049f4:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a44      	ldr	r2, [pc, #272]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fc22 	bl	8001248 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a08:	f7fc fc1e 	bl	8001248 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d168      	bne.n	8004b00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6892      	ldr	r2, [r2, #8]
 8004a40:	0211      	lsls	r1, r2, #8
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	4311      	orrs	r1, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	430a      	orrs	r2, r1
 8004a54:	492d      	ldr	r1, [pc, #180]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	614b      	str	r3, [r1, #20]
 8004a5a:	e02d      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d115      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6892      	ldr	r2, [r2, #8]
 8004a6e:	0211      	lsls	r1, r2, #8
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6912      	ldr	r2, [r2, #16]
 8004a74:	0852      	lsrs	r2, r2, #1
 8004a76:	3a01      	subs	r2, #1
 8004a78:	0552      	lsls	r2, r2, #21
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	430a      	orrs	r2, r1
 8004a86:	4921      	ldr	r1, [pc, #132]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	614b      	str	r3, [r1, #20]
 8004a8c:	e014      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6892      	ldr	r2, [r2, #8]
 8004a9a:	0211      	lsls	r1, r2, #8
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6952      	ldr	r2, [r2, #20]
 8004aa0:	0852      	lsrs	r2, r2, #1
 8004aa2:	3a01      	subs	r2, #1
 8004aa4:	0652      	lsls	r2, r2, #25
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6852      	ldr	r2, [r2, #4]
 8004aac:	3a01      	subs	r2, #1
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	4916      	ldr	r1, [pc, #88]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ab8:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fc fbc0 	bl	8001248 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aca:	e009      	b.n	8004ae0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004acc:	f7fc fbbc 	bl	8001248 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d902      	bls.n	8004ae0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ade:	e005      	b.n	8004aec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	4904      	ldr	r1, [pc, #16]	; (8004b0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	07ff800f 	.word	0x07ff800f
 8004b14:	ff9f800f 	.word	0xff9f800f
 8004b18:	f9ff800f 	.word	0xf9ff800f

08004b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e049      	b.n	8004bc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fa68 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 fa9a 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIM_Base_Start_IT+0x76>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d115      	bne.n	8004c6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d015      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5a:	d011      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	e008      	b.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40013400 	.word	0x40013400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	00010007 	.word	0x00010007

08004cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d020      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0202 	mvn.w	r2, #2
 8004ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9ad 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f99f 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f9b0 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d020      	beq.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01b      	beq.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0204 	mvn.w	r2, #4
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f987 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f979 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f98a 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d020      	beq.n	8004da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f961 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f953 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f964 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0210 	mvn.w	r2, #16
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f93b 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f92d 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f93e 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0201 	mvn.w	r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fb fc2c 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 faf2 	bl	8005420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 faea 	bl	8005434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8fd 	bl	800507e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0220 	mvn.w	r2, #32
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fab2 	bl	800540c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e0b6      	b.n	800503a <HAL_TIM_ConfigClockSource+0x18a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d03e      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xd8>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	f200 8087 	bhi.w	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f16:	f000 8086 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x176>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d87f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f20:	2b70      	cmp	r3, #112	; 0x70
 8004f22:	d01a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xaa>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d87b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d050      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x11e>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d877      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f30:	2b50      	cmp	r3, #80	; 0x50
 8004f32:	d03c      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xfe>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d873      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d058      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x13e>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d86f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d064      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d86b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d060      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d867      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d05c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d05a      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f58:	e062      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f6a:	f000 f9a7 	bl	80052bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	609a      	str	r2, [r3, #8]
      break;
 8004f86:	e04f      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	f000 f990 	bl	80052bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004faa:	609a      	str	r2, [r3, #8]
      break;
 8004fac:	e03c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 f904 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2150      	movs	r1, #80	; 0x50
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f95d 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e02c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 f923 	bl	8005226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2160      	movs	r1, #96	; 0x60
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f94d 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e01c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 f8e4 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f93d 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 800500c:	e00c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f000 f934 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 800501e:	e003      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      break;
 8005024:	e000      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a40      	ldr	r2, [pc, #256]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d00f      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3c      	ldr	r2, [pc, #240]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <TIM_Base_SetConfig+0x118>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <TIM_Base_SetConfig+0x11c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <TIM_Base_SetConfig+0x120>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <TIM_Base_SetConfig+0x128>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <TIM_Base_SetConfig+0x114>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <TIM_Base_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <TIM_Base_SetConfig+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <TIM_Base_SetConfig+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <TIM_Base_SetConfig+0x130>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 030a 	bic.w	r3, r3, #10
 8005204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f023 0210 	bic.w	r2, r3, #16
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f043 0307 	orr.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	431a      	orrs	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e068      	b.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2e      	ldr	r2, [pc, #184]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2d      	ldr	r2, [pc, #180]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800534e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d018      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10c      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40014000 	.word	0x40014000

0800540c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <arm_sin_f32>:
 8005448:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80054c8 <arm_sin_f32+0x80>
 800544c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005450:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800545c:	d504      	bpl.n	8005468 <arm_sin_f32+0x20>
 800545e:	ee17 3a90 	vmov	r3, s15
 8005462:	3b01      	subs	r3, #1
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800546c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80054cc <arm_sin_f32+0x84>
 8005470:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005474:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005478:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800547c:	ee17 3a90 	vmov	r3, s15
 8005480:	b29b      	uxth	r3, r3
 8005482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005486:	d21a      	bcs.n	80054be <arm_sin_f32+0x76>
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005496:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <arm_sin_f32+0x88>)
 8005498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800549c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80054a4:	ed93 7a00 	vldr	s14, [r3]
 80054a8:	edd2 6a00 	vldr	s13, [r2]
 80054ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80054b0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80054b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054b8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80054bc:	4770      	bx	lr
 80054be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80054c2:	2101      	movs	r1, #1
 80054c4:	2300      	movs	r3, #0
 80054c6:	e7e6      	b.n	8005496 <arm_sin_f32+0x4e>
 80054c8:	3e22f983 	.word	0x3e22f983
 80054cc:	44000000 	.word	0x44000000
 80054d0:	08005584 	.word	0x08005584

080054d4 <memset>:
 80054d4:	4402      	add	r2, r0
 80054d6:	4603      	mov	r3, r0
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	f803 1b01 	strb.w	r1, [r3], #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f818 	bl	800552c <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08005d88 	.word	0x08005d88
 8005520:	08005d88 	.word	0x08005d88
 8005524:	08005d88 	.word	0x08005d88
 8005528:	08005d8c 	.word	0x08005d8c

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
