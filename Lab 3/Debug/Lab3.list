
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a9c  08006a9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006a9c  08006a9c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a9c  08006a9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00058140  20000010  08006ab4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20058150  08006ab4  00028150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165ee  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b84  00000000  00000000  000366e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ece  00000000  00000000  0003a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cab0  00000000  00000000  0003b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d3a  00000000  00000000  00067f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011af42  00000000  00000000  0007cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005300  00000000  00000000  00197bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0019ced4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019cf3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006240 	.word	0x08006240

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08006240 	.word	0x08006240

080001fc <__aeabi_dmul>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020a:	bf1d      	ittte	ne
 800020c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000210:	ea94 0f0c 	teqne	r4, ip
 8000214:	ea95 0f0c 	teqne	r5, ip
 8000218:	f000 f8de 	bleq	80003d8 <__aeabi_dmul+0x1dc>
 800021c:	442c      	add	r4, r5
 800021e:	ea81 0603 	eor.w	r6, r1, r3
 8000222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800022e:	bf18      	it	ne
 8000230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023c:	d038      	beq.n	80002b0 <__aeabi_dmul+0xb4>
 800023e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000242:	f04f 0500 	mov.w	r5, #0
 8000246:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800024e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000252:	f04f 0600 	mov.w	r6, #0
 8000256:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025a:	f09c 0f00 	teq	ip, #0
 800025e:	bf18      	it	ne
 8000260:	f04e 0e01 	orrne.w	lr, lr, #1
 8000264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800026c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000270:	d204      	bcs.n	800027c <__aeabi_dmul+0x80>
 8000272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000276:	416d      	adcs	r5, r5
 8000278:	eb46 0606 	adc.w	r6, r6, r6
 800027c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800028c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000294:	bf88      	it	hi
 8000296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029a:	d81e      	bhi.n	80002da <__aeabi_dmul+0xde>
 800029c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b4:	ea46 0101 	orr.w	r1, r6, r1
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	ea81 0103 	eor.w	r1, r1, r3
 80002c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c4:	bfc2      	ittt	gt
 80002c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ce:	bd70      	popgt	{r4, r5, r6, pc}
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d4:	f04f 0e00 	mov.w	lr, #0
 80002d8:	3c01      	subs	r4, #1
 80002da:	f300 80ab 	bgt.w	8000434 <__aeabi_dmul+0x238>
 80002de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e2:	bfde      	ittt	le
 80002e4:	2000      	movle	r0, #0
 80002e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ea:	bd70      	pople	{r4, r5, r6, pc}
 80002ec:	f1c4 0400 	rsb	r4, r4, #0
 80002f0:	3c20      	subs	r4, #32
 80002f2:	da35      	bge.n	8000360 <__aeabi_dmul+0x164>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc1b      	bgt.n	8000330 <__aeabi_dmul+0x134>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0520 	rsb	r5, r4, #32
 8000300:	fa00 f305 	lsl.w	r3, r0, r5
 8000304:	fa20 f004 	lsr.w	r0, r0, r4
 8000308:	fa01 f205 	lsl.w	r2, r1, r5
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	fa21 f604 	lsr.w	r6, r1, r4
 8000320:	eb42 0106 	adc.w	r1, r2, r6
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 040c 	rsb	r4, r4, #12
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f304 	lsl.w	r3, r0, r4
 800033c:	fa20 f005 	lsr.w	r0, r0, r5
 8000340:	fa01 f204 	lsl.w	r2, r1, r4
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000358:	bf08      	it	eq
 800035a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f205 	lsl.w	r2, r0, r5
 8000368:	ea4e 0e02 	orr.w	lr, lr, r2
 800036c:	fa20 f304 	lsr.w	r3, r0, r4
 8000370:	fa01 f205 	lsl.w	r2, r1, r5
 8000374:	ea43 0302 	orr.w	r3, r3, r2
 8000378:	fa21 f004 	lsr.w	r0, r1, r4
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	fa21 f204 	lsr.w	r2, r1, r4
 8000384:	ea20 0002 	bic.w	r0, r0, r2
 8000388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f094 0f00 	teq	r4, #0
 800039c:	d10f      	bne.n	80003be <__aeabi_dmul+0x1c2>
 800039e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a2:	0040      	lsls	r0, r0, #1
 80003a4:	eb41 0101 	adc.w	r1, r1, r1
 80003a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ac:	bf08      	it	eq
 80003ae:	3c01      	subeq	r4, #1
 80003b0:	d0f7      	beq.n	80003a2 <__aeabi_dmul+0x1a6>
 80003b2:	ea41 0106 	orr.w	r1, r1, r6
 80003b6:	f095 0f00 	teq	r5, #0
 80003ba:	bf18      	it	ne
 80003bc:	4770      	bxne	lr
 80003be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	eb43 0303 	adc.w	r3, r3, r3
 80003c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003cc:	bf08      	it	eq
 80003ce:	3d01      	subeq	r5, #1
 80003d0:	d0f7      	beq.n	80003c2 <__aeabi_dmul+0x1c6>
 80003d2:	ea43 0306 	orr.w	r3, r3, r6
 80003d6:	4770      	bx	lr
 80003d8:	ea94 0f0c 	teq	r4, ip
 80003dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e0:	bf18      	it	ne
 80003e2:	ea95 0f0c 	teqne	r5, ip
 80003e6:	d00c      	beq.n	8000402 <__aeabi_dmul+0x206>
 80003e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ec:	bf18      	it	ne
 80003ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f2:	d1d1      	bne.n	8000398 <__aeabi_dmul+0x19c>
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	f04f 0000 	mov.w	r0, #0
 8000400:	bd70      	pop	{r4, r5, r6, pc}
 8000402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000406:	bf06      	itte	eq
 8000408:	4610      	moveq	r0, r2
 800040a:	4619      	moveq	r1, r3
 800040c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000410:	d019      	beq.n	8000446 <__aeabi_dmul+0x24a>
 8000412:	ea94 0f0c 	teq	r4, ip
 8000416:	d102      	bne.n	800041e <__aeabi_dmul+0x222>
 8000418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800041c:	d113      	bne.n	8000446 <__aeabi_dmul+0x24a>
 800041e:	ea95 0f0c 	teq	r5, ip
 8000422:	d105      	bne.n	8000430 <__aeabi_dmul+0x234>
 8000424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000428:	bf1c      	itt	ne
 800042a:	4610      	movne	r0, r2
 800042c:	4619      	movne	r1, r3
 800042e:	d10a      	bne.n	8000446 <__aeabi_dmul+0x24a>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	; 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_d2uiz>:
 80007c8:	004a      	lsls	r2, r1, #1
 80007ca:	d211      	bcs.n	80007f0 <__aeabi_d2uiz+0x28>
 80007cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d0:	d211      	bcs.n	80007f6 <__aeabi_d2uiz+0x2e>
 80007d2:	d50d      	bpl.n	80007f0 <__aeabi_d2uiz+0x28>
 80007d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007dc:	d40e      	bmi.n	80007fc <__aeabi_d2uiz+0x34>
 80007de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ea:	fa23 f002 	lsr.w	r0, r3, r2
 80007ee:	4770      	bx	lr
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	4770      	bx	lr
 80007f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fa:	d102      	bne.n	8000802 <__aeabi_d2uiz+0x3a>
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	4770      	bx	lr
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	4770      	bx	lr

08000808 <HAL_TIM_PeriodElapsedCallback>:
static void MX_DFSDM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
//timer used for led blinking
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d108      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x22>
		if(recording)
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <HAL_TIM_PeriodElapsedCallback+0x22>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Make LED blink if recording
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000826:	f003 fb49 	bl	8003ebc <HAL_GPIO_TogglePin>
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20058080 	.word	0x20058080
 8000838:	20058118 	.word	0x20058118
 800083c:	48000400 	.word	0x48000400

08000840 <sine_wave>:

uint8_t sine_wave(float x){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t y;
	float radians =2*PI*x;
 800084a:	edd7 7a01 	vldr	s15, [r7, #4]
 800084e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800089c <sine_wave+0x5c>
 8000852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000856:	edc7 7a03 	vstr	s15, [r7, #12]
	y=(uint8_t) (127.5*(2/3)*(1+arm_sin_f32(radians)));
 800085a:	ed97 0a03 	vldr	s0, [r7, #12]
 800085e:	f005 fc7d 	bl	800615c <arm_sin_f32>
 8000862:	eef0 7a40 	vmov.f32	s15, s0
 8000866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800086a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800086e:	ee17 0a90 	vmov	r0, s15
 8000872:	f7ff ff51 	bl	8000718 <__aeabi_f2d>
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	f7ff fcbd 	bl	80001fc <__aeabi_dmul>
 8000882:	4602      	mov	r2, r0
 8000884:	460b      	mov	r3, r1
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	f7ff ff9d 	bl	80007c8 <__aeabi_d2uiz>
 800088e:	4603      	mov	r3, r0
 8000890:	72fb      	strb	r3, [r7, #11]
	return y;
 8000892:	7afb      	ldrb	r3, [r7, #11]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40c90fdb 	.word	0x40c90fdb

080008a0 <makeNote>:

uint8_t makeNote(int samples){
 80008a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008a4:	b087      	sub	sp, #28
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	466b      	mov	r3, sp
 80008ac:	461e      	mov	r6, r3
	uint8_t array[samples];
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	1e4b      	subs	r3, r1, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	460a      	mov	r2, r1
 80008b6:	2300      	movs	r3, #0
 80008b8:	4690      	mov	r8, r2
 80008ba:	4699      	mov	r9, r3
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008d0:	460a      	mov	r2, r1
 80008d2:	2300      	movs	r3, #0
 80008d4:	4614      	mov	r4, r2
 80008d6:	461d      	mov	r5, r3
 80008d8:	f04f 0200 	mov.w	r2, #0
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	00eb      	lsls	r3, r5, #3
 80008e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008e6:	00e2      	lsls	r2, r4, #3
 80008e8:	460b      	mov	r3, r1
 80008ea:	3307      	adds	r3, #7
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	ebad 0d03 	sub.w	sp, sp, r3
 80008f4:	466b      	mov	r3, sp
 80008f6:	3300      	adds	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<samples;i++){
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	e01b      	b.n	8000938 <makeNote+0x98>
		float mod = (float)i/samples;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000918:	edc7 7a02 	vstr	s15, [r7, #8]
		array[i]=sine_wave(mod);
 800091c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000920:	f7ff ff8e 	bl	8000840 <sine_wave>
 8000924:	4603      	mov	r3, r0
 8000926:	4619      	mov	r1, r3
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	4413      	add	r3, r2
 800092e:	460a      	mov	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<samples;i++){
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbdf      	blt.n	8000900 <makeNote+0x60>
	}
	return array;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	46b5      	mov	sp, r6
}
 8000946:	4618      	mov	r0, r3
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000950 <HAL_GPIO_EXTI_Callback>:

//=================Part 4: Putting it all together======================
int currentCaseIndex = 0;
int numCases = 8; // Number of notes (adjust as needed)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) {
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000960:	f040 808d 	bne.w	8000a7e <HAL_GPIO_EXTI_Callback+0x12e>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Stop any ongoing audio playback
 8000964:	2100      	movs	r1, #0
 8000966:	4848      	ldr	r0, [pc, #288]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 8000968:	f002 f842 	bl	80029f0 <HAL_DAC_Stop_DMA>

        switch (currentCaseIndex) {
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x13c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b07      	cmp	r3, #7
 8000972:	d877      	bhi.n	8000a64 <HAL_GPIO_EXTI_Callback+0x114>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800099d 	.word	0x0800099d
 8000980:	080009b7 	.word	0x080009b7
 8000984:	080009d1 	.word	0x080009d1
 8000988:	080009eb 	.word	0x080009eb
 800098c:	08000a05 	.word	0x08000a05
 8000990:	08000a17 	.word	0x08000a17
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a4b 	.word	0x08000a4b
        	case 0: //record msg
        		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800099c:	2100      	movs	r1, #0
 800099e:	483a      	ldr	r0, [pc, #232]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 80009a0:	f002 f826 	bl	80029f0 <HAL_DAC_Stop_DMA>
				recording=1;
 80009a4:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x140>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
				HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &micBuffer, BUFFER_SIZE); //start recording
 80009aa:	4a3a      	ldr	r2, [pc, #232]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x144>)
 80009ac:	493a      	ldr	r1, [pc, #232]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x148>)
 80009ae:	483b      	ldr	r0, [pc, #236]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x14c>)
 80009b0:	f002 fc38 	bl	8003224 <HAL_DFSDM_FilterRegularStart_DMA>
				break;
 80009b4:	e057      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 1: //play 1st note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(42), 42, DAC_ALIGN_12B_R);
 80009b6:	202a      	movs	r0, #42	; 0x2a
 80009b8:	f7ff ff72 	bl	80008a0 <makeNote>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	232a      	movs	r3, #42	; 0x2a
 80009c6:	2100      	movs	r1, #0
 80009c8:	482f      	ldr	r0, [pc, #188]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 80009ca:	f001 ff45 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 80009ce:	e04a      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 2: //play 2nd note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(50), 50, DAC_ALIGN_12B_R);
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f7ff ff65 	bl	80008a0 <makeNote>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2332      	movs	r3, #50	; 0x32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4829      	ldr	r0, [pc, #164]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 80009e4:	f001 ff38 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 80009e8:	e03d      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 3: //play 3rd note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(62), 62, DAC_ALIGN_12B_R);
 80009ea:	203e      	movs	r0, #62	; 0x3e
 80009ec:	f7ff ff58 	bl	80008a0 <makeNote>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	233e      	movs	r3, #62	; 0x3e
 80009fa:	2100      	movs	r1, #0
 80009fc:	4822      	ldr	r0, [pc, #136]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 80009fe:	f001 ff2b 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 8000a02:	e030      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 4: //play recorded msg
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &micBuffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000a04:	2300      	movs	r3, #0
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x148>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 8000a10:	f001 ff22 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 8000a14:	e027      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 5: //play 4th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(50), 50, DAC_ALIGN_12B_R);
 8000a16:	2032      	movs	r0, #50	; 0x32
 8000a18:	f7ff ff42 	bl	80008a0 <makeNote>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2332      	movs	r3, #50	; 0x32
 8000a26:	2100      	movs	r1, #0
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 8000a2a:	f001 ff15 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 8000a2e:	e01a      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 6: //play 5th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(80), 28, DAC_ALIGN_12B_R);
 8000a30:	2050      	movs	r0, #80	; 0x50
 8000a32:	f7ff ff35 	bl	80008a0 <makeNote>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	231c      	movs	r3, #28
 8000a40:	2100      	movs	r1, #0
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 8000a44:	f001 ff08 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 8000a48:	e00d      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			case 7: //play 6th note
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, makeNote(120), 120, DAC_ALIGN_12B_R);
 8000a4a:	2078      	movs	r0, #120	; 0x78
 8000a4c:	f7ff ff28 	bl	80008a0 <makeNote>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	2300      	movs	r3, #0
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2378      	movs	r3, #120	; 0x78
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x138>)
 8000a5e:	f001 fefb 	bl	8002858 <HAL_DAC_Start_DMA>
				break;
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_EXTI_Callback+0x116>
			default:
				break;
 8000a64:	bf00      	nop
		}
        currentCaseIndex = (currentCaseIndex + 1) % numCases; // Move to the next note and loop around
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a74:	fb01 f202 	mul.w	r2, r1, r2
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a7c:	6013      	str	r3, [r2, #0]
    }
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20057ed4 	.word	0x20057ed4
 8000a8c:	2005811c 	.word	0x2005811c
 8000a90:	20058118 	.word	0x20058118
 8000a94:	00015f90 	.word	0x00015f90
 8000a98:	2000002c 	.word	0x2000002c
 8000a9c:	20057f48 	.word	0x20057f48
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ){ //invoked when conversion of mic input is complete
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(hdfsdm_filter == &hdfsdm1_filter0){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d127      	bne.n	8000b04 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000ab4:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DFSDM_FilterRegConvCpltCallback+0x68>)
 8000ab6:	f002 fc37 	bl	8003328 <HAL_DFSDM_FilterRegularStop_DMA>
		//do the shifting stuff
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e01a      	b.n	8000af6 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		    if (micBuffer[i] < 0) {
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da08      	bge.n	8000ade <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
		    	micBuffer[i] = -micBuffer[i]; // Multiply it by -1 to make it positive
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	425a      	negs	r2, r3
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    }
		    micBuffer[i] = micBuffer[i] >> 10; //shift by 8 to get rid of the garbage
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	129a      	asrs	r2, r3, #10
 8000ae8:	4909      	ldr	r1, [pc, #36]	; (8000b10 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_DFSDM_FilterRegConvCpltCallback+0x70>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	dde0      	ble.n	8000ac0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
		}
		recording=0;//stop blinking
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_DFSDM_FilterRegConvCpltCallback+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	}
 }
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20057f48 	.word	0x20057f48
 8000b10:	2000002c 	.word	0x2000002c
 8000b14:	00015f8f 	.word	0x00015f8f
 8000b18:	20058118 	.word	0x20058118

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fdeb 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f811 	bl	8000b4a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 fa96 	bl	8001058 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b2c:	f000 fa62 	bl	8000ff4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b30:	f000 f8d2 	bl	8000cd8 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000b34:	f000 f85a 	bl	8000bec <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b38:	f000 f968 	bl	8000e0c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000b3c:	f000 f900 	bl	8000d40 <MX_DFSDM1_Init>
  MX_TIM3_Init();
 8000b40:	f000 f9b4 	bl	8000eac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b44:	f000 fa04 	bl	8000f50 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <main+0x2c>

08000b4a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b096      	sub	sp, #88	; 0x58
 8000b4e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2244      	movs	r2, #68	; 0x44
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 fb45 	bl	80061e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f003 f9f7 	bl	8003f60 <HAL_PWREx_ControlVoltageScaling>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b78:	f000 fade 	bl	8001138 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b88:	2360      	movs	r3, #96	; 0x60
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b90:	2301      	movs	r3, #1
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b98:	233c      	movs	r3, #60	; 0x3c
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fa7b 	bl	80040a8 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bb8:	f000 fabe 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fe81 	bl	80048dc <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000be0:	f000 faaa 	bl	8001138 <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3758      	adds	r7, #88	; 0x58
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <MX_ADC1_Init+0xe0>)
 8000c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c6a:	f000 ff7f 	bl	8001b6c <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 fa60 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_ADC1_Init+0xe4>)
 8000c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000c80:	2303      	movs	r3, #3
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c84:	237f      	movs	r3, #127	; 0x7f
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000c96:	f001 f8af 	bl	8001df8 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000ca0:	f000 fa4a 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_ADC1_Init+0xe8>)
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_ADC1_Init+0xdc>)
 8000cb2:	f001 f8a1 	bl	8001df8 <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000cbc:	f000 fa3c 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20057e6c 	.word	0x20057e6c
 8000ccc:	50040000 	.word	0x50040000
 8000cd0:	80000001 	.word	0x80000001
 8000cd4:	c7520000 	.word	0xc7520000

08000cd8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f005 fa7f 	bl	80061e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_DAC1_Init+0x60>)
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <MX_DAC1_Init+0x64>)
 8000cee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_DAC1_Init+0x60>)
 8000cf2:	f001 fd8e 	bl	8002812 <HAL_DAC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cfc:	f000 fa1c 	bl	8001138 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d04:	230a      	movs	r3, #10
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_DAC1_Init+0x60>)
 8000d22:	f001 fec9 	bl	8002ab8 <HAL_DAC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f000 fa04 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20057ed4 	.word	0x20057ed4
 8000d3c:	40007400 	.word	0x40007400

08000d40 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_DFSDM1_Init+0xbc>)
 8000d48:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d5e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d62:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d66:	2236      	movs	r2, #54	; 0x36
 8000d68:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000d70:	4821      	ldr	r0, [pc, #132]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000d72:	f002 f937 	bl	8002fe4 <HAL_DFSDM_FilterInit>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000d7c:	f000 f9dc 	bl	8001138 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <MX_DFSDM1_Init+0xc4>)
 8000d84:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000d94:	2232      	movs	r2, #50	; 0x32
 8000d96:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_DFSDM1_Init+0xc0>)
 8000dd0:	f002 f848 	bl	8002e64 <HAL_DFSDM_ChannelInit>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000dda:	f000 f9ad 	bl	8001138 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000dde:	2201      	movs	r2, #1
 8000de0:	4909      	ldr	r1, [pc, #36]	; (8000e08 <MX_DFSDM1_Init+0xc8>)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_DFSDM1_Init+0xb8>)
 8000de4:	f002 f9d8 	bl	8003198 <HAL_DFSDM_FilterConfigRegChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000dee:	f000 f9a3 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20057f48 	.word	0x20057f48
 8000dfc:	40016100 	.word	0x40016100
 8000e00:	20057f9c 	.word	0x20057f9c
 8000e04:	40016040 	.word	0x40016040
 8000e08:	00020004 	.word	0x00020004

08000e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2727;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e40:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8000e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e52:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e54:	f004 fcec 	bl	8005830 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e5e:	f000 f96b 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e70:	f004 fea8 	bl	8005bc4 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e7a:	f000 f95d 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e8c:	f005 f8c0 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e96:	f000 f94f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM2_Init+0x9c>)
 8000e9c:	f004 fd20 	bl	80058e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20058034 	.word	0x20058034

08000eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <MX_TIM3_Init+0xa0>)
 8000ece:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000ed2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000ee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000ef4:	f004 fc9c 	bl	8005830 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000efe:	f000 f91b 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000f10:	f004 fe58 	bl	8005bc4 <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000f1a:	f000 f90d 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000f2c:	f005 f870 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f36:	f000 f8ff 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM3_Init+0x9c>)
 8000f3c:	f004 fcd0 	bl	80058e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20058080 	.word	0x20058080
 8000f4c:	40000400 	.word	0x40000400

08000f50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <MX_TIM4_Init+0xa0>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f76:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f96:	4815      	ldr	r0, [pc, #84]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000f98:	f004 fc4a 	bl	8005830 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000fa2:	f000 f8c9 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000fb4:	f004 fe06 	bl	8005bc4 <HAL_TIM_ConfigClockSource>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000fbe:	f000 f8bb 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000fd0:	f005 f81e 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000fda:	f000 f8ad 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM4_Init+0x9c>)
 8000fe0:	f004 fc7e 	bl	80058e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200580cc 	.word	0x200580cc
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_DMA_Init+0x60>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <MX_DMA_Init+0x60>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6493      	str	r3, [r2, #72]	; 0x48
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_DMA_Init+0x60>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_DMA_Init+0x60>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <MX_DMA_Init+0x60>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6493      	str	r3, [r2, #72]	; 0x48
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_DMA_Init+0x60>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	200d      	movs	r0, #13
 8001030:	f001 fbb9 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001034:	200d      	movs	r0, #13
 8001036:	f001 fbd2 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200e      	movs	r0, #14
 8001040:	f001 fbb1 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001044:	200e      	movs	r0, #14
 8001046:	f001 fbca 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <MX_GPIO_Init+0xd4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a2e      	ldr	r2, [pc, #184]	; (800112c <MX_GPIO_Init+0xd4>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <MX_GPIO_Init+0xd4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_GPIO_Init+0xd4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <MX_GPIO_Init+0xd4>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_GPIO_Init+0xd4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_GPIO_Init+0xd4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <MX_GPIO_Init+0xd4>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_GPIO_Init+0xd4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_GPIO_Init+0xd4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_GPIO_Init+0xd4>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_GPIO_Init+0xd4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d4:	4816      	ldr	r0, [pc, #88]	; (8001130 <MX_GPIO_Init+0xd8>)
 80010d6:	f002 fed9 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <MX_GPIO_Init+0xdc>)
 80010f2:	f002 fd39 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_GPIO_Init+0xd8>)
 8001110:	f002 fd2a 	bl	8003b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2028      	movs	r0, #40	; 0x28
 800111a:	f001 fb44 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800111e:	2028      	movs	r0, #40	; 0x28
 8001120:	f001 fb5d 	bl	80027de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	; 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0a8      	sub	sp, #160	; 0xa0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2294      	movs	r2, #148	; 0x94
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f005 f823 	bl	80061e8 <memset>
  if(hadc->Instance==ADC1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d12b      	bne.n	8001204 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011c2:	2318      	movs	r3, #24
 80011c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fe0f 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80011e8:	f7ff ffa6 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_ADC_MspInit+0x84>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_ADC_MspInit+0x84>)
 80011f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_ADC_MspInit+0x84>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37a0      	adds	r7, #160	; 0xa0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	50040000 	.word	0x50040000
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <HAL_DAC_MspInit+0xcc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14f      	bne.n	80012d6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 800123c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_DAC_MspInit+0xd0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001266:	2310      	movs	r3, #16
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f002 fc74 	bl	8003b68 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_DAC_MspInit+0xd8>)
 8001284:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 8001288:	2206      	movs	r2, #6
 800128a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 800128e:	2210      	movs	r2, #16
 8001290:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012b0:	2220      	movs	r2, #32
 80012b2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012bc:	f002 f986 	bl	80035cc <HAL_DMA_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80012c6:	f7ff ff37 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_DAC_MspInit+0xd4>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40007400 	.word	0x40007400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	20057ee8 	.word	0x20057ee8
 80012ec:	40020030 	.word	0x40020030

080012f0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ae      	sub	sp, #184	; 0xb8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2294      	movs	r2, #148	; 0x94
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 ff69 	bl	80061e8 <memset>
  if(DFSDM1_Init == 0)
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_DFSDM_FilterMspInit+0x13c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d14b      	bne.n	80013b6 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800131e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fd66 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800133a:	f7ff fefd 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <HAL_DFSDM_FilterMspInit+0x140>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_DFSDM_FilterMspInit+0x140>)
 8001346:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_DFSDM_FilterMspInit+0x140>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10b      	bne.n	8001368 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001354:	4a37      	ldr	r2, [pc, #220]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135a:	6613      	str	r3, [r2, #96]	; 0x60
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 800135e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	4a31      	ldr	r2, [pc, #196]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_DFSDM_FilterMspInit+0x144>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001380:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800139a:	2306      	movs	r3, #6
 800139c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4824      	ldr	r0, [pc, #144]	; (8001438 <HAL_DFSDM_FilterMspInit+0x148>)
 80013a8:	f002 fbde 	bl	8003b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_DFSDM_FilterMspInit+0x13c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_DFSDM_FilterMspInit+0x13c>)
 80013b4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a20      	ldr	r2, [pc, #128]	; (800143c <HAL_DFSDM_FilterMspInit+0x14c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d130      	bne.n	8001422 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013c2:	4a20      	ldr	r2, [pc, #128]	; (8001444 <HAL_DFSDM_FilterMspInit+0x154>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013c8:	2256      	movs	r2, #86	; 0x56
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80013fa:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 80013fc:	f002 f8e6 	bl	80035cc <HAL_DMA_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001406:	f7ff fe97 	bl	8001138 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_DFSDM_FilterMspInit+0x150>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001422:	bf00      	nop
 8001424:	37b8      	adds	r7, #184	; 0xb8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20058124 	.word	0x20058124
 8001430:	20058120 	.word	0x20058120
 8001434:	40021000 	.word	0x40021000
 8001438:	48001000 	.word	0x48001000
 800143c:	40016100 	.word	0x40016100
 8001440:	20057fd4 	.word	0x20057fd4
 8001444:	40020044 	.word	0x40020044

08001448 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ae      	sub	sp, #184	; 0xb8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2294      	movs	r2, #148	; 0x94
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f004 febd 	bl	80061e8 <memset>
  if(DFSDM1_Init == 0)
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d14b      	bne.n	800150e <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fcba 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001492:	f7ff fe51 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_DFSDM_ChannelMspInit+0xd4>)
 800149e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10b      	bne.n	80014c0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6613      	str	r3, [r2, #96]	; 0x60
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80014d8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014f2:	2306      	movs	r3, #6
 80014f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001500:	f002 fb32 	bl	8003b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800150c:	6013      	str	r3, [r2, #0]
  }

}
 800150e:	bf00      	nop
 8001510:	37b8      	adds	r7, #184	; 0xb8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20058124 	.word	0x20058124
 800151c:	20058120 	.word	0x20058120
 8001520:	40021000 	.word	0x40021000
 8001524:	48001000 	.word	0x48001000

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d114      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201c      	movs	r0, #28
 8001558:	f001 f925 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155c:	201c      	movs	r0, #28
 800155e:	f001 f93e 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001562:	e02a      	b.n	80015ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_TIM_Base_MspInit+0xa0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d114      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	201d      	movs	r0, #29
 800158c:	f001 f90b 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001590:	201d      	movs	r0, #29
 8001592:	f001 f924 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 8001596:	e010      	b.n	80015ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_TIM_Base_MspInit+0xa4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10b      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40000800 	.word	0x40000800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f8c2 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <DMA1_Channel3_IRQHandler+0x10>)
 800162a:	f002 f94e 	bl	80038ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20057ee8 	.word	0x20057ee8

08001638 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA1_Channel4_IRQHandler+0x10>)
 800163e:	f002 f944 	bl	80038ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20057fd4 	.word	0x20057fd4

0800164c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM2_IRQHandler+0x10>)
 8001652:	f004 f9b5 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20058034 	.word	0x20058034

08001660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM3_IRQHandler+0x10>)
 8001666:	f004 f9ab 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20058080 	.word	0x20058080

08001674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800167c:	f002 fc38 	bl	8003ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopForever+0xe>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopForever+0x16>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f004 fd8f 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016da:	f7ff fa1f 	bl	8000b1c <main>

080016de <LoopForever>:

LoopForever:
    b LoopForever
 80016de:	e7fe      	b.n	80016de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016e0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016ec:	08006aa4 	.word	0x08006aa4
  ldr r2, =_sbss
 80016f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016f4:	20058150 	.word	0x20058150

080016f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_IRQHandler>

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 f843 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f80e 	bl	800172c <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171c:	f7ff fd12 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001720:	79fb      	ldrb	r3, [r7, #7]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_InitTick+0x6c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d023      	beq.n	8001788 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_InitTick+0x70>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_InitTick+0x6c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f84f 	bl	80027fa <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d809      	bhi.n	800177c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f001 f819 	bl	80027a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_InitTick+0x74>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e007      	b.n	800178c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e004      	b.n	800178c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e001      	b.n	800178c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000000c 	.word	0x2000000c
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20058128 	.word	0x20058128

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20058128 	.word	0x20058128

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c

0800182c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3360      	adds	r3, #96	; 0x60
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LL_ADC_SetOffset+0x44>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4313      	orrs	r3, r2
 80018c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	03fff000 	.word	0x03fff000

080018dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3360      	adds	r3, #96	; 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3360      	adds	r3, #96	; 0x60
 8001918:	461a      	mov	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	615a      	str	r2, [r3, #20]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	4413      	add	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	211f      	movs	r1, #31
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 011f 	and.w	r1, r3, #31
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3314      	adds	r3, #20
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0e5b      	lsrs	r3, r3, #25
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	0d1b      	lsrs	r3, r3, #20
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2107      	movs	r1, #7
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0d1b      	lsrs	r3, r3, #20
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0318 	and.w	r3, r3, #24
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a38:	40d9      	lsrs	r1, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	0007ffff 	.word	0x0007ffff

08001a5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6093      	str	r3, [r2, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_IsEnabled+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_IsEnabled+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e129      	b.n	8001dda <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff faf9 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff67 	bl	8001a80 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff4d 	bl	8001a5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff82 	bl	8001ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff66 	bl	8001aa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_ADC_Init+0x278>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <HAL_ADC_Init+0x27c>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff64 	bl	8001ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff75 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 80c2 	bne.w	8001dc8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 80be 	bne.w	8001dc8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff49 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c6c:	485f      	ldr	r0, [pc, #380]	; (8001dec <HAL_ADC_Init+0x280>)
 8001c6e:	f7ff ff43 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	485c      	ldr	r0, [pc, #368]	; (8001df0 <HAL_ADC_Init+0x284>)
 8001c80:	f7ff fdd4 	bl	800182c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e5b      	ldrb	r3, [r3, #25]
 8001c88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d106      	bne.n	8001cc0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	045b      	lsls	r3, r3, #17
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <HAL_ADC_Init+0x288>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	69b9      	ldr	r1, [r7, #24]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff25 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001cfa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d140      	bne.n	8001d84 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d13d      	bne.n	8001d84 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
 8001d10:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d12:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2a:	f023 0306 	bic.w	r3, r3, #6
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d118      	bne.n	8001d74 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10c      	bne.n	8001da6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f023 010f 	bic.w	r1, r3, #15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020f 	bic.w	r2, r2, #15
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f043 0210 	orr.w	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000004 	.word	0x20000004
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	50040000 	.word	0x50040000
 8001df0:	50040300 	.word	0x50040300
 8001df4:	fff0c007 	.word	0xfff0c007

08001df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0b6      	sub	sp, #216	; 0xd8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x22>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e3d5      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x7ce>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fe79 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 83ba 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d824      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	3b02      	subs	r3, #2
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d81b      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x8e>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_ADC_ConfigChannel+0x5c>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e6d 	.word	0x08001e6d
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e7d 	.word	0x08001e7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e64:	230c      	movs	r3, #12
 8001e66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e6a:	e010      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e72:	e00c      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e74:	2318      	movs	r3, #24
 8001e76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e7a:	e008      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e84:	e003      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e86:	2306      	movs	r3, #6
 8001e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e9c:	f7ff fd62 	bl	8001964 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fe3a 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001eaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fe46 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001eb8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 81bf 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 81ba 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ed8:	d10f      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7ff fd69 	bl	80019bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd23 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>
 8001ef8:	e00e      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff fd58 	bl	80019bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fd13 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00a      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4a:	f7ff fca3 	bl	8001894 <LL_ADC_SetOffset>
 8001f4e:	e179      	b.n	8002244 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fcc0 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x184>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fcb5 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	e01e      	b.n	8001fba <HAL_ADC_ConfigChannel+0x1c2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fcaa 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001faa:	2320      	movs	r3, #32
 8001fac:	e004      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1da>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	e018      	b.n	8002004 <HAL_ADC_ConfigChannel+0x20c>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fc79 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fc5d 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x24a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc52 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e01e      	b.n	8002080 <HAL_ADC_ConfigChannel+0x288>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fc47 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002068:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e004      	b.n	800207e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x2a0>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	e018      	b.n	80020ca <HAL_ADC_ConfigChannel+0x2d2>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d106      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fc16 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2102      	movs	r1, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fbfa 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x310>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fbef 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	e01e      	b.n	8002146 <HAL_ADC_ConfigChannel+0x34e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fbe4 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800212a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800212e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e004      	b.n	8002144 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800213a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_ConfigChannel+0x366>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	e014      	b.n	8002188 <HAL_ADC_ConfigChannel+0x390>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800216c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800216e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002172:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e004      	b.n	8002188 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800217e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	2102      	movs	r1, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fbb7 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fb9b 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x3ce>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2103      	movs	r1, #3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fb90 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	e017      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x3fe>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2103      	movs	r1, #3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fb85 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80021e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80021ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_ConfigChannel+0x416>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	e011      	b.n	8002232 <HAL_ADC_ConfigChannel+0x43a>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800221c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800221e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002232:	429a      	cmp	r2, r3
 8002234:	d106      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	2103      	movs	r1, #3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb62 	bl	8001908 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc55 	bl	8001af8 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 813f 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	f7ff fbd6 	bl	8001a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a8e      	ldr	r2, [pc, #568]	; (80024a8 <HAL_ADC_ConfigChannel+0x6b0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	f040 8130 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4a4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2b09      	cmp	r3, #9
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e019      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x4d8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	bf94      	ite	ls
 80022ca:	2301      	movls	r3, #1
 80022cc:	2300      	movhi	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d079      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x4f8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	069b      	lsls	r3, r3, #26
 80022ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ee:	e015      	b.n	800231c <HAL_ADC_ConfigChannel+0x524>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002300:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	069b      	lsls	r3, r3, #26
 8002318:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_ADC_ConfigChannel+0x544>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	e017      	b.n	800236c <HAL_ADC_ConfigChannel+0x574>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800234e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	ea42 0103 	orr.w	r1, r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x59a>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	3301      	adds	r3, #1
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	e018      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x5cc>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80023aa:	2320      	movs	r3, #32
 80023ac:	e003      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	430b      	orrs	r3, r1
 80023c6:	e080      	b.n	80024ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x5ec>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	069b      	lsls	r3, r3, #26
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	e015      	b.n	8002410 <HAL_ADC_ConfigChannel+0x618>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x638>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	e017      	b.n	8002460 <HAL_ADC_ConfigChannel+0x668>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	61bb      	str	r3, [r7, #24]
  return result;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <HAL_ADC_ConfigChannel+0x694>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	3b1e      	subs	r3, #30
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248a:	e01d      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x6d0>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	60fb      	str	r3, [r7, #12]
  return result;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e005      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x6bc>
 80024a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff fa74 	bl	80019bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06c      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	483c      	ldr	r0, [pc, #240]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80024e2:	f7ff f9c9 	bl	8001878 <LL_ADC_GetCommonPathInternalCh>
 80024e6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d127      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d121      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a35      	ldr	r2, [pc, #212]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d157      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800250e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002512:	4619      	mov	r1, r3
 8002514:	482f      	ldr	r0, [pc, #188]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002516:	f7ff f99c 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002534:	e002      	b.n	800253c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3b01      	subs	r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f9      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002542:	e03a      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d113      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800254e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256c:	4619      	mov	r1, r3
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002570:	f7ff f96f 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002574:	e021      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_ADC_ConfigChannel+0x7f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d11c      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259e:	4619      	mov	r1, r3
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a2:	f7ff f956 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
 80025a6:	e008      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	37d8      	adds	r7, #216	; 0xd8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	80080000 	.word	0x80080000
 80025d4:	50040300 	.word	0x50040300
 80025d8:	c7520000 	.word	0xc7520000
 80025dc:	50040000 	.word	0x50040000
 80025e0:	20000004 	.word	0x20000004
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	cb840000 	.word	0xcb840000
 80025ec:	80000001 	.word	0x80000001

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e014      	b.n	800284e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fced 	bl	8001214 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_DAC_Start_DMA+0x1e>
 8002872:	2302      	movs	r3, #2
 8002874:	e0ab      	b.n	80029ce <HAL_DAC_Start_DMA+0x176>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2202      	movs	r2, #2
 8002880:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12f      	bne.n	80028e8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_DAC_Start_DMA+0x180>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_DAC_Start_DMA+0x184>)
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_DAC_Start_DMA+0x188>)
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d013      	beq.n	80028de <HAL_DAC_Start_DMA+0x86>
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d845      	bhi.n	8002948 <HAL_DAC_Start_DMA+0xf0>
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_DAC_Start_DMA+0x72>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d005      	beq.n	80028d4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028c8:	e03e      	b.n	8002948 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3308      	adds	r3, #8
 80028d0:	613b      	str	r3, [r7, #16]
        break;
 80028d2:	e03c      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	613b      	str	r3, [r7, #16]
        break;
 80028dc:	e037      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3310      	adds	r3, #16
 80028e4:	613b      	str	r3, [r7, #16]
        break;
 80028e6:	e032      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_DAC_Start_DMA+0x18c>)
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <HAL_DAC_Start_DMA+0x190>)
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <HAL_DAC_Start_DMA+0x194>)
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800290e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d013      	beq.n	800293e <HAL_DAC_Start_DMA+0xe6>
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d817      	bhi.n	800294c <HAL_DAC_Start_DMA+0xf4>
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_DAC_Start_DMA+0xd2>
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d005      	beq.n	8002934 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002928:	e010      	b.n	800294c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3314      	adds	r3, #20
 8002930:	613b      	str	r3, [r7, #16]
        break;
 8002932:	e00c      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3318      	adds	r3, #24
 800293a:	613b      	str	r3, [r7, #16]
        break;
 800293c:	e007      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	331c      	adds	r3, #28
 8002944:	613b      	str	r3, [r7, #16]
        break;
 8002946:	e002      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <HAL_DAC_Start_DMA+0xf6>
        break;
 800294c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002962:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6898      	ldr	r0, [r3, #8]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	f000 fed5 	bl	800371c <HAL_DMA_Start_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
 8002976:	e010      	b.n	800299a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002986:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68d8      	ldr	r0, [r3, #12]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	f000 fec3 	bl	800371c <HAL_DMA_Start_IT>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e005      	b.n	80029cc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08002d51 	.word	0x08002d51
 80029dc:	08002d73 	.word	0x08002d73
 80029e0:	08002d8f 	.word	0x08002d8f
 80029e4:	08002df9 	.word	0x08002df9
 80029e8:	08002e1b 	.word	0x08002e1b
 80029ec:	08002e37 	.word	0x08002e37

080029f0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2201      	movs	r2, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fee7 	bl	8003812 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e00c      	b.n	8002a70 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fed9 	bl	8003812 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a6e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	795b      	ldrb	r3, [r3, #5]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_DAC_ConfigChannel+0x1c>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e137      	b.n	8002d44 <HAL_DAC_ConfigChannel+0x28c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	f040 8081 	bne.w	8002bec <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002aea:	f7fe fe6f 	bl	80017cc <HAL_GetTick>
 8002aee:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d140      	bne.n	8002b78 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002af6:	e018      	b.n	8002b2a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002af8:	f7fe fe68 	bl	80017cc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d911      	bls.n	8002b2a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f043 0208 	orr.w	r2, r3, #8
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2203      	movs	r2, #3
 8002b24:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e10c      	b.n	8002d44 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1df      	bne.n	8002af8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f7fe fe53 	bl	80017e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	69d2      	ldr	r2, [r2, #28]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
 8002b48:	e023      	b.n	8002b92 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b4a:	f7fe fe3f 	bl	80017cc <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d90f      	bls.n	8002b78 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da0a      	bge.n	8002b78 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2203      	movs	r2, #3
 8002b72:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e0e5      	b.n	8002d44 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dbe3      	blt.n	8002b4a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7fe fe2e 	bl	80017e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	69d2      	ldr	r2, [r2, #28]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	ea02 0103 	and.w	r1, r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	21ff      	movs	r1, #255	; 0xff
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	ea02 0103 	and.w	r1, r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d11d      	bne.n	8002c30 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	221f      	movs	r2, #31
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	400a      	ands	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd4:	d104      	bne.n	8002ce0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e018      	b.n	8002d12 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e00f      	b.n	8002d12 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002cf2:	f001 ffb9 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8002cf6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_DAC_ConfigChannel+0x294>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d904      	bls.n	8002d0a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e003      	b.n	8002d12 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d10:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	22c0      	movs	r2, #192	; 0xc0
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	400a      	ands	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	04c4b400 	.word	0x04c4b400

08002d50 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fe8b 	bl	8002a7a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	711a      	strb	r2, [r3, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fe84 	bl	8002a8e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fe7a 	bl	8002aa2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	711a      	strb	r2, [r3, #4]
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ffd8 	bl	8002dbc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	711a      	strb	r2, [r3, #4]
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff ffd1 	bl	8002dd0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ffc7 	bl	8002de4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	711a      	strb	r2, [r3, #4]
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0ac      	b.n	8002fd0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fab6 	bl	80033ec <DFSDM_GetChannelFromInstance>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <HAL_DFSDM_ChannelInit+0x174>)
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e09f      	b.n	8002fd0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fad9 	bl	8001448 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002e96:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <HAL_DFSDM_ChannelInit+0x178>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_DFSDM_ChannelInit+0x178>)
 8002e9e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_DFSDM_ChannelInit+0x178>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d125      	bne.n	8002ef4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eb2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4948      	ldr	r1, [pc, #288]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ec8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002ecc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002ed6:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	493f      	ldr	r1, [pc, #252]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ee8:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002f02:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f12:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f18:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 020f 	bic.w	r2, r2, #15
 8002f30:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002f58:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6899      	ldr	r1, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f002 0207 	and.w	r2, r2, #7
 8002f84:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fa14 	bl	80033ec <DFSDM_GetChannelFromInstance>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_DFSDM_ChannelInit+0x174>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20058130 	.word	0x20058130
 8002fdc:	2005812c 	.word	0x2005812c
 8002fe0:	40016000 	.word	0x40016000

08002fe4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0ca      	b.n	800318c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a66      	ldr	r2, [pc, #408]	; (8003194 <HAL_DFSDM_FilterInit+0x1b0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003004:	2b01      	cmp	r3, #1
 8003006:	d003      	beq.n	8003010 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0bb      	b.n	800318c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fe f95f 	bl	80012f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003040:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7a1b      	ldrb	r3, [r3, #8]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800306a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7a5b      	ldrb	r3, [r3, #9]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d108      	bne.n	8003086 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e007      	b.n	8003096 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030a4:	f023 0308 	bic.w	r3, r3, #8
 80030a8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d108      	bne.n	80030c4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7c1b      	ldrb	r3, [r3, #16]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0210 	orr.w	r2, r2, #16
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e007      	b.n	80030ee <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0210 	bic.w	r2, r2, #16
 80030ec:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7c5b      	ldrb	r3, [r3, #17]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0220 	bic.w	r2, r2, #32
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003126:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800312a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6959      	ldr	r1, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800313e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003146:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7c1a      	ldrb	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40016100 	.word	0x40016100

08003198 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d029      	beq.n	8003210 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10d      	bne.n	80031f2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e00a      	b.n	8003208 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
 800320e:	e001      	b.n	8003214 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003214:	7dfb      	ldrb	r3, [r7, #23]
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
 8003244:	e064      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003254:	d002      	beq.n	800325c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
 800325a:	e059      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
 8003280:	e046      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003298:	2b20      	cmp	r3, #32
 800329a:	d102      	bne.n	80032a2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
 80032a0:	e036      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d004      	beq.n	80032b6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d12a      	bne.n	800330c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d101      	bne.n	80032d4 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80032d2:	e000      	b.n	80032d6 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80032d4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	331c      	adds	r3, #28
 80032e6:	4619      	mov	r1, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f000 fa16 	bl	800371c <HAL_DMA_Start_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003302:	e005      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f8bd 	bl	8003484 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800330a:	e001      	b.n	8003310 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	080033ad 	.word	0x080033ad
 8003320:	080033c9 	.word	0x080033c9
 8003324:	08003391 	.word	0x08003391

08003328 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800333a:	2b02      	cmp	r3, #2
 800333c:	d007      	beq.n	800334e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003344:	2b04      	cmp	r3, #4
 8003346:	d002      	beq.n	800334e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e007      	b.n	800335e <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa5d 	bl	8003812 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8e9 	bl	8003530 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff ffe2 	bl	8003368 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7fd fb72 	bl	8000aa4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2203      	movs	r2, #3
 80033da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ffcd 	bl	800337c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <DFSDM_GetChannelFromInstance+0x7c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e02b      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <DFSDM_GetChannelFromInstance+0x80>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d102      	bne.n	8003410 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e024      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <DFSDM_GetChannelFromInstance+0x84>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d102      	bne.n	800341e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003418:	2302      	movs	r3, #2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e01d      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <DFSDM_GetChannelFromInstance+0x88>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d102      	bne.n	800342c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003426:	2304      	movs	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e016      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <DFSDM_GetChannelFromInstance+0x8c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003434:	2305      	movs	r3, #5
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e00f      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <DFSDM_GetChannelFromInstance+0x90>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d102      	bne.n	8003448 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003442:	2306      	movs	r3, #6
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e008      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <DFSDM_GetChannelFromInstance+0x94>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003450:	2307      	movs	r3, #7
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e001      	b.n	800345a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003456:	2303      	movs	r3, #3
 8003458:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40016000 	.word	0x40016000
 800346c:	40016020 	.word	0x40016020
 8003470:	40016040 	.word	0x40016040
 8003474:	40016080 	.word	0x40016080
 8003478:	400160a0 	.word	0x400160a0
 800347c:	400160c0 	.word	0x400160c0
 8003480:	400160e0 	.word	0x400160e0

08003484 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d108      	bne.n	80034a6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e033      	b.n	800350e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80034c4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d116      	bne.n	800350e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0202 	orr.w	r2, r2, #2
 80034f6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d102      	bne.n	8003508 <DFSDM_RegConvStart+0x84>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	e000      	b.n	800350a <DFSDM_RegConvStart+0x86>
 8003508:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <DFSDM_RegConvStart+0x98>
 8003518:	2202      	movs	r2, #2
 800351a:	e000      	b.n	800351e <DFSDM_RegConvStart+0x9a>
 800351c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003576:	2b04      	cmp	r3, #4
 8003578:	d116      	bne.n	80035a8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0202 	orr.w	r2, r2, #2
 8003590:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003598:	2b01      	cmp	r3, #1
 800359a:	d102      	bne.n	80035a2 <DFSDM_RegConvStop+0x72>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	e000      	b.n	80035a4 <DFSDM_RegConvStop+0x74>
 80035a2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d101      	bne.n	80035b6 <DFSDM_RegConvStop+0x86>
 80035b2:	2201      	movs	r2, #1
 80035b4:	e000      	b.n	80035b8 <DFSDM_RegConvStop+0x88>
 80035b6:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08d      	b.n	80036fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_DMA_Init+0x138>)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d80f      	bhi.n	800360a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <HAL_DMA_Init+0x13c>)
 80035f2:	4413      	add	r3, r2
 80035f4:	4a45      	ldr	r2, [pc, #276]	; (800370c <HAL_DMA_Init+0x140>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a42      	ldr	r2, [pc, #264]	; (8003710 <HAL_DMA_Init+0x144>)
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
 8003608:	e00e      	b.n	8003628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_DMA_Init+0x148>)
 8003612:	4413      	add	r3, r2
 8003614:	4a3d      	ldr	r2, [pc, #244]	; (800370c <HAL_DMA_Init+0x140>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <HAL_DMA_Init+0x14c>)
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa12 	bl	8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003688:	d102      	bne.n	8003690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_DMA_Init+0x104>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d80c      	bhi.n	80036d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa32 	bl	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e008      	b.n	80036e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020407 	.word	0x40020407
 8003708:	bffdfff8 	.word	0xbffdfff8
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	40020000 	.word	0x40020000
 8003714:	bffdfbf8 	.word	0xbffdfbf8
 8003718:	40020400 	.word	0x40020400

0800371c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_DMA_Start_IT+0x20>
 8003738:	2302      	movs	r3, #2
 800373a:	e066      	b.n	800380a <HAL_DMA_Start_IT+0xee>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d155      	bne.n	80037fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f957 	bl	8003a28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 020e 	orr.w	r2, r2, #14
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00f      	b.n	80037b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 020a 	orr.w	r2, r2, #10
 80037b2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e005      	b.n	8003808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d008      	beq.n	800383c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e040      	b.n	80038be <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020e 	bic.w	r2, r2, #14
 800384a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f003 021c 	and.w	r2, r3, #28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003888:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 031c 	and.w	r3, r3, #28
 80038ea:	2204      	movs	r2, #4
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d026      	beq.n	8003944 <HAL_DMA_IRQHandler+0x7a>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d021      	beq.n	8003944 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0204 	bic.w	r2, r2, #4
 800391c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 021c 	and.w	r2, r3, #28
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2104      	movs	r1, #4
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b00      	cmp	r3, #0
 8003938:	d071      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003942:	e06c      	b.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f003 031c 	and.w	r3, r3, #28
 800394c:	2202      	movs	r2, #2
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02e      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xec>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d029      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020a 	bic.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f003 021c 	and.w	r2, r3, #28
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2102      	movs	r1, #2
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d038      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039b4:	e033      	b.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f003 031c 	and.w	r3, r3, #28
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02a      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d025      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 020e 	bic.w	r2, r2, #14
 80039e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f003 021c 	and.w	r2, r3, #28
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
}
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a50:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f003 021c 	and.w	r2, r3, #28
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d108      	bne.n	8003a88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a86:	e007      	b.n	8003a98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d80a      	bhi.n	8003ace <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ac4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6493      	str	r3, [r2, #72]	; 0x48
 8003acc:	e007      	b.n	8003ade <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	009a      	lsls	r2, r3, #2
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3b08      	subs	r3, #8
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003af4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40020407 	.word	0x40020407
 8003b14:	4002081c 	.word	0x4002081c
 8003b18:	cccccccd 	.word	0xcccccccd
 8003b1c:	40020880 	.word	0x40020880

08003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	1000823f 	.word	0x1000823f
 8003b64:	40020940 	.word	0x40020940

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b76:	e166      	b.n	8003e46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8158 	beq.w	8003e40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d005      	beq.n	8003ba8 <HAL_GPIO_Init+0x40>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d130      	bne.n	8003c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bde:	2201      	movs	r2, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0201 	and.w	r2, r3, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d017      	beq.n	8003c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d123      	bne.n	8003c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	6939      	ldr	r1, [r7, #16]
 8003c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80b2 	beq.w	8003e40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	4a60      	ldr	r2, [pc, #384]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cf4:	4a5c      	ldr	r2, [pc, #368]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d1e:	d02b      	beq.n	8003d78 <HAL_GPIO_Init+0x210>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d025      	beq.n	8003d74 <HAL_GPIO_Init+0x20c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_GPIO_Init+0x308>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01f      	beq.n	8003d70 <HAL_GPIO_Init+0x208>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_GPIO_Init+0x30c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d019      	beq.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_GPIO_Init+0x310>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_GPIO_Init+0x200>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_GPIO_Init+0x314>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00d      	beq.n	8003d64 <HAL_GPIO_Init+0x1fc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_GPIO_Init+0x318>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <HAL_GPIO_Init+0x1f8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4c      	ldr	r2, [pc, #304]	; (8003e84 <HAL_GPIO_Init+0x31c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_GPIO_Init+0x1f4>
 8003d58:	2307      	movs	r3, #7
 8003d5a:	e00e      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	e00c      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d60:	2306      	movs	r3, #6
 8003d62:	e00a      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d64:	2305      	movs	r3, #5
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d8a:	4937      	ldr	r1, [pc, #220]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f ae91 	bne.w	8003b78 <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800
 8003e74:	48000c00 	.word	0x48000c00
 8003e78:	48001000 	.word	0x48001000
 8003e7c:	48001400 	.word	0x48001400
 8003e80:	48001800 	.word	0x48001800
 8003e84:	48001c00 	.word	0x48001c00
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e9c:	787b      	ldrb	r3, [r7, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43d9      	mvns	r1, r3
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	400b      	ands	r3, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	619a      	str	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fd1e 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d102      	bne.n	8003f38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	e00b      	b.n	8003f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d102      	bne.n	8003f4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f4c:	e000      	b.n	8003f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40007000 	.word	0x40007000

08003f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d141      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d131      	bne.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f82:	4a46      	ldr	r2, [pc, #280]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f94:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2232      	movs	r2, #50	; 0x32
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb2:	e002      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d102      	bne.n	8003fce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f2      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fce:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d158      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e057      	b.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ff0:	e04d      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d141      	bne.n	800407e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ffa:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d131      	bne.n	800406c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400e:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2232      	movs	r2, #50	; 0x32
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	0c9b      	lsrs	r3, r3, #18
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403e:	e002      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d102      	bne.n	800405a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f2      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d112      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e011      	b.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800407c:	e007      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40007000 	.word	0x40007000
 80040a0:	20000004 	.word	0x20000004
 80040a4:	431bde83 	.word	0x431bde83

080040a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f000 bc08 	b.w	80048cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040bc:	4b96      	ldr	r3, [pc, #600]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c6:	4b94      	ldr	r3, [pc, #592]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80e4 	beq.w	80042a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_RCC_OscConfig+0x4c>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	f040 808b 	bne.w	8004202 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	f040 8087 	bne.w	8004202 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f4:	4b88      	ldr	r3, [pc, #544]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_OscConfig+0x64>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e3df      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	4b81      	ldr	r3, [pc, #516]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_RCC_OscConfig+0x7e>
 800411c:	4b7e      	ldr	r3, [pc, #504]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	e005      	b.n	8004132 <HAL_RCC_OscConfig+0x8a>
 8004126:	4b7c      	ldr	r3, [pc, #496]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004132:	4293      	cmp	r3, r2
 8004134:	d223      	bcs.n	800417e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fda0 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e3c0      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414a:	4b73      	ldr	r3, [pc, #460]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a72      	ldr	r2, [pc, #456]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b70      	ldr	r3, [pc, #448]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	496d      	ldr	r1, [pc, #436]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004168:	4b6b      	ldr	r3, [pc, #428]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	4968      	ldr	r1, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	e025      	b.n	80041ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800417e:	4b66      	ldr	r3, [pc, #408]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004184:	f043 0308 	orr.w	r3, r3, #8
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4960      	ldr	r1, [pc, #384]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419c:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	495b      	ldr	r1, [pc, #364]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fd60 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e380      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ca:	f000 fcc1 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b51      	ldr	r3, [pc, #324]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	4950      	ldr	r1, [pc, #320]	; (800431c <HAL_RCC_OscConfig+0x274>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	4a4e      	ldr	r2, [pc, #312]	; (8004320 <HAL_RCC_OscConfig+0x278>)
 80041e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fd fa9c 	bl	800172c <HAL_InitTick>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d052      	beq.n	80042a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	e364      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d032      	beq.n	8004270 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800420a:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a42      	ldr	r2, [pc, #264]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004216:	f7fd fad9 	bl	80017cc <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800421e:	f7fd fad5 	bl	80017cc <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e34d      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004230:	4b39      	ldr	r3, [pc, #228]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a35      	ldr	r2, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004242:	f043 0308 	orr.w	r3, r3, #8
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4930      	ldr	r1, [pc, #192]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425a:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	492b      	ldr	r1, [pc, #172]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
 800426e:	e01a      	b.n	80042a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a28      	ldr	r2, [pc, #160]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427c:	f7fd faa6 	bl	80017cc <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004284:	f7fd faa2 	bl	80017cc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e31a      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1dc>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d073      	beq.n	800439a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_OscConfig+0x21c>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d10e      	bne.n	80042dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d10b      	bne.n	80042dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d063      	beq.n	8004398 <HAL_RCC_OscConfig+0x2f0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d15f      	bne.n	8004398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e2f7      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x24c>
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e025      	b.n	8004340 <HAL_RCC_OscConfig+0x298>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fc:	d114      	bne.n	8004328 <HAL_RCC_OscConfig+0x280>
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a02      	ldr	r2, [pc, #8]	; (8004318 <HAL_RCC_OscConfig+0x270>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e013      	b.n	8004340 <HAL_RCC_OscConfig+0x298>
 8004318:	40021000 	.word	0x40021000
 800431c:	08006258 	.word	0x08006258
 8004320:	20000004 	.word	0x20000004
 8004324:	20000008 	.word	0x20000008
 8004328:	4ba0      	ldr	r3, [pc, #640]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a9f      	ldr	r2, [pc, #636]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b9d      	ldr	r3, [pc, #628]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a9c      	ldr	r2, [pc, #624]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fa40 	bl	80017cc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd fa3c 	bl	80017cc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e2b4      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004362:	4b92      	ldr	r3, [pc, #584]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x2a8>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fa2c 	bl	80017cc <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fd fa28 	bl	80017cc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e2a0      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438a:	4b88      	ldr	r3, [pc, #544]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x2d0>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d060      	beq.n	8004468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_OscConfig+0x310>
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d119      	bne.n	80043e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d116      	bne.n	80043e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b8:	4b7c      	ldr	r3, [pc, #496]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_OscConfig+0x328>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e27d      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	4973      	ldr	r1, [pc, #460]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	e040      	b.n	8004468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d023      	beq.n	8004436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ee:	4b6f      	ldr	r3, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6e      	ldr	r2, [pc, #440]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd f9e7 	bl	80017cc <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004402:	f7fd f9e3 	bl	80017cc <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e25b      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004414:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	495f      	ldr	r1, [pc, #380]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
 8004434:	e018      	b.n	8004468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5c      	ldr	r2, [pc, #368]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd f9c3 	bl	80017cc <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444a:	f7fd f9bf 	bl	80017cc <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e237      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03c      	beq.n	80044ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004482:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fd f99e 	bl	80017cc <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fd f99a 	bl	80017cc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e212      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a6:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x3ec>
 80044b4:	e01b      	b.n	80044ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80044b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044bc:	4a3b      	ldr	r2, [pc, #236]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fd f981 	bl	80017cc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fd f97d 	bl	80017cc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1f5      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a6 	beq.w	8004648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	6593      	str	r3, [r2, #88]	; 0x58
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004528:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x508>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0x508>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0x508>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004540:	f7fd f944 	bl	80017cc <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fd f940 	bl	80017cc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1b8      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_RCC_OscConfig+0x508>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <HAL_RCC_OscConfig+0x4d8>
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800457e:	e029      	b.n	80045d4 <HAL_RCC_OscConfig+0x52c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b05      	cmp	r3, #5
 8004586:	d115      	bne.n	80045b4 <HAL_RCC_OscConfig+0x50c>
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	4a03      	ldr	r2, [pc, #12]	; (80045ac <HAL_RCC_OscConfig+0x504>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045a8:	e014      	b.n	80045d4 <HAL_RCC_OscConfig+0x52c>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
 80045b4:	4b9d      	ldr	r3, [pc, #628]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	4a9c      	ldr	r2, [pc, #624]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c4:	4b99      	ldr	r3, [pc, #612]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	4a98      	ldr	r2, [pc, #608]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd f8f6 	bl	80017cc <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fd f8f2 	bl	80017cc <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e168      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	4b8c      	ldr	r3, [pc, #560]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ed      	beq.n	80045e4 <HAL_RCC_OscConfig+0x53c>
 8004608:	e015      	b.n	8004636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd f8df 	bl	80017cc <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd f8db 	bl	80017cc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e151      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004628:	4b80      	ldr	r3, [pc, #512]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ed      	bne.n	8004612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	4a7a      	ldr	r2, [pc, #488]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d03c      	beq.n	80046ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01c      	beq.n	8004696 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800465c:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800465e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004662:	4a72      	ldr	r2, [pc, #456]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd f8ae 	bl	80017cc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004674:	f7fd f8aa 	bl	80017cc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e122      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004686:	4b69      	ldr	r3, [pc, #420]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ef      	beq.n	8004674 <HAL_RCC_OscConfig+0x5cc>
 8004694:	e01b      	b.n	80046ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469c:	4a63      	ldr	r2, [pc, #396]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fd f891 	bl	80017cc <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ae:	f7fd f88d 	bl	80017cc <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e105      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c0:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80046c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ef      	bne.n	80046ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80f9 	beq.w	80048ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f040 80cf 	bne.w	8004880 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e2:	4b52      	ldr	r3, [pc, #328]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f003 0203 	and.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d12c      	bne.n	8004750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	3b01      	subs	r3, #1
 8004702:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d123      	bne.n	8004750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d11b      	bne.n	8004750 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d113      	bne.n	8004750 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	3b01      	subs	r3, #1
 8004736:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d109      	bne.n	8004750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d071      	beq.n	8004834 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d068      	beq.n	8004828 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004756:	4b35      	ldr	r3, [pc, #212]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004762:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0ac      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_RCC_OscConfig+0x784>)
 8004778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800477e:	f7fd f825 	bl	80017cc <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd f821 	bl	80017cc <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e099      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	4b24      	ldr	r3, [pc, #144]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x788>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047b4:	3a01      	subs	r2, #1
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047be:	0212      	lsls	r2, r2, #8
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0552      	lsls	r2, r2, #21
 80047cc:	4311      	orrs	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047d2:	0852      	lsrs	r2, r2, #1
 80047d4:	3a01      	subs	r2, #1
 80047d6:	0652      	lsls	r2, r2, #25
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047de:	06d2      	lsls	r2, r2, #27
 80047e0:	430a      	orrs	r2, r1
 80047e2:	4912      	ldr	r1, [pc, #72]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0f      	ldr	r2, [pc, #60]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a0c      	ldr	r2, [pc, #48]	; (800482c <HAL_RCC_OscConfig+0x784>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004800:	f7fc ffe4 	bl	80017cc <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fc ffe0 	bl	80017cc <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e058      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481a:	4b04      	ldr	r3, [pc, #16]	; (800482c <HAL_RCC_OscConfig+0x784>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004826:	e050      	b.n	80048ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e04f      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
 800482c:	40021000 	.word	0x40021000
 8004830:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d144      	bne.n	80048ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004858:	f7fc ffb8 	bl	80017cc <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fc ffb4 	bl	80017cc <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e02c      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x7b8>
 800487e:	e024      	b.n	80048ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d01f      	beq.n	80048c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 800488c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc ff9b 	bl	80017cc <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7fc ff97 	bl	80017cc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4905      	ldr	r1, [pc, #20]	; (80048d4 <HAL_RCC_OscConfig+0x82c>)
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_OscConfig+0x830>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
 80048c4:	e001      	b.n	80048ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	feeefffc 	.word	0xfeeefffc

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e11d      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b90      	ldr	r3, [pc, #576]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d910      	bls.n	8004924 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b8d      	ldr	r3, [pc, #564]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 020f 	bic.w	r2, r3, #15
 800490a:	498b      	ldr	r1, [pc, #556]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e105      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b81      	ldr	r3, [pc, #516]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800493c:	429a      	cmp	r2, r3
 800493e:	d908      	bls.n	8004952 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004940:	4b7e      	ldr	r3, [pc, #504]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	497b      	ldr	r1, [pc, #492]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d079      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d11e      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	4b75      	ldr	r3, [pc, #468]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0dc      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004976:	f000 f9dd 	bl	8004d34 <RCC_GetSysClockFreqFromPLLSource>
 800497a:	4603      	mov	r3, r0
 800497c:	4a70      	ldr	r2, [pc, #448]	; (8004b40 <HAL_RCC_ClockConfig+0x264>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d946      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004982:	4b6e      	ldr	r3, [pc, #440]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d140      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800498e:	4b6b      	ldr	r3, [pc, #428]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004996:	4a69      	ldr	r2, [pc, #420]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e035      	b.n	8004a10 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ac:	4b63      	ldr	r3, [pc, #396]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d115      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0b9      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c4:	4b5d      	ldr	r3, [pc, #372]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0ad      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d4:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0a5      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80049e4:	f000 f8b4 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_RCC_ClockConfig+0x264>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d90f      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049fc:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a04:	4a4d      	ldr	r2, [pc, #308]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a10:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 0203 	bic.w	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4947      	ldr	r1, [pc, #284]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fc fed3 	bl	80017cc <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2a:	f7fc fecf 	bl	80017cc <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e077      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 020c 	and.w	r2, r3, #12
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d1eb      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b80      	cmp	r3, #128	; 0x80
 8004a56:	d105      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a58:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d208      	bcs.n	8004a92 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	492b      	ldr	r1, [pc, #172]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d210      	bcs.n	8004ac2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 020f 	bic.w	r2, r3, #15
 8004aa8:	4923      	ldr	r1, [pc, #140]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <HAL_RCC_ClockConfig+0x25c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e036      	b.n	8004b30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4918      	ldr	r1, [pc, #96]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4910      	ldr	r1, [pc, #64]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b00:	f000 f826 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_ClockConfig+0x260>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	490c      	ldr	r1, [pc, #48]	; (8004b44 <HAL_RCC_ClockConfig+0x268>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x26c>)
 8004b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_RCC_ClockConfig+0x270>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc fe01 	bl	800172c <HAL_InitTick>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	04c4b400 	.word	0x04c4b400
 8004b44:	08006258 	.word	0x08006258
 8004b48:	20000004 	.word	0x20000004
 8004b4c:	20000008 	.word	0x20000008

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x34>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d11e      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10d      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d102      	bne.n	8004bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e004      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd4:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d134      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0xac>
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf8:	617b      	str	r3, [r7, #20]
      break;
 8004bfa:	e005      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bfe:	617b      	str	r3, [r7, #20]
      break;
 8004c00:	e002      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	617b      	str	r3, [r7, #20]
      break;
 8004c06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3301      	adds	r3, #1
 8004c14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	fb03 f202 	mul.w	r2, r3, r2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	0e5b      	lsrs	r3, r3, #25
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	3301      	adds	r3, #1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c48:	69bb      	ldr	r3, [r7, #24]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3724      	adds	r7, #36	; 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	08006268 	.word	0x08006268
 8004c60:	00f42400 	.word	0x00f42400
 8004c64:	007a1200 	.word	0x007a1200

08004c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000004 	.word	0x20000004

08004c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c98:	f7ff f942 	bl	8003f20 <HAL_PWREx_GetVoltageRange>
 8004c9c:	6178      	str	r0, [r7, #20]
 8004c9e:	e014      	b.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ca0:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cb8:	f7ff f932 	bl	8003f20 <HAL_PWREx_GetVoltageRange>
 8004cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d10b      	bne.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d913      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2ba0      	cmp	r3, #160	; 0xa0
 8004cdc:	d902      	bls.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cde:	2302      	movs	r3, #2
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e00d      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e00a      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b7f      	cmp	r3, #127	; 0x7f
 8004cee:	d902      	bls.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e004      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b70      	cmp	r3, #112	; 0x70
 8004cfa:	d101      	bne.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 020f 	bic.w	r2, r3, #15
 8004d08:	4909      	ldr	r1, [pc, #36]	; (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40022000 	.word	0x40022000

08004d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d00b      	beq.n	8004d62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d825      	bhi.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d008      	beq.n	8004d68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d11f      	bne.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d5e:	613b      	str	r3, [r7, #16]
    break;
 8004d60:	e01f      	b.n	8004da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d62:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d64:	613b      	str	r3, [r7, #16]
    break;
 8004d66:	e01c      	b.n	8004da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d107      	bne.n	8004d84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e005      	b.n	8004d90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d84:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d90:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d98:	613b      	str	r3, [r7, #16]
    break;
 8004d9a:	e002      	b.n	8004da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
    break;
 8004da0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	3301      	adds	r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	fb03 f202 	mul.w	r2, r3, r2
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	0e5b      	lsrs	r3, r3, #25
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004de2:	683b      	ldr	r3, [r7, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40021000 	.word	0x40021000
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	007a1200 	.word	0x007a1200
 8004dfc:	08006268 	.word	0x08006268

08004e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d040      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d02a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e24:	2b80      	cmp	r3, #128	; 0x80
 8004e26:	d825      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e28:	2b60      	cmp	r3, #96	; 0x60
 8004e2a:	d026      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d821      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d006      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d81d      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e40:	e018      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e42:	4b89      	ldr	r3, [pc, #548]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4a88      	ldr	r2, [pc, #544]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e4e:	e015      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb02 	bl	8005460 <RCCEx_PLLSAI1_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e60:	e00c      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3320      	adds	r3, #32
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fbed 	bl	8005648 <RCCEx_PLLSAI2_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e72:	e003      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	74fb      	strb	r3, [r7, #19]
      break;
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e82:	4b79      	ldr	r3, [pc, #484]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	4975      	ldr	r1, [pc, #468]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e98:	e001      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d047      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d030      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb8:	d82a      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ebe:	d02a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec4:	d824      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eca:	d008      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed0:	d81e      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d010      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004edc:	e018      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ede:	4b62      	ldr	r3, [pc, #392]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4a61      	ldr	r2, [pc, #388]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eea:	e015      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fab4 	bl	8005460 <RCCEx_PLLSAI1_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004efc:	e00c      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3320      	adds	r3, #32
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fb9f 	bl	8005648 <RCCEx_PLLSAI2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	74fb      	strb	r3, [r7, #19]
      break;
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f1e:	4b52      	ldr	r3, [pc, #328]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	494e      	ldr	r1, [pc, #312]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f34:	e001      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 809f 	beq.w	8005086 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f4c:	4b46      	ldr	r3, [pc, #280]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f8a:	f7fc fc1f 	bl	80017cc <HAL_GetTick>
 8004f8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f90:	e009      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fc fc1b 	bl	80017cc <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d902      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	74fb      	strb	r3, [r7, #19]
        break;
 8004fa4:	e005      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fa6:	4b31      	ldr	r3, [pc, #196]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ef      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d15b      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fb8:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01f      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d019      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fd6:	4b24      	ldr	r3, [pc, #144]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe2:	4b21      	ldr	r3, [pc, #132]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005002:	4a19      	ldr	r2, [pc, #100]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc fbda 	bl	80017cc <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501a:	e00b      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fc fbd6 	bl	80017cc <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d902      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	74fb      	strb	r3, [r7, #19]
            break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ec      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10c      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	4903      	ldr	r1, [pc, #12]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005060:	e008      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	74bb      	strb	r3, [r7, #18]
 8005066:	e005      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005068:	40021000 	.word	0x40021000
 800506c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005074:	7c7b      	ldrb	r3, [r7, #17]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507a:	4ba0      	ldr	r3, [pc, #640]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	4a9f      	ldr	r2, [pc, #636]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005092:	4b9a      	ldr	r3, [pc, #616]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f023 0203 	bic.w	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	4996      	ldr	r1, [pc, #600]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050b4:	4b91      	ldr	r3, [pc, #580]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f023 020c 	bic.w	r2, r3, #12
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	498e      	ldr	r1, [pc, #568]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050d6:	4b89      	ldr	r3, [pc, #548]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	4985      	ldr	r1, [pc, #532]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050f8:	4b80      	ldr	r3, [pc, #512]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	497d      	ldr	r1, [pc, #500]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800511a:	4b78      	ldr	r3, [pc, #480]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	4974      	ldr	r1, [pc, #464]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513c:	4b6f      	ldr	r3, [pc, #444]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	496c      	ldr	r1, [pc, #432]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516c:	4963      	ldr	r1, [pc, #396]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005180:	4b5e      	ldr	r3, [pc, #376]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518e:	495b      	ldr	r1, [pc, #364]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a2:	4b56      	ldr	r3, [pc, #344]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	4952      	ldr	r1, [pc, #328]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	494a      	ldr	r1, [pc, #296]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e6:	4b45      	ldr	r3, [pc, #276]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	4941      	ldr	r1, [pc, #260]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005208:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005216:	4939      	ldr	r1, [pc, #228]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d028      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005238:	4930      	ldr	r1, [pc, #192]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005248:	d106      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005254:	60d3      	str	r3, [r2, #12]
 8005256:	e011      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005260:	d10c      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2101      	movs	r1, #1
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f8f9 	bl	8005460 <RCCEx_PLLSAI1_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d04d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005290:	d108      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800529e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052a2:	e012      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052aa:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052b4:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c2:	490e      	ldr	r1, [pc, #56]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d2:	d106      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e020      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ea:	d109      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a02      	ldr	r2, [pc, #8]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f6:	60d3      	str	r3, [r2, #12]
 80052f8:	e014      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f8a5 	bl	8005460 <RCCEx_PLLSAI1_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d028      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005330:	4b4a      	ldr	r3, [pc, #296]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533e:	4947      	ldr	r1, [pc, #284]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534e:	d106      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b42      	ldr	r3, [pc, #264]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a41      	ldr	r2, [pc, #260]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	60d3      	str	r3, [r2, #12]
 800535c:	e011      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005366:	d10c      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f876 	bl	8005460 <RCCEx_PLLSAI1_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01e      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800538e:	4b33      	ldr	r3, [pc, #204]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539e:	492f      	ldr	r1, [pc, #188]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2102      	movs	r1, #2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f851 	bl	8005460 <RCCEx_PLLSAI1_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053de:	f023 0204 	bic.w	r2, r3, #4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e8:	491c      	ldr	r1, [pc, #112]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	f023 0218 	bic.w	r2, r3, #24
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	4913      	ldr	r1, [pc, #76]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d017      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	490a      	ldr	r1, [pc, #40]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005450:	7cbb      	ldrb	r3, [r7, #18]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000

08005460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800547a:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0203 	and.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d103      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
       ||
 800548e:	2b00      	cmp	r3, #0
 8005490:	d142      	bne.n	8005518 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
 8005496:	e03f      	b.n	8005518 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d018      	beq.n	80054d2 <RCCEx_PLLSAI1_Config+0x72>
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d825      	bhi.n	80054f0 <RCCEx_PLLSAI1_Config+0x90>
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d002      	beq.n	80054ae <RCCEx_PLLSAI1_Config+0x4e>
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d009      	beq.n	80054c0 <RCCEx_PLLSAI1_Config+0x60>
 80054ac:	e020      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ae:	4b62      	ldr	r3, [pc, #392]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d11d      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054be:	e01a      	b.n	80054f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c0:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d116      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d0:	e013      	b.n	80054fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054d2:	4b59      	ldr	r3, [pc, #356]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ee:	e006      	b.n	80054fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      break;
 80054f4:	e004      	b.n	8005500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d108      	bne.n	8005518 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005506:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4949      	ldr	r1, [pc, #292]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 8086 	bne.w	800562c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a44      	ldr	r2, [pc, #272]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552c:	f7fc f94e 	bl	80017cc <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005534:	f7fc f94a 	bl	80017cc <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
        break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ef      	bne.n	8005534 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d168      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d113      	bne.n	8005588 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005560:	4b35      	ldr	r3, [pc, #212]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	4b35      	ldr	r3, [pc, #212]	; (800563c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005566:	4013      	ands	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6892      	ldr	r2, [r2, #8]
 800556c:	0211      	lsls	r1, r2, #8
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	06d2      	lsls	r2, r2, #27
 8005574:	4311      	orrs	r1, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6852      	ldr	r2, [r2, #4]
 800557a:	3a01      	subs	r2, #1
 800557c:	0112      	lsls	r2, r2, #4
 800557e:	430a      	orrs	r2, r1
 8005580:	492d      	ldr	r1, [pc, #180]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
 8005586:	e02d      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d115      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558e:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6892      	ldr	r2, [r2, #8]
 800559a:	0211      	lsls	r1, r2, #8
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6912      	ldr	r2, [r2, #16]
 80055a0:	0852      	lsrs	r2, r2, #1
 80055a2:	3a01      	subs	r2, #1
 80055a4:	0552      	lsls	r2, r2, #21
 80055a6:	4311      	orrs	r1, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	430a      	orrs	r2, r1
 80055b2:	4921      	ldr	r1, [pc, #132]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
 80055b8:	e014      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ba:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	4b21      	ldr	r3, [pc, #132]	; (8005644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6892      	ldr	r2, [r2, #8]
 80055c6:	0211      	lsls	r1, r2, #8
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6952      	ldr	r2, [r2, #20]
 80055cc:	0852      	lsrs	r2, r2, #1
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0652      	lsls	r2, r2, #25
 80055d2:	4311      	orrs	r1, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6852      	ldr	r2, [r2, #4]
 80055d8:	3a01      	subs	r2, #1
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	430a      	orrs	r2, r1
 80055de:	4916      	ldr	r1, [pc, #88]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fc f8ec 	bl	80017cc <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f8:	f7fc f8e8 	bl	80017cc <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
          break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	07ff800f 	.word	0x07ff800f
 8005640:	ff9f800f 	.word	0xff9f800f
 8005644:	f9ff800f 	.word	0xf9ff800f

08005648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005656:	4b72      	ldr	r3, [pc, #456]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005662:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d103      	bne.n	800567a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
       ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d142      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
 800567e:	e03f      	b.n	8005700 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d018      	beq.n	80056ba <RCCEx_PLLSAI2_Config+0x72>
 8005688:	2b03      	cmp	r3, #3
 800568a:	d825      	bhi.n	80056d8 <RCCEx_PLLSAI2_Config+0x90>
 800568c:	2b01      	cmp	r3, #1
 800568e:	d002      	beq.n	8005696 <RCCEx_PLLSAI2_Config+0x4e>
 8005690:	2b02      	cmp	r3, #2
 8005692:	d009      	beq.n	80056a8 <RCCEx_PLLSAI2_Config+0x60>
 8005694:	e020      	b.n	80056d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005696:	4b62      	ldr	r3, [pc, #392]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11d      	bne.n	80056de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a6:	e01a      	b.n	80056de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a8:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b8:	e013      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ba:	4b59      	ldr	r3, [pc, #356]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10f      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056c6:	4b56      	ldr	r3, [pc, #344]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056d6:	e006      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	e004      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80056ee:	4b4c      	ldr	r3, [pc, #304]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 0203 	bic.w	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4949      	ldr	r1, [pc, #292]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 8086 	bne.w	8005814 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005708:	4b45      	ldr	r3, [pc, #276]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a44      	ldr	r2, [pc, #272]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005714:	f7fc f85a 	bl	80017cc <HAL_GetTick>
 8005718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800571a:	e009      	b.n	8005730 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800571c:	f7fc f856 	bl	80017cc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d902      	bls.n	8005730 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	73fb      	strb	r3, [r7, #15]
        break;
 800572e:	e005      	b.n	800573c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005730:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ef      	bne.n	800571c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d168      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d113      	bne.n	8005770 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005748:	4b35      	ldr	r3, [pc, #212]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	4b35      	ldr	r3, [pc, #212]	; (8005824 <RCCEx_PLLSAI2_Config+0x1dc>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6892      	ldr	r2, [r2, #8]
 8005754:	0211      	lsls	r1, r2, #8
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68d2      	ldr	r2, [r2, #12]
 800575a:	06d2      	lsls	r2, r2, #27
 800575c:	4311      	orrs	r1, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6852      	ldr	r2, [r2, #4]
 8005762:	3a01      	subs	r2, #1
 8005764:	0112      	lsls	r2, r2, #4
 8005766:	430a      	orrs	r2, r1
 8005768:	492d      	ldr	r1, [pc, #180]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	614b      	str	r3, [r1, #20]
 800576e:	e02d      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d115      	bne.n	80057a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <RCCEx_PLLSAI2_Config+0x1e0>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6912      	ldr	r2, [r2, #16]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0552      	lsls	r2, r2, #21
 800578e:	4311      	orrs	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6852      	ldr	r2, [r2, #4]
 8005794:	3a01      	subs	r2, #1
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	430a      	orrs	r2, r1
 800579a:	4921      	ldr	r1, [pc, #132]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	614b      	str	r3, [r1, #20]
 80057a0:	e014      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <RCCEx_PLLSAI2_Config+0x1e4>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6892      	ldr	r2, [r2, #8]
 80057ae:	0211      	lsls	r1, r2, #8
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6952      	ldr	r2, [r2, #20]
 80057b4:	0852      	lsrs	r2, r2, #1
 80057b6:	3a01      	subs	r2, #1
 80057b8:	0652      	lsls	r2, r2, #25
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6852      	ldr	r2, [r2, #4]
 80057c0:	3a01      	subs	r2, #1
 80057c2:	0112      	lsls	r2, r2, #4
 80057c4:	430a      	orrs	r2, r1
 80057c6:	4916      	ldr	r1, [pc, #88]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fb fff8 	bl	80017cc <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057de:	e009      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e0:	f7fb fff4 	bl	80017cc <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	73fb      	strb	r3, [r7, #15]
          break;
 80057f2:	e005      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4904      	ldr	r1, [pc, #16]	; (8005820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	07ff800f 	.word	0x07ff800f
 8005828:	ff9f800f 	.word	0xff9f800f
 800582c:	f9ff800f 	.word	0xf9ff800f

08005830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e049      	b.n	80058d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fe66 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 fa9a 	bl	8005da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a23      	ldr	r2, [pc, #140]	; (80059a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01d      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005922:	d018      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIM_Base_Start_IT+0x76>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d115      	bne.n	8005982 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_TIM_Base_Start_IT+0xdc>)
 800595e:	4013      	ands	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d015      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d011      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	e008      	b.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e000      	b.n	8005996 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	00010007 	.word	0x00010007

080059c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d020      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0202 	mvn.w	r2, #2
 80059f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9ad 	bl	8005d6a <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f99f 	bl	8005d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f9b0 	bl	8005d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0204 	mvn.w	r2, #4
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f987 	bl	8005d6a <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f979 	bl	8005d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f98a 	bl	8005d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d020      	beq.n	8005abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0208 	mvn.w	r2, #8
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2204      	movs	r2, #4
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f961 	bl	8005d6a <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f953 	bl	8005d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f964 	bl	8005d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0210 	mvn.w	r2, #16
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2208      	movs	r2, #8
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f93b 	bl	8005d6a <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f92d 	bl	8005d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f93e 	bl	8005d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0201 	mvn.w	r2, #1
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fa fe6e 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 faf2 	bl	8006134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00c      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 faea 	bl	8006148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f8fd 	bl	8005d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0220 	mvn.w	r2, #32
 8005bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fab2 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0b6      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x18a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d03e      	beq.n	8005c9c <HAL_TIM_ConfigClockSource+0xd8>
 8005c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c22:	f200 8087 	bhi.w	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	f000 8086 	beq.w	8005d3a <HAL_TIM_ConfigClockSource+0x176>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	d87f      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c34:	2b70      	cmp	r3, #112	; 0x70
 8005c36:	d01a      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0xaa>
 8005c38:	2b70      	cmp	r3, #112	; 0x70
 8005c3a:	d87b      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c3c:	2b60      	cmp	r3, #96	; 0x60
 8005c3e:	d050      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x11e>
 8005c40:	2b60      	cmp	r3, #96	; 0x60
 8005c42:	d877      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c44:	2b50      	cmp	r3, #80	; 0x50
 8005c46:	d03c      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0xfe>
 8005c48:	2b50      	cmp	r3, #80	; 0x50
 8005c4a:	d873      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d058      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x13e>
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d86f      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	d064      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x15e>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d86b      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d060      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x15e>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d867      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05c      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x15e>
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d05a      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x15e>
 8005c6c:	e062      	b.n	8005d34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c7e:	f000 f9a7 	bl	8005fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	609a      	str	r2, [r3, #8]
      break;
 8005c9a:	e04f      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cac:	f000 f990 	bl	8005fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cbe:	609a      	str	r2, [r3, #8]
      break;
 8005cc0:	e03c      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 f904 	bl	8005edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2150      	movs	r1, #80	; 0x50
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f95d 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e02c      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f923 	bl	8005f3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2160      	movs	r1, #96	; 0x60
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f94d 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005d00:	e01c      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f8e4 	bl	8005edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f93d 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005d20:	e00c      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f000 f934 	bl	8005f9a <TIM_ITRx_SetConfig>
      break;
 8005d32:	e003      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
      break;
 8005d38:	e000      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a40      	ldr	r2, [pc, #256]	; (8005ebc <TIM_Base_SetConfig+0x114>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d013      	beq.n	8005de8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d00f      	beq.n	8005de8 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3d      	ldr	r2, [pc, #244]	; (8005ec0 <TIM_Base_SetConfig+0x118>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00b      	beq.n	8005de8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <TIM_Base_SetConfig+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d007      	beq.n	8005de8 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a3b      	ldr	r2, [pc, #236]	; (8005ec8 <TIM_Base_SetConfig+0x120>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <TIM_Base_SetConfig+0x124>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d108      	bne.n	8005dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	; (8005ebc <TIM_Base_SetConfig+0x114>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d01f      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e08:	d01b      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2c      	ldr	r2, [pc, #176]	; (8005ec0 <TIM_Base_SetConfig+0x118>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d017      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2b      	ldr	r2, [pc, #172]	; (8005ec4 <TIM_Base_SetConfig+0x11c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2a      	ldr	r2, [pc, #168]	; (8005ec8 <TIM_Base_SetConfig+0x120>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00f      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a29      	ldr	r2, [pc, #164]	; (8005ecc <TIM_Base_SetConfig+0x124>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00b      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a28      	ldr	r2, [pc, #160]	; (8005ed0 <TIM_Base_SetConfig+0x128>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <TIM_Base_SetConfig+0x12c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <TIM_Base_SetConfig+0x130>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d108      	bne.n	8005e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <TIM_Base_SetConfig+0x114>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00f      	beq.n	8005ea0 <TIM_Base_SetConfig+0xf8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <TIM_Base_SetConfig+0x124>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <TIM_Base_SetConfig+0xf8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a11      	ldr	r2, [pc, #68]	; (8005ed0 <TIM_Base_SetConfig+0x128>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_Base_SetConfig+0xf8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <TIM_Base_SetConfig+0x12c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_Base_SetConfig+0xf8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ed8 <TIM_Base_SetConfig+0x130>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d103      	bne.n	8005ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	615a      	str	r2, [r3, #20]
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f023 0201 	bic.w	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f023 030a 	bic.w	r3, r3, #10
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f023 0210 	bic.w	r2, r3, #16
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	031b      	lsls	r3, r3, #12
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f043 0307 	orr.w	r3, r3, #7
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	021a      	lsls	r2, r3, #8
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	609a      	str	r2, [r3, #8]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e068      	b.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2e      	ldr	r2, [pc, #184]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2d      	ldr	r2, [pc, #180]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d018      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a13      	ldr	r2, [pc, #76]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a14      	ldr	r2, [pc, #80]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d10c      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40014000 	.word	0x40014000

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <arm_sin_f32>:
 800615c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80061dc <arm_sin_f32+0x80>
 8006160:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006164:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006170:	d504      	bpl.n	800617c <arm_sin_f32+0x20>
 8006172:	ee17 3a90 	vmov	r3, s15
 8006176:	3b01      	subs	r3, #1
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006180:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80061e0 <arm_sin_f32+0x84>
 8006184:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006188:	ee20 0a07 	vmul.f32	s0, s0, s14
 800618c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006190:	ee17 3a90 	vmov	r3, s15
 8006194:	b29b      	uxth	r3, r3
 8006196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619a:	d21a      	bcs.n	80061d2 <arm_sin_f32+0x76>
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061aa:	4a0e      	ldr	r2, [pc, #56]	; (80061e4 <arm_sin_f32+0x88>)
 80061ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80061b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80061b8:	ed93 7a00 	vldr	s14, [r3]
 80061bc:	edd2 6a00 	vldr	s13, [r2]
 80061c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80061c4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80061c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80061d0:	4770      	bx	lr
 80061d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061d6:	2101      	movs	r1, #1
 80061d8:	2300      	movs	r3, #0
 80061da:	e7e6      	b.n	80061aa <arm_sin_f32+0x4e>
 80061dc:	3e22f983 	.word	0x3e22f983
 80061e0:	44000000 	.word	0x44000000
 80061e4:	08006298 	.word	0x08006298

080061e8 <memset>:
 80061e8:	4402      	add	r2, r0
 80061ea:	4603      	mov	r3, r0
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d100      	bne.n	80061f2 <memset+0xa>
 80061f0:	4770      	bx	lr
 80061f2:	f803 1b01 	strb.w	r1, [r3], #1
 80061f6:	e7f9      	b.n	80061ec <memset+0x4>

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4d0d      	ldr	r5, [pc, #52]	; (8006230 <__libc_init_array+0x38>)
 80061fc:	4c0d      	ldr	r4, [pc, #52]	; (8006234 <__libc_init_array+0x3c>)
 80061fe:	1b64      	subs	r4, r4, r5
 8006200:	10a4      	asrs	r4, r4, #2
 8006202:	2600      	movs	r6, #0
 8006204:	42a6      	cmp	r6, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	4d0b      	ldr	r5, [pc, #44]	; (8006238 <__libc_init_array+0x40>)
 800620a:	4c0c      	ldr	r4, [pc, #48]	; (800623c <__libc_init_array+0x44>)
 800620c:	f000 f818 	bl	8006240 <_init>
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	2600      	movs	r6, #0
 8006216:	42a6      	cmp	r6, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006220:	4798      	blx	r3
 8006222:	3601      	adds	r6, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f855 3b04 	ldr.w	r3, [r5], #4
 800622a:	4798      	blx	r3
 800622c:	3601      	adds	r6, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	08006a9c 	.word	0x08006a9c
 8006234:	08006a9c 	.word	0x08006a9c
 8006238:	08006a9c 	.word	0x08006a9c
 800623c:	08006aa0 	.word	0x08006aa0

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
