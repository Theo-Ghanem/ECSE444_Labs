
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080069d0  080069d0  000169d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be8  08006be8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006be8  08006be8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006be8  08006be8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  20000010  08006bfc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021b4  08006bfc  000221b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128f9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024fd  00000000  00000000  00032978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e44  00000000  00000000  000360f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c568  00000000  00000000  00036f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b3d  00000000  00000000  0006349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001195ac  00000000  00000000  00076fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052c8  00000000  00000000  00190588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00195850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080069b8 	.word	0x080069b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080069b8 	.word	0x080069b8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_DFSDM1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4c:	d104      	bne.n	8000b58 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Toggle the LED state
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b54:	f002 fd72 	bl	800363c <HAL_GPIO_TogglePin>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	48000400 	.word	0x48000400

08000b64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d11b      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sineWave[noteIndex]);
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	4610      	mov	r0, r2
 8000b84:	4619      	mov	r1, r3
 8000b86:	f7ff ffb9 	bl	8000afc <__aeabi_d2uiz>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b92:	f001 fe52 	bl	800283a <HAL_DAC_SetValue>
		noteIndex = (noteIndex + 1) % 256;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	425a      	negs	r2, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	bf58      	it	pl
 8000ba4:	4253      	negpl	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000baa:	801a      	strh	r2, [r3, #0]
	}
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20002138 	.word	0x20002138
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	20001fd8 	.word	0x20001fd8
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


    for (int i = 0; i < NUM_SAMPLES; ++i) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e027      	b.n	8000c24 <main+0x5c>
    	sineWave[i] = AMPLITUDE * sin(2.0 * M_PI * FREQUENCY * i / SAMPLING_RATE);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fc65 	bl	80004a4 <__aeabi_i2d>
 8000bda:	a31f      	add	r3, pc, #124	; (adr r3, 8000c58 <main+0x90>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fcca 	bl	8000578 <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <main+0x88>)
 8000bf2:	f7ff fdeb 	bl	80007cc <__aeabi_ddiv>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	ec43 2b17 	vmov	d7, r2, r3
 8000bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8000c02:	eef0 0a67 	vmov.f32	s1, s15
 8000c06:	f004 fe97 	bl	8005938 <sin>
 8000c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8000c0e:	eef0 7a60 	vmov.f32	s15, s1
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <main+0x8c>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < NUM_SAMPLES; ++i) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2a:	dbd3      	blt.n	8000bd4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 fd57 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f816 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 f9f8 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c38:	f000 f9c4 	bl	8000fc4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c3c:	f000 f8d8 	bl	8000df0 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000c40:	f000 f860 	bl	8000d04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c44:	f000 f96e 	bl	8000f24 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000c48:	f000 f906 	bl	8000e58 <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <main+0x84>
 8000c4e:	bf00      	nop
 8000c50:	408f4000 	.word	0x408f4000
 8000c54:	20000030 	.word	0x20000030
 8000c58:	704a9409 	.word	0x704a9409
 8000c5c:	40b88b2f 	.word	0x40b88b2f

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b096      	sub	sp, #88	; 0x58
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2244      	movs	r2, #68	; 0x44
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fe34 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000c82:	2000      	movs	r0, #0
 8000c84:	f002 fd2c 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000c8e:	f000 fa3b 	bl	8001108 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c92:	2310      	movs	r3, #16
 8000c94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c9e:	2360      	movs	r3, #96	; 0x60
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cae:	233c      	movs	r3, #60	; 0x3c
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fdb0 	bl	8003828 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cce:	f000 fa1b 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2105      	movs	r1, #5
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 f9b6 	bl	800405c <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cf6:	f000 fa07 	bl	8001108 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3758      	adds	r7, #88	; 0x58
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <MX_ADC1_Init+0xe0>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000d82:	f000 fee5 	bl	8001b50 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f9bc 	bl	8001108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_ADC1_Init+0xe4>)
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d94:	2306      	movs	r3, #6
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d9c:	237f      	movs	r3, #127	; 0x7f
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da0:	2304      	movs	r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000dae:	f001 f815 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000db8:	f000 f9a6 	bl	8001108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_ADC1_Init+0xe8>)
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_ADC1_Init+0xdc>)
 8000dca:	f001 f807 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000dd4:	f000 f998 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20001f70 	.word	0x20001f70
 8000de4:	50040000 	.word	0x50040000
 8000de8:	80000001 	.word	0x80000001
 8000dec:	c7520000 	.word	0xc7520000

08000df0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2228      	movs	r2, #40	; 0x28
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fd6d 	bl	80058dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_DAC1_Init+0x60>)
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <MX_DAC1_Init+0x64>)
 8000e06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_DAC1_Init+0x60>)
 8000e0a:	f001 fcf4 	bl	80027f6 <HAL_DAC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e14:	f000 f978 	bl	8001108 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_DAC1_Init+0x60>)
 8000e3a:	f001 fd23 	bl	8002884 <HAL_DAC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 f960 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20001fd8 	.word	0x20001fd8
 8000e54:	40007400 	.word	0x40007400

08000e58 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <MX_DFSDM1_Init+0xbc>)
 8000e60:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e76:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e7a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 54;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e7e:	2236      	movs	r2, #54	; 0x36
 8000e80:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000e88:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000e8a:	f001 ff07 	bl	8002c9c <HAL_DFSDM_FilterInit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000e94:	f000 f938 	bl	8001108 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <MX_DFSDM1_Init+0xc4>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000eac:	2222      	movs	r2, #34	; 0x22
 8000eae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_DFSDM1_Init+0xc0>)
 8000ee8:	f001 fe18 	bl	8002b1c <HAL_DFSDM_ChannelInit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000ef2:	f000 f909 	bl	8001108 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4909      	ldr	r1, [pc, #36]	; (8000f20 <MX_DFSDM1_Init+0xc8>)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_DFSDM1_Init+0xb8>)
 8000efc:	f001 ffa8 	bl	8002e50 <HAL_DFSDM_FilterConfigRegChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 f8ff 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000204c 	.word	0x2000204c
 8000f14:	40016100 	.word	0x40016100
 8000f18:	200020a0 	.word	0x200020a0
 8000f1c:	40016040 	.word	0x40016040
 8000f20:	00020004 	.word	0x00020004

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f6c:	f004 f820 	bl	8004fb0 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f76:	f000 f8c7 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000f88:	f004 f9dc 	bl	8005344 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f92:	f000 f8b9 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f96:	2320      	movs	r3, #32
 8000f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000fa4:	f004 fbf4 	bl	8005790 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f000 f8ab 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM2_Init+0x9c>)
 8000fb4:	f004 f854 	bl	8005060 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20002138 	.word	0x20002138

08000fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_DMA_Init+0x60>)
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_DMA_Init+0x60>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6493      	str	r3, [r2, #72]	; 0x48
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_DMA_Init+0x60>)
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_DMA_Init+0x60>)
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <MX_DMA_Init+0x60>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6493      	str	r3, [r2, #72]	; 0x48
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_DMA_Init+0x60>)
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200d      	movs	r0, #13
 8001000:	f001 fbc3 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001004:	200d      	movs	r0, #13
 8001006:	f001 fbdc 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200e      	movs	r0, #14
 8001010:	f001 fbbb 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001014:	200e      	movs	r0, #14
 8001016:	f001 fbd4 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <MX_GPIO_Init+0xd4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <MX_GPIO_Init+0xd4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_GPIO_Init+0xd4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_GPIO_Init+0xd4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_GPIO_Init+0xd8>)
 80010a6:	f002 fab1 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80010aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <MX_GPIO_Init+0xdc>)
 80010c2:	f002 f911 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0xd8>)
 80010e0:	f002 f902 	bl	80032e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f001 fb4e 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f001 fb67 	bl	80027c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a8      	sub	sp, #160	; 0xa0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2294      	movs	r2, #148	; 0x94
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fbb5 	bl	80058dc <memset>
  if(hadc->Instance==ADC1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_ADC_MspInit+0x80>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12b      	bne.n	80011d4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800117c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001180:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001192:	2318      	movs	r3, #24
 8001194:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f9e7 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80011b8:	f7ff ffa6 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_ADC_MspInit+0x84>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_ADC_MspInit+0x84>)
 80011c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_ADC_MspInit+0x84>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	37a0      	adds	r7, #160	; 0xa0
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	50040000 	.word	0x50040000
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <HAL_DAC_MspInit+0xcc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14f      	bne.n	80012a6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_DAC_MspInit+0xd0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001236:	2310      	movs	r3, #16
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f002 f84c 	bl	80032e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001252:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <HAL_DAC_MspInit+0xd8>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001258:	2206      	movs	r2, #6
 800125a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 800125e:	2210      	movs	r2, #16
 8001260:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001280:	2220      	movs	r2, #32
 8001282:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 800128c:	f001 fe72 	bl	8002f74 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001296:	f7ff ff37 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_DAC_MspInit+0xd4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40007400 	.word	0x40007400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	20001fec 	.word	0x20001fec
 80012bc:	40020030 	.word	0x40020030

080012c0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0b0      	sub	sp, #192	; 0xc0
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2294      	movs	r2, #148	; 0x94
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fafb 	bl	80058dc <memset>
  if(DFSDM1_Init == 0)
 80012e6:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_DFSDM_FilterMspInit+0x17c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d16b      	bne.n	80013c6 <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 f93e 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800130a:	f7ff fefd 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <HAL_DFSDM_FilterMspInit+0x180>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <HAL_DFSDM_FilterMspInit+0x180>)
 8001316:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001318:	4b49      	ldr	r3, [pc, #292]	; (8001440 <HAL_DFSDM_FilterMspInit+0x180>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10b      	bne.n	8001338 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001324:	4a47      	ldr	r2, [pc, #284]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 8001326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800132a:	6613      	str	r3, [r2, #96]	; 0x60
 800132c:	4b45      	ldr	r3, [pc, #276]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	4a41      	ldr	r2, [pc, #260]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	4a3b      	ldr	r2, [pc, #236]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_DFSDM_FilterMspInit+0x184>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001368:	2304      	movs	r3, #4
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001380:	2306      	movs	r3, #6
 8001382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800138a:	4619      	mov	r1, r3
 800138c:	482e      	ldr	r0, [pc, #184]	; (8001448 <HAL_DFSDM_FilterMspInit+0x188>)
 800138e:	f001 ffab 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013aa:	2306      	movs	r3, #6
 80013ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013b4:	4619      	mov	r1, r3
 80013b6:	4825      	ldr	r0, [pc, #148]	; (800144c <HAL_DFSDM_FilterMspInit+0x18c>)
 80013b8:	f001 ff96 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_DFSDM_FilterMspInit+0x17c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_DFSDM_FilterMspInit+0x17c>)
 80013c4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_DFSDM_FilterMspInit+0x190>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d130      	bne.n	8001432 <HAL_DFSDM_FilterMspInit+0x172>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_DFSDM_FilterMspInit+0x198>)
 80013d4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013d8:	2256      	movs	r2, #86	; 0x56
 80013da:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 80013f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 800140c:	f001 fdb2 	bl	8002f74 <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_DFSDM_FilterMspInit+0x15a>
    {
      Error_Handler();
 8001416:	f7ff fe77 	bl	8001108 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_DFSDM_FilterMspInit+0x194>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001432:	bf00      	nop
 8001434:	37c0      	adds	r7, #192	; 0xc0
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20002188 	.word	0x20002188
 8001440:	20002184 	.word	0x20002184
 8001444:	40021000 	.word	0x40021000
 8001448:	48000800 	.word	0x48000800
 800144c:	48001000 	.word	0x48001000
 8001450:	40016100 	.word	0x40016100
 8001454:	200020d8 	.word	0x200020d8
 8001458:	40020044 	.word	0x40020044

0800145c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0b0      	sub	sp, #192	; 0xc0
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	2294      	movs	r2, #148	; 0x94
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fa2d 	bl	80058dc <memset>
  if(DFSDM1_Init == 0)
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d16b      	bne.n	8001562 <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4618      	mov	r0, r3
 800149c:	f003 f870 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80014a6:	f7ff fe2f 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_DFSDM_ChannelMspInit+0x114>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_DFSDM_ChannelMspInit+0x114>)
 80014b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_DFSDM_ChannelMspInit+0x114>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10b      	bne.n	80014d4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c0:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c6:	6613      	str	r3, [r2, #96]	; 0x60
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_DFSDM_ChannelMspInit+0x118>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001504:	2304      	movs	r3, #4
 8001506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800151c:	2306      	movs	r3, #6
 800151e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001526:	4619      	mov	r1, r3
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800152a:	f001 fedd 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001546:	2306      	movs	r3, #6
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001550:	4619      	mov	r1, r3
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <HAL_DFSDM_ChannelMspInit+0x120>)
 8001554:	f001 fec8 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_DFSDM_ChannelMspInit+0x110>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_DFSDM_ChannelMspInit+0x110>)
 8001560:	6013      	str	r3, [r2, #0]
  }

}
 8001562:	bf00      	nop
 8001564:	37c0      	adds	r7, #192	; 0xc0
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20002188 	.word	0x20002188
 8001570:	20002184 	.word	0x20002184
 8001574:	40021000 	.word	0x40021000
 8001578:	48000800 	.word	0x48000800
 800157c:	48001000 	.word	0x48001000

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001590:	d113      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_TIM_Base_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_TIM_Base_MspInit+0x44>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_TIM_Base_MspInit+0x44>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	201c      	movs	r0, #28
 80015b0:	f001 f8eb 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015b4:	201c      	movs	r0, #28
 80015b6:	f001 f904 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f8b8 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA1_Channel3_IRQHandler+0x10>)
 8001622:	f001 fd4f 	bl	80030c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20001fec 	.word	0x20001fec

08001630 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA1_Channel4_IRQHandler+0x10>)
 8001636:	f001 fd45 	bl	80030c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200020d8 	.word	0x200020d8

08001644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <TIM2_IRQHandler+0x10>)
 800164a:	f003 fd79 	bl	8005140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20002138 	.word	0x20002138

08001658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800165c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001660:	f002 f806 	bl	8003670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff ffea 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f004 f917 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7ff fa83 	bl	8000bc8 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016d0:	08006bf0 	.word	0x08006bf0
  ldr r2, =_sbss
 80016d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016d8:	200021b4 	.word	0x200021b4

080016dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f001 f843 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f80e 	bl	8001710 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fd08 	bl	8001114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f84f 	bl	80027de <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f001 f819 	bl	800278a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000218c 	.word	0x2000218c

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000218c 	.word	0x2000218c

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3360      	adds	r3, #96	; 0x60
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <LL_ADC_SetOffset+0x44>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	4313      	orrs	r3, r2
 80018a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	03fff000 	.word	0x03fff000

080018c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3360      	adds	r3, #96	; 0x60
 80018ce:	461a      	mov	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3360      	adds	r3, #96	; 0x60
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	615a      	str	r2, [r3, #20]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3330      	adds	r3, #48	; 0x30
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	211f      	movs	r1, #31
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 011f 	and.w	r1, r3, #31
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3314      	adds	r3, #20
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	0e5b      	lsrs	r3, r3, #25
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0d1b      	lsrs	r3, r3, #20
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2107      	movs	r1, #7
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	0d1b      	lsrs	r3, r3, #20
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0318 	and.w	r3, r3, #24
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a1c:	40d9      	lsrs	r1, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	400b      	ands	r3, r1
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	0007ffff 	.word	0x0007ffff

08001a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_IsEnabled+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_IsEnabled+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e129      	b.n	8001dbe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff faef 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff67 	bl	8001a64 <LL_ADC_IsDeepPowerDownEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff4d 	bl	8001a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff82 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d115      	bne.n	8001be2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff66 	bl	8001a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_ADC_Init+0x278>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4a81      	ldr	r2, [pc, #516]	; (8001dcc <HAL_ADC_Init+0x27c>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff64 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff75 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001c18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80c2 	bne.w	8001dac <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80be 	bne.w	8001dac <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff49 	bl	8001adc <LL_ADC_IsEnabled>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c50:	485f      	ldr	r0, [pc, #380]	; (8001dd0 <HAL_ADC_Init+0x280>)
 8001c52:	f7ff ff43 	bl	8001adc <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4619      	mov	r1, r3
 8001c62:	485c      	ldr	r0, [pc, #368]	; (8001dd4 <HAL_ADC_Init+0x284>)
 8001c64:	f7ff fdd4 	bl	8001810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e5b      	ldrb	r3, [r3, #25]
 8001c6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	045b      	lsls	r3, r3, #17
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_ADC_Init+0x288>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff25 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001cde:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d140      	bne.n	8001d68 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d13d      	bne.n	8001d68 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0e:	f023 0306 	bic.w	r3, r3, #6
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10c      	bne.n	8001d8a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f023 010f 	bic.w	r1, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
 8001d88:	e007      	b.n	8001d9a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020f 	bic.w	r2, r2, #15
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	50040000 	.word	0x50040000
 8001dd4:	50040300 	.word	0x50040300
 8001dd8:	fff0c007 	.word	0xfff0c007

08001ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0b6      	sub	sp, #216	; 0xd8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e3d5      	b.n	80025aa <HAL_ADC_ConfigChannel+0x7ce>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe79 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 83ba 	bne.w	800258c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	3b02      	subs	r3, #2
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d81b      	bhi.n	8001e6a <HAL_ADC_ConfigChannel+0x8e>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <HAL_ADC_ConfigChannel+0x5c>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e61 	.word	0x08001e61
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e4e:	e010      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e50:	2312      	movs	r3, #18
 8001e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e56:	e00c      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e58:	2318      	movs	r3, #24
 8001e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e5e:	e008      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e70:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e80:	f7ff fd62 	bl	8001948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe3a 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001e8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe46 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001e9c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 81bf 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 81ba 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ebc:	d10f      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7ff fd69 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd23 	bl	8001922 <LL_ADC_SetSamplingTimeCommonConfig>
 8001edc:	e00e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f7ff fd58 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd13 	bl	8001922 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00a      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2e:	f7ff fca3 	bl	8001878 <LL_ADC_SetOffset>
 8001f32:	e179      	b.n	8002228 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fcc0 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x184>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fcb5 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1c2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fcaa 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x1da>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e018      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x20c>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001fd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001fde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc79 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fc5d 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x24a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fc52 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	e01e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x288>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fc47 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800204c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002058:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x2a0>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	e018      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2d2>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e004      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc16 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fbfa 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x310>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fbef 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	e01e      	b.n	800212a <HAL_ADC_ConfigChannel+0x34e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fbe4 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800210a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x366>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	e014      	b.n	800216c <HAL_ADC_ConfigChannel+0x390>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e004      	b.n	800216c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fbb7 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2103      	movs	r1, #3
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fb9b 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x3ce>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2103      	movs	r1, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fb90 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	e017      	b.n	80021da <HAL_ADC_ConfigChannel+0x3fe>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2103      	movs	r1, #3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fb85 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80021c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x416>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	e011      	b.n	8002216 <HAL_ADC_ConfigChannel+0x43a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002202:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e003      	b.n	8002216 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800220e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002216:	429a      	cmp	r2, r3
 8002218:	d106      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	2103      	movs	r1, #3
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fb62 	bl	80018ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fc55 	bl	8001adc <LL_ADC_IsEnabled>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 813f 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f7ff fbd6 	bl	80019f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a8e      	ldr	r2, [pc, #568]	; (800248c <HAL_ADC_ConfigChannel+0x6b0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f040 8130 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x4a4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	3301      	adds	r3, #1
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2b09      	cmp	r3, #9
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e019      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x4d8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800228e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002290:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800229c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	bf94      	ite	ls
 80022ae:	2301      	movls	r3, #1
 80022b0:	2300      	movhi	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d079      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x4f8>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	069b      	lsls	r3, r3, #26
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d2:	e015      	b.n	8002300 <HAL_ADC_ConfigChannel+0x524>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e003      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80022f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x544>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	e017      	b.n	8002350 <HAL_ADC_ConfigChannel+0x574>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	ea42 0103 	orr.w	r1, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x59a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	e018      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x5cc>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a8:	430b      	orrs	r3, r1
 80023aa:	e080      	b.n	80024ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x5ec>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	069b      	lsls	r3, r3, #26
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c6:	e015      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x618>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x638>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	3301      	adds	r3, #1
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	e017      	b.n	8002444 <HAL_ADC_ConfigChannel+0x668>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	61bb      	str	r3, [r7, #24]
  return result;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	ea42 0103 	orr.w	r1, r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x694>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	3301      	adds	r3, #1
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3b1e      	subs	r3, #30
 8002468:	051b      	lsls	r3, r3, #20
 800246a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800246e:	e01d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x6d0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	60fb      	str	r3, [r7, #12]
  return result;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e005      	b.n	8002498 <HAL_ADC_ConfigChannel+0x6bc>
 800248c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fa74 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d06c      	beq.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c4:	483c      	ldr	r0, [pc, #240]	; (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024c6:	f7ff f9c9 	bl	800185c <LL_ADC_GetCommonPathInternalCh>
 80024ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d127      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d121      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d157      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f6:	4619      	mov	r1, r3
 80024f8:	482f      	ldr	r0, [pc, #188]	; (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024fa:	f7ff f99c 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002526:	e03a      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <HAL_ADC_ConfigChannel+0x7f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d12a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800254c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002550:	4619      	mov	r1, r3
 8002552:	4819      	ldr	r0, [pc, #100]	; (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002554:	f7ff f96f 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002558:	e021      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d11c      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d111      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800257e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002586:	f7ff f956 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
 800258a:	e008      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	37d8      	adds	r7, #216	; 0xd8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	80080000 	.word	0x80080000
 80025b8:	50040300 	.word	0x50040300
 80025bc:	c7520000 	.word	0xc7520000
 80025c0:	50040000 	.word	0x50040000
 80025c4:	20000000 	.word	0x20000000
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	cb840000 	.word	0xcb840000
 80025d0:	80000001 	.word	0x80000001

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e014      	b.n	8002832 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe fce3 	bl	80011e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	3308      	adds	r3, #8
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e004      	b.n	800286e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3314      	adds	r3, #20
 800286c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	461a      	mov	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	795b      	ldrb	r3, [r3, #5]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_DAC_ConfigChannel+0x1c>
 800289c:	2302      	movs	r3, #2
 800289e:	e137      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x28c>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	f040 8081 	bne.w	80029b8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028b6:	f7fe ff7b 	bl	80017b0 <HAL_GetTick>
 80028ba:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d140      	bne.n	8002944 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028c2:	e018      	b.n	80028f6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028c4:	f7fe ff74 	bl	80017b0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d911      	bls.n	80028f6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f043 0208 	orr.w	r2, r3, #8
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2203      	movs	r2, #3
 80028f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e10c      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1df      	bne.n	80028c4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002904:	2001      	movs	r0, #1
 8002906:	f7fe ff5f 	bl	80017c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	69d2      	ldr	r2, [r2, #28]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
 8002914:	e023      	b.n	800295e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002916:	f7fe ff4b 	bl	80017b0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d90f      	bls.n	8002944 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	2b00      	cmp	r3, #0
 800292c:	da0a      	bge.n	8002944 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f043 0208 	orr.w	r2, r3, #8
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2203      	movs	r2, #3
 800293e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0e5      	b.n	8002b10 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2b00      	cmp	r3, #0
 800294c:	dbe3      	blt.n	8002916 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800294e:	2001      	movs	r0, #1
 8002950:	f7fe ff3a 	bl	80017c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	69d2      	ldr	r2, [r2, #28]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	ea02 0103 	and.w	r1, r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	21ff      	movs	r1, #255	; 0xff
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	ea02 0103 	and.w	r1, r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11d      	bne.n	80029fc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	221f      	movs	r2, #31
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	4013      	ands	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	400a      	ands	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa0:	d104      	bne.n	8002aac <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e018      	b.n	8002ade <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e00f      	b.n	8002ade <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002abe:	f001 fc93 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8002ac2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_DAC_ConfigChannel+0x294>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d904      	bls.n	8002ad6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	e003      	b.n	8002ade <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002adc:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	22c0      	movs	r2, #192	; 0xc0
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	04c4b400 	.word	0x04c4b400

08002b1c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0ac      	b.n	8002c88 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f9d2 	bl	8002edc <DFSDM_GetChannelFromInstance>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_DFSDM_ChannelInit+0x174>)
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e09f      	b.n	8002c88 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe fc87 	bl	800145c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_DFSDM_ChannelInit+0x178>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_DFSDM_ChannelInit+0x178>)
 8002b56:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_DFSDM_ChannelInit+0x178>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d125      	bne.n	8002bac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b6a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4948      	ldr	r1, [pc, #288]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b80:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b84:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	791b      	ldrb	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	493f      	ldr	r1, [pc, #252]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002baa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002bba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002bd0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 020f 	bic.w	r2, r2, #15
 8002be8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002c10:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 0207 	and.w	r2, r2, #7
 8002c3c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c68:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f930 	bl	8002edc <DFSDM_GetChannelFromInstance>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_DFSDM_ChannelInit+0x174>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20002194 	.word	0x20002194
 8002c94:	20002190 	.word	0x20002190
 8002c98:	40016000 	.word	0x40016000

08002c9c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0ca      	b.n	8002e44 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a66      	ldr	r2, [pc, #408]	; (8002e4c <HAL_DFSDM_FilterInit+0x1b0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d109      	bne.n	8002ccc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0bb      	b.n	8002e44 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe faeb 	bl	80012c0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002cf8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7a1b      	ldrb	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e007      	b.n	8002d24 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d22:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7a5b      	ldrb	r3, [r3, #9]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d108      	bne.n	8002d3e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e007      	b.n	8002d4e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d5c:	f023 0308 	bic.w	r3, r3, #8
 8002d60:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d108      	bne.n	8002d7c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7c1b      	ldrb	r3, [r3, #16]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d108      	bne.n	8002d96 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0210 	orr.w	r2, r2, #16
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e007      	b.n	8002da6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0210 	bic.w	r2, r2, #16
 8002da4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7c5b      	ldrb	r3, [r3, #17]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0220 	bic.w	r2, r2, #32
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002dde:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002de2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6959      	ldr	r1, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002df6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dfe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7c1a      	ldrb	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40016100 	.word	0x40016100

08002e50 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02e      	beq.n	8002ec8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002e70:	2bff      	cmp	r3, #255	; 0xff
 8002e72:	d029      	beq.n	8002ec8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10d      	bne.n	8002eaa <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e00a      	b.n	8002ec0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec6:	e001      	b.n	8002ecc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e02b      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <DFSDM_GetChannelFromInstance+0x80>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d102      	bne.n	8002f00 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e024      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <DFSDM_GetChannelFromInstance+0x84>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d102      	bne.n	8002f0e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e01d      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <DFSDM_GetChannelFromInstance+0x88>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d102      	bne.n	8002f1c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002f16:	2304      	movs	r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e016      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <DFSDM_GetChannelFromInstance+0x8c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d102      	bne.n	8002f2a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002f24:	2305      	movs	r3, #5
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e00f      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <DFSDM_GetChannelFromInstance+0x90>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d102      	bne.n	8002f38 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002f32:	2306      	movs	r3, #6
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e008      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <DFSDM_GetChannelFromInstance+0x94>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002f40:	2307      	movs	r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e001      	b.n	8002f4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002f46:	2303      	movs	r3, #3
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40016000 	.word	0x40016000
 8002f5c:	40016020 	.word	0x40016020
 8002f60:	40016040 	.word	0x40016040
 8002f64:	40016080 	.word	0x40016080
 8002f68:	400160a0 	.word	0x400160a0
 8002f6c:	400160c0 	.word	0x400160c0
 8002f70:	400160e0 	.word	0x400160e0

08002f74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_DMA_Init+0x138>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d80f      	bhi.n	8002fb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_DMA_Init+0x13c>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <HAL_DMA_Init+0x140>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_DMA_Init+0x144>)
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	e00e      	b.n	8002fd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_DMA_Init+0x148>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a3d      	ldr	r2, [pc, #244]	; (80030b4 <HAL_DMA_Init+0x140>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <HAL_DMA_Init+0x14c>)
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8fe 	bl	8003224 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003030:	d102      	bne.n	8003038 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800304c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_DMA_Init+0x104>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b04      	cmp	r3, #4
 800305c:	d80c      	bhi.n	8003078 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f91e 	bl	80032a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e008      	b.n	800308a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40020407 	.word	0x40020407
 80030b0:	bffdfff8 	.word	0xbffdfff8
 80030b4:	cccccccd 	.word	0xcccccccd
 80030b8:	40020000 	.word	0x40020000
 80030bc:	bffdfbf8 	.word	0xbffdfbf8
 80030c0:	40020400 	.word	0x40020400

080030c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	f003 031c 	and.w	r3, r3, #28
 80030e4:	2204      	movs	r2, #4
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d026      	beq.n	800313e <HAL_DMA_IRQHandler+0x7a>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d021      	beq.n	800313e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0204 	bic.w	r2, r2, #4
 8003116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f003 021c 	and.w	r2, r3, #28
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2104      	movs	r1, #4
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d071      	beq.n	8003218 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800313c:	e06c      	b.n	8003218 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 031c 	and.w	r3, r3, #28
 8003146:	2202      	movs	r2, #2
 8003148:	409a      	lsls	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02e      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xec>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d029      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020a 	bic.w	r2, r2, #10
 8003178:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f003 021c 	and.w	r2, r3, #28
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2102      	movs	r1, #2
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d038      	beq.n	8003218 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031ae:	e033      	b.n	8003218 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f003 031c 	and.w	r3, r3, #28
 80031b8:	2208      	movs	r2, #8
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02a      	beq.n	800321a <HAL_DMA_IRQHandler+0x156>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d025      	beq.n	800321a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 020e 	bic.w	r2, r2, #14
 80031dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f003 021c 	and.w	r2, r3, #28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003218:	bf00      	nop
 800321a:	bf00      	nop
}
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d80a      	bhi.n	800324e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003244:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6493      	str	r3, [r2, #72]	; 0x48
 800324c:	e007      	b.n	800325e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003258:	4413      	add	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3b08      	subs	r3, #8
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0a      	ldr	r2, [pc, #40]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003274:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40020407 	.word	0x40020407
 8003294:	4002081c 	.word	0x4002081c
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	40020880 	.word	0x40020880

080032a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	461a      	mov	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	1000823f 	.word	0x1000823f
 80032e4:	40020940 	.word	0x40020940

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	e166      	b.n	80035c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8158 	beq.w	80035c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d005      	beq.n	8003328 <HAL_GPIO_Init+0x40>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d130      	bne.n	800338a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335e:	2201      	movs	r2, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0201 	and.w	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b03      	cmp	r3, #3
 8003394:	d017      	beq.n	80033c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d123      	bne.n	800341a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	6939      	ldr	r1, [r7, #16]
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0203 	and.w	r2, r3, #3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80b2 	beq.w	80035c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_GPIO_Init+0x2fc>)
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	4a60      	ldr	r2, [pc, #384]	; (80035e4 <HAL_GPIO_Init+0x2fc>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6613      	str	r3, [r2, #96]	; 0x60
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <HAL_GPIO_Init+0x2fc>)
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003474:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800349e:	d02b      	beq.n	80034f8 <HAL_GPIO_Init+0x210>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a52      	ldr	r2, [pc, #328]	; (80035ec <HAL_GPIO_Init+0x304>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d025      	beq.n	80034f4 <HAL_GPIO_Init+0x20c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_GPIO_Init+0x308>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d01f      	beq.n	80034f0 <HAL_GPIO_Init+0x208>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_GPIO_Init+0x30c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d019      	beq.n	80034ec <HAL_GPIO_Init+0x204>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x310>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d013      	beq.n	80034e8 <HAL_GPIO_Init+0x200>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_GPIO_Init+0x314>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00d      	beq.n	80034e4 <HAL_GPIO_Init+0x1fc>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_GPIO_Init+0x318>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <HAL_GPIO_Init+0x1f8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_GPIO_Init+0x31c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_GPIO_Init+0x1f4>
 80034d8:	2307      	movs	r3, #7
 80034da:	e00e      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034dc:	2308      	movs	r3, #8
 80034de:	e00c      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034e0:	2306      	movs	r3, #6
 80034e2:	e00a      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034e4:	2305      	movs	r3, #5
 80034e6:	e008      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034e8:	2304      	movs	r3, #4
 80034ea:	e006      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034ec:	2303      	movs	r3, #3
 80034ee:	e004      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e002      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_GPIO_Init+0x212>
 80034f8:	2300      	movs	r3, #0
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	f002 0203 	and.w	r2, r2, #3
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	4093      	lsls	r3, r2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800350a:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_GPIO_Init+0x300>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_GPIO_Init+0x320>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800353c:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_GPIO_Init+0x320>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_GPIO_Init+0x320>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003566:	4a28      	ldr	r2, [pc, #160]	; (8003608 <HAL_GPIO_Init+0x320>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_GPIO_Init+0x320>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_GPIO_Init+0x320>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_GPIO_Init+0x320>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <HAL_GPIO_Init+0x320>)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3301      	adds	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f ae91 	bne.w	80032f8 <HAL_GPIO_Init+0x10>
  }
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	48000400 	.word	0x48000400
 80035f0:	48000800 	.word	0x48000800
 80035f4:	48000c00 	.word	0x48000c00
 80035f8:	48001000 	.word	0x48001000
 80035fc:	48001400 	.word	0x48001400
 8003600:	48001800 	.word	0x48001800
 8003604:	48001c00 	.word	0x48001c00
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
 8003618:	4613      	mov	r3, r2
 800361a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800361c:	787b      	ldrb	r3, [r7, #1]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003628:	e002      	b.n	8003630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	041a      	lsls	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43d9      	mvns	r1, r3
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	400b      	ands	r3, r1
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fa54 	bl	8000b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40010400 	.word	0x40010400

080036a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d102      	bne.n	80036b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	e00b      	b.n	80036d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c6:	d102      	bne.n	80036ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80036c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036cc:	e000      	b.n	80036d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80036ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d141      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d131      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003702:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003714:	4a41      	ldr	r2, [pc, #260]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2232      	movs	r2, #50	; 0x32
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	e002      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d102      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d158      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e057      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003760:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	4a2d      	ldr	r2, [pc, #180]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003770:	e04d      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d141      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d131      	bne.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a0:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2232      	movs	r2, #50	; 0x32
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9b      	lsrs	r3, r3, #18
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037be:	e002      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d102      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f2      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d112      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e011      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037fc:	e007      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003806:	4a05      	ldr	r2, [pc, #20]	; (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40007000 	.word	0x40007000
 8003820:	20000000 	.word	0x20000000
 8003824:	431bde83 	.word	0x431bde83

08003828 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f000 bc08 	b.w	800404c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383c:	4b96      	ldr	r3, [pc, #600]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003846:	4b94      	ldr	r3, [pc, #592]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80e4 	beq.w	8003a26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_RCC_OscConfig+0x4c>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	f040 808b 	bne.w	8003982 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 8087 	bne.w	8003982 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003874:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x64>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e3df      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_RCC_OscConfig+0x7e>
 800389c:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a4:	e005      	b.n	80038b2 <HAL_RCC_OscConfig+0x8a>
 80038a6:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d223      	bcs.n	80038fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fda0 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e3c0      	b.n	800404c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ca:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	496d      	ldr	r1, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e8:	4b6b      	ldr	r3, [pc, #428]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	4968      	ldr	r1, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e025      	b.n	800394a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003904:	f043 0308 	orr.w	r3, r3, #8
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4960      	ldr	r1, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	495b      	ldr	r1, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fd60 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e380      	b.n	800404c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800394a:	f000 fcc1 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4950      	ldr	r1, [pc, #320]	; (8003a9c <HAL_RCC_OscConfig+0x274>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <HAL_RCC_OscConfig+0x278>)
 8003968:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800396a:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <HAL_RCC_OscConfig+0x27c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fece 	bl	8001710 <HAL_InitTick>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d052      	beq.n	8003a24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	e364      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d032      	beq.n	80039f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800398a:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003996:	f7fd ff0b 	bl	80017b0 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800399e:	f7fd ff07 	bl	80017b0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e34d      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b0:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a35      	ldr	r2, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039c2:	f043 0308 	orr.w	r3, r3, #8
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4930      	ldr	r1, [pc, #192]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	492b      	ldr	r1, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
 80039ee:	e01a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039fc:	f7fd fed8 	bl	80017b0 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a04:	f7fd fed4 	bl	80017b0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e31a      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1dc>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d073      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_OscConfig+0x21c>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d10e      	bne.n	8003a5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d063      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d15f      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e2f7      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x24c>
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e025      	b.n	8003ac0 <HAL_RCC_OscConfig+0x298>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7c:	d114      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x280>
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a02      	ldr	r2, [pc, #8]	; (8003a98 <HAL_RCC_OscConfig+0x270>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e013      	b.n	8003ac0 <HAL_RCC_OscConfig+0x298>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	080069d0 	.word	0x080069d0
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a9f      	ldr	r2, [pc, #636]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a9c      	ldr	r2, [pc, #624]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fe72 	bl	80017b0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fe6e 	bl	80017b0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e2b4      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae2:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2a8>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fe5e 	bl	80017b0 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd fe5a 	bl	80017b0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e2a0      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2d0>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d060      	beq.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x310>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d116      	bne.n	8003b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b38:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_OscConfig+0x328>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e27d      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	4973      	ldr	r1, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b64:	e040      	b.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d023      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fe19 	bl	80017b0 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd fe15 	bl	80017b0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e25b      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b94:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	495f      	ldr	r1, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	e018      	b.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5c      	ldr	r2, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fdf5 	bl	80017b0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fd fdf1 	bl	80017b0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e237      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fdd0 	bl	80017b0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fd fdcc 	bl	80017b0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e212      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ef      	beq.n	8003c14 <HAL_RCC_OscConfig+0x3ec>
 8003c34:	e01b      	b.n	8003c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fd fdb3 	bl	80017b0 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fdaf 	bl	80017b0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1f5      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80a6 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	; 0x58
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d118      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fd76 	bl	80017b0 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd fd72 	bl	80017b0 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1b8      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_RCC_OscConfig+0x508>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4d8>
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cfe:	e029      	b.n	8003d54 <HAL_RCC_OscConfig+0x52c>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d115      	bne.n	8003d34 <HAL_RCC_OscConfig+0x50c>
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <HAL_RCC_OscConfig+0x504>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d28:	e014      	b.n	8003d54 <HAL_RCC_OscConfig+0x52c>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	4b9d      	ldr	r3, [pc, #628]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a9c      	ldr	r2, [pc, #624]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d44:	4b99      	ldr	r3, [pc, #612]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	4a98      	ldr	r2, [pc, #608]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fd28 	bl	80017b0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd fd24 	bl	80017b0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e168      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b8c      	ldr	r3, [pc, #560]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ed      	beq.n	8003d64 <HAL_RCC_OscConfig+0x53c>
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd fd11 	bl	80017b0 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fd fd0d 	bl	80017b0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e151      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da8:	4b80      	ldr	r3, [pc, #512]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ed      	bne.n	8003d92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	4a7a      	ldr	r2, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d03c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01c      	beq.n	8003e16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ddc:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de2:	4a72      	ldr	r2, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd fce0 	bl	80017b0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df4:	f7fd fcdc 	bl	80017b0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e122      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e06:	4b69      	ldr	r3, [pc, #420]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ef      	beq.n	8003df4 <HAL_RCC_OscConfig+0x5cc>
 8003e14:	e01b      	b.n	8003e4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1c:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd fcc3 	bl	80017b0 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2e:	f7fd fcbf 	bl	80017b0 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e105      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ef      	bne.n	8003e2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80f9 	beq.w	800404a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f040 80cf 	bne.w	8004000 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e62:	4b52      	ldr	r3, [pc, #328]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0203 	and.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d12c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	3b01      	subs	r3, #1
 8003e82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d123      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d11b      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d113      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d071      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d068      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ed6:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ee2:	4b32      	ldr	r3, [pc, #200]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0ac      	b.n	800404c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003efe:	f7fd fc57 	bl	80017b0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fc53 	bl	80017b0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e099      	b.n	800404c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCC_OscConfig+0x788>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f3e:	0212      	lsls	r2, r2, #8
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0552      	lsls	r2, r2, #21
 8003f4c:	4311      	orrs	r1, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f52:	0852      	lsrs	r2, r2, #1
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0652      	lsls	r2, r2, #25
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5e:	06d2      	lsls	r2, r2, #27
 8003f60:	430a      	orrs	r2, r1
 8003f62:	4912      	ldr	r1, [pc, #72]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0f      	ldr	r2, [pc, #60]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f80:	f7fd fc16 	bl	80017b0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fd fc12 	bl	80017b0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e058      	b.n	800404c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <HAL_RCC_OscConfig+0x784>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa6:	e050      	b.n	800404a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e04f      	b.n	800404c <HAL_RCC_OscConfig+0x824>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb4:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d144      	bne.n	800404a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fd8:	f7fd fbea 	bl	80017b0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fd fbe6 	bl	80017b0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e02c      	b.n	800404c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x7b8>
 8003ffe:	e024      	b.n	800404a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d01f      	beq.n	8004046 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 800400c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fd fbcd 	bl	80017b0 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd fbc9 	bl	80017b0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e00f      	b.n	800404c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4905      	ldr	r1, [pc, #20]	; (8004054 <HAL_RCC_OscConfig+0x82c>)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x830>)
 8004040:	4013      	ands	r3, r2
 8004042:	60cb      	str	r3, [r1, #12]
 8004044:	e001      	b.n	800404a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	feeefffc 	.word	0xfeeefffc

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e11d      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b90      	ldr	r3, [pc, #576]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	498b      	ldr	r1, [pc, #556]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e105      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c0:	4b7e      	ldr	r3, [pc, #504]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	497b      	ldr	r1, [pc, #492]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d079      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d11e      	bne.n	8004124 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0dc      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040f6:	f000 f9dd 	bl	80044b4 <RCC_GetSysClockFreqFromPLLSource>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a70      	ldr	r2, [pc, #448]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d946      	bls.n	8004190 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004102:	4b6e      	ldr	r3, [pc, #440]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d140      	bne.n	8004190 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410e:	4b6b      	ldr	r3, [pc, #428]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	4a69      	ldr	r2, [pc, #420]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e035      	b.n	8004190 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412c:	4b63      	ldr	r3, [pc, #396]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b9      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0ad      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0a5      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004164:	f000 f8b4 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 8004168:	4603      	mov	r3, r0
 800416a:	4a55      	ldr	r2, [pc, #340]	; (80042c0 <HAL_RCC_ClockConfig+0x264>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d90f      	bls.n	8004190 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004170:	4b52      	ldr	r3, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004184:	4a4d      	ldr	r2, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004190:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 0203 	bic.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4947      	ldr	r1, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fd fb05 	bl	80017b0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041aa:	f7fd fb01 	bl	80017b0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e077      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c0:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 020c 	and.w	r2, r3, #12
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d1eb      	bne.n	80041aa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041d8:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a37      	ldr	r2, [pc, #220]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d208      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	492b      	ldr	r1, [pc, #172]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d210      	bcs.n	8004242 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 020f 	bic.w	r2, r3, #15
 8004228:	4923      	ldr	r1, [pc, #140]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e036      	b.n	80042b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4918      	ldr	r1, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4910      	ldr	r1, [pc, #64]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004280:	f000 f826 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <HAL_RCC_ClockConfig+0x268>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x26c>)
 800429e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fa33 	bl	8001710 <HAL_InitTick>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	04c4b400 	.word	0x04c4b400
 80042c4:	080069d0 	.word	0x080069d0
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000004 	.word	0x20000004

080042d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x34>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d11e      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e005      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d102      	bne.n	800434e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e004      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d101      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d134      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0xa6>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d003      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0xac>
 8004374:	e005      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004378:	617b      	str	r3, [r7, #20]
      break;
 800437a:	e005      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800437e:	617b      	str	r3, [r7, #20]
      break;
 8004380:	e002      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	617b      	str	r3, [r7, #20]
      break;
 8004386:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	fb03 f202 	mul.w	r2, r3, r2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0e5b      	lsrs	r3, r3, #25
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	3301      	adds	r3, #1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043c8:	69bb      	ldr	r3, [r7, #24]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	080069e0 	.word	0x080069e0
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200

080043e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800440c:	4b27      	ldr	r3, [pc, #156]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004418:	f7ff f942 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 800441c:	6178      	str	r0, [r7, #20]
 800441e:	e014      	b.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442a:	6593      	str	r3, [r2, #88]	; 0x58
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004438:	f7ff f932 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 800443c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d10b      	bne.n	800446a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d913      	bls.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2ba0      	cmp	r3, #160	; 0xa0
 800445c:	d902      	bls.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445e:	2302      	movs	r3, #2
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e00d      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004464:	2301      	movs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e00a      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b7f      	cmp	r3, #127	; 0x7f
 800446e:	d902      	bls.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004470:	2302      	movs	r3, #2
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e004      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d101      	bne.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 020f 	bic.w	r2, r3, #15
 8004488:	4909      	ldr	r1, [pc, #36]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40022000 	.word	0x40022000

080044b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d00b      	beq.n	80044e2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d825      	bhi.n	800451c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d008      	beq.n	80044e8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11f      	bne.n	800451c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044de:	613b      	str	r3, [r7, #16]
    break;
 80044e0:	e01f      	b.n	8004522 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044e4:	613b      	str	r3, [r7, #16]
    break;
 80044e6:	e01c      	b.n	8004522 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e005      	b.n	8004510 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	613b      	str	r3, [r7, #16]
    break;
 800451a:	e002      	b.n	8004522 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
    break;
 8004520:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	3301      	adds	r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	fb03 f202 	mul.w	r2, r3, r2
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0e5b      	lsrs	r3, r3, #25
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	3301      	adds	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004562:	683b      	ldr	r3, [r7, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40021000 	.word	0x40021000
 8004574:	00f42400 	.word	0x00f42400
 8004578:	007a1200 	.word	0x007a1200
 800457c:	080069e0 	.word	0x080069e0

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004588:	2300      	movs	r3, #0
 800458a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800458c:	2300      	movs	r3, #0
 800458e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	2b00      	cmp	r3, #0
 800459a:	d040      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d02a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d825      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045a8:	2b60      	cmp	r3, #96	; 0x60
 80045aa:	d026      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d821      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d006      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d81d      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d010      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045c0:	e018      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c2:	4b89      	ldr	r3, [pc, #548]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a88      	ldr	r2, [pc, #544]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ce:	e015      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fb02 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3320      	adds	r3, #32
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fbed 	bl	8004dc8 <RCCEx_PLLSAI2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	74fb      	strb	r3, [r7, #19]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80045fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004602:	4b79      	ldr	r3, [pc, #484]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004608:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004610:	4975      	ldr	r1, [pc, #468]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004618:	e001      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d047      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d030      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d82a      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800463a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463e:	d02a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d824      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d008      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004650:	d81e      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465a:	d010      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800465c:	e018      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800465e:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800466a:	e015      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fab4 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800467c:	e00c      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3320      	adds	r3, #32
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb9f 	bl	8004dc8 <RCCEx_PLLSAI2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800468e:	e003      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	74fb      	strb	r3, [r7, #19]
      break;
 8004694:	e000      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800469e:	4b52      	ldr	r3, [pc, #328]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	494e      	ldr	r1, [pc, #312]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046b4:	e001      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 809f 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046cc:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	4a40      	ldr	r2, [pc, #256]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6593      	str	r3, [r2, #88]	; 0x58
 80046ee:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fa:	2301      	movs	r3, #1
 80046fc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fe:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3a      	ldr	r2, [pc, #232]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800470a:	f7fd f851 	bl	80017b0 <HAL_GetTick>
 800470e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004710:	e009      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fd f84d 	bl	80017b0 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d902      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	74fb      	strb	r3, [r7, #19]
        break;
 8004724:	e005      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ef      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d15b      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004738:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01f      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d019      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004762:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004772:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004782:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d016      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd f80c 	bl	80017b0 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479a:	e00b      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd f808 	bl	80017b0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d902      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	74fb      	strb	r3, [r7, #19]
            break;
 80047b2:	e006      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ec      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c8:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047e0:	e008      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047e2:	7cfb      	ldrb	r3, [r7, #19]
 80047e4:	74bb      	strb	r3, [r7, #18]
 80047e6:	e005      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f4:	7c7b      	ldrb	r3, [r7, #17]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4ba0      	ldr	r3, [pc, #640]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4a9f      	ldr	r2, [pc, #636]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004812:	4b9a      	ldr	r3, [pc, #616]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f023 0203 	bic.w	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	4996      	ldr	r1, [pc, #600]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004834:	4b91      	ldr	r3, [pc, #580]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f023 020c 	bic.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	498e      	ldr	r1, [pc, #568]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004856:	4b89      	ldr	r3, [pc, #548]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	4985      	ldr	r1, [pc, #532]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004878:	4b80      	ldr	r3, [pc, #512]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	497d      	ldr	r1, [pc, #500]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800489a:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a8:	4974      	ldr	r1, [pc, #464]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	496c      	ldr	r1, [pc, #432]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ec:	4963      	ldr	r1, [pc, #396]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004900:	4b5e      	ldr	r3, [pc, #376]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800490e:	495b      	ldr	r1, [pc, #364]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	4952      	ldr	r1, [pc, #328]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004944:	4b4d      	ldr	r3, [pc, #308]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	494a      	ldr	r1, [pc, #296]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004966:	4b45      	ldr	r3, [pc, #276]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	4941      	ldr	r1, [pc, #260]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004988:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	4939      	ldr	r1, [pc, #228]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b8:	4930      	ldr	r1, [pc, #192]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c8:	d106      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ca:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d4:	60d3      	str	r3, [r2, #12]
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f8f9 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d04d      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a10:	d108      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a18:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a22:	e012      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a2a:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a42:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a52:	d106      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5e:	60d3      	str	r3, [r2, #12]
 8004a60:	e020      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a02      	ldr	r2, [pc, #8]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a76:	60d3      	str	r3, [r2, #12]
 8004a78:	e014      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f8a5 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d028      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab0:	4b4a      	ldr	r3, [pc, #296]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abe:	4947      	ldr	r1, [pc, #284]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ace:	d106      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad0:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a41      	ldr	r2, [pc, #260]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ada:	60d3      	str	r3, [r2, #12]
 8004adc:	e011      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f876 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	492f      	ldr	r1, [pc, #188]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f851 	bl	8004be0 <RCCEx_PLLSAI1_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5e:	f023 0204 	bic.w	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b68:	491c      	ldr	r1, [pc, #112]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b82:	f023 0218 	bic.w	r2, r3, #24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	4913      	ldr	r1, [pc, #76]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb0:	490a      	ldr	r1, [pc, #40]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000

08004be0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bee:	4b72      	ldr	r3, [pc, #456]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00e      	beq.n	8004c18 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bfa:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d103      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d142      	bne.n	8004c98 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e03f      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d018      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0x72>
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d825      	bhi.n	8004c70 <RCCEx_PLLSAI1_Config+0x90>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <RCCEx_PLLSAI1_Config+0x4e>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d009      	beq.n	8004c40 <RCCEx_PLLSAI1_Config+0x60>
 8004c2c:	e020      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e013      	b.n	8004c7a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e004      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c86:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4949      	ldr	r1, [pc, #292]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 8086 	bne.w	8004dac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ca0:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a44      	ldr	r2, [pc, #272]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cac:	f7fc fd80 	bl	80017b0 <HAL_GetTick>
 8004cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb2:	e009      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb4:	f7fc fd7c 	bl	80017b0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004cc6:	e005      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ef      	bne.n	8004cb4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d168      	bne.n	8004dac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d113      	bne.n	8004d08 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce0:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6892      	ldr	r2, [r2, #8]
 8004cec:	0211      	lsls	r1, r2, #8
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68d2      	ldr	r2, [r2, #12]
 8004cf2:	06d2      	lsls	r2, r2, #27
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6852      	ldr	r2, [r2, #4]
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	0112      	lsls	r2, r2, #4
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	492d      	ldr	r1, [pc, #180]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]
 8004d06:	e02d      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d115      	bne.n	8004d3a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6892      	ldr	r2, [r2, #8]
 8004d1a:	0211      	lsls	r1, r2, #8
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6912      	ldr	r2, [r2, #16]
 8004d20:	0852      	lsrs	r2, r2, #1
 8004d22:	3a01      	subs	r2, #1
 8004d24:	0552      	lsls	r2, r2, #21
 8004d26:	4311      	orrs	r1, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6852      	ldr	r2, [r2, #4]
 8004d2c:	3a01      	subs	r2, #1
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	430a      	orrs	r2, r1
 8004d32:	4921      	ldr	r1, [pc, #132]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	610b      	str	r3, [r1, #16]
 8004d38:	e014      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	0211      	lsls	r1, r2, #8
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6952      	ldr	r2, [r2, #20]
 8004d4c:	0852      	lsrs	r2, r2, #1
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	0652      	lsls	r2, r2, #25
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6852      	ldr	r2, [r2, #4]
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0112      	lsls	r2, r2, #4
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	4916      	ldr	r1, [pc, #88]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fc fd1e 	bl	80017b0 <HAL_GetTick>
 8004d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d76:	e009      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d78:	f7fc fd1a 	bl	80017b0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d902      	bls.n	8004d8c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	73fb      	strb	r3, [r7, #15]
          break;
 8004d8a:	e005      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ef      	beq.n	8004d78 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	4904      	ldr	r1, [pc, #16]	; (8004db8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	07ff800f 	.word	0x07ff800f
 8004dc0:	ff9f800f 	.word	0xff9f800f
 8004dc4:	f9ff800f 	.word	0xf9ff800f

08004dc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd6:	4b72      	ldr	r3, [pc, #456]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00e      	beq.n	8004e00 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004de2:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d103      	bne.n	8004dfa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
       ||
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d142      	bne.n	8004e80 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e03f      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d018      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0x72>
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d825      	bhi.n	8004e58 <RCCEx_PLLSAI2_Config+0x90>
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d002      	beq.n	8004e16 <RCCEx_PLLSAI2_Config+0x4e>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d009      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x60>
 8004e14:	e020      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e16:	4b62      	ldr	r3, [pc, #392]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11d      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e26:	e01a      	b.n	8004e5e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e28:	4b5d      	ldr	r3, [pc, #372]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d116      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e38:	e013      	b.n	8004e62 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e46:	4b56      	ldr	r3, [pc, #344]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e56:	e006      	b.n	8004e66 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e004      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e6e:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4949      	ldr	r1, [pc, #292]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 8086 	bne.w	8004f94 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e88:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a44      	ldr	r2, [pc, #272]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e94:	f7fc fc8c 	bl	80017b0 <HAL_GetTick>
 8004e98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9a:	e009      	b.n	8004eb0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e9c:	f7fc fc88 	bl	80017b0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d902      	bls.n	8004eb0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	73fb      	strb	r3, [r7, #15]
        break;
 8004eae:	e005      	b.n	8004ebc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ef      	bne.n	8004e9c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d168      	bne.n	8004f94 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d113      	bne.n	8004ef0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	0211      	lsls	r1, r2, #8
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	06d2      	lsls	r2, r2, #27
 8004edc:	4311      	orrs	r1, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6852      	ldr	r2, [r2, #4]
 8004ee2:	3a01      	subs	r2, #1
 8004ee4:	0112      	lsls	r2, r2, #4
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	492d      	ldr	r1, [pc, #180]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	614b      	str	r3, [r1, #20]
 8004eee:	e02d      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d115      	bne.n	8004f22 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef6:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6892      	ldr	r2, [r2, #8]
 8004f02:	0211      	lsls	r1, r2, #8
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6912      	ldr	r2, [r2, #16]
 8004f08:	0852      	lsrs	r2, r2, #1
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	0552      	lsls	r2, r2, #21
 8004f0e:	4311      	orrs	r1, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	3a01      	subs	r2, #1
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	4921      	ldr	r1, [pc, #132]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	614b      	str	r3, [r1, #20]
 8004f20:	e014      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <RCCEx_PLLSAI2_Config+0x1e4>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	0211      	lsls	r1, r2, #8
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6952      	ldr	r2, [r2, #20]
 8004f34:	0852      	lsrs	r2, r2, #1
 8004f36:	3a01      	subs	r2, #1
 8004f38:	0652      	lsls	r2, r2, #25
 8004f3a:	4311      	orrs	r1, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6852      	ldr	r2, [r2, #4]
 8004f40:	3a01      	subs	r2, #1
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	430a      	orrs	r2, r1
 8004f46:	4916      	ldr	r1, [pc, #88]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fc fc2a 	bl	80017b0 <HAL_GetTick>
 8004f5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f5e:	e009      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f60:	f7fc fc26 	bl	80017b0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d902      	bls.n	8004f74 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	73fb      	strb	r3, [r7, #15]
          break;
 8004f72:	e005      	b.n	8004f80 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	07ff800f 	.word	0x07ff800f
 8004fa8:	ff9f800f 	.word	0xff9f800f
 8004fac:	f9ff800f 	.word	0xf9ff800f

08004fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e049      	b.n	8005056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc fad2 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 fa9a 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e04f      	b.n	8005118 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_TIM_Base_Start_IT+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d018      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIM_Base_Start_IT+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <HAL_TIM_Base_Start_IT+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_TIM_Base_Start_IT+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0x76>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a19      	ldr	r2, [pc, #100]	; (8005138 <HAL_TIM_Base_Start_IT+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d115      	bne.n	8005102 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_TIM_Base_Start_IT+0xdc>)
 80050de:	4013      	ands	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d015      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ee:	d011      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	e008      	b.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e000      	b.n	8005116 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40013400 	.word	0x40013400
 8005138:	40014000 	.word	0x40014000
 800513c:	00010007 	.word	0x00010007

08005140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0202 	mvn.w	r2, #2
 8005174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9ad 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f99f 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9b0 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d020      	beq.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0204 	mvn.w	r2, #4
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f987 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f979 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f98a 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d020      	beq.n	800523c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0208 	mvn.w	r2, #8
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f961 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f953 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f964 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0210 	mvn.w	r2, #16
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f93b 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f92d 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f93e 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0201 	mvn.w	r2, #1
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fb fc5c 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 faf2 	bl	80058b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 faea 	bl	80058c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8fd 	bl	8005512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0220 	mvn.w	r2, #32
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fab2 	bl	80058a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x1c>
 800535c:	2302      	movs	r3, #2
 800535e:	e0b6      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x18a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539c:	d03e      	beq.n	800541c <HAL_TIM_ConfigClockSource+0xd8>
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	f200 8087 	bhi.w	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	f000 8086 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x176>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d87f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d01a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xaa>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d87b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d050      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x11e>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d877      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d03c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xfe>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d873      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d058      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x13e>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d86f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d064      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15e>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d86b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d060      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15e>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d867      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15e>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d05a      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15e>
 80053ec:	e062      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	f000 f9a7 	bl	8005750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	609a      	str	r2, [r3, #8]
      break;
 800541a:	e04f      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	f000 f990 	bl	8005750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543e:	609a      	str	r2, [r3, #8]
      break;
 8005440:	e03c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	461a      	mov	r2, r3
 8005450:	f000 f904 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2150      	movs	r1, #80	; 0x50
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f95d 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8005460:	e02c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	461a      	mov	r2, r3
 8005470:	f000 f923 	bl	80056ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2160      	movs	r1, #96	; 0x60
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f94d 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8005480:	e01c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	461a      	mov	r2, r3
 8005490:	f000 f8e4 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2140      	movs	r1, #64	; 0x40
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f93d 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 80054a0:	e00c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 f934 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 80054b2:	e003      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e000      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a40      	ldr	r2, [pc, #256]	; (800563c <TIM_Base_SetConfig+0x114>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <TIM_Base_SetConfig+0x118>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <TIM_Base_SetConfig+0x11c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3b      	ldr	r2, [pc, #236]	; (8005648 <TIM_Base_SetConfig+0x120>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3a      	ldr	r2, [pc, #232]	; (800564c <TIM_Base_SetConfig+0x124>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2f      	ldr	r2, [pc, #188]	; (800563c <TIM_Base_SetConfig+0x114>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01f      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <TIM_Base_SetConfig+0x118>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2b      	ldr	r2, [pc, #172]	; (8005644 <TIM_Base_SetConfig+0x11c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <TIM_Base_SetConfig+0x120>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <TIM_Base_SetConfig+0x124>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <TIM_Base_SetConfig+0x128>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <TIM_Base_SetConfig+0x12c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <TIM_Base_SetConfig+0x130>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <TIM_Base_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00f      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a11      	ldr	r2, [pc, #68]	; (8005650 <TIM_Base_SetConfig+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <TIM_Base_SetConfig+0x12c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a0f      	ldr	r2, [pc, #60]	; (8005658 <TIM_Base_SetConfig+0x130>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d103      	bne.n	8005628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	615a      	str	r2, [r3, #20]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f023 0210 	bic.w	r2, r3, #16
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e068      	b.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a2e      	ldr	r2, [pc, #184]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2d      	ldr	r2, [pc, #180]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d018      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10c      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40014000 	.word	0x40014000

080058a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	; (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	; (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	; (8005930 <__libc_init_array+0x44>)
 8005900:	f001 f85a 	bl	80069b8 <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08006be8 	.word	0x08006be8
 8005928:	08006be8 	.word	0x08006be8
 800592c:	08006be8 	.word	0x08006be8
 8005930:	08006bec 	.word	0x08006bec
 8005934:	00000000 	.word	0x00000000

08005938 <sin>:
 8005938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800593a:	ec53 2b10 	vmov	r2, r3, d0
 800593e:	4828      	ldr	r0, [pc, #160]	; (80059e0 <sin+0xa8>)
 8005940:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005944:	4281      	cmp	r1, r0
 8005946:	dc07      	bgt.n	8005958 <sin+0x20>
 8005948:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80059d8 <sin+0xa0>
 800594c:	2000      	movs	r0, #0
 800594e:	b005      	add	sp, #20
 8005950:	f85d eb04 	ldr.w	lr, [sp], #4
 8005954:	f000 b910 	b.w	8005b78 <__kernel_sin>
 8005958:	4822      	ldr	r0, [pc, #136]	; (80059e4 <sin+0xac>)
 800595a:	4281      	cmp	r1, r0
 800595c:	dd09      	ble.n	8005972 <sin+0x3a>
 800595e:	ee10 0a10 	vmov	r0, s0
 8005962:	4619      	mov	r1, r3
 8005964:	f7fa fc50 	bl	8000208 <__aeabi_dsub>
 8005968:	ec41 0b10 	vmov	d0, r0, r1
 800596c:	b005      	add	sp, #20
 800596e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005972:	4668      	mov	r0, sp
 8005974:	f000 f9c0 	bl	8005cf8 <__ieee754_rem_pio2>
 8005978:	f000 0003 	and.w	r0, r0, #3
 800597c:	2801      	cmp	r0, #1
 800597e:	d00c      	beq.n	800599a <sin+0x62>
 8005980:	2802      	cmp	r0, #2
 8005982:	d011      	beq.n	80059a8 <sin+0x70>
 8005984:	b9f0      	cbnz	r0, 80059c4 <sin+0x8c>
 8005986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800598a:	ed9d 0b00 	vldr	d0, [sp]
 800598e:	2001      	movs	r0, #1
 8005990:	f000 f8f2 	bl	8005b78 <__kernel_sin>
 8005994:	ec51 0b10 	vmov	r0, r1, d0
 8005998:	e7e6      	b.n	8005968 <sin+0x30>
 800599a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800599e:	ed9d 0b00 	vldr	d0, [sp]
 80059a2:	f000 f821 	bl	80059e8 <__kernel_cos>
 80059a6:	e7f5      	b.n	8005994 <sin+0x5c>
 80059a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059ac:	ed9d 0b00 	vldr	d0, [sp]
 80059b0:	2001      	movs	r0, #1
 80059b2:	f000 f8e1 	bl	8005b78 <__kernel_sin>
 80059b6:	ec53 2b10 	vmov	r2, r3, d0
 80059ba:	ee10 0a10 	vmov	r0, s0
 80059be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80059c2:	e7d1      	b.n	8005968 <sin+0x30>
 80059c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80059c8:	ed9d 0b00 	vldr	d0, [sp]
 80059cc:	f000 f80c 	bl	80059e8 <__kernel_cos>
 80059d0:	e7f1      	b.n	80059b6 <sin+0x7e>
 80059d2:	bf00      	nop
 80059d4:	f3af 8000 	nop.w
	...
 80059e0:	3fe921fb 	.word	0x3fe921fb
 80059e4:	7fefffff 	.word	0x7fefffff

080059e8 <__kernel_cos>:
 80059e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ec57 6b10 	vmov	r6, r7, d0
 80059f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80059f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80059f8:	ed8d 1b00 	vstr	d1, [sp]
 80059fc:	da07      	bge.n	8005a0e <__kernel_cos+0x26>
 80059fe:	ee10 0a10 	vmov	r0, s0
 8005a02:	4639      	mov	r1, r7
 8005a04:	f7fb f852 	bl	8000aac <__aeabi_d2iz>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	f000 8088 	beq.w	8005b1e <__kernel_cos+0x136>
 8005a0e:	4632      	mov	r2, r6
 8005a10:	463b      	mov	r3, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7fa fdaf 	bl	8000578 <__aeabi_dmul>
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <__kernel_cos+0x178>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	f7fa fda9 	bl	8000578 <__aeabi_dmul>
 8005a26:	a340      	add	r3, pc, #256	; (adr r3, 8005b28 <__kernel_cos+0x140>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	4682      	mov	sl, r0
 8005a2e:	468b      	mov	fp, r1
 8005a30:	4620      	mov	r0, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa fda0 	bl	8000578 <__aeabi_dmul>
 8005a38:	a33d      	add	r3, pc, #244	; (adr r3, 8005b30 <__kernel_cos+0x148>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fbe5 	bl	800020c <__adddf3>
 8005a42:	4622      	mov	r2, r4
 8005a44:	462b      	mov	r3, r5
 8005a46:	f7fa fd97 	bl	8000578 <__aeabi_dmul>
 8005a4a:	a33b      	add	r3, pc, #236	; (adr r3, 8005b38 <__kernel_cos+0x150>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fbda 	bl	8000208 <__aeabi_dsub>
 8005a54:	4622      	mov	r2, r4
 8005a56:	462b      	mov	r3, r5
 8005a58:	f7fa fd8e 	bl	8000578 <__aeabi_dmul>
 8005a5c:	a338      	add	r3, pc, #224	; (adr r3, 8005b40 <__kernel_cos+0x158>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fbd3 	bl	800020c <__adddf3>
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	f7fa fd85 	bl	8000578 <__aeabi_dmul>
 8005a6e:	a336      	add	r3, pc, #216	; (adr r3, 8005b48 <__kernel_cos+0x160>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fbc8 	bl	8000208 <__aeabi_dsub>
 8005a78:	4622      	mov	r2, r4
 8005a7a:	462b      	mov	r3, r5
 8005a7c:	f7fa fd7c 	bl	8000578 <__aeabi_dmul>
 8005a80:	a333      	add	r3, pc, #204	; (adr r3, 8005b50 <__kernel_cos+0x168>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f7fa fbc1 	bl	800020c <__adddf3>
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	f7fa fd73 	bl	8000578 <__aeabi_dmul>
 8005a92:	4622      	mov	r2, r4
 8005a94:	462b      	mov	r3, r5
 8005a96:	f7fa fd6f 	bl	8000578 <__aeabi_dmul>
 8005a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	460d      	mov	r5, r1
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fa fd67 	bl	8000578 <__aeabi_dmul>
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4602      	mov	r2, r0
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7fa fba9 	bl	8000208 <__aeabi_dsub>
 8005ab6:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <__kernel_cos+0x17c>)
 8005ab8:	4598      	cmp	r8, r3
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	dc10      	bgt.n	8005ae2 <__kernel_cos+0xfa>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fa fb9e 	bl	8000208 <__aeabi_dsub>
 8005acc:	460b      	mov	r3, r1
 8005ace:	4926      	ldr	r1, [pc, #152]	; (8005b68 <__kernel_cos+0x180>)
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fa fb98 	bl	8000208 <__aeabi_dsub>
 8005ad8:	ec41 0b10 	vmov	d0, r0, r1
 8005adc:	b003      	add	sp, #12
 8005ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <__kernel_cos+0x184>)
 8005ae4:	4920      	ldr	r1, [pc, #128]	; (8005b68 <__kernel_cos+0x180>)
 8005ae6:	4598      	cmp	r8, r3
 8005ae8:	bfcc      	ite	gt
 8005aea:	4d21      	ldrgt	r5, [pc, #132]	; (8005b70 <__kernel_cos+0x188>)
 8005aec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005af0:	2400      	movs	r4, #0
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	2000      	movs	r0, #0
 8005af8:	f7fa fb86 	bl	8000208 <__aeabi_dsub>
 8005afc:	4622      	mov	r2, r4
 8005afe:	4680      	mov	r8, r0
 8005b00:	4689      	mov	r9, r1
 8005b02:	462b      	mov	r3, r5
 8005b04:	4650      	mov	r0, sl
 8005b06:	4659      	mov	r1, fp
 8005b08:	f7fa fb7e 	bl	8000208 <__aeabi_dsub>
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	463b      	mov	r3, r7
 8005b10:	f7fa fb7a 	bl	8000208 <__aeabi_dsub>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	e7da      	b.n	8005ad4 <__kernel_cos+0xec>
 8005b1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005b58 <__kernel_cos+0x170>
 8005b22:	e7db      	b.n	8005adc <__kernel_cos+0xf4>
 8005b24:	f3af 8000 	nop.w
 8005b28:	be8838d4 	.word	0xbe8838d4
 8005b2c:	bda8fae9 	.word	0xbda8fae9
 8005b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b34:	3e21ee9e 	.word	0x3e21ee9e
 8005b38:	809c52ad 	.word	0x809c52ad
 8005b3c:	3e927e4f 	.word	0x3e927e4f
 8005b40:	19cb1590 	.word	0x19cb1590
 8005b44:	3efa01a0 	.word	0x3efa01a0
 8005b48:	16c15177 	.word	0x16c15177
 8005b4c:	3f56c16c 	.word	0x3f56c16c
 8005b50:	5555554c 	.word	0x5555554c
 8005b54:	3fa55555 	.word	0x3fa55555
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	3ff00000 	.word	0x3ff00000
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	3fd33332 	.word	0x3fd33332
 8005b68:	3ff00000 	.word	0x3ff00000
 8005b6c:	3fe90000 	.word	0x3fe90000
 8005b70:	3fd20000 	.word	0x3fd20000
 8005b74:	00000000 	.word	0x00000000

08005b78 <__kernel_sin>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ed2d 8b04 	vpush	{d8-d9}
 8005b80:	eeb0 8a41 	vmov.f32	s16, s2
 8005b84:	eef0 8a61 	vmov.f32	s17, s3
 8005b88:	ec55 4b10 	vmov	r4, r5, d0
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005b96:	9001      	str	r0, [sp, #4]
 8005b98:	da06      	bge.n	8005ba8 <__kernel_sin+0x30>
 8005b9a:	ee10 0a10 	vmov	r0, s0
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7fa ff84 	bl	8000aac <__aeabi_d2iz>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d051      	beq.n	8005c4c <__kernel_sin+0xd4>
 8005ba8:	4622      	mov	r2, r4
 8005baa:	462b      	mov	r3, r5
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fce2 	bl	8000578 <__aeabi_dmul>
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	468b      	mov	fp, r1
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa fcda 	bl	8000578 <__aeabi_dmul>
 8005bc4:	a341      	add	r3, pc, #260	; (adr r3, 8005ccc <__kernel_sin+0x154>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	4680      	mov	r8, r0
 8005bcc:	4689      	mov	r9, r1
 8005bce:	4650      	mov	r0, sl
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	f7fa fcd1 	bl	8000578 <__aeabi_dmul>
 8005bd6:	a33f      	add	r3, pc, #252	; (adr r3, 8005cd4 <__kernel_sin+0x15c>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fb14 	bl	8000208 <__aeabi_dsub>
 8005be0:	4652      	mov	r2, sl
 8005be2:	465b      	mov	r3, fp
 8005be4:	f7fa fcc8 	bl	8000578 <__aeabi_dmul>
 8005be8:	a33c      	add	r3, pc, #240	; (adr r3, 8005cdc <__kernel_sin+0x164>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fb0d 	bl	800020c <__adddf3>
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	465b      	mov	r3, fp
 8005bf6:	f7fa fcbf 	bl	8000578 <__aeabi_dmul>
 8005bfa:	a33a      	add	r3, pc, #232	; (adr r3, 8005ce4 <__kernel_sin+0x16c>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa fb02 	bl	8000208 <__aeabi_dsub>
 8005c04:	4652      	mov	r2, sl
 8005c06:	465b      	mov	r3, fp
 8005c08:	f7fa fcb6 	bl	8000578 <__aeabi_dmul>
 8005c0c:	a337      	add	r3, pc, #220	; (adr r3, 8005cec <__kernel_sin+0x174>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fafb 	bl	800020c <__adddf3>
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	4606      	mov	r6, r0
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	b9eb      	cbnz	r3, 8005c5a <__kernel_sin+0xe2>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4650      	mov	r0, sl
 8005c24:	4659      	mov	r1, fp
 8005c26:	f7fa fca7 	bl	8000578 <__aeabi_dmul>
 8005c2a:	a325      	add	r3, pc, #148	; (adr r3, 8005cc0 <__kernel_sin+0x148>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa faea 	bl	8000208 <__aeabi_dsub>
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	f7fa fc9e 	bl	8000578 <__aeabi_dmul>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4620      	mov	r0, r4
 8005c42:	4629      	mov	r1, r5
 8005c44:	f7fa fae2 	bl	800020c <__adddf3>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	ec45 4b10 	vmov	d0, r4, r5
 8005c50:	b003      	add	sp, #12
 8005c52:	ecbd 8b04 	vpop	{d8-d9}
 8005c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <__kernel_sin+0x150>)
 8005c5c:	ec51 0b18 	vmov	r0, r1, d8
 8005c60:	2200      	movs	r2, #0
 8005c62:	f7fa fc89 	bl	8000578 <__aeabi_dmul>
 8005c66:	4632      	mov	r2, r6
 8005c68:	ec41 0b19 	vmov	d9, r0, r1
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f7fa fc81 	bl	8000578 <__aeabi_dmul>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	ec51 0b19 	vmov	r0, r1, d9
 8005c7e:	f7fa fac3 	bl	8000208 <__aeabi_dsub>
 8005c82:	4652      	mov	r2, sl
 8005c84:	465b      	mov	r3, fp
 8005c86:	f7fa fc77 	bl	8000578 <__aeabi_dmul>
 8005c8a:	ec53 2b18 	vmov	r2, r3, d8
 8005c8e:	f7fa fabb 	bl	8000208 <__aeabi_dsub>
 8005c92:	a30b      	add	r3, pc, #44	; (adr r3, 8005cc0 <__kernel_sin+0x148>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	f7fa fc6a 	bl	8000578 <__aeabi_dmul>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa faae 	bl	800020c <__adddf3>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7fa faa6 	bl	8000208 <__aeabi_dsub>
 8005cbc:	e7c4      	b.n	8005c48 <__kernel_sin+0xd0>
 8005cbe:	bf00      	nop
 8005cc0:	55555549 	.word	0x55555549
 8005cc4:	3fc55555 	.word	0x3fc55555
 8005cc8:	3fe00000 	.word	0x3fe00000
 8005ccc:	5acfd57c 	.word	0x5acfd57c
 8005cd0:	3de5d93a 	.word	0x3de5d93a
 8005cd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005cd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005cdc:	57b1fe7d 	.word	0x57b1fe7d
 8005ce0:	3ec71de3 	.word	0x3ec71de3
 8005ce4:	19c161d5 	.word	0x19c161d5
 8005ce8:	3f2a01a0 	.word	0x3f2a01a0
 8005cec:	1110f8a6 	.word	0x1110f8a6
 8005cf0:	3f811111 	.word	0x3f811111
 8005cf4:	00000000 	.word	0x00000000

08005cf8 <__ieee754_rem_pio2>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b02 	vpush	{d8}
 8005d00:	ec55 4b10 	vmov	r4, r5, d0
 8005d04:	4bca      	ldr	r3, [pc, #808]	; (8006030 <__ieee754_rem_pio2+0x338>)
 8005d06:	b08b      	sub	sp, #44	; 0x2c
 8005d08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005d0c:	4598      	cmp	r8, r3
 8005d0e:	4682      	mov	sl, r0
 8005d10:	9502      	str	r5, [sp, #8]
 8005d12:	dc08      	bgt.n	8005d26 <__ieee754_rem_pio2+0x2e>
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	ed80 0b00 	vstr	d0, [r0]
 8005d1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005d20:	f04f 0b00 	mov.w	fp, #0
 8005d24:	e028      	b.n	8005d78 <__ieee754_rem_pio2+0x80>
 8005d26:	4bc3      	ldr	r3, [pc, #780]	; (8006034 <__ieee754_rem_pio2+0x33c>)
 8005d28:	4598      	cmp	r8, r3
 8005d2a:	dc78      	bgt.n	8005e1e <__ieee754_rem_pio2+0x126>
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	4ec2      	ldr	r6, [pc, #776]	; (8006038 <__ieee754_rem_pio2+0x340>)
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	ee10 0a10 	vmov	r0, s0
 8005d36:	a3b0      	add	r3, pc, #704	; (adr r3, 8005ff8 <__ieee754_rem_pio2+0x300>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	dd39      	ble.n	8005db4 <__ieee754_rem_pio2+0xbc>
 8005d40:	f7fa fa62 	bl	8000208 <__aeabi_dsub>
 8005d44:	45b0      	cmp	r8, r6
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	d01b      	beq.n	8005d84 <__ieee754_rem_pio2+0x8c>
 8005d4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006000 <__ieee754_rem_pio2+0x308>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fa59 	bl	8000208 <__aeabi_dsub>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	e9ca 2300 	strd	r2, r3, [sl]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7fa fa51 	bl	8000208 <__aeabi_dsub>
 8005d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8006000 <__ieee754_rem_pio2+0x308>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fa4c 	bl	8000208 <__aeabi_dsub>
 8005d70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d74:	f04f 0b01 	mov.w	fp, #1
 8005d78:	4658      	mov	r0, fp
 8005d7a:	b00b      	add	sp, #44	; 0x2c
 8005d7c:	ecbd 8b02 	vpop	{d8}
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	a3a0      	add	r3, pc, #640	; (adr r3, 8006008 <__ieee754_rem_pio2+0x310>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fa3d 	bl	8000208 <__aeabi_dsub>
 8005d8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006010 <__ieee754_rem_pio2+0x318>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	f7fa fa36 	bl	8000208 <__aeabi_dsub>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	e9ca 2300 	strd	r2, r3, [sl]
 8005da4:	4620      	mov	r0, r4
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fa2e 	bl	8000208 <__aeabi_dsub>
 8005dac:	a398      	add	r3, pc, #608	; (adr r3, 8006010 <__ieee754_rem_pio2+0x318>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	e7db      	b.n	8005d6c <__ieee754_rem_pio2+0x74>
 8005db4:	f7fa fa2a 	bl	800020c <__adddf3>
 8005db8:	45b0      	cmp	r8, r6
 8005dba:	4604      	mov	r4, r0
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	d016      	beq.n	8005dee <__ieee754_rem_pio2+0xf6>
 8005dc0:	a38f      	add	r3, pc, #572	; (adr r3, 8006000 <__ieee754_rem_pio2+0x308>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fa21 	bl	800020c <__adddf3>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	e9ca 2300 	strd	r2, r3, [sl]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fa17 	bl	8000208 <__aeabi_dsub>
 8005dda:	a389      	add	r3, pc, #548	; (adr r3, 8006000 <__ieee754_rem_pio2+0x308>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fa14 	bl	800020c <__adddf3>
 8005de4:	f04f 3bff 	mov.w	fp, #4294967295
 8005de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005dec:	e7c4      	b.n	8005d78 <__ieee754_rem_pio2+0x80>
 8005dee:	a386      	add	r3, pc, #536	; (adr r3, 8006008 <__ieee754_rem_pio2+0x310>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fa0a 	bl	800020c <__adddf3>
 8005df8:	a385      	add	r3, pc, #532	; (adr r3, 8006010 <__ieee754_rem_pio2+0x318>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	4604      	mov	r4, r0
 8005e00:	460d      	mov	r5, r1
 8005e02:	f7fa fa03 	bl	800020c <__adddf3>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa f9f9 	bl	8000208 <__aeabi_dsub>
 8005e16:	a37e      	add	r3, pc, #504	; (adr r3, 8006010 <__ieee754_rem_pio2+0x318>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	e7e0      	b.n	8005de0 <__ieee754_rem_pio2+0xe8>
 8005e1e:	4b87      	ldr	r3, [pc, #540]	; (800603c <__ieee754_rem_pio2+0x344>)
 8005e20:	4598      	cmp	r8, r3
 8005e22:	f300 80d8 	bgt.w	8005fd6 <__ieee754_rem_pio2+0x2de>
 8005e26:	f000 f96d 	bl	8006104 <fabs>
 8005e2a:	ec55 4b10 	vmov	r4, r5, d0
 8005e2e:	ee10 0a10 	vmov	r0, s0
 8005e32:	a379      	add	r3, pc, #484	; (adr r3, 8006018 <__ieee754_rem_pio2+0x320>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7fa fb9d 	bl	8000578 <__aeabi_dmul>
 8005e3e:	4b80      	ldr	r3, [pc, #512]	; (8006040 <__ieee754_rem_pio2+0x348>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	f7fa f9e3 	bl	800020c <__adddf3>
 8005e46:	f7fa fe31 	bl	8000aac <__aeabi_d2iz>
 8005e4a:	4683      	mov	fp, r0
 8005e4c:	f7fa fb2a 	bl	80004a4 <__aeabi_i2d>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	ec43 2b18 	vmov	d8, r2, r3
 8005e58:	a367      	add	r3, pc, #412	; (adr r3, 8005ff8 <__ieee754_rem_pio2+0x300>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fb8b 	bl	8000578 <__aeabi_dmul>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa f9cd 	bl	8000208 <__aeabi_dsub>
 8005e6e:	a364      	add	r3, pc, #400	; (adr r3, 8006000 <__ieee754_rem_pio2+0x308>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	ec51 0b18 	vmov	r0, r1, d8
 8005e7c:	f7fa fb7c 	bl	8000578 <__aeabi_dmul>
 8005e80:	f1bb 0f1f 	cmp.w	fp, #31
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	dc0d      	bgt.n	8005ea6 <__ieee754_rem_pio2+0x1ae>
 8005e8a:	4b6e      	ldr	r3, [pc, #440]	; (8006044 <__ieee754_rem_pio2+0x34c>)
 8005e8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	4543      	cmp	r3, r8
 8005e96:	d006      	beq.n	8005ea6 <__ieee754_rem_pio2+0x1ae>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa f9b2 	bl	8000208 <__aeabi_dsub>
 8005ea4:	e00e      	b.n	8005ec4 <__ieee754_rem_pio2+0x1cc>
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7fa f9ab 	bl	8000208 <__aeabi_dsub>
 8005eb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ebc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	dc02      	bgt.n	8005eca <__ieee754_rem_pio2+0x1d2>
 8005ec4:	e9ca 0100 	strd	r0, r1, [sl]
 8005ec8:	e039      	b.n	8005f3e <__ieee754_rem_pio2+0x246>
 8005eca:	a34f      	add	r3, pc, #316	; (adr r3, 8006008 <__ieee754_rem_pio2+0x310>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	ec51 0b18 	vmov	r0, r1, d8
 8005ed4:	f7fa fb50 	bl	8000578 <__aeabi_dmul>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa f990 	bl	8000208 <__aeabi_dsub>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4680      	mov	r8, r0
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f988 	bl	8000208 <__aeabi_dsub>
 8005ef8:	4622      	mov	r2, r4
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa f984 	bl	8000208 <__aeabi_dsub>
 8005f00:	a343      	add	r3, pc, #268	; (adr r3, 8006010 <__ieee754_rem_pio2+0x318>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	ec51 0b18 	vmov	r0, r1, d8
 8005f0e:	f7fa fb33 	bl	8000578 <__aeabi_dmul>
 8005f12:	4622      	mov	r2, r4
 8005f14:	462b      	mov	r3, r5
 8005f16:	f7fa f977 	bl	8000208 <__aeabi_dsub>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	460d      	mov	r5, r1
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa f96f 	bl	8000208 <__aeabi_dsub>
 8005f2a:	9a03      	ldr	r2, [sp, #12]
 8005f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b31      	cmp	r3, #49	; 0x31
 8005f34:	dc24      	bgt.n	8005f80 <__ieee754_rem_pio2+0x288>
 8005f36:	e9ca 0100 	strd	r0, r1, [sl]
 8005f3a:	4646      	mov	r6, r8
 8005f3c:	464f      	mov	r7, r9
 8005f3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005f42:	4630      	mov	r0, r6
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa f95d 	bl	8000208 <__aeabi_dsub>
 8005f4e:	462b      	mov	r3, r5
 8005f50:	4622      	mov	r2, r4
 8005f52:	f7fa f959 	bl	8000208 <__aeabi_dsub>
 8005f56:	9b02      	ldr	r3, [sp, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f5e:	f6bf af0b 	bge.w	8005d78 <__ieee754_rem_pio2+0x80>
 8005f62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f66:	f8ca 3004 	str.w	r3, [sl, #4]
 8005f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f6e:	f8ca 8000 	str.w	r8, [sl]
 8005f72:	f8ca 0008 	str.w	r0, [sl, #8]
 8005f76:	f8ca 300c 	str.w	r3, [sl, #12]
 8005f7a:	f1cb 0b00 	rsb	fp, fp, #0
 8005f7e:	e6fb      	b.n	8005d78 <__ieee754_rem_pio2+0x80>
 8005f80:	a327      	add	r3, pc, #156	; (adr r3, 8006020 <__ieee754_rem_pio2+0x328>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	ec51 0b18 	vmov	r0, r1, d8
 8005f8a:	f7fa faf5 	bl	8000578 <__aeabi_dmul>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	460d      	mov	r5, r1
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4640      	mov	r0, r8
 8005f98:	4649      	mov	r1, r9
 8005f9a:	f7fa f935 	bl	8000208 <__aeabi_dsub>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f92d 	bl	8000208 <__aeabi_dsub>
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	f7fa f929 	bl	8000208 <__aeabi_dsub>
 8005fb6:	a31c      	add	r3, pc, #112	; (adr r3, 8006028 <__ieee754_rem_pio2+0x330>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	ec51 0b18 	vmov	r0, r1, d8
 8005fc4:	f7fa fad8 	bl	8000578 <__aeabi_dmul>
 8005fc8:	4622      	mov	r2, r4
 8005fca:	462b      	mov	r3, r5
 8005fcc:	f7fa f91c 	bl	8000208 <__aeabi_dsub>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	e760      	b.n	8005e98 <__ieee754_rem_pio2+0x1a0>
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <__ieee754_rem_pio2+0x350>)
 8005fd8:	4598      	cmp	r8, r3
 8005fda:	dd37      	ble.n	800604c <__ieee754_rem_pio2+0x354>
 8005fdc:	ee10 2a10 	vmov	r2, s0
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7fa f90f 	bl	8000208 <__aeabi_dsub>
 8005fea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005fee:	e9ca 0100 	strd	r0, r1, [sl]
 8005ff2:	e695      	b.n	8005d20 <__ieee754_rem_pio2+0x28>
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	54400000 	.word	0x54400000
 8005ffc:	3ff921fb 	.word	0x3ff921fb
 8006000:	1a626331 	.word	0x1a626331
 8006004:	3dd0b461 	.word	0x3dd0b461
 8006008:	1a600000 	.word	0x1a600000
 800600c:	3dd0b461 	.word	0x3dd0b461
 8006010:	2e037073 	.word	0x2e037073
 8006014:	3ba3198a 	.word	0x3ba3198a
 8006018:	6dc9c883 	.word	0x6dc9c883
 800601c:	3fe45f30 	.word	0x3fe45f30
 8006020:	2e000000 	.word	0x2e000000
 8006024:	3ba3198a 	.word	0x3ba3198a
 8006028:	252049c1 	.word	0x252049c1
 800602c:	397b839a 	.word	0x397b839a
 8006030:	3fe921fb 	.word	0x3fe921fb
 8006034:	4002d97b 	.word	0x4002d97b
 8006038:	3ff921fb 	.word	0x3ff921fb
 800603c:	413921fb 	.word	0x413921fb
 8006040:	3fe00000 	.word	0x3fe00000
 8006044:	08006a10 	.word	0x08006a10
 8006048:	7fefffff 	.word	0x7fefffff
 800604c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006050:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006054:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006058:	4620      	mov	r0, r4
 800605a:	460d      	mov	r5, r1
 800605c:	f7fa fd26 	bl	8000aac <__aeabi_d2iz>
 8006060:	f7fa fa20 	bl	80004a4 <__aeabi_i2d>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006070:	f7fa f8ca 	bl	8000208 <__aeabi_dsub>
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <__ieee754_rem_pio2+0x404>)
 8006076:	2200      	movs	r2, #0
 8006078:	f7fa fa7e 	bl	8000578 <__aeabi_dmul>
 800607c:	460d      	mov	r5, r1
 800607e:	4604      	mov	r4, r0
 8006080:	f7fa fd14 	bl	8000aac <__aeabi_d2iz>
 8006084:	f7fa fa0e 	bl	80004a4 <__aeabi_i2d>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006094:	f7fa f8b8 	bl	8000208 <__aeabi_dsub>
 8006098:	4b18      	ldr	r3, [pc, #96]	; (80060fc <__ieee754_rem_pio2+0x404>)
 800609a:	2200      	movs	r2, #0
 800609c:	f7fa fa6c 	bl	8000578 <__aeabi_dmul>
 80060a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80060a8:	2703      	movs	r7, #3
 80060aa:	2400      	movs	r4, #0
 80060ac:	2500      	movs	r5, #0
 80060ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	46b9      	mov	r9, r7
 80060b8:	3f01      	subs	r7, #1
 80060ba:	f7fa fcc5 	bl	8000a48 <__aeabi_dcmpeq>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1f5      	bne.n	80060ae <__ieee754_rem_pio2+0x3b6>
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <__ieee754_rem_pio2+0x408>)
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	2302      	movs	r3, #2
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	4632      	mov	r2, r6
 80060cc:	464b      	mov	r3, r9
 80060ce:	4651      	mov	r1, sl
 80060d0:	a804      	add	r0, sp, #16
 80060d2:	f000 f821 	bl	8006118 <__kernel_rem_pio2>
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	4683      	mov	fp, r0
 80060dc:	f6bf ae4c 	bge.w	8005d78 <__ieee754_rem_pio2+0x80>
 80060e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80060e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060e8:	e9ca 2300 	strd	r2, r3, [sl]
 80060ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80060f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80060f8:	e73f      	b.n	8005f7a <__ieee754_rem_pio2+0x282>
 80060fa:	bf00      	nop
 80060fc:	41700000 	.word	0x41700000
 8006100:	08006a90 	.word	0x08006a90

08006104 <fabs>:
 8006104:	ec51 0b10 	vmov	r0, r1, d0
 8006108:	ee10 2a10 	vmov	r2, s0
 800610c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006110:	ec43 2b10 	vmov	d0, r2, r3
 8006114:	4770      	bx	lr
	...

08006118 <__kernel_rem_pio2>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b02 	vpush	{d8}
 8006120:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006124:	f112 0f14 	cmn.w	r2, #20
 8006128:	9306      	str	r3, [sp, #24]
 800612a:	9104      	str	r1, [sp, #16]
 800612c:	4bc2      	ldr	r3, [pc, #776]	; (8006438 <__kernel_rem_pio2+0x320>)
 800612e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006130:	9009      	str	r0, [sp, #36]	; 0x24
 8006132:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	f103 33ff 	add.w	r3, r3, #4294967295
 800613e:	bfa8      	it	ge
 8006140:	1ed4      	subge	r4, r2, #3
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	bfb2      	itee	lt
 8006146:	2400      	movlt	r4, #0
 8006148:	2318      	movge	r3, #24
 800614a:	fb94 f4f3 	sdivge	r4, r4, r3
 800614e:	f06f 0317 	mvn.w	r3, #23
 8006152:	fb04 3303 	mla	r3, r4, r3, r3
 8006156:	eb03 0a02 	add.w	sl, r3, r2
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006428 <__kernel_rem_pio2+0x310>
 8006162:	eb03 0802 	add.w	r8, r3, r2
 8006166:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006168:	1aa7      	subs	r7, r4, r2
 800616a:	ae20      	add	r6, sp, #128	; 0x80
 800616c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006170:	2500      	movs	r5, #0
 8006172:	4545      	cmp	r5, r8
 8006174:	dd13      	ble.n	800619e <__kernel_rem_pio2+0x86>
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	aa20      	add	r2, sp, #128	; 0x80
 800617a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800617e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006182:	f04f 0800 	mov.w	r8, #0
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	4598      	cmp	r8, r3
 800618a:	dc31      	bgt.n	80061f0 <__kernel_rem_pio2+0xd8>
 800618c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006428 <__kernel_rem_pio2+0x310>
 8006190:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006194:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006198:	462f      	mov	r7, r5
 800619a:	2600      	movs	r6, #0
 800619c:	e01b      	b.n	80061d6 <__kernel_rem_pio2+0xbe>
 800619e:	42ef      	cmn	r7, r5
 80061a0:	d407      	bmi.n	80061b2 <__kernel_rem_pio2+0x9a>
 80061a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80061a6:	f7fa f97d 	bl	80004a4 <__aeabi_i2d>
 80061aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061ae:	3501      	adds	r5, #1
 80061b0:	e7df      	b.n	8006172 <__kernel_rem_pio2+0x5a>
 80061b2:	ec51 0b18 	vmov	r0, r1, d8
 80061b6:	e7f8      	b.n	80061aa <__kernel_rem_pio2+0x92>
 80061b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80061c0:	f7fa f9da 	bl	8000578 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061cc:	f7fa f81e 	bl	800020c <__adddf3>
 80061d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d4:	3601      	adds	r6, #1
 80061d6:	9b05      	ldr	r3, [sp, #20]
 80061d8:	429e      	cmp	r6, r3
 80061da:	f1a7 0708 	sub.w	r7, r7, #8
 80061de:	ddeb      	ble.n	80061b8 <__kernel_rem_pio2+0xa0>
 80061e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061e4:	f108 0801 	add.w	r8, r8, #1
 80061e8:	ecab 7b02 	vstmia	fp!, {d7}
 80061ec:	3508      	adds	r5, #8
 80061ee:	e7ca      	b.n	8006186 <__kernel_rem_pio2+0x6e>
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	aa0c      	add	r2, sp, #48	; 0x30
 80061f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80061fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006200:	9c00      	ldr	r4, [sp, #0]
 8006202:	930a      	str	r3, [sp, #40]	; 0x28
 8006204:	00e3      	lsls	r3, r4, #3
 8006206:	9308      	str	r3, [sp, #32]
 8006208:	ab98      	add	r3, sp, #608	; 0x260
 800620a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800620e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006212:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006216:	ab70      	add	r3, sp, #448	; 0x1c0
 8006218:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800621c:	46c3      	mov	fp, r8
 800621e:	46a1      	mov	r9, r4
 8006220:	f1b9 0f00 	cmp.w	r9, #0
 8006224:	f1a5 0508 	sub.w	r5, r5, #8
 8006228:	dc77      	bgt.n	800631a <__kernel_rem_pio2+0x202>
 800622a:	ec47 6b10 	vmov	d0, r6, r7
 800622e:	4650      	mov	r0, sl
 8006230:	f000 fac2 	bl	80067b8 <scalbn>
 8006234:	ec57 6b10 	vmov	r6, r7, d0
 8006238:	2200      	movs	r2, #0
 800623a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800623e:	ee10 0a10 	vmov	r0, s0
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa f998 	bl	8000578 <__aeabi_dmul>
 8006248:	ec41 0b10 	vmov	d0, r0, r1
 800624c:	f000 fb34 	bl	80068b8 <floor>
 8006250:	4b7a      	ldr	r3, [pc, #488]	; (800643c <__kernel_rem_pio2+0x324>)
 8006252:	ec51 0b10 	vmov	r0, r1, d0
 8006256:	2200      	movs	r2, #0
 8006258:	f7fa f98e 	bl	8000578 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7f9 ffd0 	bl	8000208 <__aeabi_dsub>
 8006268:	460f      	mov	r7, r1
 800626a:	4606      	mov	r6, r0
 800626c:	f7fa fc1e 	bl	8000aac <__aeabi_d2iz>
 8006270:	9002      	str	r0, [sp, #8]
 8006272:	f7fa f917 	bl	80004a4 <__aeabi_i2d>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7f9 ffc3 	bl	8000208 <__aeabi_dsub>
 8006282:	f1ba 0f00 	cmp.w	sl, #0
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	dd6d      	ble.n	8006368 <__kernel_rem_pio2+0x250>
 800628c:	1e61      	subs	r1, r4, #1
 800628e:	ab0c      	add	r3, sp, #48	; 0x30
 8006290:	9d02      	ldr	r5, [sp, #8]
 8006292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006296:	f1ca 0018 	rsb	r0, sl, #24
 800629a:	fa43 f200 	asr.w	r2, r3, r0
 800629e:	4415      	add	r5, r2
 80062a0:	4082      	lsls	r2, r0
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	aa0c      	add	r2, sp, #48	; 0x30
 80062a6:	9502      	str	r5, [sp, #8]
 80062a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80062ac:	f1ca 0217 	rsb	r2, sl, #23
 80062b0:	fa43 fb02 	asr.w	fp, r3, r2
 80062b4:	f1bb 0f00 	cmp.w	fp, #0
 80062b8:	dd65      	ble.n	8006386 <__kernel_rem_pio2+0x26e>
 80062ba:	9b02      	ldr	r3, [sp, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	3301      	adds	r3, #1
 80062c0:	9302      	str	r3, [sp, #8]
 80062c2:	4615      	mov	r5, r2
 80062c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80062c8:	4294      	cmp	r4, r2
 80062ca:	f300 809f 	bgt.w	800640c <__kernel_rem_pio2+0x2f4>
 80062ce:	f1ba 0f00 	cmp.w	sl, #0
 80062d2:	dd07      	ble.n	80062e4 <__kernel_rem_pio2+0x1cc>
 80062d4:	f1ba 0f01 	cmp.w	sl, #1
 80062d8:	f000 80c1 	beq.w	800645e <__kernel_rem_pio2+0x346>
 80062dc:	f1ba 0f02 	cmp.w	sl, #2
 80062e0:	f000 80c7 	beq.w	8006472 <__kernel_rem_pio2+0x35a>
 80062e4:	f1bb 0f02 	cmp.w	fp, #2
 80062e8:	d14d      	bne.n	8006386 <__kernel_rem_pio2+0x26e>
 80062ea:	4632      	mov	r2, r6
 80062ec:	463b      	mov	r3, r7
 80062ee:	4954      	ldr	r1, [pc, #336]	; (8006440 <__kernel_rem_pio2+0x328>)
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7f9 ff89 	bl	8000208 <__aeabi_dsub>
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	d043      	beq.n	8006386 <__kernel_rem_pio2+0x26e>
 80062fe:	4650      	mov	r0, sl
 8006300:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006430 <__kernel_rem_pio2+0x318>
 8006304:	f000 fa58 	bl	80067b8 <scalbn>
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	ec53 2b10 	vmov	r2, r3, d0
 8006310:	f7f9 ff7a 	bl	8000208 <__aeabi_dsub>
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	e035      	b.n	8006386 <__kernel_rem_pio2+0x26e>
 800631a:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <__kernel_rem_pio2+0x32c>)
 800631c:	2200      	movs	r2, #0
 800631e:	4630      	mov	r0, r6
 8006320:	4639      	mov	r1, r7
 8006322:	f7fa f929 	bl	8000578 <__aeabi_dmul>
 8006326:	f7fa fbc1 	bl	8000aac <__aeabi_d2iz>
 800632a:	f7fa f8bb 	bl	80004a4 <__aeabi_i2d>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	ec43 2b18 	vmov	d8, r2, r3
 8006336:	4b44      	ldr	r3, [pc, #272]	; (8006448 <__kernel_rem_pio2+0x330>)
 8006338:	2200      	movs	r2, #0
 800633a:	f7fa f91d 	bl	8000578 <__aeabi_dmul>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	f7f9 ff5f 	bl	8000208 <__aeabi_dsub>
 800634a:	f7fa fbaf 	bl	8000aac <__aeabi_d2iz>
 800634e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006352:	f84b 0b04 	str.w	r0, [fp], #4
 8006356:	ec51 0b18 	vmov	r0, r1, d8
 800635a:	f7f9 ff57 	bl	800020c <__adddf3>
 800635e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	e75b      	b.n	8006220 <__kernel_rem_pio2+0x108>
 8006368:	d106      	bne.n	8006378 <__kernel_rem_pio2+0x260>
 800636a:	1e63      	subs	r3, r4, #1
 800636c:	aa0c      	add	r2, sp, #48	; 0x30
 800636e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006372:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006376:	e79d      	b.n	80062b4 <__kernel_rem_pio2+0x19c>
 8006378:	4b34      	ldr	r3, [pc, #208]	; (800644c <__kernel_rem_pio2+0x334>)
 800637a:	2200      	movs	r2, #0
 800637c:	f7fa fb82 	bl	8000a84 <__aeabi_dcmpge>
 8006380:	2800      	cmp	r0, #0
 8006382:	d140      	bne.n	8006406 <__kernel_rem_pio2+0x2ee>
 8006384:	4683      	mov	fp, r0
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7fa fb5b 	bl	8000a48 <__aeabi_dcmpeq>
 8006392:	2800      	cmp	r0, #0
 8006394:	f000 80c1 	beq.w	800651a <__kernel_rem_pio2+0x402>
 8006398:	1e65      	subs	r5, r4, #1
 800639a:	462b      	mov	r3, r5
 800639c:	2200      	movs	r2, #0
 800639e:	9900      	ldr	r1, [sp, #0]
 80063a0:	428b      	cmp	r3, r1
 80063a2:	da6d      	bge.n	8006480 <__kernel_rem_pio2+0x368>
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	f000 808a 	beq.w	80064be <__kernel_rem_pio2+0x3a6>
 80063aa:	ab0c      	add	r3, sp, #48	; 0x30
 80063ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80063b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80ae 	beq.w	8006516 <__kernel_rem_pio2+0x3fe>
 80063ba:	4650      	mov	r0, sl
 80063bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006430 <__kernel_rem_pio2+0x318>
 80063c0:	f000 f9fa 	bl	80067b8 <scalbn>
 80063c4:	1c6b      	adds	r3, r5, #1
 80063c6:	00da      	lsls	r2, r3, #3
 80063c8:	9205      	str	r2, [sp, #20]
 80063ca:	ec57 6b10 	vmov	r6, r7, d0
 80063ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80063d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006444 <__kernel_rem_pio2+0x32c>
 80063d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80063d8:	462c      	mov	r4, r5
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	2c00      	cmp	r4, #0
 80063e0:	f280 80d4 	bge.w	800658c <__kernel_rem_pio2+0x474>
 80063e4:	462c      	mov	r4, r5
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	f2c0 8102 	blt.w	80065f0 <__kernel_rem_pio2+0x4d8>
 80063ec:	4b18      	ldr	r3, [pc, #96]	; (8006450 <__kernel_rem_pio2+0x338>)
 80063ee:	461e      	mov	r6, r3
 80063f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80063f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80063f6:	1b2b      	subs	r3, r5, r4
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	f04f 0a00 	mov.w	sl, #0
 8006400:	2700      	movs	r7, #0
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	e0e6      	b.n	80065d4 <__kernel_rem_pio2+0x4bc>
 8006406:	f04f 0b02 	mov.w	fp, #2
 800640a:	e756      	b.n	80062ba <__kernel_rem_pio2+0x1a2>
 800640c:	f8d8 3000 	ldr.w	r3, [r8]
 8006410:	bb05      	cbnz	r5, 8006454 <__kernel_rem_pio2+0x33c>
 8006412:	b123      	cbz	r3, 800641e <__kernel_rem_pio2+0x306>
 8006414:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006418:	f8c8 3000 	str.w	r3, [r8]
 800641c:	2301      	movs	r3, #1
 800641e:	3201      	adds	r2, #1
 8006420:	f108 0804 	add.w	r8, r8, #4
 8006424:	461d      	mov	r5, r3
 8006426:	e74f      	b.n	80062c8 <__kernel_rem_pio2+0x1b0>
	...
 8006434:	3ff00000 	.word	0x3ff00000
 8006438:	08006bd8 	.word	0x08006bd8
 800643c:	40200000 	.word	0x40200000
 8006440:	3ff00000 	.word	0x3ff00000
 8006444:	3e700000 	.word	0x3e700000
 8006448:	41700000 	.word	0x41700000
 800644c:	3fe00000 	.word	0x3fe00000
 8006450:	08006b98 	.word	0x08006b98
 8006454:	1acb      	subs	r3, r1, r3
 8006456:	f8c8 3000 	str.w	r3, [r8]
 800645a:	462b      	mov	r3, r5
 800645c:	e7df      	b.n	800641e <__kernel_rem_pio2+0x306>
 800645e:	1e62      	subs	r2, r4, #1
 8006460:	ab0c      	add	r3, sp, #48	; 0x30
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800646a:	a90c      	add	r1, sp, #48	; 0x30
 800646c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006470:	e738      	b.n	80062e4 <__kernel_rem_pio2+0x1cc>
 8006472:	1e62      	subs	r2, r4, #1
 8006474:	ab0c      	add	r3, sp, #48	; 0x30
 8006476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800647e:	e7f4      	b.n	800646a <__kernel_rem_pio2+0x352>
 8006480:	a90c      	add	r1, sp, #48	; 0x30
 8006482:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006486:	3b01      	subs	r3, #1
 8006488:	430a      	orrs	r2, r1
 800648a:	e788      	b.n	800639e <__kernel_rem_pio2+0x286>
 800648c:	3301      	adds	r3, #1
 800648e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006492:	2900      	cmp	r1, #0
 8006494:	d0fa      	beq.n	800648c <__kernel_rem_pio2+0x374>
 8006496:	9a08      	ldr	r2, [sp, #32]
 8006498:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800649c:	446a      	add	r2, sp
 800649e:	3a98      	subs	r2, #152	; 0x98
 80064a0:	9208      	str	r2, [sp, #32]
 80064a2:	9a06      	ldr	r2, [sp, #24]
 80064a4:	a920      	add	r1, sp, #128	; 0x80
 80064a6:	18a2      	adds	r2, r4, r2
 80064a8:	18e3      	adds	r3, r4, r3
 80064aa:	f104 0801 	add.w	r8, r4, #1
 80064ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	4543      	cmp	r3, r8
 80064b8:	da04      	bge.n	80064c4 <__kernel_rem_pio2+0x3ac>
 80064ba:	461c      	mov	r4, r3
 80064bc:	e6a2      	b.n	8006204 <__kernel_rem_pio2+0xec>
 80064be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064c0:	2301      	movs	r3, #1
 80064c2:	e7e4      	b.n	800648e <__kernel_rem_pio2+0x376>
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80064ca:	f7f9 ffeb 	bl	80004a4 <__aeabi_i2d>
 80064ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80064d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d4:	46ab      	mov	fp, r5
 80064d6:	461c      	mov	r4, r3
 80064d8:	f04f 0900 	mov.w	r9, #0
 80064dc:	2600      	movs	r6, #0
 80064de:	2700      	movs	r7, #0
 80064e0:	9b05      	ldr	r3, [sp, #20]
 80064e2:	4599      	cmp	r9, r3
 80064e4:	dd06      	ble.n	80064f4 <__kernel_rem_pio2+0x3dc>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80064ec:	f108 0801 	add.w	r8, r8, #1
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	e7df      	b.n	80064b4 <__kernel_rem_pio2+0x39c>
 80064f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80064f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80064fc:	f7fa f83c 	bl	8000578 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f7f9 fe80 	bl	800020c <__adddf3>
 800650c:	f109 0901 	add.w	r9, r9, #1
 8006510:	4606      	mov	r6, r0
 8006512:	460f      	mov	r7, r1
 8006514:	e7e4      	b.n	80064e0 <__kernel_rem_pio2+0x3c8>
 8006516:	3d01      	subs	r5, #1
 8006518:	e747      	b.n	80063aa <__kernel_rem_pio2+0x292>
 800651a:	ec47 6b10 	vmov	d0, r6, r7
 800651e:	f1ca 0000 	rsb	r0, sl, #0
 8006522:	f000 f949 	bl	80067b8 <scalbn>
 8006526:	ec57 6b10 	vmov	r6, r7, d0
 800652a:	4ba0      	ldr	r3, [pc, #640]	; (80067ac <__kernel_rem_pio2+0x694>)
 800652c:	ee10 0a10 	vmov	r0, s0
 8006530:	2200      	movs	r2, #0
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa faa6 	bl	8000a84 <__aeabi_dcmpge>
 8006538:	b1f8      	cbz	r0, 800657a <__kernel_rem_pio2+0x462>
 800653a:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <__kernel_rem_pio2+0x698>)
 800653c:	2200      	movs	r2, #0
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa f819 	bl	8000578 <__aeabi_dmul>
 8006546:	f7fa fab1 	bl	8000aac <__aeabi_d2iz>
 800654a:	4680      	mov	r8, r0
 800654c:	f7f9 ffaa 	bl	80004a4 <__aeabi_i2d>
 8006550:	4b96      	ldr	r3, [pc, #600]	; (80067ac <__kernel_rem_pio2+0x694>)
 8006552:	2200      	movs	r2, #0
 8006554:	f7fa f810 	bl	8000578 <__aeabi_dmul>
 8006558:	460b      	mov	r3, r1
 800655a:	4602      	mov	r2, r0
 800655c:	4639      	mov	r1, r7
 800655e:	4630      	mov	r0, r6
 8006560:	f7f9 fe52 	bl	8000208 <__aeabi_dsub>
 8006564:	f7fa faa2 	bl	8000aac <__aeabi_d2iz>
 8006568:	1c65      	adds	r5, r4, #1
 800656a:	ab0c      	add	r3, sp, #48	; 0x30
 800656c:	f10a 0a18 	add.w	sl, sl, #24
 8006570:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006574:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006578:	e71f      	b.n	80063ba <__kernel_rem_pio2+0x2a2>
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7fa fa95 	bl	8000aac <__aeabi_d2iz>
 8006582:	ab0c      	add	r3, sp, #48	; 0x30
 8006584:	4625      	mov	r5, r4
 8006586:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800658a:	e716      	b.n	80063ba <__kernel_rem_pio2+0x2a2>
 800658c:	ab0c      	add	r3, sp, #48	; 0x30
 800658e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006592:	f7f9 ff87 	bl	80004a4 <__aeabi_i2d>
 8006596:	4632      	mov	r2, r6
 8006598:	463b      	mov	r3, r7
 800659a:	f7f9 ffed 	bl	8000578 <__aeabi_dmul>
 800659e:	4642      	mov	r2, r8
 80065a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80065a4:	464b      	mov	r3, r9
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7f9 ffe5 	bl	8000578 <__aeabi_dmul>
 80065ae:	3c01      	subs	r4, #1
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	e713      	b.n	80063de <__kernel_rem_pio2+0x2c6>
 80065b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80065ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80065be:	f7f9 ffdb 	bl	8000578 <__aeabi_dmul>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4648      	mov	r0, r9
 80065c8:	4651      	mov	r1, sl
 80065ca:	f7f9 fe1f 	bl	800020c <__adddf3>
 80065ce:	3701      	adds	r7, #1
 80065d0:	4681      	mov	r9, r0
 80065d2:	468a      	mov	sl, r1
 80065d4:	9b00      	ldr	r3, [sp, #0]
 80065d6:	429f      	cmp	r7, r3
 80065d8:	dc02      	bgt.n	80065e0 <__kernel_rem_pio2+0x4c8>
 80065da:	9b06      	ldr	r3, [sp, #24]
 80065dc:	429f      	cmp	r7, r3
 80065de:	ddea      	ble.n	80065b6 <__kernel_rem_pio2+0x49e>
 80065e0:	9a06      	ldr	r2, [sp, #24]
 80065e2:	ab48      	add	r3, sp, #288	; 0x120
 80065e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80065e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80065ec:	3c01      	subs	r4, #1
 80065ee:	e6fa      	b.n	80063e6 <__kernel_rem_pio2+0x2ce>
 80065f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	dc0b      	bgt.n	800660e <__kernel_rem_pio2+0x4f6>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dc39      	bgt.n	800666e <__kernel_rem_pio2+0x556>
 80065fa:	d05d      	beq.n	80066b8 <__kernel_rem_pio2+0x5a0>
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	f003 0007 	and.w	r0, r3, #7
 8006602:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006606:	ecbd 8b02 	vpop	{d8}
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006610:	2b03      	cmp	r3, #3
 8006612:	d1f3      	bne.n	80065fc <__kernel_rem_pio2+0x4e4>
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	9500      	str	r5, [sp, #0]
 8006618:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800661c:	eb0d 0403 	add.w	r4, sp, r3
 8006620:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006624:	46a2      	mov	sl, r4
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f1aa 0a08 	sub.w	sl, sl, #8
 800662e:	dc69      	bgt.n	8006704 <__kernel_rem_pio2+0x5ec>
 8006630:	46aa      	mov	sl, r5
 8006632:	f1ba 0f01 	cmp.w	sl, #1
 8006636:	f1a4 0408 	sub.w	r4, r4, #8
 800663a:	f300 8083 	bgt.w	8006744 <__kernel_rem_pio2+0x62c>
 800663e:	9c05      	ldr	r4, [sp, #20]
 8006640:	ab48      	add	r3, sp, #288	; 0x120
 8006642:	441c      	add	r4, r3
 8006644:	2000      	movs	r0, #0
 8006646:	2100      	movs	r1, #0
 8006648:	2d01      	cmp	r5, #1
 800664a:	f300 809a 	bgt.w	8006782 <__kernel_rem_pio2+0x66a>
 800664e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006652:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006656:	f1bb 0f00 	cmp.w	fp, #0
 800665a:	f040 8098 	bne.w	800678e <__kernel_rem_pio2+0x676>
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	e9c3 7800 	strd	r7, r8, [r3]
 8006664:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006668:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800666c:	e7c6      	b.n	80065fc <__kernel_rem_pio2+0x4e4>
 800666e:	9e05      	ldr	r6, [sp, #20]
 8006670:	ab48      	add	r3, sp, #288	; 0x120
 8006672:	441e      	add	r6, r3
 8006674:	462c      	mov	r4, r5
 8006676:	2000      	movs	r0, #0
 8006678:	2100      	movs	r1, #0
 800667a:	2c00      	cmp	r4, #0
 800667c:	da33      	bge.n	80066e6 <__kernel_rem_pio2+0x5ce>
 800667e:	f1bb 0f00 	cmp.w	fp, #0
 8006682:	d036      	beq.n	80066f2 <__kernel_rem_pio2+0x5da>
 8006684:	4602      	mov	r2, r0
 8006686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800668a:	9c04      	ldr	r4, [sp, #16]
 800668c:	e9c4 2300 	strd	r2, r3, [r4]
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006698:	f7f9 fdb6 	bl	8000208 <__aeabi_dsub>
 800669c:	ae4a      	add	r6, sp, #296	; 0x128
 800669e:	2401      	movs	r4, #1
 80066a0:	42a5      	cmp	r5, r4
 80066a2:	da29      	bge.n	80066f8 <__kernel_rem_pio2+0x5e0>
 80066a4:	f1bb 0f00 	cmp.w	fp, #0
 80066a8:	d002      	beq.n	80066b0 <__kernel_rem_pio2+0x598>
 80066aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066ae:	4619      	mov	r1, r3
 80066b0:	9b04      	ldr	r3, [sp, #16]
 80066b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80066b6:	e7a1      	b.n	80065fc <__kernel_rem_pio2+0x4e4>
 80066b8:	9c05      	ldr	r4, [sp, #20]
 80066ba:	ab48      	add	r3, sp, #288	; 0x120
 80066bc:	441c      	add	r4, r3
 80066be:	2000      	movs	r0, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	da09      	bge.n	80066da <__kernel_rem_pio2+0x5c2>
 80066c6:	f1bb 0f00 	cmp.w	fp, #0
 80066ca:	d002      	beq.n	80066d2 <__kernel_rem_pio2+0x5ba>
 80066cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d0:	4619      	mov	r1, r3
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	e9c3 0100 	strd	r0, r1, [r3]
 80066d8:	e790      	b.n	80065fc <__kernel_rem_pio2+0x4e4>
 80066da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066de:	f7f9 fd95 	bl	800020c <__adddf3>
 80066e2:	3d01      	subs	r5, #1
 80066e4:	e7ed      	b.n	80066c2 <__kernel_rem_pio2+0x5aa>
 80066e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80066ea:	f7f9 fd8f 	bl	800020c <__adddf3>
 80066ee:	3c01      	subs	r4, #1
 80066f0:	e7c3      	b.n	800667a <__kernel_rem_pio2+0x562>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	e7c8      	b.n	800668a <__kernel_rem_pio2+0x572>
 80066f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80066fc:	f7f9 fd86 	bl	800020c <__adddf3>
 8006700:	3401      	adds	r4, #1
 8006702:	e7cd      	b.n	80066a0 <__kernel_rem_pio2+0x588>
 8006704:	e9da 8900 	ldrd	r8, r9, [sl]
 8006708:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800670c:	9b00      	ldr	r3, [sp, #0]
 800670e:	3b01      	subs	r3, #1
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4632      	mov	r2, r6
 8006714:	463b      	mov	r3, r7
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f7f9 fd77 	bl	800020c <__adddf3>
 800671e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4640      	mov	r0, r8
 8006728:	4649      	mov	r1, r9
 800672a:	f7f9 fd6d 	bl	8000208 <__aeabi_dsub>
 800672e:	4632      	mov	r2, r6
 8006730:	463b      	mov	r3, r7
 8006732:	f7f9 fd6b 	bl	800020c <__adddf3>
 8006736:	ed9d 7b06 	vldr	d7, [sp, #24]
 800673a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800673e:	ed8a 7b00 	vstr	d7, [sl]
 8006742:	e770      	b.n	8006626 <__kernel_rem_pio2+0x50e>
 8006744:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006748:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800674c:	4640      	mov	r0, r8
 800674e:	4632      	mov	r2, r6
 8006750:	463b      	mov	r3, r7
 8006752:	4649      	mov	r1, r9
 8006754:	f7f9 fd5a 	bl	800020c <__adddf3>
 8006758:	e9cd 0100 	strd	r0, r1, [sp]
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7f9 fd50 	bl	8000208 <__aeabi_dsub>
 8006768:	4632      	mov	r2, r6
 800676a:	463b      	mov	r3, r7
 800676c:	f7f9 fd4e 	bl	800020c <__adddf3>
 8006770:	ed9d 7b00 	vldr	d7, [sp]
 8006774:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006778:	ed84 7b00 	vstr	d7, [r4]
 800677c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006780:	e757      	b.n	8006632 <__kernel_rem_pio2+0x51a>
 8006782:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006786:	f7f9 fd41 	bl	800020c <__adddf3>
 800678a:	3d01      	subs	r5, #1
 800678c:	e75c      	b.n	8006648 <__kernel_rem_pio2+0x530>
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	9a04      	ldr	r2, [sp, #16]
 8006792:	601f      	str	r7, [r3, #0]
 8006794:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006798:	605c      	str	r4, [r3, #4]
 800679a:	609d      	str	r5, [r3, #8]
 800679c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067a0:	60d3      	str	r3, [r2, #12]
 80067a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a6:	6110      	str	r0, [r2, #16]
 80067a8:	6153      	str	r3, [r2, #20]
 80067aa:	e727      	b.n	80065fc <__kernel_rem_pio2+0x4e4>
 80067ac:	41700000 	.word	0x41700000
 80067b0:	3e700000 	.word	0x3e700000
 80067b4:	00000000 	.word	0x00000000

080067b8 <scalbn>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	ec55 4b10 	vmov	r4, r5, d0
 80067be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80067c2:	4606      	mov	r6, r0
 80067c4:	462b      	mov	r3, r5
 80067c6:	b999      	cbnz	r1, 80067f0 <scalbn+0x38>
 80067c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067cc:	4323      	orrs	r3, r4
 80067ce:	d03f      	beq.n	8006850 <scalbn+0x98>
 80067d0:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <scalbn+0xf0>)
 80067d2:	4629      	mov	r1, r5
 80067d4:	ee10 0a10 	vmov	r0, s0
 80067d8:	2200      	movs	r2, #0
 80067da:	f7f9 fecd 	bl	8000578 <__aeabi_dmul>
 80067de:	4b33      	ldr	r3, [pc, #204]	; (80068ac <scalbn+0xf4>)
 80067e0:	429e      	cmp	r6, r3
 80067e2:	4604      	mov	r4, r0
 80067e4:	460d      	mov	r5, r1
 80067e6:	da10      	bge.n	800680a <scalbn+0x52>
 80067e8:	a327      	add	r3, pc, #156	; (adr r3, 8006888 <scalbn+0xd0>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	e01f      	b.n	8006830 <scalbn+0x78>
 80067f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80067f4:	4291      	cmp	r1, r2
 80067f6:	d10c      	bne.n	8006812 <scalbn+0x5a>
 80067f8:	ee10 2a10 	vmov	r2, s0
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7f9 fd04 	bl	800020c <__adddf3>
 8006804:	4604      	mov	r4, r0
 8006806:	460d      	mov	r5, r1
 8006808:	e022      	b.n	8006850 <scalbn+0x98>
 800680a:	460b      	mov	r3, r1
 800680c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006810:	3936      	subs	r1, #54	; 0x36
 8006812:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006816:	4296      	cmp	r6, r2
 8006818:	dd0d      	ble.n	8006836 <scalbn+0x7e>
 800681a:	2d00      	cmp	r5, #0
 800681c:	a11c      	add	r1, pc, #112	; (adr r1, 8006890 <scalbn+0xd8>)
 800681e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006822:	da02      	bge.n	800682a <scalbn+0x72>
 8006824:	a11c      	add	r1, pc, #112	; (adr r1, 8006898 <scalbn+0xe0>)
 8006826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682a:	a319      	add	r3, pc, #100	; (adr r3, 8006890 <scalbn+0xd8>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 fea2 	bl	8000578 <__aeabi_dmul>
 8006834:	e7e6      	b.n	8006804 <scalbn+0x4c>
 8006836:	1872      	adds	r2, r6, r1
 8006838:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800683c:	428a      	cmp	r2, r1
 800683e:	dcec      	bgt.n	800681a <scalbn+0x62>
 8006840:	2a00      	cmp	r2, #0
 8006842:	dd08      	ble.n	8006856 <scalbn+0x9e>
 8006844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800684c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006850:	ec45 4b10 	vmov	d0, r4, r5
 8006854:	bd70      	pop	{r4, r5, r6, pc}
 8006856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800685a:	da08      	bge.n	800686e <scalbn+0xb6>
 800685c:	2d00      	cmp	r5, #0
 800685e:	a10a      	add	r1, pc, #40	; (adr r1, 8006888 <scalbn+0xd0>)
 8006860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006864:	dac0      	bge.n	80067e8 <scalbn+0x30>
 8006866:	a10e      	add	r1, pc, #56	; (adr r1, 80068a0 <scalbn+0xe8>)
 8006868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800686c:	e7bc      	b.n	80067e8 <scalbn+0x30>
 800686e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006872:	3236      	adds	r2, #54	; 0x36
 8006874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006878:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800687c:	4620      	mov	r0, r4
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <scalbn+0xf8>)
 8006880:	2200      	movs	r2, #0
 8006882:	e7d5      	b.n	8006830 <scalbn+0x78>
 8006884:	f3af 8000 	nop.w
 8006888:	c2f8f359 	.word	0xc2f8f359
 800688c:	01a56e1f 	.word	0x01a56e1f
 8006890:	8800759c 	.word	0x8800759c
 8006894:	7e37e43c 	.word	0x7e37e43c
 8006898:	8800759c 	.word	0x8800759c
 800689c:	fe37e43c 	.word	0xfe37e43c
 80068a0:	c2f8f359 	.word	0xc2f8f359
 80068a4:	81a56e1f 	.word	0x81a56e1f
 80068a8:	43500000 	.word	0x43500000
 80068ac:	ffff3cb0 	.word	0xffff3cb0
 80068b0:	3c900000 	.word	0x3c900000
 80068b4:	00000000 	.word	0x00000000

080068b8 <floor>:
 80068b8:	ec51 0b10 	vmov	r0, r1, d0
 80068bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80068c8:	2e13      	cmp	r6, #19
 80068ca:	ee10 5a10 	vmov	r5, s0
 80068ce:	ee10 8a10 	vmov	r8, s0
 80068d2:	460c      	mov	r4, r1
 80068d4:	dc31      	bgt.n	800693a <floor+0x82>
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	da14      	bge.n	8006904 <floor+0x4c>
 80068da:	a333      	add	r3, pc, #204	; (adr r3, 80069a8 <floor+0xf0>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fc94 	bl	800020c <__adddf3>
 80068e4:	2200      	movs	r2, #0
 80068e6:	2300      	movs	r3, #0
 80068e8:	f7fa f8d6 	bl	8000a98 <__aeabi_dcmpgt>
 80068ec:	b138      	cbz	r0, 80068fe <floor+0x46>
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	da53      	bge.n	800699a <floor+0xe2>
 80068f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80068f6:	4325      	orrs	r5, r4
 80068f8:	d052      	beq.n	80069a0 <floor+0xe8>
 80068fa:	4c2d      	ldr	r4, [pc, #180]	; (80069b0 <floor+0xf8>)
 80068fc:	2500      	movs	r5, #0
 80068fe:	4621      	mov	r1, r4
 8006900:	4628      	mov	r0, r5
 8006902:	e024      	b.n	800694e <floor+0x96>
 8006904:	4f2b      	ldr	r7, [pc, #172]	; (80069b4 <floor+0xfc>)
 8006906:	4137      	asrs	r7, r6
 8006908:	ea01 0307 	and.w	r3, r1, r7
 800690c:	4303      	orrs	r3, r0
 800690e:	d01e      	beq.n	800694e <floor+0x96>
 8006910:	a325      	add	r3, pc, #148	; (adr r3, 80069a8 <floor+0xf0>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fc79 	bl	800020c <__adddf3>
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	f7fa f8bb 	bl	8000a98 <__aeabi_dcmpgt>
 8006922:	2800      	cmp	r0, #0
 8006924:	d0eb      	beq.n	80068fe <floor+0x46>
 8006926:	2c00      	cmp	r4, #0
 8006928:	bfbe      	ittt	lt
 800692a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800692e:	4133      	asrlt	r3, r6
 8006930:	18e4      	addlt	r4, r4, r3
 8006932:	ea24 0407 	bic.w	r4, r4, r7
 8006936:	2500      	movs	r5, #0
 8006938:	e7e1      	b.n	80068fe <floor+0x46>
 800693a:	2e33      	cmp	r6, #51	; 0x33
 800693c:	dd0b      	ble.n	8006956 <floor+0x9e>
 800693e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006942:	d104      	bne.n	800694e <floor+0x96>
 8006944:	ee10 2a10 	vmov	r2, s0
 8006948:	460b      	mov	r3, r1
 800694a:	f7f9 fc5f 	bl	800020c <__adddf3>
 800694e:	ec41 0b10 	vmov	d0, r0, r1
 8006952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006956:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800695a:	f04f 37ff 	mov.w	r7, #4294967295
 800695e:	40df      	lsrs	r7, r3
 8006960:	4238      	tst	r0, r7
 8006962:	d0f4      	beq.n	800694e <floor+0x96>
 8006964:	a310      	add	r3, pc, #64	; (adr r3, 80069a8 <floor+0xf0>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f7f9 fc4f 	bl	800020c <__adddf3>
 800696e:	2200      	movs	r2, #0
 8006970:	2300      	movs	r3, #0
 8006972:	f7fa f891 	bl	8000a98 <__aeabi_dcmpgt>
 8006976:	2800      	cmp	r0, #0
 8006978:	d0c1      	beq.n	80068fe <floor+0x46>
 800697a:	2c00      	cmp	r4, #0
 800697c:	da0a      	bge.n	8006994 <floor+0xdc>
 800697e:	2e14      	cmp	r6, #20
 8006980:	d101      	bne.n	8006986 <floor+0xce>
 8006982:	3401      	adds	r4, #1
 8006984:	e006      	b.n	8006994 <floor+0xdc>
 8006986:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800698a:	2301      	movs	r3, #1
 800698c:	40b3      	lsls	r3, r6
 800698e:	441d      	add	r5, r3
 8006990:	45a8      	cmp	r8, r5
 8006992:	d8f6      	bhi.n	8006982 <floor+0xca>
 8006994:	ea25 0507 	bic.w	r5, r5, r7
 8006998:	e7b1      	b.n	80068fe <floor+0x46>
 800699a:	2500      	movs	r5, #0
 800699c:	462c      	mov	r4, r5
 800699e:	e7ae      	b.n	80068fe <floor+0x46>
 80069a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80069a4:	e7ab      	b.n	80068fe <floor+0x46>
 80069a6:	bf00      	nop
 80069a8:	8800759c 	.word	0x8800759c
 80069ac:	7e37e43c 	.word	0x7e37e43c
 80069b0:	bff00000 	.word	0xbff00000
 80069b4:	000fffff 	.word	0x000fffff

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
